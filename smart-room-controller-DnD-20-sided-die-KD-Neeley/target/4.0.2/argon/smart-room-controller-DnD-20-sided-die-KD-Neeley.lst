
/Users/kdneeley/Documents/IoT/Smart-Room-Controller/smart-room-controller-DnD-20-sided-die-KD-Neeley/target/4.0.2/argon/smart-room-controller-DnD-20-sided-die-KD-Neeley.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000abb0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bebd0  000bebd0  0000ebd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bebf4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000498  2003e150  000bebf8  0001e150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000208  2003e5e8  2003e5e8  0002e5e8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bf090  000bf090  0001f090  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bf0b8  000bf0b8  0001f0b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012164c  00000000  00000000  0001f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013d78  00000000  00000000  00140708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003c9d0  00000000  00000000  00154480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003000  00000000  00000000  00190e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a8c0  00000000  00000000  00193e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b8d7  00000000  00000000  0019e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043e44  00000000  00000000  001d9fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00137b4b  00000000  00000000  0021de2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008bec  00000000  00000000  00355978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 ffb9 	bl	b8fa8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 ffc1 	bl	b8fc4 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e150 	.word	0x2003e150
   b404c:	000bebf8 	.word	0x000bebf8
   b4050:	2003e5e8 	.word	0x2003e5e8
   b4054:	2003e5e8 	.word	0x2003e5e8
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 f809 	bl	b7078 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000beba0 	.word	0x000beba0
   b4080:	000bebc8 	.word	0x000bebc8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b91e 	b.w	b42c4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f99b 	bl	b43c4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bfa9 	b.w	b6fe8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bf8f 	b.w	b5fb8 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bf8d 	b.w	b5fb8 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bf93 	b.w	b5fc8 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f001 fed8 	bl	b5e60 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b5ad1 	.word	0x000b5ad1
   b40b8:	000b9134 	.word	0x000b9134

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	b2c9      	uxtb	r1, r1
   b40d0:	689b      	ldr	r3, [r3, #8]
   b40d2:	4718      	bx	r3

000b40d4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d4:	b40e      	push	{r1, r2, r3}
   b40d6:	b503      	push	{r0, r1, lr}
   b40d8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40da:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40dc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40e0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40e2:	f002 fa10 	bl	b6506 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40e6:	b002      	add	sp, #8
   b40e8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40ec:	b003      	add	sp, #12
   b40ee:	4770      	bx	lr

000b40f0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b40f0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b40f2:	6984      	ldr	r4, [r0, #24]
   b40f4:	4b0a      	ldr	r3, [pc, #40]	; (b4120 <_ZN9TCPClientD1Ev+0x30>)
   b40f6:	6003      	str	r3, [r0, #0]
   b40f8:	4605      	mov	r5, r0
   b40fa:	b17c      	cbz	r4, b411c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b40fc:	6863      	ldr	r3, [r4, #4]
   b40fe:	3b01      	subs	r3, #1
   b4100:	6063      	str	r3, [r4, #4]
   b4102:	b95b      	cbnz	r3, b411c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4104:	6823      	ldr	r3, [r4, #0]
   b4106:	4620      	mov	r0, r4
   b4108:	689b      	ldr	r3, [r3, #8]
   b410a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b410c:	68a3      	ldr	r3, [r4, #8]
   b410e:	3b01      	subs	r3, #1
   b4110:	60a3      	str	r3, [r4, #8]
   b4112:	b91b      	cbnz	r3, b411c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4114:	6823      	ldr	r3, [r4, #0]
   b4116:	4620      	mov	r0, r4
   b4118:	68db      	ldr	r3, [r3, #12]
   b411a:	4798      	blx	r3
   b411c:	4628      	mov	r0, r5
   b411e:	bd38      	pop	{r3, r4, r5, pc}
   b4120:	000be924 	.word	0x000be924

000b4124 <_ZN9TCPClientD0Ev>:
   b4124:	b510      	push	{r4, lr}
   b4126:	4604      	mov	r4, r0
   b4128:	f7ff ffe2 	bl	b40f0 <_ZN9TCPClientD1Ev>
   b412c:	4620      	mov	r0, r4
   b412e:	211c      	movs	r1, #28
   b4130:	f7ff ffb5 	bl	b409e <_ZdlPvj>
   b4134:	4620      	mov	r0, r4
   b4136:	bd10      	pop	{r4, pc}

000b4138 <_Z5setFShh>:
  _scaleFactor = scaleFactor;
  return scaleFactor;
}

// Set Full Scale of MPU
float setFS(byte addr, byte fullscale) {
   b4138:	b538      	push	{r3, r4, r5, lr}
   b413a:	460c      	mov	r4, r1
   b413c:	4605      	mov	r5, r0
  float scaling;

  Wire.begin();  
   b413e:	f003 f873 	bl	b7228 <_Z19__fetch_global_Wirev>
   b4142:	f002 f805 	bl	b6150 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(addr); 
   b4146:	f003 f86f 	bl	b7228 <_Z19__fetch_global_Wirev>
   b414a:	4629      	mov	r1, r5
   b414c:	f002 f82f 	bl	b61ae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x1C);
   b4150:	f003 f86a 	bl	b7228 <_Z19__fetch_global_Wirev>
   b4154:	211c      	movs	r1, #28
   b4156:	f7ff ffb9 	bl	b40cc <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(fullscale << 3); 
   b415a:	f003 f865 	bl	b7228 <_Z19__fetch_global_Wirev>
   b415e:	00e1      	lsls	r1, r4, #3
   b4160:	f7ff ffb4 	bl	b40cc <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(true);
   b4164:	f003 f860 	bl	b7228 <_Z19__fetch_global_Wirev>
   b4168:	2101      	movs	r1, #1
   b416a:	f002 f827 	bl	b61bc <_ZN7TwoWire15endTransmissionEh>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b416e:	4620      	mov	r0, r4
   b4170:	f004 fb9a 	bl	b88a8 <__aeabi_ui2d>
   b4174:	ed9f 0b12 	vldr	d0, [pc, #72]	; b41c0 <_Z5setFShh+0x88>
   b4178:	ec41 0b11 	vmov	d1, r0, r1
   b417c:	f003 f9cc 	bl	b7518 <pow>

  scaling = 1 / (16384.0 / pow(2,fullscale));
   b4180:	4911      	ldr	r1, [pc, #68]	; (b41c8 <_Z5setFShh+0x90>)
   b4182:	ec53 2b10 	vmov	r2, r3, d0
   b4186:	2000      	movs	r0, #0
   b4188:	f004 fd32 	bl	b8bf0 <__aeabi_ddiv>
   b418c:	4602      	mov	r2, r0
   b418e:	460b      	mov	r3, r1
   b4190:	2000      	movs	r0, #0
   b4192:	490e      	ldr	r1, [pc, #56]	; (b41cc <_Z5setFShh+0x94>)
   b4194:	f004 fd2c 	bl	b8bf0 <__aeabi_ddiv>
   b4198:	f004 feb0 	bl	b8efc <__aeabi_d2f>
   b419c:	4604      	mov	r4, r0
  Serial.printf("Scaling Factor is: %0.8f\n",scaling);
   b419e:	f002 fe9d 	bl	b6edc <_Z16_fetch_usbserialv>
   b41a2:	4605      	mov	r5, r0
   b41a4:	4620      	mov	r0, r4
   b41a6:	f004 fba1 	bl	b88ec <__aeabi_f2d>
   b41aa:	4602      	mov	r2, r0
   b41ac:	460b      	mov	r3, r1
   b41ae:	4628      	mov	r0, r5
   b41b0:	4907      	ldr	r1, [pc, #28]	; (b41d0 <_Z5setFShh+0x98>)
   b41b2:	f7ff ff8f 	bl	b40d4 <_ZN5Print6printfEPKcz>
  return scaling;
}
   b41b6:	ee00 4a10 	vmov	s0, r4
   b41ba:	bd38      	pop	{r3, r4, r5, pc}
   b41bc:	f3af 8000 	nop.w
   b41c0:	00000000 	.word	0x00000000
   b41c4:	40000000 	.word	0x40000000
   b41c8:	40d00000 	.word	0x40d00000
   b41cc:	3ff00000 	.word	0x3ff00000
   b41d0:	000b9221 	.word	0x000b9221

000b41d4 <_Z8mpuBeginhh>:
float mpuBegin(byte addr, byte fullscale) {
   b41d4:	b538      	push	{r3, r4, r5, lr}
   b41d6:	460d      	mov	r5, r1
   b41d8:	4604      	mov	r4, r0
  Wire.begin();  
   b41da:	f003 f825 	bl	b7228 <_Z19__fetch_global_Wirev>
   b41de:	f001 ffb7 	bl	b6150 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(addr); 
   b41e2:	f003 f821 	bl	b7228 <_Z19__fetch_global_Wirev>
   b41e6:	4621      	mov	r1, r4
   b41e8:	f001 ffe1 	bl	b61ae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x6B);
   b41ec:	f003 f81c 	bl	b7228 <_Z19__fetch_global_Wirev>
   b41f0:	216b      	movs	r1, #107	; 0x6b
   b41f2:	f7ff ff6b 	bl	b40cc <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(0x00); // set to 0 (wakes up MPU-6050)
   b41f6:	f003 f817 	bl	b7228 <_Z19__fetch_global_Wirev>
   b41fa:	2100      	movs	r1, #0
   b41fc:	f7ff ff66 	bl	b40cc <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(true);
   b4200:	f003 f812 	bl	b7228 <_Z19__fetch_global_Wirev>
   b4204:	2101      	movs	r1, #1
   b4206:	f001 ffd9 	bl	b61bc <_ZN7TwoWire15endTransmissionEh>
  scaleFactor = setFS(addr, fullscale);
   b420a:	4629      	mov	r1, r5
   b420c:	4620      	mov	r0, r4
   b420e:	f7ff ff93 	bl	b4138 <_Z5setFShh>
  _scaleFactor = scaleFactor;
   b4212:	4b02      	ldr	r3, [pc, #8]	; (b421c <_Z8mpuBeginhh+0x48>)
   b4214:	ed83 0a00 	vstr	s0, [r3]
}
   b4218:	bd38      	pop	{r3, r4, r5, pc}
   b421a:	bf00      	nop
   b421c:	2003e64c 	.word	0x2003e64c

000b4220 <_Z5get16hh>:


// Return signed 16 bit number from big endian registers
float get16(byte addr, byte reg) {
   b4220:	b538      	push	{r3, r4, r5, lr}
   b4222:	4604      	mov	r4, r0
   b4224:	460d      	mov	r5, r1
  byte msb, lsb;
  int16_t value16;

  Wire.beginTransmission(addr);
   b4226:	f002 ffff 	bl	b7228 <_Z19__fetch_global_Wirev>
   b422a:	4621      	mov	r1, r4
   b422c:	f001 ffbf 	bl	b61ae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg); 
   b4230:	f002 fffa 	bl	b7228 <_Z19__fetch_global_Wirev>
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	4629      	mov	r1, r5
   b4238:	689b      	ldr	r3, [r3, #8]
   b423a:	4798      	blx	r3
  Wire.endTransmission(false); // keep active.
   b423c:	f002 fff4 	bl	b7228 <_Z19__fetch_global_Wirev>
   b4240:	2100      	movs	r1, #0
   b4242:	f001 ffbb 	bl	b61bc <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(addr, 2, true);
   b4246:	f002 ffef 	bl	b7228 <_Z19__fetch_global_Wirev>
   b424a:	4621      	mov	r1, r4
   b424c:	2202      	movs	r2, #2
   b424e:	2301      	movs	r3, #1
   b4250:	f001 ff9b 	bl	b618a <_ZN7TwoWire11requestFromEhjh>
  msb = Wire.read(); 
   b4254:	f002 ffe8 	bl	b7228 <_Z19__fetch_global_Wirev>
   b4258:	6803      	ldr	r3, [r0, #0]
   b425a:	695b      	ldr	r3, [r3, #20]
   b425c:	4798      	blx	r3
   b425e:	4604      	mov	r4, r0
  lsb = Wire.read(); 
   b4260:	f002 ffe2 	bl	b7228 <_Z19__fetch_global_Wirev>
   b4264:	6803      	ldr	r3, [r0, #0]
   b4266:	695b      	ldr	r3, [r3, #20]
   b4268:	4798      	blx	r3

  value16 = msb << 8 | lsb;
   b426a:	b2c3      	uxtb	r3, r0
   b426c:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
  //Serial.printf("MSB = %02X, LSB = %02X, Value = %04X (%i)\n",msb, lsb, value16, value16);

  return value16;
   b4270:	b203      	sxth	r3, r0
   b4272:	ee00 3a10 	vmov	s0, r3

}
   b4276:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b427a:	bd38      	pop	{r3, r4, r5, pc}

000b427c <_Z11getAccArrayhPf>:


void getAccArray(byte addr, float *accelArray) {
   b427c:	b570      	push	{r4, r5, r6, lr}
   b427e:	460c      	mov	r4, r1
    accelArray[0] = get16(addr,AX_ADDR)*_scaleFactor;
   b4280:	4e0f      	ldr	r6, [pc, #60]	; (b42c0 <_Z11getAccArrayhPf+0x44>)
   b4282:	213b      	movs	r1, #59	; 0x3b
void getAccArray(byte addr, float *accelArray) {
   b4284:	4605      	mov	r5, r0
    accelArray[0] = get16(addr,AX_ADDR)*_scaleFactor;
   b4286:	f7ff ffcb 	bl	b4220 <_Z5get16hh>
   b428a:	edd6 7a00 	vldr	s15, [r6]
   b428e:	ee27 0a80 	vmul.f32	s0, s15, s0
    accelArray[1] = get16(addr,AY_ADDR)*_scaleFactor;
   b4292:	213d      	movs	r1, #61	; 0x3d
   b4294:	4628      	mov	r0, r5
    accelArray[0] = get16(addr,AX_ADDR)*_scaleFactor;
   b4296:	ed84 0a00 	vstr	s0, [r4]
    accelArray[1] = get16(addr,AY_ADDR)*_scaleFactor;
   b429a:	f7ff ffc1 	bl	b4220 <_Z5get16hh>
   b429e:	edd6 7a00 	vldr	s15, [r6]
   b42a2:	ee27 0a80 	vmul.f32	s0, s15, s0
    accelArray[2] = get16(addr,AZ_ADDR)*_scaleFactor;
   b42a6:	213f      	movs	r1, #63	; 0x3f
    accelArray[1] = get16(addr,AY_ADDR)*_scaleFactor;
   b42a8:	ed84 0a01 	vstr	s0, [r4, #4]
    accelArray[2] = get16(addr,AZ_ADDR)*_scaleFactor;
   b42ac:	4628      	mov	r0, r5
   b42ae:	f7ff ffb7 	bl	b4220 <_Z5get16hh>
   b42b2:	edd6 7a00 	vldr	s15, [r6]
   b42b6:	ee27 0a80 	vmul.f32	s0, s15, s0
   b42ba:	ed84 0a02 	vstr	s0, [r4, #8]
}
   b42be:	bd70      	pop	{r4, r5, r6, pc}
   b42c0:	2003e64c 	.word	0x2003e64c

000b42c4 <setup>:

// SYSTEM_MODE(MANUAL);
SYSTEM_MODE(SEMI_AUTOMATIC);


void setup() {
   b42c4:	b530      	push	{r4, r5, lr}
   b42c6:	b095      	sub	sp, #84	; 0x54
    Serial.begin(9600);
   b42c8:	f002 fe08 	bl	b6edc <_Z16_fetch_usbserialv>
   b42cc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b42d0:	f002 fdf4 	bl	b6ebc <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b42d4:	2000      	movs	r0, #0
   b42d6:	f001 fc13 	bl	b5b00 <hal_timer_millis>
        while (_while() && !_condition()) {
   b42da:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b42de:	4604      	mov	r4, r0
   b42e0:	2000      	movs	r0, #0
   b42e2:	f001 fc0d 	bl	b5b00 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b42e6:	1b00      	subs	r0, r0, r4
   b42e8:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b42ec:	42a8      	cmp	r0, r5
   b42ee:	f171 0300 	sbcs.w	r3, r1, #0
   b42f2:	d207      	bcs.n	b4304 <setup+0x40>
    waitFor(Serial.isConnected, 10000);
   b42f4:	f002 fdf2 	bl	b6edc <_Z16_fetch_usbserialv>
   b42f8:	f002 fde4 	bl	b6ec4 <_ZN9USBSerial11isConnectedEv>
   b42fc:	b910      	cbnz	r0, b4304 <setup+0x40>
            spark_process();
   b42fe:	f001 fde3 	bl	b5ec8 <spark_process>
        while (_while() && !_condition()) {
   b4302:	e7ed      	b.n	b42e0 <setup+0x1c>
   b4304:	f002 fdea 	bl	b6edc <_Z16_fetch_usbserialv>
   b4308:	f002 fddc 	bl	b6ec4 <_ZN9USBSerial11isConnectedEv>

//MPU6050 ACCELEROMETER
	scalingFactor = mpuBegin(MPUADDRESS, FS);
   b430c:	2100      	movs	r1, #0
   b430e:	2068      	movs	r0, #104	; 0x68
   b4310:	f7ff ff60 	bl	b41d4 <_Z8mpuBeginhh>
   b4314:	4b24      	ldr	r3, [pc, #144]	; (b43a8 <setup+0xe4>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4316:	4c25      	ldr	r4, [pc, #148]	; (b43ac <setup+0xe8>)
   b4318:	ed83 0a00 	vstr	s0, [r3]
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b431c:	2300      	movs	r3, #0
   b431e:	461a      	mov	r2, r3
   b4320:	4619      	mov	r1, r3
   b4322:	6860      	ldr	r0, [r4, #4]
    WiFi.setCredentials("IoTNetwork");
    // WiFi.setCredentials("DRWIFI");

    WiFi.connect();
    while(WiFi.connecting()){
    Serial.printf(".");
   b4324:	4d22      	ldr	r5, [pc, #136]	; (b43b0 <setup+0xec>)
   b4326:	f001 fdff 	bl	b5f28 <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b432a:	2238      	movs	r2, #56	; 0x38
   b432c:	2100      	movs	r1, #0
   b432e:	a806      	add	r0, sp, #24
   b4330:	f004 fe48 	bl	b8fc4 <memset>
        creds.size = sizeof(creds);
   b4334:	234c      	movs	r3, #76	; 0x4c
   b4336:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
   b4338:	4b1e      	ldr	r3, [pc, #120]	; (b43b4 <setup+0xf0>)
   b433a:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b433c:	220a      	movs	r2, #10
   b433e:	2300      	movs	r3, #0
   b4340:	e9cd 2303 	strd	r2, r3, [sp, #12]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4344:	4619      	mov	r1, r3
   b4346:	aa01      	add	r2, sp, #4
   b4348:	6860      	ldr	r0, [r4, #4]
        creds.password_len = passwordLen;
   b434a:	9305      	str	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b434c:	f001 fe0c 	bl	b5f68 <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b4350:	2300      	movs	r3, #0
   b4352:	6860      	ldr	r0, [r4, #4]
   b4354:	461a      	mov	r2, r3
   b4356:	4619      	mov	r1, r3
   b4358:	f001 fdc6 	bl	b5ee8 <network_connect>
        return network_connecting(*this, 0, NULL);
   b435c:	2200      	movs	r2, #0
   b435e:	6860      	ldr	r0, [r4, #4]
   b4360:	4611      	mov	r1, r2
   b4362:	f001 fdc9 	bl	b5ef8 <network_connecting>
    while(WiFi.connecting()){
   b4366:	b128      	cbz	r0, b4374 <setup+0xb0>
    Serial.printf(".");
   b4368:	f002 fdb8 	bl	b6edc <_Z16_fetch_usbserialv>
   b436c:	4629      	mov	r1, r5
   b436e:	f7ff feb1 	bl	b40d4 <_ZN5Print6printfEPKcz>
    while(WiFi.connecting()){
   b4372:	e7f3      	b.n	b435c <setup+0x98>
    }
    delay(1000);
   b4374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4378:	f001 fe56 	bl	b6028 <delay>
    Serial.printf("\n\n");
   b437c:	f002 fdae 	bl	b6edc <_Z16_fetch_usbserialv>
   b4380:	490d      	ldr	r1, [pc, #52]	; (b43b8 <setup+0xf4>)
   b4382:	f7ff fea7 	bl	b40d4 <_ZN5Print6printfEPKcz>

//NEOPIXEL
    pixel.begin();
   b4386:	480d      	ldr	r0, [pc, #52]	; (b43bc <setup+0xf8>)
   b4388:	f000 fbfb 	bl	b4b82 <_ZN17Adafruit_NeoPixel5beginEv>
    pixel.show();
   b438c:	480b      	ldr	r0, [pc, #44]	; (b43bc <setup+0xf8>)
   b438e:	f000 fc31 	bl	b4bf4 <_ZN17Adafruit_NeoPixel4showEv>

//OLED
    myDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4392:	480b      	ldr	r0, [pc, #44]	; (b43c0 <setup+0xfc>)
   b4394:	223c      	movs	r2, #60	; 0x3c
   b4396:	2102      	movs	r1, #2
   b4398:	f001 fab2 	bl	b5900 <_ZN16Adafruit_SSD13065beginEhh>
	myDisplay.clearDisplay();
   b439c:	4808      	ldr	r0, [pc, #32]	; (b43c0 <setup+0xfc>)
}
   b439e:	b015      	add	sp, #84	; 0x54
   b43a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	myDisplay.clearDisplay();
   b43a4:	f001 b9c4 	b.w	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b43a8:	2003e6b0 	.word	0x2003e6b0
   b43ac:	2003e718 	.word	0x2003e718
   b43b0:	000b9246 	.word	0x000b9246
   b43b4:	000b923b 	.word	0x000b923b
   b43b8:	000b9248 	.word	0x000b9248
   b43bc:	2003e698 	.word	0x2003e698
   b43c0:	2003e670 	.word	0x2003e670

000b43c4 <loop>:



//////////BEGIN/////////

void loop() {
   b43c4:	b5f0      	push	{r4, r5, r6, r7, lr}

//MPU6050 ACCELEROMETER
	now = millis();
	if (now - before > 2500) {
   b43c6:	4fc8      	ldr	r7, [pc, #800]	; (b46e8 <loop+0x324>)
	now = millis();
   b43c8:	4ec8      	ldr	r6, [pc, #800]	; (b46ec <loop+0x328>)
void loop() {
   b43ca:	b087      	sub	sp, #28

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b43cc:	f001 fb90 	bl	b5af0 <HAL_Timer_Get_Milli_Seconds>
	if (now - before > 2500) {
   b43d0:	683b      	ldr	r3, [r7, #0]
	now = millis();
   b43d2:	6030      	str	r0, [r6, #0]
	if (now - before > 2500) {
   b43d4:	1ac0      	subs	r0, r0, r3
   b43d6:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b43da:	4298      	cmp	r0, r3
   b43dc:	d94e      	bls.n	b447c <loop+0xb8>
		getAccArray(MPUADDRESS, acceleration);
   b43de:	4cc4      	ldr	r4, [pc, #784]	; (b46f0 <loop+0x32c>)
   b43e0:	2068      	movs	r0, #104	; 0x68
   b43e2:	4621      	mov	r1, r4
   b43e4:	f7ff ff4a 	bl	b427c <_Z11getAccArrayhPf>
		Serial.printf("Acceleration Data (in G's): x=%0.3f, y=%0.3f, z=%0.3f\n", acceleration[0], acceleration[1], acceleration[2]);
   b43e8:	f002 fd78 	bl	b6edc <_Z16_fetch_usbserialv>
   b43ec:	4605      	mov	r5, r0
   b43ee:	6820      	ldr	r0, [r4, #0]
   b43f0:	f004 fa7c 	bl	b88ec <__aeabi_f2d>
   b43f4:	4602      	mov	r2, r0
   b43f6:	460b      	mov	r3, r1
   b43f8:	68a0      	ldr	r0, [r4, #8]
   b43fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b43fe:	f004 fa75 	bl	b88ec <__aeabi_f2d>
   b4402:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4406:	6860      	ldr	r0, [r4, #4]
   b4408:	f004 fa70 	bl	b88ec <__aeabi_f2d>
   b440c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4410:	e9cd 0100 	strd	r0, r1, [sp]
   b4414:	49b7      	ldr	r1, [pc, #732]	; (b46f4 <loop+0x330>)
   b4416:	4628      	mov	r0, r5
   b4418:	f7ff fe5c 	bl	b40d4 <_ZN5Print6printfEPKcz>
		myDisplay.setRotation(2); 
   b441c:	48b6      	ldr	r0, [pc, #728]	; (b46f8 <loop+0x334>)
   b441e:	2102      	movs	r1, #2
   b4420:	f000 ff99 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
		myDisplay.setCursor(8,1);
   b4424:	2201      	movs	r2, #1
   b4426:	48b4      	ldr	r0, [pc, #720]	; (b46f8 <loop+0x334>)
   b4428:	2108      	movs	r1, #8
   b442a:	f000 ff87 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
		myDisplay.setTextSize(1);
   b442e:	48b2      	ldr	r0, [pc, #712]	; (b46f8 <loop+0x334>)
   b4430:	2101      	movs	r1, #1
   b4432:	f000 ff86 	bl	b5342 <_ZN12Adafruit_GFX11setTextSizeEh>
		myDisplay.setTextColor(WHITE);
   b4436:	48b0      	ldr	r0, [pc, #704]	; (b46f8 <loop+0x334>)
   b4438:	2101      	movs	r1, #1
   b443a:	f000 ff87 	bl	b534c <_ZN12Adafruit_GFX12setTextColorEt>
		myDisplay.printf("X= %0.3f\n Y= %0.3f\n Z= %0.3f\n", acceleration[0], acceleration[1], acceleration[2]);
   b443e:	6820      	ldr	r0, [r4, #0]
   b4440:	f004 fa54 	bl	b88ec <__aeabi_f2d>
   b4444:	4602      	mov	r2, r0
   b4446:	460b      	mov	r3, r1
   b4448:	68a0      	ldr	r0, [r4, #8]
   b444a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b444e:	f004 fa4d 	bl	b88ec <__aeabi_f2d>
   b4452:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4456:	6860      	ldr	r0, [r4, #4]
   b4458:	f004 fa48 	bl	b88ec <__aeabi_f2d>
   b445c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4460:	e9cd 0100 	strd	r0, r1, [sp]
   b4464:	49a5      	ldr	r1, [pc, #660]	; (b46fc <loop+0x338>)
   b4466:	48a4      	ldr	r0, [pc, #656]	; (b46f8 <loop+0x334>)
   b4468:	f7ff fe34 	bl	b40d4 <_ZN5Print6printfEPKcz>
		myDisplay.display();
   b446c:	48a2      	ldr	r0, [pc, #648]	; (b46f8 <loop+0x334>)
   b446e:	f001 f9d7 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
		// delay(16000);
		myDisplay.clearDisplay();
   b4472:	48a1      	ldr	r0, [pc, #644]	; (b46f8 <loop+0x334>)
   b4474:	f001 f95c 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
		now = before;
   b4478:	683b      	ldr	r3, [r7, #0]
   b447a:	6033      	str	r3, [r6, #0]





    if(roll==1) {
   b447c:	4ca0      	ldr	r4, [pc, #640]	; (b4700 <loop+0x33c>)
   b447e:	6825      	ldr	r5, [r4, #0]
   b4480:	2d01      	cmp	r5, #1
   b4482:	f040 82d1 	bne.w	b4a28 <loop+0x664>

// 1 Red Flickering Lights, DOOM!
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4486:	489c      	ldr	r0, [pc, #624]	; (b46f8 <loop+0x334>)
   b4488:	2102      	movs	r1, #2
   b448a:	f000 ff64 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b448e:	2200      	movs	r2, #0
   b4490:	4611      	mov	r1, r2
   b4492:	4899      	ldr	r0, [pc, #612]	; (b46f8 <loop+0x334>)
   b4494:	f000 ff52 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, rip, 128, 64, WHITE);
   b4498:	2200      	movs	r2, #0
   b449a:	2380      	movs	r3, #128	; 0x80
   b449c:	2040      	movs	r0, #64	; 0x40
   b449e:	4611      	mov	r1, r2
   b44a0:	e9cd 3000 	strd	r3, r0, [sp]
   b44a4:	9502      	str	r5, [sp, #8]
   b44a6:	4b97      	ldr	r3, [pc, #604]	; (b4704 <loop+0x340>)
   b44a8:	4893      	ldr	r0, [pc, #588]	; (b46f8 <loop+0x334>)
   b44aa:	f000 fe43 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b44ae:	4892      	ldr	r0, [pc, #584]	; (b46f8 <loop+0x334>)
   b44b0:	f001 f9b6 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b44b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b44b8:	f001 fdb6 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b44bc:	488e      	ldr	r0, [pc, #568]	; (b46f8 <loop+0x334>)
   b44be:	f001 f937 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
        // setHue(5, hueOnOff, HueRed, 255, 255);
        // setHue(6, hueOnOff, HueRed, 255, 255);
        // delay(10000);


        roll=2;
   b44c2:	2302      	movs	r3, #2
   b44c4:	6023      	str	r3, [r4, #0]


    if(roll==2) {
//2 Red & Orange Flame Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b44c6:	488c      	ldr	r0, [pc, #560]	; (b46f8 <loop+0x334>)
   b44c8:	2102      	movs	r1, #2
   b44ca:	f000 ff44 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b44ce:	2200      	movs	r2, #0
   b44d0:	4611      	mov	r1, r2
   b44d2:	4889      	ldr	r0, [pc, #548]	; (b46f8 <loop+0x334>)
   b44d4:	f000 ff32 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, uhOh, 128, 64, WHITE);
   b44d8:	2340      	movs	r3, #64	; 0x40
   b44da:	2101      	movs	r1, #1
   b44dc:	2200      	movs	r2, #0
   b44de:	e9cd 3101 	strd	r3, r1, [sp, #4]
   b44e2:	2380      	movs	r3, #128	; 0x80
   b44e4:	4611      	mov	r1, r2
   b44e6:	4884      	ldr	r0, [pc, #528]	; (b46f8 <loop+0x334>)
   b44e8:	9300      	str	r3, [sp, #0]
   b44ea:	4b87      	ldr	r3, [pc, #540]	; (b4708 <loop+0x344>)
   b44ec:	f000 fe22 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b44f0:	4881      	ldr	r0, [pc, #516]	; (b46f8 <loop+0x334>)
   b44f2:	f001 f995 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b44f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b44fa:	f001 fd95 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b44fe:	487e      	ldr	r0, [pc, #504]	; (b46f8 <loop+0x334>)
   b4500:	f001 f916 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//2 Red & Orange Flame Lights

//HUE SETTINGS
// 2 Red & Orange Flame Lights
        roll=3;
   b4504:	2303      	movs	r3, #3
   b4506:	6023      	str	r3, [r4, #0]


    if(roll==3) {
//3 Yellow Flame Light
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4508:	487b      	ldr	r0, [pc, #492]	; (b46f8 <loop+0x334>)
   b450a:	2102      	movs	r1, #2
   b450c:	f000 ff23 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4510:	2200      	movs	r2, #0
   b4512:	4611      	mov	r1, r2
   b4514:	4878      	ldr	r0, [pc, #480]	; (b46f8 <loop+0x334>)
   b4516:	f000 ff11 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, messenger, 128, 64, WHITE);
   b451a:	2340      	movs	r3, #64	; 0x40
   b451c:	2201      	movs	r2, #1
   b451e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4522:	2200      	movs	r2, #0
   b4524:	2380      	movs	r3, #128	; 0x80
   b4526:	4611      	mov	r1, r2
   b4528:	4873      	ldr	r0, [pc, #460]	; (b46f8 <loop+0x334>)
   b452a:	9300      	str	r3, [sp, #0]
   b452c:	4b77      	ldr	r3, [pc, #476]	; (b470c <loop+0x348>)
   b452e:	f000 fe01 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4532:	4871      	ldr	r0, [pc, #452]	; (b46f8 <loop+0x334>)
   b4534:	f001 f974 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4538:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b453c:	f001 fd74 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b4540:	486d      	ldr	r0, [pc, #436]	; (b46f8 <loop+0x334>)
   b4542:	f001 f8f5 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//3 Yellow Flame Light

//HUE SETTINGS
// 3 Yellow Flame Light
        roll=4;
   b4546:	2304      	movs	r3, #4
   b4548:	6023      	str	r3, [r4, #0]


    if(roll==4) {
// 4 Red & Magenta Flickering Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b454a:	486b      	ldr	r0, [pc, #428]	; (b46f8 <loop+0x334>)
   b454c:	2102      	movs	r1, #2
   b454e:	f000 ff02 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4552:	2200      	movs	r2, #0
   b4554:	4611      	mov	r1, r2
   b4556:	4868      	ldr	r0, [pc, #416]	; (b46f8 <loop+0x334>)
   b4558:	f000 fef0 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, niceKnowingYou, 128, 64, WHITE);
   b455c:	f04f 0e01 	mov.w	lr, #1
   b4560:	2340      	movs	r3, #64	; 0x40
   b4562:	e9cd 3e01 	strd	r3, lr, [sp, #4]
   b4566:	2200      	movs	r2, #0
   b4568:	2380      	movs	r3, #128	; 0x80
   b456a:	4611      	mov	r1, r2
   b456c:	4862      	ldr	r0, [pc, #392]	; (b46f8 <loop+0x334>)
   b456e:	9300      	str	r3, [sp, #0]
   b4570:	4b67      	ldr	r3, [pc, #412]	; (b4710 <loop+0x34c>)
   b4572:	f000 fddf 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4576:	4860      	ldr	r0, [pc, #384]	; (b46f8 <loop+0x334>)
   b4578:	f001 f952 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b457c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4580:	f001 fd52 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b4584:	485c      	ldr	r0, [pc, #368]	; (b46f8 <loop+0x334>)
   b4586:	f001 f8d3 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//4 Red & Magenta Flickering Lights

//HUE SETTINGS
// 4 Red & Magenta Flickering Lights
        roll=5;
   b458a:	2305      	movs	r3, #5
   b458c:	6023      	str	r3, [r4, #0]


    if(roll==5) {
//5 Yellow & Red Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b458e:	485a      	ldr	r0, [pc, #360]	; (b46f8 <loop+0x334>)
   b4590:	2102      	movs	r1, #2
   b4592:	f000 fee0 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4596:	2200      	movs	r2, #0
   b4598:	4611      	mov	r1, r2
   b459a:	4857      	ldr	r0, [pc, #348]	; (b46f8 <loop+0x334>)
   b459c:	f000 fece 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, maybeNextTime, 128, 64, WHITE);
   b45a0:	f04f 0c01 	mov.w	ip, #1
   b45a4:	2340      	movs	r3, #64	; 0x40
   b45a6:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b45aa:	2200      	movs	r2, #0
   b45ac:	2380      	movs	r3, #128	; 0x80
   b45ae:	4611      	mov	r1, r2
   b45b0:	4851      	ldr	r0, [pc, #324]	; (b46f8 <loop+0x334>)
   b45b2:	9300      	str	r3, [sp, #0]
   b45b4:	4b57      	ldr	r3, [pc, #348]	; (b4714 <loop+0x350>)
   b45b6:	f000 fdbd 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b45ba:	484f      	ldr	r0, [pc, #316]	; (b46f8 <loop+0x334>)
   b45bc:	f001 f930 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b45c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b45c4:	f001 fd30 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b45c8:	484b      	ldr	r0, [pc, #300]	; (b46f8 <loop+0x334>)
   b45ca:	f001 f8b1 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//5 Yellow & Red Lights

//HUE SETTINGS
// 5 Yellow & Red Lights
        roll=6;
   b45ce:	2306      	movs	r3, #6
   b45d0:	6023      	str	r3, [r4, #0]


    if(roll==6) {
//6 Red & Cyan Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b45d2:	4849      	ldr	r0, [pc, #292]	; (b46f8 <loop+0x334>)
   b45d4:	2102      	movs	r1, #2
   b45d6:	f000 febe 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b45da:	2200      	movs	r2, #0
   b45dc:	4611      	mov	r1, r2
   b45de:	4846      	ldr	r0, [pc, #280]	; (b46f8 <loop+0x334>)
   b45e0:	f000 feac 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, again, 128, 64, WHITE);
   b45e4:	2701      	movs	r7, #1
   b45e6:	2340      	movs	r3, #64	; 0x40
   b45e8:	2200      	movs	r2, #0
   b45ea:	e9cd 3701 	strd	r3, r7, [sp, #4]
   b45ee:	2380      	movs	r3, #128	; 0x80
   b45f0:	4611      	mov	r1, r2
   b45f2:	4841      	ldr	r0, [pc, #260]	; (b46f8 <loop+0x334>)
   b45f4:	9300      	str	r3, [sp, #0]
   b45f6:	4b48      	ldr	r3, [pc, #288]	; (b4718 <loop+0x354>)
   b45f8:	f000 fd9c 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b45fc:	483e      	ldr	r0, [pc, #248]	; (b46f8 <loop+0x334>)
   b45fe:	f001 f90f 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4602:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4606:	f001 fd0f 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b460a:	483b      	ldr	r0, [pc, #236]	; (b46f8 <loop+0x334>)
   b460c:	f001 f890 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//6 Red & Cyan Lights

//HUE SETTINGS
// 6 Red & Cyan Lights
        roll=7;
   b4610:	2307      	movs	r3, #7
   b4612:	6023      	str	r3, [r4, #0]


    if(roll==7) {
//7 Green & Yellow Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4614:	4838      	ldr	r0, [pc, #224]	; (b46f8 <loop+0x334>)
   b4616:	2102      	movs	r1, #2
   b4618:	f000 fe9d 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b461c:	2200      	movs	r2, #0
   b461e:	4611      	mov	r1, r2
   b4620:	4835      	ldr	r0, [pc, #212]	; (b46f8 <loop+0x334>)
   b4622:	f000 fe8b 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, welp, 128, 64, WHITE);
   b4626:	2601      	movs	r6, #1
   b4628:	2340      	movs	r3, #64	; 0x40
   b462a:	2200      	movs	r2, #0
   b462c:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b4630:	2380      	movs	r3, #128	; 0x80
   b4632:	4611      	mov	r1, r2
   b4634:	4830      	ldr	r0, [pc, #192]	; (b46f8 <loop+0x334>)
   b4636:	9300      	str	r3, [sp, #0]
   b4638:	4b38      	ldr	r3, [pc, #224]	; (b471c <loop+0x358>)
   b463a:	f000 fd7b 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b463e:	482e      	ldr	r0, [pc, #184]	; (b46f8 <loop+0x334>)
   b4640:	f001 f8ee 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4644:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4648:	f001 fcee 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b464c:	482a      	ldr	r0, [pc, #168]	; (b46f8 <loop+0x334>)
   b464e:	f001 f86f 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//7 Green & Yellow Lights

//HUE SETTINGS
// 7 Green & Yellow Lights
        roll=8;
   b4652:	2308      	movs	r3, #8
   b4654:	6023      	str	r3, [r4, #0]


    if(roll==8) {
//8 Blue, Green & Yellow Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4656:	4828      	ldr	r0, [pc, #160]	; (b46f8 <loop+0x334>)
   b4658:	2102      	movs	r1, #2
   b465a:	f000 fe7c 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b465e:	2200      	movs	r2, #0
   b4660:	4611      	mov	r1, r2
   b4662:	4825      	ldr	r0, [pc, #148]	; (b46f8 <loop+0x334>)
   b4664:	f000 fe6a 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, lame, 128, 64, WHITE);
   b4668:	2501      	movs	r5, #1
   b466a:	2340      	movs	r3, #64	; 0x40
   b466c:	2200      	movs	r2, #0
   b466e:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b4672:	2380      	movs	r3, #128	; 0x80
   b4674:	4611      	mov	r1, r2
   b4676:	4820      	ldr	r0, [pc, #128]	; (b46f8 <loop+0x334>)
   b4678:	9300      	str	r3, [sp, #0]
   b467a:	4b29      	ldr	r3, [pc, #164]	; (b4720 <loop+0x35c>)
   b467c:	f000 fd5a 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4680:	481d      	ldr	r0, [pc, #116]	; (b46f8 <loop+0x334>)
   b4682:	f001 f8cd 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4686:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b468a:	f001 fccd 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b468e:	481a      	ldr	r0, [pc, #104]	; (b46f8 <loop+0x334>)
   b4690:	f001 f84e 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//8 Blue, Green & Yellow Lights

//HUE SETTINGS
// 8 Blue, Green & Yellow Lights
        roll=9;
   b4694:	2309      	movs	r3, #9
   b4696:	6023      	str	r3, [r4, #0]


    if(roll==9) {
//9 Orange & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4698:	4817      	ldr	r0, [pc, #92]	; (b46f8 <loop+0x334>)
   b469a:	2102      	movs	r1, #2
   b469c:	f000 fe5b 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b46a0:	2200      	movs	r2, #0
   b46a2:	4611      	mov	r1, r2
   b46a4:	4814      	ldr	r0, [pc, #80]	; (b46f8 <loop+0x334>)
   b46a6:	f000 fe49 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, pray, 128, 64, WHITE);
   b46aa:	2340      	movs	r3, #64	; 0x40
   b46ac:	2001      	movs	r0, #1
   b46ae:	2200      	movs	r2, #0
   b46b0:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b46b4:	2380      	movs	r3, #128	; 0x80
   b46b6:	4611      	mov	r1, r2
   b46b8:	480f      	ldr	r0, [pc, #60]	; (b46f8 <loop+0x334>)
   b46ba:	9300      	str	r3, [sp, #0]
   b46bc:	4b19      	ldr	r3, [pc, #100]	; (b4724 <loop+0x360>)
   b46be:	f000 fd39 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b46c2:	480d      	ldr	r0, [pc, #52]	; (b46f8 <loop+0x334>)
   b46c4:	f001 f8ac 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b46c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b46cc:	f001 fcac 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b46d0:	4809      	ldr	r0, [pc, #36]	; (b46f8 <loop+0x334>)
   b46d2:	f001 f82d 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//9 Orange & Green Lights

//HUE SETTINGS
// 9 Orange & Green Lights
        roll=10;
   b46d6:	230a      	movs	r3, #10
   b46d8:	6023      	str	r3, [r4, #0]


    if(roll==10) {
//10 Blue & Cyan Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b46da:	4807      	ldr	r0, [pc, #28]	; (b46f8 <loop+0x334>)
   b46dc:	2102      	movs	r1, #2
   b46de:	f000 fe3a 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b46e2:	2200      	movs	r2, #0
   b46e4:	e020      	b.n	b4728 <loop+0x364>
   b46e6:	bf00      	nop
   b46e8:	2003e65c 	.word	0x2003e65c
   b46ec:	2003e694 	.word	0x2003e694
   b46f0:	2003e650 	.word	0x2003e650
   b46f4:	000b924b 	.word	0x000b924b
   b46f8:	2003e670 	.word	0x2003e670
   b46fc:	000b9282 	.word	0x000b9282
   b4700:	2003e6ac 	.word	0x2003e6ac
   b4704:	000b9ea0 	.word	0x000b9ea0
   b4708:	000baaa0 	.word	0x000baaa0
   b470c:	000bdaa0 	.word	0x000bdaa0
   b4710:	000b9aa0 	.word	0x000b9aa0
   b4714:	000b92a0 	.word	0x000b92a0
   b4718:	000bb2a0 	.word	0x000bb2a0
   b471c:	000baea0 	.word	0x000baea0
   b4720:	000ba2a0 	.word	0x000ba2a0
   b4724:	000ba6a0 	.word	0x000ba6a0
   b4728:	4611      	mov	r1, r2
   b472a:	48b3      	ldr	r0, [pc, #716]	; (b49f8 <loop+0x634>)
   b472c:	f000 fe06 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, gentle, 128, 64, WHITE);
   b4730:	2340      	movs	r3, #64	; 0x40
   b4732:	2101      	movs	r1, #1
   b4734:	2200      	movs	r2, #0
   b4736:	e9cd 3101 	strd	r3, r1, [sp, #4]
   b473a:	2380      	movs	r3, #128	; 0x80
   b473c:	4611      	mov	r1, r2
   b473e:	48ae      	ldr	r0, [pc, #696]	; (b49f8 <loop+0x634>)
   b4740:	9300      	str	r3, [sp, #0]
   b4742:	4bae      	ldr	r3, [pc, #696]	; (b49fc <loop+0x638>)
   b4744:	f000 fcf6 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4748:	48ab      	ldr	r0, [pc, #684]	; (b49f8 <loop+0x634>)
   b474a:	f001 f869 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b474e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4752:	f001 fc69 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b4756:	48a8      	ldr	r0, [pc, #672]	; (b49f8 <loop+0x634>)
   b4758:	f000 ffea 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
//10 Blue & Cyan Lights


//HUE SETTINGS
// 10 Blue & Cyan Lights
        roll=11;
   b475c:	230b      	movs	r3, #11
   b475e:	6023      	str	r3, [r4, #0]


    if(roll==11) {
//11 Purple & Cyan Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4760:	48a5      	ldr	r0, [pc, #660]	; (b49f8 <loop+0x634>)
   b4762:	2102      	movs	r1, #2
   b4764:	f000 fdf7 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4768:	2200      	movs	r2, #0
   b476a:	4611      	mov	r1, r2
   b476c:	48a2      	ldr	r0, [pc, #648]	; (b49f8 <loop+0x634>)
   b476e:	f000 fde5 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, goodLuck, 128, 64, WHITE);
   b4772:	2340      	movs	r3, #64	; 0x40
   b4774:	2201      	movs	r2, #1
   b4776:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b477a:	2200      	movs	r2, #0
   b477c:	2380      	movs	r3, #128	; 0x80
   b477e:	4611      	mov	r1, r2
   b4780:	489d      	ldr	r0, [pc, #628]	; (b49f8 <loop+0x634>)
   b4782:	9300      	str	r3, [sp, #0]
   b4784:	4b9e      	ldr	r3, [pc, #632]	; (b4a00 <loop+0x63c>)
   b4786:	f000 fcd5 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b478a:	489b      	ldr	r0, [pc, #620]	; (b49f8 <loop+0x634>)
   b478c:	f001 f848 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4790:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4794:	f001 fc48 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b4798:	4897      	ldr	r0, [pc, #604]	; (b49f8 <loop+0x634>)
   b479a:	f000 ffc9 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//11 Purple & Cyan Lights

//HUE SETTINGS
// 11 Purple & Cyan Lights
        roll=12;
   b479e:	230c      	movs	r3, #12
   b47a0:	6023      	str	r3, [r4, #0]


    if(roll==12) {
//12 Pink & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b47a2:	4895      	ldr	r0, [pc, #596]	; (b49f8 <loop+0x634>)
   b47a4:	2102      	movs	r1, #2
   b47a6:	f000 fdd6 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b47aa:	2200      	movs	r2, #0
   b47ac:	4611      	mov	r1, r2
   b47ae:	4892      	ldr	r0, [pc, #584]	; (b49f8 <loop+0x634>)
   b47b0:	f000 fdc4 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, skull, 128, 64, WHITE);
   b47b4:	f04f 0e01 	mov.w	lr, #1
   b47b8:	2340      	movs	r3, #64	; 0x40
   b47ba:	e9cd 3e01 	strd	r3, lr, [sp, #4]
   b47be:	2200      	movs	r2, #0
   b47c0:	2380      	movs	r3, #128	; 0x80
   b47c2:	4611      	mov	r1, r2
   b47c4:	488c      	ldr	r0, [pc, #560]	; (b49f8 <loop+0x634>)
   b47c6:	9300      	str	r3, [sp, #0]
   b47c8:	4b8e      	ldr	r3, [pc, #568]	; (b4a04 <loop+0x640>)
   b47ca:	f000 fcb3 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b47ce:	488a      	ldr	r0, [pc, #552]	; (b49f8 <loop+0x634>)
   b47d0:	f001 f826 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b47d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b47d8:	f001 fc26 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b47dc:	4886      	ldr	r0, [pc, #536]	; (b49f8 <loop+0x634>)
   b47de:	f000 ffa7 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//12 Pink & Green Lights

//HUE SETTINGS
// 12 Pink & Green Lights
        roll=13;
   b47e2:	230d      	movs	r3, #13
   b47e4:	6023      	str	r3, [r4, #0]


    if(roll==13) {
//13 Blue, Cyan & Purple Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b47e6:	4884      	ldr	r0, [pc, #528]	; (b49f8 <loop+0x634>)
   b47e8:	2102      	movs	r1, #2
   b47ea:	f000 fdb4 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b47ee:	2200      	movs	r2, #0
   b47f0:	4611      	mov	r1, r2
   b47f2:	4881      	ldr	r0, [pc, #516]	; (b49f8 <loop+0x634>)
   b47f4:	f000 fda2 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, lucky, 128, 64, WHITE);
   b47f8:	f04f 0c01 	mov.w	ip, #1
   b47fc:	2340      	movs	r3, #64	; 0x40
   b47fe:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b4802:	2200      	movs	r2, #0
   b4804:	2380      	movs	r3, #128	; 0x80
   b4806:	4611      	mov	r1, r2
   b4808:	487b      	ldr	r0, [pc, #492]	; (b49f8 <loop+0x634>)
   b480a:	9300      	str	r3, [sp, #0]
   b480c:	4b7e      	ldr	r3, [pc, #504]	; (b4a08 <loop+0x644>)
   b480e:	f000 fc91 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4812:	4879      	ldr	r0, [pc, #484]	; (b49f8 <loop+0x634>)
   b4814:	f001 f804 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4818:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b481c:	f001 fc04 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b4820:	4875      	ldr	r0, [pc, #468]	; (b49f8 <loop+0x634>)
   b4822:	f000 ff85 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//13 Blue, Cyan & Purple Lights

//HUE SETTINGS
// 13 Blue, Cyan & Purple Lights
        roll=14;
   b4826:	230e      	movs	r3, #14
   b4828:	6023      	str	r3, [r4, #0]


    if(roll==14) {
//14 Orange & Purple Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b482a:	4873      	ldr	r0, [pc, #460]	; (b49f8 <loop+0x634>)
   b482c:	2102      	movs	r1, #2
   b482e:	f000 fd92 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4832:	2200      	movs	r2, #0
   b4834:	4611      	mov	r1, r2
   b4836:	4870      	ldr	r0, [pc, #448]	; (b49f8 <loop+0x634>)
   b4838:	f000 fd80 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, goodIdea, 128, 64, WHITE);
   b483c:	2701      	movs	r7, #1
   b483e:	2340      	movs	r3, #64	; 0x40
   b4840:	2200      	movs	r2, #0
   b4842:	e9cd 3701 	strd	r3, r7, [sp, #4]
   b4846:	2380      	movs	r3, #128	; 0x80
   b4848:	4611      	mov	r1, r2
   b484a:	486b      	ldr	r0, [pc, #428]	; (b49f8 <loop+0x634>)
   b484c:	9300      	str	r3, [sp, #0]
   b484e:	4b6f      	ldr	r3, [pc, #444]	; (b4a0c <loop+0x648>)
   b4850:	f000 fc70 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4854:	4868      	ldr	r0, [pc, #416]	; (b49f8 <loop+0x634>)
   b4856:	f000 ffe3 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b485a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b485e:	f001 fbe3 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b4862:	4865      	ldr	r0, [pc, #404]	; (b49f8 <loop+0x634>)
   b4864:	f000 ff64 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//14 Orange & Purple Lights

//HUE SETTINGS
// 14 Orange & Purple Lights
        roll=15;
   b4868:	230f      	movs	r3, #15
   b486a:	6023      	str	r3, [r4, #0]


    if(roll==15) {
//15 Magenta, Pink, and Orange Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b486c:	4862      	ldr	r0, [pc, #392]	; (b49f8 <loop+0x634>)
   b486e:	2102      	movs	r1, #2
   b4870:	f000 fd71 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4874:	2200      	movs	r2, #0
   b4876:	4611      	mov	r1, r2
   b4878:	485f      	ldr	r0, [pc, #380]	; (b49f8 <loop+0x634>)
   b487a:	f000 fd5f 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, mushrooms, 128, 64, WHITE);
   b487e:	2601      	movs	r6, #1
   b4880:	2340      	movs	r3, #64	; 0x40
   b4882:	2200      	movs	r2, #0
   b4884:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b4888:	2380      	movs	r3, #128	; 0x80
   b488a:	4611      	mov	r1, r2
   b488c:	485a      	ldr	r0, [pc, #360]	; (b49f8 <loop+0x634>)
   b488e:	9300      	str	r3, [sp, #0]
   b4890:	4b5f      	ldr	r3, [pc, #380]	; (b4a10 <loop+0x64c>)
   b4892:	f000 fc4f 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4896:	4858      	ldr	r0, [pc, #352]	; (b49f8 <loop+0x634>)
   b4898:	f000 ffc2 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b489c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b48a0:	f001 fbc2 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b48a4:	4854      	ldr	r0, [pc, #336]	; (b49f8 <loop+0x634>)
   b48a6:	f000 ff43 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//15 Magenta, Pink, and Orange Lights

//HUE SETTINGS
// 15 Magenta, Pink, and Orange Lights
        roll=16;
   b48aa:	2310      	movs	r3, #16
   b48ac:	6023      	str	r3, [r4, #0]


    if(roll==16) {
//16 Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b48ae:	4852      	ldr	r0, [pc, #328]	; (b49f8 <loop+0x634>)
   b48b0:	2102      	movs	r1, #2
   b48b2:	f000 fd50 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b48b6:	2200      	movs	r2, #0
   b48b8:	4611      	mov	r1, r2
   b48ba:	484f      	ldr	r0, [pc, #316]	; (b49f8 <loop+0x634>)
   b48bc:	f000 fd3e 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, fight, 128, 64, WHITE);
   b48c0:	2501      	movs	r5, #1
   b48c2:	2340      	movs	r3, #64	; 0x40
   b48c4:	2200      	movs	r2, #0
   b48c6:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b48ca:	2380      	movs	r3, #128	; 0x80
   b48cc:	4611      	mov	r1, r2
   b48ce:	484a      	ldr	r0, [pc, #296]	; (b49f8 <loop+0x634>)
   b48d0:	9300      	str	r3, [sp, #0]
   b48d2:	4b50      	ldr	r3, [pc, #320]	; (b4a14 <loop+0x650>)
   b48d4:	f000 fc2e 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b48d8:	4847      	ldr	r0, [pc, #284]	; (b49f8 <loop+0x634>)
   b48da:	f000 ffa1 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b48de:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b48e2:	f001 fba1 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b48e6:	4844      	ldr	r0, [pc, #272]	; (b49f8 <loop+0x634>)
   b48e8:	f000 ff22 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//16 Green Lights

//HUE SETTINGS
// 16 Green Lights
        roll=17;
   b48ec:	2311      	movs	r3, #17
   b48ee:	6023      	str	r3, [r4, #0]


    if(roll==17) {
//17 Green & Yellow Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b48f0:	4841      	ldr	r0, [pc, #260]	; (b49f8 <loop+0x634>)
   b48f2:	2102      	movs	r1, #2
   b48f4:	f000 fd2f 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b48f8:	2200      	movs	r2, #0
   b48fa:	4611      	mov	r1, r2
   b48fc:	483e      	ldr	r0, [pc, #248]	; (b49f8 <loop+0x634>)
   b48fe:	f000 fd1d 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, cheers, 128, 64, WHITE);
   b4902:	2340      	movs	r3, #64	; 0x40
   b4904:	2001      	movs	r0, #1
   b4906:	2200      	movs	r2, #0
   b4908:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b490c:	2380      	movs	r3, #128	; 0x80
   b490e:	4611      	mov	r1, r2
   b4910:	4839      	ldr	r0, [pc, #228]	; (b49f8 <loop+0x634>)
   b4912:	9300      	str	r3, [sp, #0]
   b4914:	4b40      	ldr	r3, [pc, #256]	; (b4a18 <loop+0x654>)
   b4916:	f000 fc0d 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b491a:	4837      	ldr	r0, [pc, #220]	; (b49f8 <loop+0x634>)
   b491c:	f000 ff80 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4920:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4924:	f001 fb80 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b4928:	4833      	ldr	r0, [pc, #204]	; (b49f8 <loop+0x634>)
   b492a:	f000 ff01 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//17 Green & Yellow Lights

//HUE SETTINGS
// 17 Green & Yellow Lights
        roll=18;
   b492e:	2312      	movs	r3, #18
   b4930:	6023      	str	r3, [r4, #0]


    if(roll==18) {
//18 Blue & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4932:	4831      	ldr	r0, [pc, #196]	; (b49f8 <loop+0x634>)
   b4934:	2102      	movs	r1, #2
   b4936:	f000 fd0e 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b493a:	2200      	movs	r2, #0
   b493c:	4611      	mov	r1, r2
   b493e:	482e      	ldr	r0, [pc, #184]	; (b49f8 <loop+0x634>)
   b4940:	f000 fcfc 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, youNeededThat, 128, 64, WHITE);
   b4944:	2340      	movs	r3, #64	; 0x40
   b4946:	2101      	movs	r1, #1
   b4948:	2200      	movs	r2, #0
   b494a:	e9cd 3101 	strd	r3, r1, [sp, #4]
   b494e:	2380      	movs	r3, #128	; 0x80
   b4950:	4611      	mov	r1, r2
   b4952:	4829      	ldr	r0, [pc, #164]	; (b49f8 <loop+0x634>)
   b4954:	9300      	str	r3, [sp, #0]
   b4956:	4b31      	ldr	r3, [pc, #196]	; (b4a1c <loop+0x658>)
   b4958:	f000 fbec 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b495c:	4826      	ldr	r0, [pc, #152]	; (b49f8 <loop+0x634>)
   b495e:	f000 ff5f 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4962:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4966:	f001 fb5f 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b496a:	4823      	ldr	r0, [pc, #140]	; (b49f8 <loop+0x634>)
   b496c:	f000 fee0 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//18 Blue & Green Lights

//HUE SETTINGS
// 18 Blue & Green Lights
        roll=19;
   b4970:	2313      	movs	r3, #19
   b4972:	6023      	str	r3, [r4, #0]


    if(roll==19) {
//19 Magenta, Purple & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4974:	4820      	ldr	r0, [pc, #128]	; (b49f8 <loop+0x634>)
   b4976:	2102      	movs	r1, #2
   b4978:	f000 fced 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b497c:	2200      	movs	r2, #0
   b497e:	4611      	mov	r1, r2
   b4980:	481d      	ldr	r0, [pc, #116]	; (b49f8 <loop+0x634>)
   b4982:	f000 fcdb 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, heroTime, 128, 64, WHITE);
   b4986:	2340      	movs	r3, #64	; 0x40
   b4988:	2201      	movs	r2, #1
   b498a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b498e:	2200      	movs	r2, #0
   b4990:	2380      	movs	r3, #128	; 0x80
   b4992:	4611      	mov	r1, r2
   b4994:	4818      	ldr	r0, [pc, #96]	; (b49f8 <loop+0x634>)
   b4996:	9300      	str	r3, [sp, #0]
   b4998:	4b21      	ldr	r3, [pc, #132]	; (b4a20 <loop+0x65c>)
   b499a:	f000 fbcb 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b499e:	4816      	ldr	r0, [pc, #88]	; (b49f8 <loop+0x634>)
   b49a0:	f000 ff3e 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b49a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b49a8:	f001 fb3e 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b49ac:	4812      	ldr	r0, [pc, #72]	; (b49f8 <loop+0x634>)
   b49ae:	f000 febf 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//19 Magenta, Purple & Green Lights

//HUE SETTINGS
// 19 Magenta, Purple & Green Lights
        roll=20;
   b49b2:	2314      	movs	r3, #20
   b49b4:	6023      	str	r3, [r4, #0]


    if(roll==20) {
// 20 Rainbow Lights, random colors, excitement!
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b49b6:	4810      	ldr	r0, [pc, #64]	; (b49f8 <loop+0x634>)
   b49b8:	2102      	movs	r1, #2
   b49ba:	f000 fccc 	bl	b5356 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b49be:	2200      	movs	r2, #0
   b49c0:	4611      	mov	r1, r2
   b49c2:	480d      	ldr	r0, [pc, #52]	; (b49f8 <loop+0x634>)
   b49c4:	f000 fcba 	bl	b533c <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, killUmAll, 128, 64, WHITE);
   b49c8:	2501      	movs	r5, #1
   b49ca:	2340      	movs	r3, #64	; 0x40
   b49cc:	2200      	movs	r2, #0
   b49ce:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b49d2:	2380      	movs	r3, #128	; 0x80
   b49d4:	4611      	mov	r1, r2
   b49d6:	4808      	ldr	r0, [pc, #32]	; (b49f8 <loop+0x634>)
   b49d8:	9300      	str	r3, [sp, #0]
   b49da:	4b12      	ldr	r3, [pc, #72]	; (b4a24 <loop+0x660>)
   b49dc:	f000 fbaa 	bl	b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b49e0:	4805      	ldr	r0, [pc, #20]	; (b49f8 <loop+0x634>)
   b49e2:	f000 ff1d 	bl	b5820 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b49e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b49ea:	f001 fb1d 	bl	b6028 <delay>
        myDisplay.clearDisplay();
   b49ee:	4802      	ldr	r0, [pc, #8]	; (b49f8 <loop+0x634>)
   b49f0:	f000 fe9e 	bl	b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>
        //     setHue(4, hueOnOff, HueRed, 255, 255);
        //     setHue(5, hueOnOff, HueRed, 255, 255);
        //     setHue(6, hueOnOff, HueRed, 255, 255);
        //     delay(10000);
        // } 
        roll=1;
   b49f4:	6025      	str	r5, [r4, #0]
}

}
   b49f6:	e04f      	b.n	b4a98 <loop+0x6d4>
   b49f8:	2003e670 	.word	0x2003e670
   b49fc:	000bc6a0 	.word	0x000bc6a0
   b4a00:	000bcea0 	.word	0x000bcea0
   b4a04:	000bbea0 	.word	0x000bbea0
   b4a08:	000bbaa0 	.word	0x000bbaa0
   b4a0c:	000bcaa0 	.word	0x000bcaa0
   b4a10:	000bdea0 	.word	0x000bdea0
   b4a14:	000bb6a0 	.word	0x000bb6a0
   b4a18:	000bc2a0 	.word	0x000bc2a0
   b4a1c:	000b96a0 	.word	0x000b96a0
   b4a20:	000bd2a0 	.word	0x000bd2a0
   b4a24:	000bd6a0 	.word	0x000bd6a0
    if(roll==2) {
   b4a28:	2d02      	cmp	r5, #2
   b4a2a:	f43f ad4c 	beq.w	b44c6 <loop+0x102>
    if(roll==3) {
   b4a2e:	2d03      	cmp	r5, #3
   b4a30:	f43f ad6a 	beq.w	b4508 <loop+0x144>
    if(roll==4) {
   b4a34:	2d04      	cmp	r5, #4
   b4a36:	f43f ad88 	beq.w	b454a <loop+0x186>
    if(roll==5) {
   b4a3a:	2d05      	cmp	r5, #5
   b4a3c:	f43f ada7 	beq.w	b458e <loop+0x1ca>
    if(roll==6) {
   b4a40:	2d06      	cmp	r5, #6
   b4a42:	f43f adc6 	beq.w	b45d2 <loop+0x20e>
    if(roll==7) {
   b4a46:	2d07      	cmp	r5, #7
   b4a48:	f43f ade4 	beq.w	b4614 <loop+0x250>
    if(roll==8) {
   b4a4c:	2d08      	cmp	r5, #8
   b4a4e:	f43f ae02 	beq.w	b4656 <loop+0x292>
    if(roll==9) {
   b4a52:	2d09      	cmp	r5, #9
   b4a54:	f43f ae20 	beq.w	b4698 <loop+0x2d4>
    if(roll==10) {
   b4a58:	2d0a      	cmp	r5, #10
   b4a5a:	f43f ae3e 	beq.w	b46da <loop+0x316>
    if(roll==11) {
   b4a5e:	2d0b      	cmp	r5, #11
   b4a60:	f43f ae7e 	beq.w	b4760 <loop+0x39c>
    if(roll==12) {
   b4a64:	2d0c      	cmp	r5, #12
   b4a66:	f43f ae9c 	beq.w	b47a2 <loop+0x3de>
    if(roll==13) {
   b4a6a:	2d0d      	cmp	r5, #13
   b4a6c:	f43f aebb 	beq.w	b47e6 <loop+0x422>
    if(roll==14) {
   b4a70:	2d0e      	cmp	r5, #14
   b4a72:	f43f aeda 	beq.w	b482a <loop+0x466>
    if(roll==15) {
   b4a76:	2d0f      	cmp	r5, #15
   b4a78:	f43f aef8 	beq.w	b486c <loop+0x4a8>
    if(roll==16) {
   b4a7c:	2d10      	cmp	r5, #16
   b4a7e:	f43f af16 	beq.w	b48ae <loop+0x4ea>
    if(roll==17) {
   b4a82:	2d11      	cmp	r5, #17
   b4a84:	f43f af34 	beq.w	b48f0 <loop+0x52c>
    if(roll==18) {
   b4a88:	2d12      	cmp	r5, #18
   b4a8a:	f43f af52 	beq.w	b4932 <loop+0x56e>
    if(roll==19) {
   b4a8e:	2d13      	cmp	r5, #19
   b4a90:	f43f af70 	beq.w	b4974 <loop+0x5b0>
    if(roll==20) {
   b4a94:	2d14      	cmp	r5, #20
   b4a96:	d08e      	beq.n	b49b6 <loop+0x5f2>
}
   b4a98:	b007      	add	sp, #28
   b4a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4a9c <_GLOBAL__sub_I_hueOn>:
   b4a9c:	b508      	push	{r3, lr}

//  Hue variables
bool hueOn;  // on/off
int hueBri;  // brightness value
long hueHue;  // hue value
String hueCmd;  // Hue command
   b4a9e:	491b      	ldr	r1, [pc, #108]	; (b4b0c <_GLOBAL__sub_I_hueOn+0x70>)
   b4aa0:	481b      	ldr	r0, [pc, #108]	; (b4b10 <_GLOBAL__sub_I_hueOn+0x74>)
   b4aa2:	f001 fe6b 	bl	b677c <_ZN6StringC1EPK19__FlashStringHelper>
int HueYellow = 10000;
int HueGreen = 22500;
int HueBlue = 45000;
int HueIndigo = 47500;
int HueViolet = 50000;
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4aa6:	4a1b      	ldr	r2, [pc, #108]	; (b4b14 <_GLOBAL__sub_I_hueOn+0x78>)
   b4aa8:	4b1b      	ldr	r3, [pc, #108]	; (b4b18 <_GLOBAL__sub_I_hueOn+0x7c>)
   b4aaa:	6812      	ldr	r2, [r2, #0]
   b4aac:	601a      	str	r2, [r3, #0]
   b4aae:	4a1b      	ldr	r2, [pc, #108]	; (b4b1c <_GLOBAL__sub_I_hueOn+0x80>)

TCPClient HueClient;
   b4ab0:	481b      	ldr	r0, [pc, #108]	; (b4b20 <_GLOBAL__sub_I_hueOn+0x84>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4ab2:	6812      	ldr	r2, [r2, #0]
   b4ab4:	605a      	str	r2, [r3, #4]
   b4ab6:	4a1b      	ldr	r2, [pc, #108]	; (b4b24 <_GLOBAL__sub_I_hueOn+0x88>)
   b4ab8:	6812      	ldr	r2, [r2, #0]
   b4aba:	609a      	str	r2, [r3, #8]
   b4abc:	4a1a      	ldr	r2, [pc, #104]	; (b4b28 <_GLOBAL__sub_I_hueOn+0x8c>)
   b4abe:	6812      	ldr	r2, [r2, #0]
   b4ac0:	60da      	str	r2, [r3, #12]
   b4ac2:	4a1a      	ldr	r2, [pc, #104]	; (b4b2c <_GLOBAL__sub_I_hueOn+0x90>)
   b4ac4:	6812      	ldr	r2, [r2, #0]
   b4ac6:	611a      	str	r2, [r3, #16]
   b4ac8:	4a19      	ldr	r2, [pc, #100]	; (b4b30 <_GLOBAL__sub_I_hueOn+0x94>)
   b4aca:	6812      	ldr	r2, [r2, #0]
   b4acc:	615a      	str	r2, [r3, #20]
   b4ace:	4a19      	ldr	r2, [pc, #100]	; (b4b34 <_GLOBAL__sub_I_hueOn+0x98>)
   b4ad0:	6812      	ldr	r2, [r2, #0]
   b4ad2:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4ad4:	f002 f930 	bl	b6d38 <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b4ad8:	4817      	ldr	r0, [pc, #92]	; (b4b38 <_GLOBAL__sub_I_hueOn+0x9c>)
   b4ada:	f002 f92d 	bl	b6d38 <_ZN9TCPClientC1Ev>
Adafruit_SSD1306 myDisplay(OLED_RESET); 
   b4ade:	2104      	movs	r1, #4
   b4ae0:	4816      	ldr	r0, [pc, #88]	; (b4b3c <_GLOBAL__sub_I_hueOn+0xa0>)
   b4ae2:	f000 fe0f 	bl	b5704 <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b4ae6:	2302      	movs	r3, #2
   b4ae8:	2208      	movs	r2, #8
   b4aea:	4815      	ldr	r0, [pc, #84]	; (b4b40 <_GLOBAL__sub_I_hueOn+0xa4>)
   b4aec:	2101      	movs	r1, #1
   b4aee:	f000 f86f 	bl	b4bd0 <_ZN17Adafruit_NeoPixelC1Ethh>
              error_(SYSTEM_ERROR_NONE) {
   b4af2:	4b14      	ldr	r3, [pc, #80]	; (b4b44 <_GLOBAL__sub_I_hueOn+0xa8>)
   b4af4:	2200      	movs	r2, #0
   b4af6:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4afa:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4afe:	609a      	str	r2, [r3, #8]
}
   b4b00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   b4b04:	2002      	movs	r0, #2
   b4b06:	f001 b9bb 	b.w	b5e80 <set_system_mode>
   b4b0a:	bf00      	nop
   b4b0c:	000b924a 	.word	0x000b924a
   b4b10:	2003e660 	.word	0x2003e660
   b4b14:	2003e620 	.word	0x2003e620
   b4b18:	2003e604 	.word	0x2003e604
   b4b1c:	2003e15c 	.word	0x2003e15c
   b4b20:	2003e5e8 	.word	0x2003e5e8
   b4b24:	2003e164 	.word	0x2003e164
   b4b28:	2003e154 	.word	0x2003e154
   b4b2c:	2003e150 	.word	0x2003e150
   b4b30:	2003e158 	.word	0x2003e158
   b4b34:	2003e160 	.word	0x2003e160
   b4b38:	2003e630 	.word	0x2003e630
   b4b3c:	2003e670 	.word	0x2003e670
   b4b40:	2003e698 	.word	0x2003e698
   b4b44:	2003e624 	.word	0x2003e624

000b4b48 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4b48:	b538      	push	{r3, r4, r5, lr}
   b4b4a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b4b4c:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4b4e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4b50:	b108      	cbz	r0, b4b56 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b4b52:	f001 fa39 	bl	b5fc8 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b4b56:	79a3      	ldrb	r3, [r4, #6]
   b4b58:	2b06      	cmp	r3, #6
   b4b5a:	bf0c      	ite	eq
   b4b5c:	2004      	moveq	r0, #4
   b4b5e:	2003      	movne	r0, #3
   b4b60:	fb10 f005 	smulbb	r0, r0, r5
   b4b64:	b280      	uxth	r0, r0
   b4b66:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b4b68:	f001 fa26 	bl	b5fb8 <malloc>
   b4b6c:	60e0      	str	r0, [r4, #12]
   b4b6e:	b128      	cbz	r0, b4b7c <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b4b70:	88a2      	ldrh	r2, [r4, #4]
   b4b72:	2100      	movs	r1, #0
   b4b74:	f004 fa26 	bl	b8fc4 <memset>
    numLEDs = n;
   b4b78:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b4b7a:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4b7c:	80a0      	strh	r0, [r4, #4]
   b4b7e:	8060      	strh	r0, [r4, #2]
}
   b4b80:	e7fb      	b.n	b4b7a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b4b82 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b4b82:	b510      	push	{r4, lr}
   b4b84:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b4b86:	2101      	movs	r1, #1
   b4b88:	79c0      	ldrb	r0, [r0, #7]
   b4b8a:	f002 fae5 	bl	b7158 <pinMode>
  digitalWrite(pin, LOW);
   b4b8e:	79e0      	ldrb	r0, [r4, #7]
   b4b90:	2100      	movs	r1, #0
   b4b92:	f002 faf2 	bl	b717a <digitalWrite>
  begun = true;
   b4b96:	2301      	movs	r3, #1
   b4b98:	7023      	strb	r3, [r4, #0]
}
   b4b9a:	bd10      	pop	{r4, pc}

000b4b9c <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b4b9e:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4ba0:	4605      	mov	r5, r0
   b4ba2:	460c      	mov	r4, r1
    if (begun) {
   b4ba4:	b11b      	cbz	r3, b4bae <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4ba6:	79c0      	ldrb	r0, [r0, #7]
   b4ba8:	2100      	movs	r1, #0
   b4baa:	f002 fad5 	bl	b7158 <pinMode>
    }
    pin = p;
    if (begun) {
   b4bae:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4bb0:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4bb2:	b15b      	cbz	r3, b4bcc <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4bb4:	b2a0      	uxth	r0, r4
   b4bb6:	2101      	movs	r1, #1
   b4bb8:	9001      	str	r0, [sp, #4]
   b4bba:	f002 facd 	bl	b7158 <pinMode>
        digitalWrite(p, LOW);
   b4bbe:	9801      	ldr	r0, [sp, #4]
   b4bc0:	2100      	movs	r1, #0
    }
}
   b4bc2:	b003      	add	sp, #12
   b4bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4bc8:	f002 bad7 	b.w	b717a <digitalWrite>
}
   b4bcc:	b003      	add	sp, #12
   b4bce:	bd30      	pop	{r4, r5, pc}

000b4bd0 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4bd0:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4bd2:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4bd4:	4604      	mov	r4, r0
   b4bd6:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4bd8:	7183      	strb	r3, [r0, #6]
   b4bda:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4bde:	7005      	strb	r5, [r0, #0]
   b4be0:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4be2:	f7ff ffb1 	bl	b4b48 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4be6:	4620      	mov	r0, r4
   b4be8:	4631      	mov	r1, r6
   b4bea:	f7ff ffd7 	bl	b4b9c <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4bee:	4620      	mov	r0, r4
   b4bf0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4bf4 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4bf4:	68c3      	ldr	r3, [r0, #12]
   b4bf6:	2b00      	cmp	r3, #0
   b4bf8:	f000 81a4 	beq.w	b4f44 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b4bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c00:	7983      	ldrb	r3, [r0, #6]
   b4c02:	3b02      	subs	r3, #2
   b4c04:	b2db      	uxtb	r3, r3
   b4c06:	2b04      	cmp	r3, #4
   b4c08:	bf9c      	itt	ls
   b4c0a:	4abf      	ldrls	r2, [pc, #764]	; (b4f08 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b4c0c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4c10:	b085      	sub	sp, #20
   b4c12:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b4c14:	bf88      	it	hi
   b4c16:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4c18:	f000 ff62 	bl	b5ae0 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b4c1c:	692b      	ldr	r3, [r5, #16]
   b4c1e:	1ac0      	subs	r0, r0, r3
   b4c20:	42a0      	cmp	r0, r4
   b4c22:	d3f9      	bcc.n	b4c18 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b4c24:	4cb9      	ldr	r4, [pc, #740]	; (b4f0c <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4c26:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4c28:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c2c:	b91b      	cbnz	r3, b4c36 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c2e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4c32:	2b00      	cmp	r3, #0
   b4c34:	db7e      	blt.n	b4d34 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b4c36:	4cb6      	ldr	r4, [pc, #728]	; (b4f10 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b4c38:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c3c:	b923      	cbnz	r3, b4c48 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c3e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4c42:	2b00      	cmp	r3, #0
   b4c44:	f2c0 816e 	blt.w	b4f24 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b4c48:	4cb2      	ldr	r4, [pc, #712]	; (b4f14 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b4c4a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c4e:	2b00      	cmp	r3, #0
   b4c50:	f000 8144 	beq.w	b4edc <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c54:	79eb      	ldrb	r3, [r5, #7]
   b4c56:	4ab0      	ldr	r2, [pc, #704]	; (b4f18 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4c58:	4cb0      	ldr	r4, [pc, #704]	; (b4f1c <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c5a:	6812      	ldr	r2, [r2, #0]
   b4c5c:	0119      	lsls	r1, r3, #4
   b4c5e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4c62:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4c64:	49ae      	ldr	r1, [pc, #696]	; (b4f20 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c66:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4c68:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b4c6c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4c70:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4c74:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c76:	f003 031f 	and.w	r3, r3, #31
   b4c7a:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b4c7e:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4c80:	433a      	orrs	r2, r7
   b4c82:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b4c84:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4c86:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4c8a:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c8e:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4c90:	2900      	cmp	r1, #0
   b4c92:	d044      	beq.n	b4d1e <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4c94:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4c98:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b4c9a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b4c9e:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4ca2:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4ca4:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4ca6:	6863      	ldr	r3, [r4, #4]
   b4ca8:	1a9b      	subs	r3, r3, r2
   b4caa:	2b46      	cmp	r3, #70	; 0x46
   b4cac:	d9fb      	bls.n	b4ca6 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b4cae:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4cb0:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4cb4:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4cb8:	ea43 0307 	orr.w	r3, r3, r7
   b4cbc:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4cc0:	d02f      	beq.n	b4d22 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4cc2:	6863      	ldr	r3, [r4, #4]
   b4cc4:	1a9b      	subs	r3, r3, r2
   b4cc6:	2b28      	cmp	r3, #40	; 0x28
   b4cc8:	d9fb      	bls.n	b4cc2 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b4cca:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4cce:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4cd0:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4cd4:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4cd8:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4cdc:	d1e3      	bne.n	b4ca6 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b4cde:	88ab      	ldrh	r3, [r5, #4]
   b4ce0:	f10e 0e01 	add.w	lr, lr, #1
   b4ce4:	fa1f fe8e 	uxth.w	lr, lr
   b4ce8:	4573      	cmp	r3, lr
   b4cea:	d8d8      	bhi.n	b4c9e <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4cec:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4cf0:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4cf4:	6863      	ldr	r3, [r4, #4]
   b4cf6:	1a9b      	subs	r3, r3, r2
   b4cf8:	2b46      	cmp	r3, #70	; 0x46
   b4cfa:	d9fb      	bls.n	b4cf4 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4cfc:	6863      	ldr	r3, [r4, #4]
   b4cfe:	eba3 0909 	sub.w	r9, r3, r9
   b4d02:	4589      	cmp	r9, r1
   b4d04:	f0c0 80e4 	bcc.w	b4ed0 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4d08:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4d0c:	f000 fee0 	bl	b5ad0 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4d10:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4d12:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4d16:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b4d1a:	2900      	cmp	r1, #0
   b4d1c:	d1ba      	bne.n	b4c94 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b4d1e:	460a      	mov	r2, r1
   b4d20:	e7e8      	b.n	b4cf4 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b4d22:	6863      	ldr	r3, [r4, #4]
   b4d24:	1a9b      	subs	r3, r3, r2
   b4d26:	2b11      	cmp	r3, #17
   b4d28:	d8cf      	bhi.n	b4cca <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b4d2a:	6863      	ldr	r3, [r4, #4]
   b4d2c:	1a9b      	subs	r3, r3, r2
   b4d2e:	2b11      	cmp	r3, #17
   b4d30:	d9f7      	bls.n	b4d22 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b4d32:	e7ca      	b.n	b4cca <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d34:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d38:	2b00      	cmp	r3, #0
   b4d3a:	f6bf af7c 	bge.w	b4c36 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d3e:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d42:	2b00      	cmp	r3, #0
   b4d44:	f6bf af77 	bge.w	b4c36 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4d48:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d4c:	2b00      	cmp	r3, #0
   b4d4e:	f6bf af72 	bge.w	b4c36 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4d52:	0136      	lsls	r6, r6, #4
   b4d54:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4d56:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4d58:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4d5a:	f001 f92d 	bl	b5fb8 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b4d5e:	2800      	cmp	r0, #0
   b4d60:	f43f af78 	beq.w	b4c54 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b4d64:	88ab      	ldrh	r3, [r5, #4]
   b4d66:	2b00      	cmp	r3, #0
   b4d68:	f000 80ed 	beq.w	b4f46 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4d6c:	68ea      	ldr	r2, [r5, #12]
   b4d6e:	3b01      	subs	r3, #1
   b4d70:	fa12 f783 	uxtah	r7, r2, r3
   b4d74:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b4d78:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d7a:	f248 0206 	movw	r2, #32774	; 0x8006
   b4d7e:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b4d82:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d86:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b4d8a:	bf0c      	ite	eq
   b4d8c:	4693      	moveq	fp, r2
   b4d8e:	468b      	movne	fp, r1
   b4d90:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4d94:	bf0c      	ite	eq
   b4d96:	4616      	moveq	r6, r2
   b4d98:	460e      	movne	r6, r1
   b4d9a:	f01c 0f20 	tst.w	ip, #32
   b4d9e:	bf0c      	ite	eq
   b4da0:	4690      	moveq	r8, r2
   b4da2:	4688      	movne	r8, r1
        pos++;
   b4da4:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4da8:	f8cd 8008 	str.w	r8, [sp, #8]
   b4dac:	9601      	str	r6, [sp, #4]
        pos++;
   b4dae:	f103 0802 	add.w	r8, r3, #2
   b4db2:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4db6:	9e01      	ldr	r6, [sp, #4]
   b4db8:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4dbc:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4dc0:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4dc4:	9e02      	ldr	r6, [sp, #8]
   b4dc6:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4dca:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4dce:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4dd2:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4dd6:	bf0c      	ite	eq
   b4dd8:	4693      	moveq	fp, r2
   b4dda:	468b      	movne	fp, r1
   b4ddc:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4de0:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4de4:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4de8:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4dec:	bf0c      	ite	eq
   b4dee:	4693      	moveq	fp, r2
   b4df0:	468b      	movne	fp, r1
   b4df2:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4df6:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4dfa:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b4dfe:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4e02:	bf0c      	ite	eq
   b4e04:	4693      	moveq	fp, r2
   b4e06:	468b      	movne	fp, r1
   b4e08:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4e0c:	f103 0a08 	add.w	sl, r3, #8
   b4e10:	f103 0806 	add.w	r8, r3, #6
   b4e14:	3307      	adds	r3, #7
   b4e16:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4e18:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b4e1c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4e20:	bf0c      	ite	eq
   b4e22:	4693      	moveq	fp, r2
   b4e24:	468b      	movne	fp, r1
        pos++;
   b4e26:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4e2a:	f01c 0f01 	tst.w	ip, #1
   b4e2e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b4e32:	bf15      	itete	ne
   b4e34:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b4e38:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b4e3c:	fa1f f38a 	uxthne.w	r3, sl
   b4e40:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b4e44:	4577      	cmp	r7, lr
   b4e46:	d19c      	bne.n	b4d82 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e48:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e4a:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e4c:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e4e:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e50:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e52:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e54:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4e58:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4e5a:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e5c:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4e5e:	4b2e      	ldr	r3, [pc, #184]	; (b4f18 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4e60:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4e62:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4e64:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4e66:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4e68:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4e6c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4e70:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4e74:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4e78:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4e7c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4e80:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4e84:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4e88:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4e8c:	79eb      	ldrb	r3, [r5, #7]
   b4e8e:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4e92:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4e94:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4e96:	5cfe      	ldrb	r6, [r7, r3]
   b4e98:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4e9c:	f003 031f 	and.w	r3, r3, #31
   b4ea0:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4ea4:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4ea8:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4eac:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4eb0:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4eb2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4eb6:	2b00      	cmp	r3, #0
   b4eb8:	d0fb      	beq.n	b4eb2 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4eba:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b4ec0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4ec4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4ec8:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4ecc:	f001 f87c 	bl	b5fc8 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4ed0:	f000 fe06 	bl	b5ae0 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4ed4:	6128      	str	r0, [r5, #16]
}
   b4ed6:	b005      	add	sp, #20
   b4ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4edc:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4ee0:	2b00      	cmp	r3, #0
   b4ee2:	f6bf aeb7 	bge.w	b4c54 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ee6:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4eea:	2b00      	cmp	r3, #0
   b4eec:	f6bf aeb2 	bge.w	b4c54 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ef0:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ef4:	2b00      	cmp	r3, #0
   b4ef6:	f6bf aead 	bge.w	b4c54 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4efa:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4efe:	2b00      	cmp	r3, #0
   b4f00:	f6bf aea8 	bge.w	b4c54 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4f04:	e725      	b.n	b4d52 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4f06:	bf00      	nop
   b4f08:	000be2a0 	.word	0x000be2a0
   b4f0c:	4001c000 	.word	0x4001c000
   b4f10:	40021000 	.word	0x40021000
   b4f14:	40022000 	.word	0x40022000
   b4f18:	2003e6b4 	.word	0x2003e6b4
   b4f1c:	e0001000 	.word	0xe0001000
   b4f20:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4f24:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4f28:	2b00      	cmp	r3, #0
   b4f2a:	f6bf ae8d 	bge.w	b4c48 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4f2e:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4f32:	2b00      	cmp	r3, #0
   b4f34:	f6bf ae88 	bge.w	b4c48 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4f38:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4f3c:	2b00      	cmp	r3, #0
   b4f3e:	f6bf ae83 	bge.w	b4c48 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b4f42:	e706      	b.n	b4d52 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4f44:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b4f46:	2304      	movs	r3, #4
   b4f48:	2102      	movs	r1, #2
   b4f4a:	e783      	b.n	b4e54 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4f4c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b4f4c:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4f4e:	f000 fddf 	bl	b5b10 <HAL_Pin_Map>
   b4f52:	4b01      	ldr	r3, [pc, #4]	; (b4f58 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4f54:	6018      	str	r0, [r3, #0]
}
   b4f56:	bd08      	pop	{r3, pc}
   b4f58:	2003e6b4 	.word	0x2003e6b4

000b4f5c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f60:	b085      	sub	sp, #20
   b4f62:	461f      	mov	r7, r3
   b4f64:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4f68:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4f6c:	eba8 0902 	sub.w	r9, r8, r2
   b4f70:	eba7 0a01 	sub.w	sl, r7, r1
   b4f74:	f1b9 0f00 	cmp.w	r9, #0
   b4f78:	bfb8      	it	lt
   b4f7a:	f1c9 0900 	rsblt	r9, r9, #0
   b4f7e:	f1ba 0f00 	cmp.w	sl, #0
   b4f82:	bfb8      	it	lt
   b4f84:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b4f88:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b4f8a:	4683      	mov	fp, r0
   b4f8c:	460c      	mov	r4, r1
   b4f8e:	4615      	mov	r5, r2
  if (steep) {
   b4f90:	dd04      	ble.n	b4f9c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b4f92:	463a      	mov	r2, r7
    swap(x0, y0);
   b4f94:	462c      	mov	r4, r5
    swap(x1, y1);
   b4f96:	4647      	mov	r7, r8
    swap(x0, y0);
   b4f98:	460d      	mov	r5, r1
    swap(x1, y1);
   b4f9a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b4f9c:	42bc      	cmp	r4, r7
   b4f9e:	dd05      	ble.n	b4fac <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b4fa0:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b4fa2:	4645      	mov	r5, r8
   b4fa4:	4690      	mov	r8, r2
  if (x0 > x1) {
   b4fa6:	4622      	mov	r2, r4
   b4fa8:	463c      	mov	r4, r7
   b4faa:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b4fac:	1b3e      	subs	r6, r7, r4
   b4fae:	b2b2      	uxth	r2, r6
   b4fb0:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b4fb2:	eba8 0205 	sub.w	r2, r8, r5
   b4fb6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4fba:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b4fbe:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4fc2:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4fc6:	4545      	cmp	r5, r8
   b4fc8:	bfb4      	ite	lt
   b4fca:	2201      	movlt	r2, #1
   b4fcc:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b4fd0:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4fd2:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4fd4:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4fd6:	42bc      	cmp	r4, r7
   b4fd8:	dc1c      	bgt.n	b5014 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4fda:	f8db 2000 	ldr.w	r2, [fp]
   b4fde:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4fe0:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4fe2:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4fe6:	bfc7      	ittee	gt
   b4fe8:	4629      	movgt	r1, r5
   b4fea:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4fec:	462a      	movle	r2, r5
   b4fee:	4621      	movle	r1, r4
   b4ff0:	4658      	mov	r0, fp
   b4ff2:	47c0      	blx	r8
    }
    err -= dy;
   b4ff4:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4ff6:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4ff8:	1ab6      	subs	r6, r6, r2
   b4ffa:	b2b1      	uxth	r1, r6
   b4ffc:	b236      	sxth	r6, r6
    if (err < 0) {
   b4ffe:	2e00      	cmp	r6, #0
   b5000:	da05      	bge.n	b500e <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b5002:	9a02      	ldr	r2, [sp, #8]
   b5004:	4415      	add	r5, r2
      err += dx;
   b5006:	9a00      	ldr	r2, [sp, #0]
   b5008:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b500a:	b22d      	sxth	r5, r5
      err += dx;
   b500c:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b500e:	3401      	adds	r4, #1
   b5010:	b224      	sxth	r4, r4
   b5012:	e7e0      	b.n	b4fd6 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5014:	b005      	add	sp, #20
   b5016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b501a <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b501a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b501e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b5022:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b5024:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b5028:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b502c:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b502e:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b5030:	4616      	mov	r6, r2
   b5032:	468a      	mov	sl, r1
   b5034:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b5036:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b5038:	6823      	ldr	r3, [r4, #0]
   b503a:	f8cd 8000 	str.w	r8, [sp]
   b503e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5042:	4432      	add	r2, r6
   b5044:	69df      	ldr	r7, [r3, #28]
   b5046:	4651      	mov	r1, sl
   b5048:	462b      	mov	r3, r5
   b504a:	4620      	mov	r0, r4
   b504c:	b212      	sxth	r2, r2
   b504e:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b5050:	6823      	ldr	r3, [r4, #0]
   b5052:	f8cd 8000 	str.w	r8, [sp]
   b5056:	699f      	ldr	r7, [r3, #24]
   b5058:	4632      	mov	r2, r6
   b505a:	464b      	mov	r3, r9
   b505c:	4651      	mov	r1, sl
   b505e:	4620      	mov	r0, r4
   b5060:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b5062:	1e6b      	subs	r3, r5, #1
   b5064:	eb03 010a 	add.w	r1, r3, sl
   b5068:	6823      	ldr	r3, [r4, #0]
   b506a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b506e:	699d      	ldr	r5, [r3, #24]
   b5070:	4632      	mov	r2, r6
   b5072:	464b      	mov	r3, r9
   b5074:	b209      	sxth	r1, r1
   b5076:	4620      	mov	r0, r4
   b5078:	46ac      	mov	ip, r5
}
   b507a:	b002      	add	sp, #8
   b507c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5080:	4760      	bx	ip

000b5082 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b5082:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b5084:	3b01      	subs	r3, #1
   b5086:	4413      	add	r3, r2
   b5088:	6804      	ldr	r4, [r0, #0]
   b508a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b508e:	9501      	str	r5, [sp, #4]
   b5090:	b21b      	sxth	r3, r3
   b5092:	9300      	str	r3, [sp, #0]
   b5094:	6964      	ldr	r4, [r4, #20]
   b5096:	460b      	mov	r3, r1
   b5098:	47a0      	blx	r4
}
   b509a:	b003      	add	sp, #12
   b509c:	bd30      	pop	{r4, r5, pc}

000b509e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b509e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b50a0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b50a4:	6804      	ldr	r4, [r0, #0]
   b50a6:	e9cd 2500 	strd	r2, r5, [sp]
   b50aa:	3b01      	subs	r3, #1
   b50ac:	440b      	add	r3, r1
   b50ae:	6964      	ldr	r4, [r4, #20]
   b50b0:	b21b      	sxth	r3, r3
   b50b2:	47a0      	blx	r4
}
   b50b4:	b003      	add	sp, #12
   b50b6:	bd30      	pop	{r4, r5, pc}

000b50b8 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b50b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b50bc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b50c0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b50c4:	4605      	mov	r5, r0
   b50c6:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b50c8:	460c      	mov	r4, r1
   b50ca:	18ce      	adds	r6, r1, r3
   b50cc:	42b4      	cmp	r4, r6
   b50ce:	da0b      	bge.n	b50e8 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b50d0:	682b      	ldr	r3, [r5, #0]
   b50d2:	f8cd 8000 	str.w	r8, [sp]
   b50d6:	699f      	ldr	r7, [r3, #24]
   b50d8:	4621      	mov	r1, r4
   b50da:	464b      	mov	r3, r9
   b50dc:	4652      	mov	r2, sl
   b50de:	4628      	mov	r0, r5
   b50e0:	3401      	adds	r4, #1
   b50e2:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b50e4:	b224      	sxth	r4, r4
   b50e6:	e7f1      	b.n	b50cc <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b50e8:	b002      	add	sp, #8
   b50ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b50ee <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b50ee:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b50f0:	6802      	ldr	r2, [r0, #0]
   b50f2:	9101      	str	r1, [sp, #4]
   b50f4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b50f8:	9100      	str	r1, [sp, #0]
   b50fa:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b50fc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5100:	2200      	movs	r2, #0
   b5102:	4611      	mov	r1, r2
   b5104:	47a0      	blx	r4
}
   b5106:	b002      	add	sp, #8
   b5108:	bd10      	pop	{r4, pc}

000b510a <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b510a:	4770      	bx	lr

000b510c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b510c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b510e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5110:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b5116:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5118:	4d05      	ldr	r5, [pc, #20]	; (b5130 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b511a:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b511c:	2201      	movs	r2, #1
   b511e:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5120:	6005      	str	r5, [r0, #0]
   b5122:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5124:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b5126:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b5128:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b512a:	7682      	strb	r2, [r0, #26]
}
   b512c:	bd30      	pop	{r4, r5, pc}
   b512e:	bf00      	nop
   b5130:	000be7b8 	.word	0x000be7b8

000b5134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
			      uint16_t color) {
   b5134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5138:	b089      	sub	sp, #36	; 0x24
   b513a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b513e:	f9bd 7048 	ldrsh.w	r7, [sp, #72]	; 0x48
   b5142:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
   b5146:	9305      	str	r3, [sp, #20]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b5148:	1dfa      	adds	r2, r7, #7
			      uint16_t color) {
   b514a:	e9cd 0101 	strd	r0, r1, [sp, #4]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b514e:	bf48      	it	mi
   b5150:	f107 020e 	addmi.w	r2, r7, #14
   b5154:	2400      	movs	r4, #0
			      uint16_t color) {
   b5156:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  int16_t i, j, byteWidth = (w + 7) / 8;
   b515a:	ea4f 0be2 	mov.w	fp, r2, asr #3
   b515e:	4625      	mov	r5, r4
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b5160:	f04f 0980 	mov.w	r9, #128	; 0x80
  for(j=0; j<h; j++) {
   b5164:	9905      	ldr	r1, [sp, #20]
   b5166:	b22a      	sxth	r2, r5
   b5168:	4291      	cmp	r1, r2
   b516a:	dd2a      	ble.n	b51c2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b516c:	9a04      	ldr	r2, [sp, #16]
   b516e:	eb02 0a04 	add.w	sl, r2, r4
	drawPixel(x+i, y+j, color);
   b5172:	9a03      	ldr	r2, [sp, #12]
   b5174:	442a      	add	r2, r5
   b5176:	f04f 0800 	mov.w	r8, #0
   b517a:	b212      	sxth	r2, r2
   b517c:	fa0f f088 	sxth.w	r0, r8
    for(i=0; i<w; i++ ) {
   b5180:	4287      	cmp	r7, r0
   b5182:	fa1f f188 	uxth.w	r1, r8
   b5186:	dd19      	ble.n	b51bc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b5188:	10c0      	asrs	r0, r0, #3
   b518a:	f81a c000 	ldrb.w	ip, [sl, r0]
   b518e:	f001 0007 	and.w	r0, r1, #7
   b5192:	fa49 f000 	asr.w	r0, r9, r0
   b5196:	ea1c 0f00 	tst.w	ip, r0
   b519a:	d00c      	beq.n	b51b6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x82>
	drawPixel(x+i, y+j, color);
   b519c:	9802      	ldr	r0, [sp, #8]
   b519e:	4401      	add	r1, r0
   b51a0:	9801      	ldr	r0, [sp, #4]
   b51a2:	6800      	ldr	r0, [r0, #0]
   b51a4:	6900      	ldr	r0, [r0, #16]
   b51a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b51aa:	4606      	mov	r6, r0
   b51ac:	b209      	sxth	r1, r1
   b51ae:	9801      	ldr	r0, [sp, #4]
   b51b0:	47b0      	blx	r6
   b51b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    for(i=0; i<w; i++ ) {
   b51b6:	f108 0801 	add.w	r8, r8, #1
   b51ba:	e7df      	b.n	b517c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x48>
  for(j=0; j<h; j++) {
   b51bc:	3501      	adds	r5, #1
   b51be:	445c      	add	r4, fp
   b51c0:	e7d0      	b.n	b5164 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x30>
}
   b51c2:	b009      	add	sp, #36	; 0x24
   b51c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b51c8 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b51c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51cc:	ed2d 8b02 	vpush	{d8}
   b51d0:	b08d      	sub	sp, #52	; 0x34
   b51d2:	4607      	mov	r7, r0
   b51d4:	9104      	str	r1, [sp, #16]
   b51d6:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b51da:	9105      	str	r1, [sp, #20]
   b51dc:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b51e0:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b51e2:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b51e6:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b51e8:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b51ec:	4281      	cmp	r1, r0
   b51ee:	dd52      	ble.n	b5296 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b51f0:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b51f4:	4291      	cmp	r1, r2
   b51f6:	dd4e      	ble.n	b5296 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b51f8:	2106      	movs	r1, #6
   b51fa:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b51fe:	2c00      	cmp	r4, #0
   b5200:	dd49      	ble.n	b5296 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b5202:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b5206:	2c00      	cmp	r4, #0
   b5208:	dd45      	ble.n	b5296 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b520a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b520e:	930b      	str	r3, [sp, #44]	; 0x2c
   b5210:	b293      	uxth	r3, r2
   b5212:	9307      	str	r3, [sp, #28]
   b5214:	3308      	adds	r3, #8
   b5216:	b29b      	uxth	r3, r3
   b5218:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b521a:	2400      	movs	r4, #0
   b521c:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b521e:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5220:	bf1c      	itt	ne
   b5222:	4b2c      	ldrne	r3, [pc, #176]	; (b52d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5224:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b5226:	9e07      	ldr	r6, [sp, #28]
   b5228:	bf16      	itet	ne
   b522a:	191b      	addne	r3, r3, r4
      line = 0x0;
   b522c:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b522e:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5230:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5232:	9a04      	ldr	r2, [sp, #16]
   b5234:	b2ab      	uxth	r3, r5
   b5236:	930a      	str	r3, [sp, #40]	; 0x28
   b5238:	fb04 f305 	mul.w	r3, r4, r5
   b523c:	fa13 f382 	uxtah	r3, r3, r2
   b5240:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b5242:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5246:	ee08 3a10 	vmov	s16, r3
   b524a:	46b0      	mov	r8, r6
   b524c:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5250:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5254:	9b03      	ldr	r3, [sp, #12]
   b5256:	07db      	lsls	r3, r3, #31
   b5258:	d52f      	bpl.n	b52ba <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b525a:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b525c:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b525e:	d11f      	bne.n	b52a0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5260:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5264:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b5266:	b232      	sxth	r2, r6
   b5268:	4651      	mov	r1, sl
   b526a:	4638      	mov	r0, r7
   b526c:	47d8      	blx	fp
      line >>= 1;
   b526e:	9b03      	ldr	r3, [sp, #12]
   b5270:	085b      	lsrs	r3, r3, #1
   b5272:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5276:	3601      	adds	r6, #1
   b5278:	4498      	add	r8, r3
   b527a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b527c:	b2b6      	uxth	r6, r6
   b527e:	42b3      	cmp	r3, r6
   b5280:	fa1f f888 	uxth.w	r8, r8
   b5284:	d1e6      	bne.n	b5254 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5286:	9b08      	ldr	r3, [sp, #32]
   b5288:	3b01      	subs	r3, #1
   b528a:	3401      	adds	r4, #1
   b528c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5290:	b264      	sxtb	r4, r4
   b5292:	9308      	str	r3, [sp, #32]
   b5294:	d1c3      	bne.n	b521e <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5296:	b00d      	add	sp, #52	; 0x34
   b5298:	ecbd 8b02 	vpop	{d8}
   b529c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b52a0:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b52a2:	e9cd 9200 	strd	r9, r2, [sp]
   b52a6:	ee18 1a10 	vmov	r1, s16
   b52aa:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b52ae:	fa0f f288 	sxth.w	r2, r8
   b52b2:	464b      	mov	r3, r9
   b52b4:	4638      	mov	r0, r7
   b52b6:	47d8      	blx	fp
   b52b8:	e7d9      	b.n	b526e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b52ba:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b52be:	4293      	cmp	r3, r2
   b52c0:	d0d5      	beq.n	b526e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b52c2:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b52c4:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b52c6:	d103      	bne.n	b52d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b52c8:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b52cc:	9b06      	ldr	r3, [sp, #24]
   b52ce:	e7ca      	b.n	b5266 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b52d0:	9a06      	ldr	r2, [sp, #24]
   b52d2:	e7e6      	b.n	b52a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b52d4:	000be2b4 	.word	0x000be2b4

000b52d8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b52d8:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b52da:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b52dc:	b085      	sub	sp, #20
   b52de:	4604      	mov	r4, r0
  if (c == '\n') {
   b52e0:	d107      	bne.n	b52f2 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b52e2:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b52e4:	8a63      	ldrh	r3, [r4, #18]
   b52e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b52ea:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b52ec:	2300      	movs	r3, #0
   b52ee:	8223      	strh	r3, [r4, #16]
   b52f0:	e021      	b.n	b5336 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b52f2:	290d      	cmp	r1, #13
   b52f4:	d01f      	beq.n	b5336 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b52f6:	7e03      	ldrb	r3, [r0, #24]
   b52f8:	9302      	str	r3, [sp, #8]
   b52fa:	8ac3      	ldrh	r3, [r0, #22]
   b52fc:	9301      	str	r3, [sp, #4]
   b52fe:	8a83      	ldrh	r3, [r0, #20]
   b5300:	9300      	str	r3, [sp, #0]
   b5302:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5306:	460b      	mov	r3, r1
   b5308:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b530c:	f7ff ff5c 	bl	b51c8 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5310:	7e20      	ldrb	r0, [r4, #24]
   b5312:	8a23      	ldrh	r3, [r4, #16]
   b5314:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5318:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b531c:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b531e:	b21b      	sxth	r3, r3
   b5320:	4602      	mov	r2, r0
   b5322:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5324:	b139      	cbz	r1, b5336 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b5326:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b532a:	f06f 0505 	mvn.w	r5, #5
   b532e:	fb05 1100 	mla	r1, r5, r0, r1
   b5332:	428b      	cmp	r3, r1
   b5334:	dcd6      	bgt.n	b52e4 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b5336:	2001      	movs	r0, #1
   b5338:	b005      	add	sp, #20
   b533a:	bd30      	pop	{r4, r5, pc}

000b533c <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b533c:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b533e:	8242      	strh	r2, [r0, #18]
}
   b5340:	4770      	bx	lr

000b5342 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5342:	2901      	cmp	r1, #1
   b5344:	bf38      	it	cc
   b5346:	2101      	movcc	r1, #1
   b5348:	7601      	strb	r1, [r0, #24]
}
   b534a:	4770      	bx	lr

000b534c <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b534c:	82c1      	strh	r1, [r0, #22]
   b534e:	8281      	strh	r1, [r0, #20]
}
   b5350:	4770      	bx	lr

000b5352 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5352:	7e40      	ldrb	r0, [r0, #25]
   b5354:	4770      	bx	lr

000b5356 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b5356:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b535a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b535e:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b5360:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b5362:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5366:	bf59      	ittee	pl
   b5368:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b536a:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b536c:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b536e:	81c3      	strhmi	r3, [r0, #14]
}
   b5370:	4770      	bx	lr

000b5372 <_ZN12Adafruit_GFX5widthEv>:
}
   b5372:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5376:	4770      	bx	lr

000b5378 <_ZN12Adafruit_GFX6heightEv>:
}
   b5378:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b537c:	4770      	bx	lr
	...

000b5380 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5380:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b5382:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5384:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5388:	2d02      	cmp	r5, #2
   b538a:	d069      	beq.n	b5460 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b538c:	2d03      	cmp	r5, #3
   b538e:	f000 8099 	beq.w	b54c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b5392:	2d01      	cmp	r5, #1
   b5394:	d16c      	bne.n	b5470 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b5396:	8905      	ldrh	r5, [r0, #8]
   b5398:	43d2      	mvns	r2, r2
   b539a:	442a      	add	r2, r5
   b539c:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b539e:	2a00      	cmp	r2, #0
   b53a0:	db5d      	blt.n	b545e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b53a2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b53a6:	4295      	cmp	r5, r2
   b53a8:	dd59      	ble.n	b545e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b53aa:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b53ac:	bfbe      	ittt	lt
   b53ae:	185b      	addlt	r3, r3, r1
   b53b0:	b21b      	sxthlt	r3, r3
    __y = 0;
   b53b2:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b53b4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b53b8:	18cd      	adds	r5, r1, r3
   b53ba:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b53bc:	bfc4      	itt	gt
   b53be:	1a43      	subgt	r3, r0, r1
   b53c0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b53c2:	2b00      	cmp	r3, #0
   b53c4:	dd4b      	ble.n	b545e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b53c6:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b53ca:	f8df c120 	ldr.w	ip, [pc, #288]	; b54ec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b53ce:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b53d2:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b53d6:	b2db      	uxtb	r3, r3
  pBuf += x;
   b53d8:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b53dc:	d01a      	beq.n	b5414 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b53de:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b53e2:	4e40      	ldr	r6, [pc, #256]	; (b54e4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b53e4:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b53e6:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b53e8:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b53ea:	bf3f      	itttt	cc
   b53ec:	eba5 0e03 	subcc.w	lr, r5, r3
   b53f0:	26ff      	movcc	r6, #255	; 0xff
   b53f2:	fa46 f60e 	asrcc.w	r6, r6, lr
   b53f6:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b53f8:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b53fc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b53fe:	bf0c      	ite	eq
   b5400:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b5402:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b5404:	42ab      	cmp	r3, r5
   b5406:	f80c 6002 	strb.w	r6, [ip, r2]
   b540a:	d328      	bcc.n	b545e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b540c:	3908      	subs	r1, #8
   b540e:	440b      	add	r3, r1
   b5410:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b5412:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b5414:	2b07      	cmp	r3, #7
   b5416:	d919      	bls.n	b544c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5418:	2c01      	cmp	r4, #1
   b541a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b541e:	bf18      	it	ne
   b5420:	2500      	movne	r5, #0
   b5422:	b2ed      	uxtb	r5, r5
   b5424:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5428:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b542a:	3a08      	subs	r2, #8
   b542c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b542e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5430:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5434:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5438:	d8f7      	bhi.n	b542a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b543a:	f1a3 0208 	sub.w	r2, r3, #8
   b543e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5442:	3201      	adds	r2, #1
   b5444:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5448:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b544c:	b13b      	cbz	r3, b545e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b544e:	4a26      	ldr	r2, [pc, #152]	; (b54e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b5450:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b5452:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5454:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5456:	bf0c      	ite	eq
   b5458:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b545a:	4393      	bicne	r3, r2
   b545c:	7003      	strb	r3, [r0, #0]
}
   b545e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5460:	8945      	ldrh	r5, [r0, #10]
   b5462:	43d2      	mvns	r2, r2
   b5464:	442a      	add	r2, r5
      x -= (w-1);
   b5466:	18cd      	adds	r5, r1, r3
   b5468:	8901      	ldrh	r1, [r0, #8]
   b546a:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b546c:	b212      	sxth	r2, r2
      x -= (w-1);
   b546e:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b5470:	2a00      	cmp	r2, #0
   b5472:	dbf4      	blt.n	b545e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5474:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5478:	4295      	cmp	r5, r2
   b547a:	ddf0      	ble.n	b545e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b547c:	2900      	cmp	r1, #0
    w += x;
   b547e:	bfbe      	ittt	lt
   b5480:	185b      	addlt	r3, r3, r1
   b5482:	b21b      	sxthlt	r3, r3
    x = 0;
   b5484:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b5486:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b548a:	18ce      	adds	r6, r1, r3
   b548c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b548e:	bfc4      	itt	gt
   b5490:	1a6b      	subgt	r3, r5, r1
   b5492:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5494:	2b00      	cmp	r3, #0
   b5496:	dde2      	ble.n	b545e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5498:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b549a:	2580      	movs	r5, #128	; 0x80
   b549c:	fb10 1105 	smlabb	r1, r0, r5, r1
   b54a0:	4812      	ldr	r0, [pc, #72]	; (b54ec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b54a2:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b54a4:	f002 0007 	and.w	r0, r2, #7
   b54a8:	2201      	movs	r2, #1
   b54aa:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b54ac:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b54ae:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b54b0:	440b      	add	r3, r1
   b54b2:	d10c      	bne.n	b54ce <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b54b4:	428b      	cmp	r3, r1
   b54b6:	d0d2      	beq.n	b545e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b54b8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b54bc:	4310      	orrs	r0, r2
   b54be:	f801 0c01 	strb.w	r0, [r1, #-1]
   b54c2:	e7f7      	b.n	b54b4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b54c4:	18cd      	adds	r5, r1, r3
   b54c6:	8941      	ldrh	r1, [r0, #10]
   b54c8:	1b49      	subs	r1, r1, r5
   b54ca:	b209      	sxth	r1, r1
      break;
   b54cc:	e767      	b.n	b539e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b54ce:	43d2      	mvns	r2, r2
   b54d0:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b54d2:	428b      	cmp	r3, r1
   b54d4:	d0c3      	beq.n	b545e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b54d6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b54da:	4010      	ands	r0, r2
   b54dc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b54e0:	e7f7      	b.n	b54d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b54e2:	bf00      	nop
   b54e4:	2003e170 	.word	0x2003e170
   b54e8:	2003e168 	.word	0x2003e168
   b54ec:	2003e178 	.word	0x2003e178

000b54f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b54f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b54f2:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b54f4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b54f8:	2d02      	cmp	r5, #2
   b54fa:	d034      	beq.n	b5566 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b54fc:	2d03      	cmp	r5, #3
   b54fe:	f000 809b 	beq.w	b5638 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b5502:	2d01      	cmp	r5, #1
   b5504:	d137      	bne.n	b5576 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b5506:	18d5      	adds	r5, r2, r3
   b5508:	8902      	ldrh	r2, [r0, #8]
   b550a:	1b52      	subs	r2, r2, r5
   b550c:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b550e:	2900      	cmp	r1, #0
   b5510:	f2c0 8091 	blt.w	b5636 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5514:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5518:	428d      	cmp	r5, r1
   b551a:	f340 808c 	ble.w	b5636 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b551e:	2a00      	cmp	r2, #0
    w += x;
   b5520:	bfbe      	ittt	lt
   b5522:	189b      	addlt	r3, r3, r2
   b5524:	b21b      	sxthlt	r3, r3
    x = 0;
   b5526:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b5528:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b552c:	18d6      	adds	r6, r2, r3
   b552e:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5530:	bfc4      	itt	gt
   b5532:	1aab      	subgt	r3, r5, r2
   b5534:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5536:	2b00      	cmp	r3, #0
   b5538:	dd7d      	ble.n	b5636 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b553a:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b553c:	2580      	movs	r5, #128	; 0x80
   b553e:	fb10 2205 	smlabb	r2, r0, r5, r2
   b5542:	4845      	ldr	r0, [pc, #276]	; (b5658 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b5544:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b5546:	f001 0007 	and.w	r0, r1, #7
   b554a:	2101      	movs	r1, #1
   b554c:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b554e:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5550:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b5552:	4413      	add	r3, r2
   b5554:	d175      	bne.n	b5642 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b5556:	429a      	cmp	r2, r3
   b5558:	d06d      	beq.n	b5636 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b555a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b555e:	4308      	orrs	r0, r1
   b5560:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5564:	e7f7      	b.n	b5556 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b5566:	8905      	ldrh	r5, [r0, #8]
   b5568:	43c9      	mvns	r1, r1
   b556a:	4429      	add	r1, r5
      y -= (h-1);
   b556c:	18d5      	adds	r5, r2, r3
   b556e:	8942      	ldrh	r2, [r0, #10]
   b5570:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b5572:	b209      	sxth	r1, r1
      y -= (h-1);
   b5574:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b5576:	2900      	cmp	r1, #0
   b5578:	db5d      	blt.n	b5636 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b557a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b557e:	428d      	cmp	r5, r1
   b5580:	dd59      	ble.n	b5636 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b5582:	2a00      	cmp	r2, #0
    __h += __y;
   b5584:	bfbe      	ittt	lt
   b5586:	189b      	addlt	r3, r3, r2
   b5588:	b21b      	sxthlt	r3, r3
    __y = 0;
   b558a:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b558c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5590:	18d5      	adds	r5, r2, r3
   b5592:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5594:	bfc4      	itt	gt
   b5596:	1a83      	subgt	r3, r0, r2
   b5598:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b559a:	2b00      	cmp	r3, #0
   b559c:	dd4b      	ble.n	b5636 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b559e:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b55a2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5658 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b55a6:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b55aa:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b55ae:	b2db      	uxtb	r3, r3
  pBuf += x;
   b55b0:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b55b4:	d01a      	beq.n	b55ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b55b6:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b55ba:	4e28      	ldr	r6, [pc, #160]	; (b565c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b55bc:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b55be:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b55c0:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b55c2:	bf3f      	itttt	cc
   b55c4:	eba5 0e03 	subcc.w	lr, r5, r3
   b55c8:	26ff      	movcc	r6, #255	; 0xff
   b55ca:	fa46 f60e 	asrcc.w	r6, r6, lr
   b55ce:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b55d0:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b55d4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b55d6:	bf0c      	ite	eq
   b55d8:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b55da:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b55dc:	42ab      	cmp	r3, r5
   b55de:	f80c 6001 	strb.w	r6, [ip, r1]
   b55e2:	d328      	bcc.n	b5636 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b55e4:	3a08      	subs	r2, #8
   b55e6:	4413      	add	r3, r2
   b55e8:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b55ea:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b55ec:	2b07      	cmp	r3, #7
   b55ee:	d919      	bls.n	b5624 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b55f0:	2c01      	cmp	r4, #1
   b55f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b55f6:	bf18      	it	ne
   b55f8:	2500      	movne	r5, #0
   b55fa:	b2ed      	uxtb	r5, r5
   b55fc:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5600:	461a      	mov	r2, r3
      h -= 8;
   b5602:	3a08      	subs	r2, #8
   b5604:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5606:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5608:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b560c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5610:	d8f7      	bhi.n	b5602 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b5612:	f1a3 0208 	sub.w	r2, r3, #8
   b5616:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b561a:	3201      	adds	r2, #1
   b561c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5620:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b5624:	b13b      	cbz	r3, b5636 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b5626:	4a0e      	ldr	r2, [pc, #56]	; (b5660 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5628:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b562a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b562c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b562e:	bf0c      	ite	eq
   b5630:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b5632:	4393      	bicne	r3, r2
   b5634:	7003      	strb	r3, [r0, #0]
}
   b5636:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5638:	8945      	ldrh	r5, [r0, #10]
   b563a:	43c9      	mvns	r1, r1
   b563c:	4429      	add	r1, r5
   b563e:	b209      	sxth	r1, r1
      break;
   b5640:	e765      	b.n	b550e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b5642:	43c9      	mvns	r1, r1
   b5644:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b5646:	429a      	cmp	r2, r3
   b5648:	d0f5      	beq.n	b5636 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b564a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b564e:	4008      	ands	r0, r1
   b5650:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5654:	e7f7      	b.n	b5646 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b5656:	bf00      	nop
   b5658:	2003e178 	.word	0x2003e178
   b565c:	2003e170 	.word	0x2003e170
   b5660:	2003e168 	.word	0x2003e168

000b5664 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b5664:	4770      	bx	lr
	...

000b5668 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b566a:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b566c:	4606      	mov	r6, r0
   b566e:	4614      	mov	r4, r2
   b5670:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5672:	db2d      	blt.n	b56d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5674:	f7ff fe7d 	bl	b5372 <_ZN12Adafruit_GFX5widthEv>
   b5678:	42a8      	cmp	r0, r5
   b567a:	dd29      	ble.n	b56d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b567c:	2c00      	cmp	r4, #0
   b567e:	db27      	blt.n	b56d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5680:	4630      	mov	r0, r6
   b5682:	f7ff fe79 	bl	b5378 <_ZN12Adafruit_GFX6heightEv>
   b5686:	42a0      	cmp	r0, r4
   b5688:	dd22      	ble.n	b56d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b568a:	4630      	mov	r0, r6
   b568c:	f7ff fe61 	bl	b5352 <_ZN12Adafruit_GFX11getRotationEv>
   b5690:	2802      	cmp	r0, #2
   b5692:	d01e      	beq.n	b56d2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b5694:	2803      	cmp	r0, #3
   b5696:	d025      	beq.n	b56e4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5698:	2801      	cmp	r0, #1
   b569a:	d104      	bne.n	b56a6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b569c:	8933      	ldrh	r3, [r6, #8]
   b569e:	43e2      	mvns	r2, r4
   b56a0:	441a      	add	r2, r3
    break;
   b56a2:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b56a4:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b56a6:	2c00      	cmp	r4, #0
   b56a8:	4622      	mov	r2, r4
   b56aa:	bfb8      	it	lt
   b56ac:	1de2      	addlt	r2, r4, #7
   b56ae:	10d2      	asrs	r2, r2, #3
   b56b0:	2180      	movs	r1, #128	; 0x80
   b56b2:	fb12 5501 	smlabb	r5, r2, r1, r5
   b56b6:	490e      	ldr	r1, [pc, #56]	; (b56f0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b56b8:	2201      	movs	r2, #1
   b56ba:	f004 0407 	and.w	r4, r4, #7
   b56be:	574b      	ldrsb	r3, [r1, r5]
   b56c0:	fa02 f404 	lsl.w	r4, r2, r4
   b56c4:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b56c6:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b56c8:	bf0c      	ite	eq
   b56ca:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b56cc:	43a3      	bicne	r3, r4
   b56ce:	554b      	strb	r3, [r1, r5]
}
   b56d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b56d2:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b56d4:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b56d6:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b56d8:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b56da:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b56dc:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b56de:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b56e0:	b224      	sxth	r4, r4
    break;
   b56e2:	e7e0      	b.n	b56a6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b56e4:	8973      	ldrh	r3, [r6, #10]
   b56e6:	3b01      	subs	r3, #1
   b56e8:	1b5b      	subs	r3, r3, r5
    break;
   b56ea:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b56ec:	b21c      	sxth	r4, r3
    break;
   b56ee:	e7da      	b.n	b56a6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b56f0:	2003e178 	.word	0x2003e178

000b56f4 <_ZN16Adafruit_SSD1306D0Ev>:
   b56f4:	b510      	push	{r4, lr}
   b56f6:	2124      	movs	r1, #36	; 0x24
   b56f8:	4604      	mov	r4, r0
   b56fa:	f7fe fcd0 	bl	b409e <_ZdlPvj>
   b56fe:	4620      	mov	r0, r4
   b5700:	bd10      	pop	{r4, pc}
	...

000b5704 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5704:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5706:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5708:	4604      	mov	r4, r0
   b570a:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b570c:	2180      	movs	r1, #128	; 0x80
   b570e:	f7ff fcfd 	bl	b510c <_ZN12Adafruit_GFXC1Ess>
   b5712:	4b06      	ldr	r3, [pc, #24]	; (b572c <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b5714:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b5716:	23ff      	movs	r3, #255	; 0xff
   b5718:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b571c:	7763      	strb	r3, [r4, #29]
   b571e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5722:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b5724:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5728:	4620      	mov	r0, r4
   b572a:	bd38      	pop	{r3, r4, r5, pc}
   b572c:	000be7f0 	.word	0x000be7f0

000b5730 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b5730:	4802      	ldr	r0, [pc, #8]	; (b573c <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b5732:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5736:	2100      	movs	r1, #0
   b5738:	f003 bc44 	b.w	b8fc4 <memset>
   b573c:	2003e178 	.word	0x2003e178

000b5740 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5740:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5742:	4c0b      	ldr	r4, [pc, #44]	; (b5770 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5744:	7821      	ldrb	r1, [r4, #0]
   b5746:	f3bf 8f5b 	dmb	ish
   b574a:	f011 0101 	ands.w	r1, r1, #1
   b574e:	d10b      	bne.n	b5768 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5750:	4620      	mov	r0, r4
   b5752:	9101      	str	r1, [sp, #4]
   b5754:	f7fe fcb2 	bl	b40bc <__cxa_guard_acquire>
   b5758:	9901      	ldr	r1, [sp, #4]
   b575a:	b128      	cbz	r0, b5768 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b575c:	4805      	ldr	r0, [pc, #20]	; (b5774 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b575e:	f000 ff0f 	bl	b6580 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5762:	4620      	mov	r0, r4
   b5764:	f7fe fcaf 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b5768:	4802      	ldr	r0, [pc, #8]	; (b5774 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b576a:	b002      	add	sp, #8
   b576c:	bd10      	pop	{r4, pc}
   b576e:	bf00      	nop
   b5770:	2003e6b8 	.word	0x2003e6b8
   b5774:	2003e6bc 	.word	0x2003e6bc

000b5778 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5778:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b577a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b577e:	b143      	cbz	r3, b5792 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5780:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b5782:	f7ff ffdd 	bl	b5740 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5786:	9901      	ldr	r1, [sp, #4]
}
   b5788:	b003      	add	sp, #12
   b578a:	f85d eb04 	ldr.w	lr, [sp], #4
   b578e:	f000 bfab 	b.w	b66e8 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5792:	460b      	mov	r3, r1
   b5794:	7f81      	ldrb	r1, [r0, #30]
   b5796:	7f40      	ldrb	r0, [r0, #29]
   b5798:	2201      	movs	r2, #1
}
   b579a:	b003      	add	sp, #12
   b579c:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b57a0:	f001 bd04 	b.w	b71ac <shiftOut>

000b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b57a4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b57a6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b57aa:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b57ac:	4604      	mov	r4, r0
   b57ae:	460d      	mov	r5, r1
  if (sid != -1)
   b57b0:	d01d      	beq.n	b57ee <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b57b2:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b57b6:	2101      	movs	r1, #1
   b57b8:	b280      	uxth	r0, r0
   b57ba:	f001 fcde 	bl	b717a <digitalWrite>
    digitalWrite(dc, LOW);
   b57be:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b57c2:	2100      	movs	r1, #0
   b57c4:	b280      	uxth	r0, r0
   b57c6:	f001 fcd8 	bl	b717a <digitalWrite>
    digitalWrite(cs, LOW);
   b57ca:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b57ce:	2100      	movs	r1, #0
   b57d0:	b280      	uxth	r0, r0
   b57d2:	f001 fcd2 	bl	b717a <digitalWrite>
    fastSPIwrite(c);
   b57d6:	4629      	mov	r1, r5
   b57d8:	4620      	mov	r0, r4
   b57da:	f7ff ffcd 	bl	b5778 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b57de:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b57e2:	2101      	movs	r1, #1
}
   b57e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b57e8:	b280      	uxth	r0, r0
   b57ea:	f001 bcc6 	b.w	b717a <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b57ee:	f001 fd1b 	bl	b7228 <_Z19__fetch_global_Wirev>
   b57f2:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b57f6:	f000 fcde 	bl	b61b6 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b57fa:	f001 fd15 	bl	b7228 <_Z19__fetch_global_Wirev>
   b57fe:	6803      	ldr	r3, [r0, #0]
   b5800:	2100      	movs	r1, #0
   b5802:	689b      	ldr	r3, [r3, #8]
   b5804:	4798      	blx	r3
    Wire.write(c);
   b5806:	f001 fd0f 	bl	b7228 <_Z19__fetch_global_Wirev>
   b580a:	6803      	ldr	r3, [r0, #0]
   b580c:	4629      	mov	r1, r5
   b580e:	689b      	ldr	r3, [r3, #8]
   b5810:	4798      	blx	r3
    Wire.endTransmission();
   b5812:	f001 fd09 	bl	b7228 <_Z19__fetch_global_Wirev>
}
   b5816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b581a:	f000 bcd3 	b.w	b61c4 <_ZN7TwoWire15endTransmissionEv>
	...

000b5820 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b5822:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5824:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b5826:	f7ff ffbd 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b582a:	2100      	movs	r1, #0
   b582c:	4620      	mov	r0, r4
   b582e:	f7ff ffb9 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b5832:	217f      	movs	r1, #127	; 0x7f
   b5834:	4620      	mov	r0, r4
   b5836:	f7ff ffb5 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b583a:	2122      	movs	r1, #34	; 0x22
   b583c:	4620      	mov	r0, r4
   b583e:	f7ff ffb1 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b5842:	2100      	movs	r1, #0
   b5844:	4620      	mov	r0, r4
   b5846:	f7ff ffad 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b584a:	2107      	movs	r1, #7
   b584c:	4620      	mov	r0, r4
   b584e:	f7ff ffa9 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5852:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5856:	4f29      	ldr	r7, [pc, #164]	; (b58fc <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5858:	3301      	adds	r3, #1
   b585a:	d02a      	beq.n	b58b2 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b585c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5860:	2101      	movs	r1, #1
   b5862:	b280      	uxth	r0, r0
   b5864:	f001 fc89 	bl	b717a <digitalWrite>
    digitalWrite(dc, HIGH);
   b5868:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b586c:	2101      	movs	r1, #1
   b586e:	b280      	uxth	r0, r0
   b5870:	f001 fc83 	bl	b717a <digitalWrite>
    digitalWrite(cs, LOW);
   b5874:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5878:	2100      	movs	r1, #0
   b587a:	b280      	uxth	r0, r0
   b587c:	f001 fc7d 	bl	b717a <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5880:	2001      	movs	r0, #1
   b5882:	f000 f925 	bl	b5ad0 <HAL_Delay_Microseconds>
   b5886:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b588a:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b588c:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5890:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5892:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5894:	f7ff ff70 	bl	b5778 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5898:	2d00      	cmp	r5, #0
   b589a:	d1f6      	bne.n	b588a <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b589c:	2001      	movs	r0, #1
   b589e:	f000 f917 	bl	b5ad0 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b58a2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b58a6:	2101      	movs	r1, #1
}
   b58a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b58ac:	b280      	uxth	r0, r0
   b58ae:	f001 bc64 	b.w	b717a <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b58b2:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b58b4:	f001 fcb8 	bl	b7228 <_Z19__fetch_global_Wirev>
   b58b8:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b58bc:	f000 fc7b 	bl	b61b6 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b58c0:	f001 fcb2 	bl	b7228 <_Z19__fetch_global_Wirev>
   b58c4:	6803      	ldr	r3, [r0, #0]
   b58c6:	2140      	movs	r1, #64	; 0x40
   b58c8:	689b      	ldr	r3, [r3, #8]
   b58ca:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b58cc:	f105 0610 	add.w	r6, r5, #16
   b58d0:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b58d2:	f001 fca9 	bl	b7228 <_Z19__fetch_global_Wirev>
   b58d6:	6803      	ldr	r3, [r0, #0]
   b58d8:	5d79      	ldrb	r1, [r7, r5]
   b58da:	689b      	ldr	r3, [r3, #8]
   b58dc:	4798      	blx	r3
		i++;
   b58de:	1c6b      	adds	r3, r5, #1
   b58e0:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b58e2:	42ae      	cmp	r6, r5
   b58e4:	d1f5      	bne.n	b58d2 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b58e6:	f001 fc9f 	bl	b7228 <_Z19__fetch_global_Wirev>
   b58ea:	f000 fc6b 	bl	b61c4 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b58ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b58f2:	d100      	bne.n	b58f6 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b58f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b58f6:	4635      	mov	r5, r6
   b58f8:	e7dc      	b.n	b58b4 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b58fa:	bf00      	nop
   b58fc:	2003e178 	.word	0x2003e178

000b5900 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5900:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b5902:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b5906:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5908:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b590a:	4604      	mov	r4, r0
   b590c:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b590e:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5910:	f000 80c9 	beq.w	b5aa6 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5914:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5918:	2101      	movs	r1, #1
   b591a:	b280      	uxth	r0, r0
   b591c:	f001 fc1c 	bl	b7158 <pinMode>
    pinMode(cs, OUTPUT);
   b5920:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5924:	2101      	movs	r1, #1
   b5926:	b280      	uxth	r0, r0
   b5928:	f001 fc16 	bl	b7158 <pinMode>
    if (!hwSPI){
   b592c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5930:	2b00      	cmp	r3, #0
   b5932:	f000 80a6 	beq.w	b5a82 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5936:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b593a:	2101      	movs	r1, #1
   b593c:	b280      	uxth	r0, r0
   b593e:	f001 fc1c 	bl	b717a <digitalWrite>
        instance().setBitOrder(order);
   b5942:	f7ff fefd 	bl	b5740 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5946:	2101      	movs	r1, #1
   b5948:	f000 fe38 	bl	b65bc <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b594c:	f7ff fef8 	bl	b5740 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5950:	2110      	movs	r1, #16
   b5952:	f000 fea3 	bl	b669c <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5956:	f7ff fef3 	bl	b5740 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b595a:	2100      	movs	r1, #0
   b595c:	f000 fe42 	bl	b65e4 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5960:	f7ff feee 	bl	b5740 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5964:	f000 fe16 	bl	b6594 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5968:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b596c:	2101      	movs	r1, #1
   b596e:	b280      	uxth	r0, r0
   b5970:	f001 fbf2 	bl	b7158 <pinMode>
  digitalWrite(rst, HIGH);
   b5974:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5978:	2101      	movs	r1, #1
   b597a:	b280      	uxth	r0, r0
   b597c:	f001 fbfd 	bl	b717a <digitalWrite>
  delay(1);
   b5980:	2001      	movs	r0, #1
   b5982:	f000 fb51 	bl	b6028 <delay>
  digitalWrite(rst, LOW);
   b5986:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b598a:	2100      	movs	r1, #0
   b598c:	b280      	uxth	r0, r0
   b598e:	f001 fbf4 	bl	b717a <digitalWrite>
  delay(10);
   b5992:	200a      	movs	r0, #10
   b5994:	f000 fb48 	bl	b6028 <delay>
  digitalWrite(rst, HIGH);
   b5998:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b599c:	2101      	movs	r1, #1
   b599e:	b280      	uxth	r0, r0
   b59a0:	f001 fbeb 	bl	b717a <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b59a4:	4620      	mov	r0, r4
   b59a6:	21ae      	movs	r1, #174	; 0xae
   b59a8:	f7ff fefc 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b59ac:	4620      	mov	r0, r4
   b59ae:	21d5      	movs	r1, #213	; 0xd5
   b59b0:	f7ff fef8 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b59b4:	4620      	mov	r0, r4
   b59b6:	2180      	movs	r1, #128	; 0x80
   b59b8:	f7ff fef4 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b59bc:	4620      	mov	r0, r4
   b59be:	21a8      	movs	r1, #168	; 0xa8
   b59c0:	f7ff fef0 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b59c4:	4620      	mov	r0, r4
   b59c6:	213f      	movs	r1, #63	; 0x3f
   b59c8:	f7ff feec 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b59cc:	4620      	mov	r0, r4
   b59ce:	21d3      	movs	r1, #211	; 0xd3
   b59d0:	f7ff fee8 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b59d4:	4620      	mov	r0, r4
   b59d6:	2100      	movs	r1, #0
   b59d8:	f7ff fee4 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b59dc:	4620      	mov	r0, r4
   b59de:	2140      	movs	r1, #64	; 0x40
   b59e0:	f7ff fee0 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b59e4:	218d      	movs	r1, #141	; 0x8d
   b59e6:	4620      	mov	r0, r4
   b59e8:	f7ff fedc 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b59ec:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b59ee:	bf0c      	ite	eq
   b59f0:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b59f2:	2114      	movne	r1, #20
   b59f4:	4620      	mov	r0, r4
   b59f6:	f7ff fed5 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b59fa:	4620      	mov	r0, r4
   b59fc:	2120      	movs	r1, #32
   b59fe:	f7ff fed1 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b5a02:	4620      	mov	r0, r4
   b5a04:	2100      	movs	r1, #0
   b5a06:	f7ff fecd 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b5a0a:	4620      	mov	r0, r4
   b5a0c:	21a1      	movs	r1, #161	; 0xa1
   b5a0e:	f7ff fec9 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b5a12:	4620      	mov	r0, r4
   b5a14:	21c8      	movs	r1, #200	; 0xc8
   b5a16:	f7ff fec5 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b5a1a:	4620      	mov	r0, r4
   b5a1c:	21da      	movs	r1, #218	; 0xda
   b5a1e:	f7ff fec1 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b5a22:	4620      	mov	r0, r4
   b5a24:	2112      	movs	r1, #18
   b5a26:	f7ff febd 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b5a2a:	2181      	movs	r1, #129	; 0x81
   b5a2c:	4620      	mov	r0, r4
   b5a2e:	f7ff feb9 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5a32:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5a34:	bf0c      	ite	eq
   b5a36:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5a38:	21cf      	movne	r1, #207	; 0xcf
   b5a3a:	4620      	mov	r0, r4
   b5a3c:	f7ff feb2 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5a40:	21d9      	movs	r1, #217	; 0xd9
   b5a42:	4620      	mov	r0, r4
   b5a44:	f7ff feae 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5a48:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b5a4a:	bf0c      	ite	eq
   b5a4c:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b5a4e:	21f1      	movne	r1, #241	; 0xf1
   b5a50:	4620      	mov	r0, r4
   b5a52:	f7ff fea7 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5a56:	4620      	mov	r0, r4
   b5a58:	21db      	movs	r1, #219	; 0xdb
   b5a5a:	f7ff fea3 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b5a5e:	4620      	mov	r0, r4
   b5a60:	2140      	movs	r1, #64	; 0x40
   b5a62:	f7ff fe9f 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5a66:	4620      	mov	r0, r4
   b5a68:	21a4      	movs	r1, #164	; 0xa4
   b5a6a:	f7ff fe9b 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b5a6e:	4620      	mov	r0, r4
   b5a70:	21a6      	movs	r1, #166	; 0xa6
   b5a72:	f7ff fe97 	bl	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5a76:	4620      	mov	r0, r4
   b5a78:	21af      	movs	r1, #175	; 0xaf
}
   b5a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5a7e:	f7ff be91 	b.w	b57a4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b5a82:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5a86:	2101      	movs	r1, #1
   b5a88:	b280      	uxth	r0, r0
   b5a8a:	f001 fb65 	bl	b7158 <pinMode>
    	pinMode(sclk, OUTPUT);
   b5a8e:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5a92:	2101      	movs	r1, #1
   b5a94:	b280      	uxth	r0, r0
   b5a96:	f001 fb5f 	bl	b7158 <pinMode>
    if (hwSPI){
   b5a9a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5a9e:	2b00      	cmp	r3, #0
   b5aa0:	f43f af62 	beq.w	b5968 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b5aa4:	e747      	b.n	b5936 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b5aa6:	f001 fbbf 	bl	b7228 <_Z19__fetch_global_Wirev>
   b5aaa:	f000 fb51 	bl	b6150 <_ZN7TwoWire5beginEv>
   b5aae:	e75b      	b.n	b5968 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b5ab0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5ab0:	b508      	push	{r3, lr}
   b5ab2:	4b02      	ldr	r3, [pc, #8]	; (b5abc <os_mutex_recursive_create+0xc>)
   b5ab4:	681b      	ldr	r3, [r3, #0]
   b5ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ab8:	9301      	str	r3, [sp, #4]
   b5aba:	bd08      	pop	{r3, pc}
   b5abc:	00030248 	.word	0x00030248

000b5ac0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b02      	ldr	r3, [pc, #8]	; (b5acc <HAL_RNG_GetRandomNumber+0xc>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	685b      	ldr	r3, [r3, #4]
   b5ac8:	9301      	str	r3, [sp, #4]
   b5aca:	bd08      	pop	{r3, pc}
   b5acc:	00030218 	.word	0x00030218

000b5ad0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5ad0:	b508      	push	{r3, lr}
   b5ad2:	4b02      	ldr	r3, [pc, #8]	; (b5adc <HAL_Delay_Microseconds+0xc>)
   b5ad4:	681b      	ldr	r3, [r3, #0]
   b5ad6:	68db      	ldr	r3, [r3, #12]
   b5ad8:	9301      	str	r3, [sp, #4]
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	00030218 	.word	0x00030218

000b5ae0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5ae0:	b508      	push	{r3, lr}
   b5ae2:	4b02      	ldr	r3, [pc, #8]	; (b5aec <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5ae4:	681b      	ldr	r3, [r3, #0]
   b5ae6:	691b      	ldr	r3, [r3, #16]
   b5ae8:	9301      	str	r3, [sp, #4]
   b5aea:	bd08      	pop	{r3, pc}
   b5aec:	00030218 	.word	0x00030218

000b5af0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5af0:	b508      	push	{r3, lr}
   b5af2:	4b02      	ldr	r3, [pc, #8]	; (b5afc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5af4:	681b      	ldr	r3, [r3, #0]
   b5af6:	695b      	ldr	r3, [r3, #20]
   b5af8:	9301      	str	r3, [sp, #4]
   b5afa:	bd08      	pop	{r3, pc}
   b5afc:	00030218 	.word	0x00030218

000b5b00 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b5b00:	b508      	push	{r3, lr}
   b5b02:	4b02      	ldr	r3, [pc, #8]	; (b5b0c <hal_timer_millis+0xc>)
   b5b04:	681b      	ldr	r3, [r3, #0]
   b5b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b5b08:	9301      	str	r3, [sp, #4]
   b5b0a:	bd08      	pop	{r3, pc}
   b5b0c:	00030218 	.word	0x00030218

000b5b10 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b5b10:	b508      	push	{r3, lr}
   b5b12:	4b02      	ldr	r3, [pc, #8]	; (b5b1c <HAL_Pin_Map+0xc>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	681b      	ldr	r3, [r3, #0]
   b5b18:	9301      	str	r3, [sp, #4]
   b5b1a:	bd08      	pop	{r3, pc}
   b5b1c:	0003022c 	.word	0x0003022c

000b5b20 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5b20:	b508      	push	{r3, lr}
   b5b22:	4b02      	ldr	r3, [pc, #8]	; (b5b2c <HAL_Pin_Mode+0xc>)
   b5b24:	681b      	ldr	r3, [r3, #0]
   b5b26:	689b      	ldr	r3, [r3, #8]
   b5b28:	9301      	str	r3, [sp, #4]
   b5b2a:	bd08      	pop	{r3, pc}
   b5b2c:	0003022c 	.word	0x0003022c

000b5b30 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5b30:	b508      	push	{r3, lr}
   b5b32:	4b02      	ldr	r3, [pc, #8]	; (b5b3c <HAL_Get_Pin_Mode+0xc>)
   b5b34:	681b      	ldr	r3, [r3, #0]
   b5b36:	68db      	ldr	r3, [r3, #12]
   b5b38:	9301      	str	r3, [sp, #4]
   b5b3a:	bd08      	pop	{r3, pc}
   b5b3c:	0003022c 	.word	0x0003022c

000b5b40 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5b40:	b508      	push	{r3, lr}
   b5b42:	4b02      	ldr	r3, [pc, #8]	; (b5b4c <HAL_GPIO_Write+0xc>)
   b5b44:	681b      	ldr	r3, [r3, #0]
   b5b46:	691b      	ldr	r3, [r3, #16]
   b5b48:	9301      	str	r3, [sp, #4]
   b5b4a:	bd08      	pop	{r3, pc}
   b5b4c:	0003022c 	.word	0x0003022c

000b5b50 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5b50:	b508      	push	{r3, lr}
   b5b52:	4b02      	ldr	r3, [pc, #8]	; (b5b5c <hal_i2c_begin+0xc>)
   b5b54:	681b      	ldr	r3, [r3, #0]
   b5b56:	68db      	ldr	r3, [r3, #12]
   b5b58:	9301      	str	r3, [sp, #4]
   b5b5a:	bd08      	pop	{r3, pc}
   b5b5c:	00030228 	.word	0x00030228

000b5b60 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5b60:	b508      	push	{r3, lr}
   b5b62:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <hal_i2c_begin_transmission+0xc>)
   b5b64:	681b      	ldr	r3, [r3, #0]
   b5b66:	699b      	ldr	r3, [r3, #24]
   b5b68:	9301      	str	r3, [sp, #4]
   b5b6a:	bd08      	pop	{r3, pc}
   b5b6c:	00030228 	.word	0x00030228

000b5b70 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5b70:	b508      	push	{r3, lr}
   b5b72:	4b02      	ldr	r3, [pc, #8]	; (b5b7c <hal_i2c_end_transmission+0xc>)
   b5b74:	681b      	ldr	r3, [r3, #0]
   b5b76:	69db      	ldr	r3, [r3, #28]
   b5b78:	9301      	str	r3, [sp, #4]
   b5b7a:	bd08      	pop	{r3, pc}
   b5b7c:	00030228 	.word	0x00030228

000b5b80 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5b80:	b508      	push	{r3, lr}
   b5b82:	4b02      	ldr	r3, [pc, #8]	; (b5b8c <hal_i2c_write+0xc>)
   b5b84:	681b      	ldr	r3, [r3, #0]
   b5b86:	6a1b      	ldr	r3, [r3, #32]
   b5b88:	9301      	str	r3, [sp, #4]
   b5b8a:	bd08      	pop	{r3, pc}
   b5b8c:	00030228 	.word	0x00030228

000b5b90 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5b90:	b508      	push	{r3, lr}
   b5b92:	4b02      	ldr	r3, [pc, #8]	; (b5b9c <hal_i2c_available+0xc>)
   b5b94:	681b      	ldr	r3, [r3, #0]
   b5b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5b98:	9301      	str	r3, [sp, #4]
   b5b9a:	bd08      	pop	{r3, pc}
   b5b9c:	00030228 	.word	0x00030228

000b5ba0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5ba0:	b508      	push	{r3, lr}
   b5ba2:	4b02      	ldr	r3, [pc, #8]	; (b5bac <hal_i2c_read+0xc>)
   b5ba4:	681b      	ldr	r3, [r3, #0]
   b5ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ba8:	9301      	str	r3, [sp, #4]
   b5baa:	bd08      	pop	{r3, pc}
   b5bac:	00030228 	.word	0x00030228

000b5bb0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5bb0:	b508      	push	{r3, lr}
   b5bb2:	4b02      	ldr	r3, [pc, #8]	; (b5bbc <hal_i2c_peek+0xc>)
   b5bb4:	681b      	ldr	r3, [r3, #0]
   b5bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5bb8:	9301      	str	r3, [sp, #4]
   b5bba:	bd08      	pop	{r3, pc}
   b5bbc:	00030228 	.word	0x00030228

000b5bc0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5bc0:	b508      	push	{r3, lr}
   b5bc2:	4b02      	ldr	r3, [pc, #8]	; (b5bcc <hal_i2c_flush+0xc>)
   b5bc4:	681b      	ldr	r3, [r3, #0]
   b5bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5bc8:	9301      	str	r3, [sp, #4]
   b5bca:	bd08      	pop	{r3, pc}
   b5bcc:	00030228 	.word	0x00030228

000b5bd0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5bd0:	b508      	push	{r3, lr}
   b5bd2:	4b02      	ldr	r3, [pc, #8]	; (b5bdc <hal_i2c_is_enabled+0xc>)
   b5bd4:	681b      	ldr	r3, [r3, #0]
   b5bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5bd8:	9301      	str	r3, [sp, #4]
   b5bda:	bd08      	pop	{r3, pc}
   b5bdc:	00030228 	.word	0x00030228

000b5be0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5be0:	b508      	push	{r3, lr}
   b5be2:	4b02      	ldr	r3, [pc, #8]	; (b5bec <hal_i2c_init+0xc>)
   b5be4:	681b      	ldr	r3, [r3, #0]
   b5be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5be8:	9301      	str	r3, [sp, #4]
   b5bea:	bd08      	pop	{r3, pc}
   b5bec:	00030228 	.word	0x00030228

000b5bf0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5bf0:	b508      	push	{r3, lr}
   b5bf2:	4b02      	ldr	r3, [pc, #8]	; (b5bfc <hal_i2c_request_ex+0xc>)
   b5bf4:	681b      	ldr	r3, [r3, #0]
   b5bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5bf8:	9301      	str	r3, [sp, #4]
   b5bfa:	bd08      	pop	{r3, pc}
   b5bfc:	00030228 	.word	0x00030228

000b5c00 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5c00:	b508      	push	{r3, lr}
   b5c02:	4b02      	ldr	r3, [pc, #8]	; (b5c0c <if_index_to_name+0xc>)
   b5c04:	681b      	ldr	r3, [r3, #0]
   b5c06:	695b      	ldr	r3, [r3, #20]
   b5c08:	9301      	str	r3, [sp, #4]
   b5c0a:	bd08      	pop	{r3, pc}
   b5c0c:	0003026c 	.word	0x0003026c

000b5c10 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5c10:	b508      	push	{r3, lr}
   b5c12:	4b02      	ldr	r3, [pc, #8]	; (b5c1c <inet_inet_ntop+0xc>)
   b5c14:	681b      	ldr	r3, [r3, #0]
   b5c16:	695b      	ldr	r3, [r3, #20]
   b5c18:	9301      	str	r3, [sp, #4]
   b5c1a:	bd08      	pop	{r3, pc}
   b5c1c:	00030264 	.word	0x00030264

000b5c20 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5c20:	b508      	push	{r3, lr}
   b5c22:	4b02      	ldr	r3, [pc, #8]	; (b5c2c <inet_htonl+0xc>)
   b5c24:	681b      	ldr	r3, [r3, #0]
   b5c26:	6a1b      	ldr	r3, [r3, #32]
   b5c28:	9301      	str	r3, [sp, #4]
   b5c2a:	bd08      	pop	{r3, pc}
   b5c2c:	00030264 	.word	0x00030264

000b5c30 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5c30:	b508      	push	{r3, lr}
   b5c32:	4b02      	ldr	r3, [pc, #8]	; (b5c3c <inet_htons+0xc>)
   b5c34:	681b      	ldr	r3, [r3, #0]
   b5c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c38:	9301      	str	r3, [sp, #4]
   b5c3a:	bd08      	pop	{r3, pc}
   b5c3c:	00030264 	.word	0x00030264

000b5c40 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5c40:	b508      	push	{r3, lr}
   b5c42:	4b02      	ldr	r3, [pc, #8]	; (b5c4c <netdb_freeaddrinfo+0xc>)
   b5c44:	681b      	ldr	r3, [r3, #0]
   b5c46:	689b      	ldr	r3, [r3, #8]
   b5c48:	9301      	str	r3, [sp, #4]
   b5c4a:	bd08      	pop	{r3, pc}
   b5c4c:	00030268 	.word	0x00030268

000b5c50 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5c50:	b508      	push	{r3, lr}
   b5c52:	4b02      	ldr	r3, [pc, #8]	; (b5c5c <netdb_getaddrinfo+0xc>)
   b5c54:	681b      	ldr	r3, [r3, #0]
   b5c56:	68db      	ldr	r3, [r3, #12]
   b5c58:	9301      	str	r3, [sp, #4]
   b5c5a:	bd08      	pop	{r3, pc}
   b5c5c:	00030268 	.word	0x00030268

000b5c60 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5c60:	b508      	push	{r3, lr}
   b5c62:	4b02      	ldr	r3, [pc, #8]	; (b5c6c <sock_setsockopt+0xc>)
   b5c64:	681b      	ldr	r3, [r3, #0]
   b5c66:	699b      	ldr	r3, [r3, #24]
   b5c68:	9301      	str	r3, [sp, #4]
   b5c6a:	bd08      	pop	{r3, pc}
   b5c6c:	00030238 	.word	0x00030238

000b5c70 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5c70:	b508      	push	{r3, lr}
   b5c72:	4b02      	ldr	r3, [pc, #8]	; (b5c7c <sock_close+0xc>)
   b5c74:	681b      	ldr	r3, [r3, #0]
   b5c76:	69db      	ldr	r3, [r3, #28]
   b5c78:	9301      	str	r3, [sp, #4]
   b5c7a:	bd08      	pop	{r3, pc}
   b5c7c:	00030238 	.word	0x00030238

000b5c80 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5c80:	b508      	push	{r3, lr}
   b5c82:	4b02      	ldr	r3, [pc, #8]	; (b5c8c <sock_connect+0xc>)
   b5c84:	681b      	ldr	r3, [r3, #0]
   b5c86:	6a1b      	ldr	r3, [r3, #32]
   b5c88:	9301      	str	r3, [sp, #4]
   b5c8a:	bd08      	pop	{r3, pc}
   b5c8c:	00030238 	.word	0x00030238

000b5c90 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5c90:	b508      	push	{r3, lr}
   b5c92:	4b02      	ldr	r3, [pc, #8]	; (b5c9c <sock_recv+0xc>)
   b5c94:	681b      	ldr	r3, [r3, #0]
   b5c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c98:	9301      	str	r3, [sp, #4]
   b5c9a:	bd08      	pop	{r3, pc}
   b5c9c:	00030238 	.word	0x00030238

000b5ca0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5ca0:	b508      	push	{r3, lr}
   b5ca2:	4b02      	ldr	r3, [pc, #8]	; (b5cac <sock_send+0xc>)
   b5ca4:	681b      	ldr	r3, [r3, #0]
   b5ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ca8:	9301      	str	r3, [sp, #4]
   b5caa:	bd08      	pop	{r3, pc}
   b5cac:	00030238 	.word	0x00030238

000b5cb0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5cb0:	b508      	push	{r3, lr}
   b5cb2:	4b02      	ldr	r3, [pc, #8]	; (b5cbc <sock_socket+0xc>)
   b5cb4:	681b      	ldr	r3, [r3, #0]
   b5cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5cb8:	9301      	str	r3, [sp, #4]
   b5cba:	bd08      	pop	{r3, pc}
   b5cbc:	00030238 	.word	0x00030238

000b5cc0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5cc0:	b508      	push	{r3, lr}
   b5cc2:	4b02      	ldr	r3, [pc, #8]	; (b5ccc <hal_spi_begin+0xc>)
   b5cc4:	681b      	ldr	r3, [r3, #0]
   b5cc6:	681b      	ldr	r3, [r3, #0]
   b5cc8:	9301      	str	r3, [sp, #4]
   b5cca:	bd08      	pop	{r3, pc}
   b5ccc:	00030230 	.word	0x00030230

000b5cd0 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5cd0:	b508      	push	{r3, lr}
   b5cd2:	4b02      	ldr	r3, [pc, #8]	; (b5cdc <hal_spi_set_bit_order+0xc>)
   b5cd4:	681b      	ldr	r3, [r3, #0]
   b5cd6:	689b      	ldr	r3, [r3, #8]
   b5cd8:	9301      	str	r3, [sp, #4]
   b5cda:	bd08      	pop	{r3, pc}
   b5cdc:	00030230 	.word	0x00030230

000b5ce0 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5ce0:	b508      	push	{r3, lr}
   b5ce2:	4b02      	ldr	r3, [pc, #8]	; (b5cec <hal_spi_set_data_mode+0xc>)
   b5ce4:	681b      	ldr	r3, [r3, #0]
   b5ce6:	68db      	ldr	r3, [r3, #12]
   b5ce8:	9301      	str	r3, [sp, #4]
   b5cea:	bd08      	pop	{r3, pc}
   b5cec:	00030230 	.word	0x00030230

000b5cf0 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5cf0:	b508      	push	{r3, lr}
   b5cf2:	4b02      	ldr	r3, [pc, #8]	; (b5cfc <hal_spi_set_clock_divider+0xc>)
   b5cf4:	681b      	ldr	r3, [r3, #0]
   b5cf6:	691b      	ldr	r3, [r3, #16]
   b5cf8:	9301      	str	r3, [sp, #4]
   b5cfa:	bd08      	pop	{r3, pc}
   b5cfc:	00030230 	.word	0x00030230

000b5d00 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5d00:	b508      	push	{r3, lr}
   b5d02:	4b02      	ldr	r3, [pc, #8]	; (b5d0c <hal_spi_transfer+0xc>)
   b5d04:	681b      	ldr	r3, [r3, #0]
   b5d06:	695b      	ldr	r3, [r3, #20]
   b5d08:	9301      	str	r3, [sp, #4]
   b5d0a:	bd08      	pop	{r3, pc}
   b5d0c:	00030230 	.word	0x00030230

000b5d10 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5d10:	b508      	push	{r3, lr}
   b5d12:	4b02      	ldr	r3, [pc, #8]	; (b5d1c <hal_spi_init+0xc>)
   b5d14:	681b      	ldr	r3, [r3, #0]
   b5d16:	69db      	ldr	r3, [r3, #28]
   b5d18:	9301      	str	r3, [sp, #4]
   b5d1a:	bd08      	pop	{r3, pc}
   b5d1c:	00030230 	.word	0x00030230

000b5d20 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5d20:	b508      	push	{r3, lr}
   b5d22:	4b02      	ldr	r3, [pc, #8]	; (b5d2c <hal_spi_is_enabled+0xc>)
   b5d24:	681b      	ldr	r3, [r3, #0]
   b5d26:	6a1b      	ldr	r3, [r3, #32]
   b5d28:	9301      	str	r3, [sp, #4]
   b5d2a:	bd08      	pop	{r3, pc}
   b5d2c:	00030230 	.word	0x00030230

000b5d30 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5d30:	b508      	push	{r3, lr}
   b5d32:	4b02      	ldr	r3, [pc, #8]	; (b5d3c <hal_spi_info+0xc>)
   b5d34:	681b      	ldr	r3, [r3, #0]
   b5d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5d38:	9301      	str	r3, [sp, #4]
   b5d3a:	bd08      	pop	{r3, pc}
   b5d3c:	00030230 	.word	0x00030230

000b5d40 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5d40:	b508      	push	{r3, lr}
   b5d42:	4b02      	ldr	r3, [pc, #8]	; (b5d4c <hal_spi_acquire+0xc>)
   b5d44:	681b      	ldr	r3, [r3, #0]
   b5d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d48:	9301      	str	r3, [sp, #4]
   b5d4a:	bd08      	pop	{r3, pc}
   b5d4c:	00030230 	.word	0x00030230

000b5d50 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <hal_spi_release+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	00030230 	.word	0x00030230

000b5d60 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <hal_usart_write+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	68db      	ldr	r3, [r3, #12]
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	0003023c 	.word	0x0003023c

000b5d70 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <hal_usart_available+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	691b      	ldr	r3, [r3, #16]
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	0003023c 	.word	0x0003023c

000b5d80 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <hal_usart_read+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	695b      	ldr	r3, [r3, #20]
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	0003023c 	.word	0x0003023c

000b5d90 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <hal_usart_peek+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	699b      	ldr	r3, [r3, #24]
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	0003023c 	.word	0x0003023c

000b5da0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <hal_usart_flush+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	69db      	ldr	r3, [r3, #28]
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	0003023c 	.word	0x0003023c

000b5db0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <hal_usart_is_enabled+0xc>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	6a1b      	ldr	r3, [r3, #32]
   b5db8:	9301      	str	r3, [sp, #4]
   b5dba:	bd08      	pop	{r3, pc}
   b5dbc:	0003023c 	.word	0x0003023c

000b5dc0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5dc0:	b508      	push	{r3, lr}
   b5dc2:	4b02      	ldr	r3, [pc, #8]	; (b5dcc <hal_usart_available_data_for_write+0xc>)
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5dc8:	9301      	str	r3, [sp, #4]
   b5dca:	bd08      	pop	{r3, pc}
   b5dcc:	0003023c 	.word	0x0003023c

000b5dd0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5dd0:	b508      	push	{r3, lr}
   b5dd2:	4b02      	ldr	r3, [pc, #8]	; (b5ddc <hal_usart_init_ex+0xc>)
   b5dd4:	681b      	ldr	r3, [r3, #0]
   b5dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5dd8:	9301      	str	r3, [sp, #4]
   b5dda:	bd08      	pop	{r3, pc}
   b5ddc:	0003023c 	.word	0x0003023c

000b5de0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5de0:	b508      	push	{r3, lr}
   b5de2:	4b02      	ldr	r3, [pc, #8]	; (b5dec <HAL_USB_USART_Init+0xc>)
   b5de4:	681b      	ldr	r3, [r3, #0]
   b5de6:	681b      	ldr	r3, [r3, #0]
   b5de8:	9301      	str	r3, [sp, #4]
   b5dea:	bd08      	pop	{r3, pc}
   b5dec:	0003024c 	.word	0x0003024c

000b5df0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <HAL_USB_USART_Begin+0xc>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	685b      	ldr	r3, [r3, #4]
   b5df8:	9301      	str	r3, [sp, #4]
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	0003024c 	.word	0x0003024c

000b5e00 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5e00:	b508      	push	{r3, lr}
   b5e02:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <HAL_USB_USART_Available_Data+0xc>)
   b5e04:	681b      	ldr	r3, [r3, #0]
   b5e06:	691b      	ldr	r3, [r3, #16]
   b5e08:	9301      	str	r3, [sp, #4]
   b5e0a:	bd08      	pop	{r3, pc}
   b5e0c:	0003024c 	.word	0x0003024c

000b5e10 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5e10:	b508      	push	{r3, lr}
   b5e12:	4b02      	ldr	r3, [pc, #8]	; (b5e1c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5e14:	681b      	ldr	r3, [r3, #0]
   b5e16:	695b      	ldr	r3, [r3, #20]
   b5e18:	9301      	str	r3, [sp, #4]
   b5e1a:	bd08      	pop	{r3, pc}
   b5e1c:	0003024c 	.word	0x0003024c

000b5e20 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5e20:	b508      	push	{r3, lr}
   b5e22:	4b02      	ldr	r3, [pc, #8]	; (b5e2c <HAL_USB_USART_Receive_Data+0xc>)
   b5e24:	681b      	ldr	r3, [r3, #0]
   b5e26:	699b      	ldr	r3, [r3, #24]
   b5e28:	9301      	str	r3, [sp, #4]
   b5e2a:	bd08      	pop	{r3, pc}
   b5e2c:	0003024c 	.word	0x0003024c

000b5e30 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b02      	ldr	r3, [pc, #8]	; (b5e3c <HAL_USB_USART_Send_Data+0xc>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	69db      	ldr	r3, [r3, #28]
   b5e38:	9301      	str	r3, [sp, #4]
   b5e3a:	bd08      	pop	{r3, pc}
   b5e3c:	0003024c 	.word	0x0003024c

000b5e40 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b02      	ldr	r3, [pc, #8]	; (b5e4c <HAL_USB_USART_Flush_Data+0xc>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	6a1b      	ldr	r3, [r3, #32]
   b5e48:	9301      	str	r3, [sp, #4]
   b5e4a:	bd08      	pop	{r3, pc}
   b5e4c:	0003024c 	.word	0x0003024c

000b5e50 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b5e50:	b508      	push	{r3, lr}
   b5e52:	4b02      	ldr	r3, [pc, #8]	; (b5e5c <HAL_USB_USART_Is_Connected+0xc>)
   b5e54:	681b      	ldr	r3, [r3, #0]
   b5e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e58:	9301      	str	r3, [sp, #4]
   b5e5a:	bd08      	pop	{r3, pc}
   b5e5c:	0003024c 	.word	0x0003024c

000b5e60 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5e60:	b508      	push	{r3, lr}
   b5e62:	4b02      	ldr	r3, [pc, #8]	; (b5e6c <panic_+0xc>)
   b5e64:	681b      	ldr	r3, [r3, #0]
   b5e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5e68:	9301      	str	r3, [sp, #4]
   b5e6a:	bd08      	pop	{r3, pc}
   b5e6c:	00030260 	.word	0x00030260

000b5e70 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5e70:	b508      	push	{r3, lr}
   b5e72:	4b02      	ldr	r3, [pc, #8]	; (b5e7c <log_message+0xc>)
   b5e74:	681b      	ldr	r3, [r3, #0]
   b5e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5e78:	9301      	str	r3, [sp, #4]
   b5e7a:	bd08      	pop	{r3, pc}
   b5e7c:	00030260 	.word	0x00030260

000b5e80 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5e80:	b508      	push	{r3, lr}
   b5e82:	4b02      	ldr	r3, [pc, #8]	; (b5e8c <set_system_mode+0xc>)
   b5e84:	681b      	ldr	r3, [r3, #0]
   b5e86:	685b      	ldr	r3, [r3, #4]
   b5e88:	9301      	str	r3, [sp, #4]
   b5e8a:	bd08      	pop	{r3, pc}
   b5e8c:	00030220 	.word	0x00030220

000b5e90 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b02      	ldr	r3, [pc, #8]	; (b5e9c <system_delay_ms+0xc>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	695b      	ldr	r3, [r3, #20]
   b5e98:	9301      	str	r3, [sp, #4]
   b5e9a:	bd08      	pop	{r3, pc}
   b5e9c:	00030220 	.word	0x00030220

000b5ea0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5ea0:	b508      	push	{r3, lr}
   b5ea2:	4b03      	ldr	r3, [pc, #12]	; (b5eb0 <system_ctrl_set_app_request_handler+0x10>)
   b5ea4:	681b      	ldr	r3, [r3, #0]
   b5ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5eaa:	9301      	str	r3, [sp, #4]
   b5eac:	bd08      	pop	{r3, pc}
   b5eae:	0000      	.short	0x0000
   b5eb0:	00030220 	.word	0x00030220

000b5eb4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5eb4:	b508      	push	{r3, lr}
   b5eb6:	4b03      	ldr	r3, [pc, #12]	; (b5ec4 <system_ctrl_set_result+0x10>)
   b5eb8:	681b      	ldr	r3, [r3, #0]
   b5eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5ebe:	9301      	str	r3, [sp, #4]
   b5ec0:	bd08      	pop	{r3, pc}
   b5ec2:	0000      	.short	0x0000
   b5ec4:	00030220 	.word	0x00030220

000b5ec8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <spark_process+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	689b      	ldr	r3, [r3, #8]
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	00030244 	.word	0x00030244

000b5ed8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b02      	ldr	r3, [pc, #8]	; (b5ee4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5ee0:	9301      	str	r3, [sp, #4]
   b5ee2:	bd08      	pop	{r3, pc}
   b5ee4:	00030244 	.word	0x00030244

000b5ee8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <network_connect+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	685b      	ldr	r3, [r3, #4]
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	00030240 	.word	0x00030240

000b5ef8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <network_connecting+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	689b      	ldr	r3, [r3, #8]
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	00030240 	.word	0x00030240

000b5f08 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <network_disconnect+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	68db      	ldr	r3, [r3, #12]
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	00030240 	.word	0x00030240

000b5f18 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <network_ready+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	691b      	ldr	r3, [r3, #16]
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	00030240 	.word	0x00030240

000b5f28 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	4b02      	ldr	r3, [pc, #8]	; (b5f34 <network_on+0xc>)
   b5f2c:	681b      	ldr	r3, [r3, #0]
   b5f2e:	695b      	ldr	r3, [r3, #20]
   b5f30:	9301      	str	r3, [sp, #4]
   b5f32:	bd08      	pop	{r3, pc}
   b5f34:	00030240 	.word	0x00030240

000b5f38 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <network_off+0xc>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	699b      	ldr	r3, [r3, #24]
   b5f40:	9301      	str	r3, [sp, #4]
   b5f42:	bd08      	pop	{r3, pc}
   b5f44:	00030240 	.word	0x00030240

000b5f48 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5f48:	b508      	push	{r3, lr}
   b5f4a:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <network_listen+0xc>)
   b5f4c:	681b      	ldr	r3, [r3, #0]
   b5f4e:	69db      	ldr	r3, [r3, #28]
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	bd08      	pop	{r3, pc}
   b5f54:	00030240 	.word	0x00030240

000b5f58 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5f58:	b508      	push	{r3, lr}
   b5f5a:	4b02      	ldr	r3, [pc, #8]	; (b5f64 <network_listening+0xc>)
   b5f5c:	681b      	ldr	r3, [r3, #0]
   b5f5e:	6a1b      	ldr	r3, [r3, #32]
   b5f60:	9301      	str	r3, [sp, #4]
   b5f62:	bd08      	pop	{r3, pc}
   b5f64:	00030240 	.word	0x00030240

000b5f68 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b5f68:	b508      	push	{r3, lr}
   b5f6a:	4b02      	ldr	r3, [pc, #8]	; (b5f74 <network_set_credentials+0xc>)
   b5f6c:	681b      	ldr	r3, [r3, #0]
   b5f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f70:	9301      	str	r3, [sp, #4]
   b5f72:	bd08      	pop	{r3, pc}
   b5f74:	00030240 	.word	0x00030240

000b5f78 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5f78:	b508      	push	{r3, lr}
   b5f7a:	4b02      	ldr	r3, [pc, #8]	; (b5f84 <network_set_listen_timeout+0xc>)
   b5f7c:	681b      	ldr	r3, [r3, #0]
   b5f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f80:	9301      	str	r3, [sp, #4]
   b5f82:	bd08      	pop	{r3, pc}
   b5f84:	00030240 	.word	0x00030240

000b5f88 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5f88:	b508      	push	{r3, lr}
   b5f8a:	4b02      	ldr	r3, [pc, #8]	; (b5f94 <network_get_listen_timeout+0xc>)
   b5f8c:	681b      	ldr	r3, [r3, #0]
   b5f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5f90:	9301      	str	r3, [sp, #4]
   b5f92:	bd08      	pop	{r3, pc}
   b5f94:	00030240 	.word	0x00030240

000b5f98 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5f98:	b508      	push	{r3, lr}
   b5f9a:	4b02      	ldr	r3, [pc, #8]	; (b5fa4 <network_is_on+0xc>)
   b5f9c:	681b      	ldr	r3, [r3, #0]
   b5f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fa0:	9301      	str	r3, [sp, #4]
   b5fa2:	bd08      	pop	{r3, pc}
   b5fa4:	00030240 	.word	0x00030240

000b5fa8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5fa8:	b508      	push	{r3, lr}
   b5faa:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <network_is_off+0xc>)
   b5fac:	681b      	ldr	r3, [r3, #0]
   b5fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	bd08      	pop	{r3, pc}
   b5fb4:	00030240 	.word	0x00030240

000b5fb8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5fb8:	b508      	push	{r3, lr}
   b5fba:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <malloc+0xc>)
   b5fbc:	681b      	ldr	r3, [r3, #0]
   b5fbe:	681b      	ldr	r3, [r3, #0]
   b5fc0:	9301      	str	r3, [sp, #4]
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	0003021c 	.word	0x0003021c

000b5fc8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <free+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	685b      	ldr	r3, [r3, #4]
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	0003021c 	.word	0x0003021c

000b5fd8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <realloc+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	689b      	ldr	r3, [r3, #8]
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	0003021c 	.word	0x0003021c

000b5fe8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <vsnprintf+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	0003021c 	.word	0x0003021c

000b5ff8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <__errno+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	0003021c 	.word	0x0003021c

000b6008 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b02      	ldr	r3, [pc, #8]	; (b6014 <__assert_func+0xc>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6010:	9301      	str	r3, [sp, #4]
   b6012:	bd08      	pop	{r3, pc}
   b6014:	0003021c 	.word	0x0003021c

000b6018 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <newlib_impure_ptr_callback+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	0003021c 	.word	0x0003021c

000b6028 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6028:	2100      	movs	r1, #0
   b602a:	f7ff bf31 	b.w	b5e90 <system_delay_ms>
	...

000b6030 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6030:	4802      	ldr	r0, [pc, #8]	; (b603c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6032:	2300      	movs	r3, #0
   b6034:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6036:	f7ff bd3b 	b.w	b5ab0 <os_mutex_recursive_create>
   b603a:	bf00      	nop
   b603c:	2003e6c4 	.word	0x2003e6c4

000b6040 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6040:	2200      	movs	r2, #0
   b6042:	6840      	ldr	r0, [r0, #4]
   b6044:	4611      	mov	r1, r2
   b6046:	f7ff bf87 	b.w	b5f58 <network_listening>

000b604a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b604a:	2200      	movs	r2, #0
   b604c:	6840      	ldr	r0, [r0, #4]
   b604e:	4611      	mov	r1, r2
   b6050:	f7ff bf9a 	b.w	b5f88 <network_get_listen_timeout>

000b6054 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6054:	6840      	ldr	r0, [r0, #4]
   b6056:	2200      	movs	r2, #0
   b6058:	f7ff bf8e 	b.w	b5f78 <network_set_listen_timeout>

000b605c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b605c:	6840      	ldr	r0, [r0, #4]
   b605e:	2200      	movs	r2, #0
   b6060:	f081 0101 	eor.w	r1, r1, #1
   b6064:	f7ff bf70 	b.w	b5f48 <network_listen>

000b6068 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6068:	2300      	movs	r3, #0
   b606a:	6840      	ldr	r0, [r0, #4]
   b606c:	461a      	mov	r2, r3
   b606e:	4619      	mov	r1, r3
   b6070:	f7ff bf62 	b.w	b5f38 <network_off>

000b6074 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6074:	2300      	movs	r3, #0
   b6076:	6840      	ldr	r0, [r0, #4]
   b6078:	461a      	mov	r2, r3
   b607a:	4619      	mov	r1, r3
   b607c:	f7ff bf54 	b.w	b5f28 <network_on>

000b6080 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6080:	2200      	movs	r2, #0
   b6082:	6840      	ldr	r0, [r0, #4]
   b6084:	4611      	mov	r1, r2
   b6086:	f7ff bf47 	b.w	b5f18 <network_ready>

000b608a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b608a:	2200      	movs	r2, #0
   b608c:	6840      	ldr	r0, [r0, #4]
   b608e:	4611      	mov	r1, r2
   b6090:	f7ff bf32 	b.w	b5ef8 <network_connecting>

000b6094 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6094:	6840      	ldr	r0, [r0, #4]
   b6096:	2200      	movs	r2, #0
   b6098:	2102      	movs	r1, #2
   b609a:	f7ff bf35 	b.w	b5f08 <network_disconnect>

000b609e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b609e:	2300      	movs	r3, #0
   b60a0:	6840      	ldr	r0, [r0, #4]
   b60a2:	461a      	mov	r2, r3
   b60a4:	f7ff bf20 	b.w	b5ee8 <network_connect>

000b60a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b60a8:	4b02      	ldr	r3, [pc, #8]	; (b60b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b60aa:	2203      	movs	r2, #3
   b60ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b60ae:	4a02      	ldr	r2, [pc, #8]	; (b60b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b60b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b60b2:	4770      	bx	lr
   b60b4:	2003e6c8 	.word	0x2003e6c8
   b60b8:	000be830 	.word	0x000be830

000b60bc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b60bc:	4770      	bx	lr

000b60be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b60be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b60c0:	4606      	mov	r6, r0
   b60c2:	4615      	mov	r5, r2
   b60c4:	460c      	mov	r4, r1
   b60c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b60c8:	42bc      	cmp	r4, r7
   b60ca:	d006      	beq.n	b60da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b60cc:	6833      	ldr	r3, [r6, #0]
   b60ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   b60d2:	689b      	ldr	r3, [r3, #8]
   b60d4:	4630      	mov	r0, r6
   b60d6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b60d8:	e7f6      	b.n	b60c8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b60da:	4628      	mov	r0, r5
   b60dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b60de <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b60de:	7c00      	ldrb	r0, [r0, #16]
   b60e0:	2200      	movs	r2, #0
   b60e2:	f7ff bd4d 	b.w	b5b80 <hal_i2c_write>

000b60e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b60e6:	7c00      	ldrb	r0, [r0, #16]
   b60e8:	2100      	movs	r1, #0
   b60ea:	f7ff bd51 	b.w	b5b90 <hal_i2c_available>

000b60ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b60ee:	7c00      	ldrb	r0, [r0, #16]
   b60f0:	2100      	movs	r1, #0
   b60f2:	f7ff bd55 	b.w	b5ba0 <hal_i2c_read>

000b60f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b60f6:	7c00      	ldrb	r0, [r0, #16]
   b60f8:	2100      	movs	r1, #0
   b60fa:	f7ff bd59 	b.w	b5bb0 <hal_i2c_peek>

000b60fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b60fe:	7c00      	ldrb	r0, [r0, #16]
   b6100:	2100      	movs	r1, #0
   b6102:	f7ff bd5d 	b.w	b5bc0 <hal_i2c_flush>

000b6106 <_ZN7TwoWireD0Ev>:
   b6106:	b510      	push	{r4, lr}
   b6108:	2114      	movs	r1, #20
   b610a:	4604      	mov	r4, r0
   b610c:	f7fd ffc7 	bl	b409e <_ZdlPvj>
   b6110:	4620      	mov	r0, r4
   b6112:	bd10      	pop	{r4, pc}

000b6114 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6114:	b538      	push	{r3, r4, r5, lr}
   b6116:	4604      	mov	r4, r0
   b6118:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b611a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b611e:	2200      	movs	r2, #0
   b6120:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6124:	4b09      	ldr	r3, [pc, #36]	; (b614c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6126:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6128:	4608      	mov	r0, r1
   b612a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b612c:	4629      	mov	r1, r5
   b612e:	f7ff fd57 	bl	b5be0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6132:	30bf      	adds	r0, #191	; 0xbf
   b6134:	d108      	bne.n	b6148 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6136:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6138:	07db      	lsls	r3, r3, #31
   b613a:	d505      	bpl.n	b6148 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b613c:	6868      	ldr	r0, [r5, #4]
   b613e:	f7ff ff43 	bl	b5fc8 <free>
    free(conf.tx_buffer);
   b6142:	68e8      	ldr	r0, [r5, #12]
   b6144:	f7ff ff40 	bl	b5fc8 <free>
}
   b6148:	4620      	mov	r0, r4
   b614a:	bd38      	pop	{r3, r4, r5, pc}
   b614c:	000be86c 	.word	0x000be86c

000b6150 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6150:	2300      	movs	r3, #0
   b6152:	7c00      	ldrb	r0, [r0, #16]
   b6154:	461a      	mov	r2, r3
   b6156:	4619      	mov	r1, r3
   b6158:	f7ff bcfa 	b.w	b5b50 <hal_i2c_begin>

000b615c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b615c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b615e:	2200      	movs	r2, #0
   b6160:	2314      	movs	r3, #20
   b6162:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6166:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b616a:	780b      	ldrb	r3, [r1, #0]
   b616c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6170:	684b      	ldr	r3, [r1, #4]
   b6172:	9303      	str	r3, [sp, #12]
   b6174:	68cb      	ldr	r3, [r1, #12]
   b6176:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6178:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b617a:	7a0b      	ldrb	r3, [r1, #8]
   b617c:	9305      	str	r3, [sp, #20]
   b617e:	a901      	add	r1, sp, #4
   b6180:	f7ff fd36 	bl	b5bf0 <hal_i2c_request_ex>
}
   b6184:	b007      	add	sp, #28
   b6186:	f85d fb04 	ldr.w	pc, [sp], #4

000b618a <_ZN7TwoWire11requestFromEhjh>:
{
   b618a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b618c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b618e:	f88d 1000 	strb.w	r1, [sp]
   b6192:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6196:	9103      	str	r1, [sp, #12]
   b6198:	bf18      	it	ne
   b619a:	2301      	movne	r3, #1
   b619c:	4669      	mov	r1, sp
    size_ = size;
   b619e:	9201      	str	r2, [sp, #4]
   b61a0:	f88d 3008 	strb.w	r3, [sp, #8]
   b61a4:	f7ff ffda 	bl	b615c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b61a8:	b005      	add	sp, #20
   b61aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b61ae <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b61ae:	7c00      	ldrb	r0, [r0, #16]
   b61b0:	2200      	movs	r2, #0
   b61b2:	f7ff bcd5 	b.w	b5b60 <hal_i2c_begin_transmission>

000b61b6 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b61b6:	b2c9      	uxtb	r1, r1
   b61b8:	f7ff bff9 	b.w	b61ae <_ZN7TwoWire17beginTransmissionEh>

000b61bc <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b61bc:	7c00      	ldrb	r0, [r0, #16]
   b61be:	2200      	movs	r2, #0
   b61c0:	f7ff bcd6 	b.w	b5b70 <hal_i2c_end_transmission>

000b61c4 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b61c4:	2101      	movs	r1, #1
   b61c6:	f7ff bff9 	b.w	b61bc <_ZN7TwoWire15endTransmissionEh>

000b61ca <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b61ca:	4770      	bx	lr

000b61cc <_ZN9IPAddressD0Ev>:
   b61cc:	b510      	push	{r4, lr}
   b61ce:	2118      	movs	r1, #24
   b61d0:	4604      	mov	r4, r0
   b61d2:	f7fd ff64 	bl	b409e <_ZdlPvj>
   b61d6:	4620      	mov	r0, r4
   b61d8:	bd10      	pop	{r4, pc}

000b61da <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b61da:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b61dc:	7d03      	ldrb	r3, [r0, #20]
   b61de:	2b06      	cmp	r3, #6
{
   b61e0:	b08d      	sub	sp, #52	; 0x34
   b61e2:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b61e4:	f100 0704 	add.w	r7, r0, #4
   b61e8:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b61ec:	d012      	beq.n	b6214 <_ZNK9IPAddress7printToER5Print+0x3a>
   b61ee:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b61f2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b61f6:	220a      	movs	r2, #10
   b61f8:	4630      	mov	r0, r6
   b61fa:	f000 f966 	bl	b64ca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b61fe:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6200:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6202:	d019      	beq.n	b6238 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6204:	2c00      	cmp	r4, #0
   b6206:	d0f4      	beq.n	b61f2 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6208:	212e      	movs	r1, #46	; 0x2e
   b620a:	4630      	mov	r0, r6
   b620c:	f000 f94e 	bl	b64ac <_ZN5Print5printEc>
   b6210:	4404      	add	r4, r0
   b6212:	e7ee      	b.n	b61f2 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6214:	232f      	movs	r3, #47	; 0x2f
   b6216:	466a      	mov	r2, sp
   b6218:	4639      	mov	r1, r7
   b621a:	200a      	movs	r0, #10
		buf[0] = 0;
   b621c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6220:	f7ff fcf6 	bl	b5c10 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6224:	4668      	mov	r0, sp
   b6226:	f002 ff0d 	bl	b9044 <strlen>
   b622a:	6833      	ldr	r3, [r6, #0]
   b622c:	4602      	mov	r2, r0
   b622e:	68db      	ldr	r3, [r3, #12]
   b6230:	4669      	mov	r1, sp
   b6232:	4630      	mov	r0, r6
   b6234:	4798      	blx	r3
   b6236:	4604      	mov	r4, r0
    }
    return n;
}
   b6238:	4620      	mov	r0, r4
   b623a:	b00d      	add	sp, #52	; 0x34
   b623c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b6240 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6240:	b510      	push	{r4, lr}
   b6242:	4b05      	ldr	r3, [pc, #20]	; (b6258 <_ZN9IPAddressC1Ev+0x18>)
   b6244:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6246:	2211      	movs	r2, #17
   b6248:	f840 3b04 	str.w	r3, [r0], #4
   b624c:	2100      	movs	r1, #0
   b624e:	f002 feb9 	bl	b8fc4 <memset>
}
   b6252:	4620      	mov	r0, r4
   b6254:	bd10      	pop	{r4, pc}
   b6256:	bf00      	nop
   b6258:	000be894 	.word	0x000be894

000b625c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b625c:	4603      	mov	r3, r0
   b625e:	4a07      	ldr	r2, [pc, #28]	; (b627c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6260:	b510      	push	{r4, lr}
   b6262:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6266:	f101 0210 	add.w	r2, r1, #16
   b626a:	f851 4b04 	ldr.w	r4, [r1], #4
   b626e:	f843 4b04 	str.w	r4, [r3], #4
   b6272:	4291      	cmp	r1, r2
   b6274:	d1f9      	bne.n	b626a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6276:	780a      	ldrb	r2, [r1, #0]
   b6278:	701a      	strb	r2, [r3, #0]
}
   b627a:	bd10      	pop	{r4, pc}
   b627c:	000be894 	.word	0x000be894

000b6280 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6280:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6282:	2b04      	cmp	r3, #4
   b6284:	d104      	bne.n	b6290 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6286:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6288:	3800      	subs	r0, #0
   b628a:	bf18      	it	ne
   b628c:	2001      	movne	r0, #1
   b628e:	4770      	bx	lr
    } else if (version() == 6) {
   b6290:	2b06      	cmp	r3, #6
   b6292:	d107      	bne.n	b62a4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6294:	6843      	ldr	r3, [r0, #4]
   b6296:	b93b      	cbnz	r3, b62a8 <_ZNK9IPAddresscvbEv+0x28>
   b6298:	6883      	ldr	r3, [r0, #8]
   b629a:	b92b      	cbnz	r3, b62a8 <_ZNK9IPAddresscvbEv+0x28>
   b629c:	68c3      	ldr	r3, [r0, #12]
   b629e:	b91b      	cbnz	r3, b62a8 <_ZNK9IPAddresscvbEv+0x28>
   b62a0:	6900      	ldr	r0, [r0, #16]
   b62a2:	e7f1      	b.n	b6288 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b62a4:	2000      	movs	r0, #0
   b62a6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b62a8:	2001      	movs	r0, #1
}
   b62aa:	4770      	bx	lr

000b62ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b62ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b62ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b62b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b62b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b62ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b62be:	2304      	movs	r3, #4
   b62c0:	6041      	str	r1, [r0, #4]
   b62c2:	7503      	strb	r3, [r0, #20]
}
   b62c4:	bd10      	pop	{r4, pc}
	...

000b62c8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b62c8:	b507      	push	{r0, r1, r2, lr}
   b62ca:	4b06      	ldr	r3, [pc, #24]	; (b62e4 <_ZN9IPAddressC1EPKh+0x1c>)
   b62cc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b62ce:	78cb      	ldrb	r3, [r1, #3]
   b62d0:	9300      	str	r3, [sp, #0]
   b62d2:	788b      	ldrb	r3, [r1, #2]
   b62d4:	784a      	ldrb	r2, [r1, #1]
   b62d6:	7809      	ldrb	r1, [r1, #0]
   b62d8:	f7ff ffe8 	bl	b62ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b62dc:	b003      	add	sp, #12
   b62de:	f85d fb04 	ldr.w	pc, [sp], #4
   b62e2:	bf00      	nop
   b62e4:	000be894 	.word	0x000be894

000b62e8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b62e8:	4b01      	ldr	r3, [pc, #4]	; (b62f0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b62ea:	4a02      	ldr	r2, [pc, #8]	; (b62f4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b62ec:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b62ee:	4770      	bx	lr
   b62f0:	2003e6d0 	.word	0x2003e6d0
   b62f4:	000be8a0 	.word	0x000be8a0

000b62f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b62f8:	2300      	movs	r3, #0
   b62fa:	6840      	ldr	r0, [r0, #4]
   b62fc:	461a      	mov	r2, r3
   b62fe:	f7ff bdf3 	b.w	b5ee8 <network_connect>

000b6302 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6302:	6840      	ldr	r0, [r0, #4]
   b6304:	2200      	movs	r2, #0
   b6306:	2102      	movs	r1, #2
   b6308:	f7ff bdfe 	b.w	b5f08 <network_disconnect>

000b630c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b630c:	2200      	movs	r2, #0
   b630e:	6840      	ldr	r0, [r0, #4]
   b6310:	4611      	mov	r1, r2
   b6312:	f7ff bdf1 	b.w	b5ef8 <network_connecting>

000b6316 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6316:	2200      	movs	r2, #0
   b6318:	6840      	ldr	r0, [r0, #4]
   b631a:	4611      	mov	r1, r2
   b631c:	f7ff bdfc 	b.w	b5f18 <network_ready>

000b6320 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6320:	2300      	movs	r3, #0
   b6322:	6840      	ldr	r0, [r0, #4]
   b6324:	461a      	mov	r2, r3
   b6326:	4619      	mov	r1, r3
   b6328:	f7ff bdfe 	b.w	b5f28 <network_on>

000b632c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b632c:	2300      	movs	r3, #0
   b632e:	6840      	ldr	r0, [r0, #4]
   b6330:	461a      	mov	r2, r3
   b6332:	4619      	mov	r1, r3
   b6334:	f7ff be00 	b.w	b5f38 <network_off>

000b6338 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6338:	6840      	ldr	r0, [r0, #4]
   b633a:	2100      	movs	r1, #0
   b633c:	f7ff be2c 	b.w	b5f98 <network_is_on>

000b6340 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6340:	6840      	ldr	r0, [r0, #4]
   b6342:	2100      	movs	r1, #0
   b6344:	f7ff be30 	b.w	b5fa8 <network_is_off>

000b6348 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6348:	6840      	ldr	r0, [r0, #4]
   b634a:	2200      	movs	r2, #0
   b634c:	f081 0101 	eor.w	r1, r1, #1
   b6350:	f7ff bdfa 	b.w	b5f48 <network_listen>

000b6354 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6354:	6840      	ldr	r0, [r0, #4]
   b6356:	2200      	movs	r2, #0
   b6358:	f7ff be0e 	b.w	b5f78 <network_set_listen_timeout>

000b635c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b635c:	2200      	movs	r2, #0
   b635e:	6840      	ldr	r0, [r0, #4]
   b6360:	4611      	mov	r1, r2
   b6362:	f7ff be11 	b.w	b5f88 <network_get_listen_timeout>

000b6366 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6366:	2200      	movs	r2, #0
   b6368:	6840      	ldr	r0, [r0, #4]
   b636a:	4611      	mov	r1, r2
   b636c:	f7ff bdf4 	b.w	b5f58 <network_listening>

000b6370 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6374:	b095      	sub	sp, #84	; 0x54
   b6376:	4614      	mov	r4, r2
   b6378:	460d      	mov	r5, r1
   b637a:	4607      	mov	r7, r0
    IPAddress addr;
   b637c:	f7ff ff60 	bl	b6240 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6380:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6382:	221c      	movs	r2, #28
   b6384:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6386:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6388:	f002 fe1c 	bl	b8fc4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b638c:	2340      	movs	r3, #64	; 0x40
   b638e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6390:	4620      	mov	r0, r4
   b6392:	466b      	mov	r3, sp
   b6394:	aa0c      	add	r2, sp, #48	; 0x30
   b6396:	2100      	movs	r1, #0
   b6398:	f7ff fc5a 	bl	b5c50 <netdb_getaddrinfo>
    if (!r) {
   b639c:	4604      	mov	r4, r0
   b639e:	2800      	cmp	r0, #0
   b63a0:	d14b      	bne.n	b643a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b63a2:	4602      	mov	r2, r0
   b63a4:	2101      	movs	r1, #1
   b63a6:	6868      	ldr	r0, [r5, #4]
   b63a8:	f7ff fdb6 	bl	b5f18 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b63ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b63ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b63b0:	4622      	mov	r2, r4
   b63b2:	6868      	ldr	r0, [r5, #4]
   b63b4:	f7ff fdb0 	bl	b5f18 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b63b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b63ba:	4681      	mov	r9, r0
        bool ok = false;
   b63bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b63be:	2e00      	cmp	r6, #0
   b63c0:	d03b      	beq.n	b643a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b63c2:	2900      	cmp	r1, #0
   b63c4:	d139      	bne.n	b643a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b63c6:	6873      	ldr	r3, [r6, #4]
   b63c8:	2b02      	cmp	r3, #2
   b63ca:	d003      	beq.n	b63d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b63cc:	2b0a      	cmp	r3, #10
   b63ce:	d011      	beq.n	b63f4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b63d0:	69f6      	ldr	r6, [r6, #28]
   b63d2:	e7f4      	b.n	b63be <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b63d4:	f1b8 0f00 	cmp.w	r8, #0
   b63d8:	d0fa      	beq.n	b63d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b63da:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b63dc:	a806      	add	r0, sp, #24
   b63de:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b63e0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b63e2:	f7ff ff71 	bl	b62c8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b63e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b63e8:	1d3c      	adds	r4, r7, #4
   b63ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63ec:	682b      	ldr	r3, [r5, #0]
   b63ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b63f0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b63f2:	e7ed      	b.n	b63d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b63f4:	f1b9 0f00 	cmp.w	r9, #0
   b63f8:	d0ea      	beq.n	b63d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b63fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b63fc:	2210      	movs	r2, #16
   b63fe:	a801      	add	r0, sp, #4
   b6400:	f002 fde0 	bl	b8fc4 <memset>
                    a.v = 6;
   b6404:	2306      	movs	r3, #6
   b6406:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b640a:	ad01      	add	r5, sp, #4
   b640c:	f104 0308 	add.w	r3, r4, #8
   b6410:	3418      	adds	r4, #24
   b6412:	6818      	ldr	r0, [r3, #0]
   b6414:	6859      	ldr	r1, [r3, #4]
   b6416:	462a      	mov	r2, r5
   b6418:	c203      	stmia	r2!, {r0, r1}
   b641a:	3308      	adds	r3, #8
   b641c:	42a3      	cmp	r3, r4
   b641e:	4615      	mov	r5, r2
   b6420:	d1f7      	bne.n	b6412 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6422:	a901      	add	r1, sp, #4
   b6424:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6426:	ad07      	add	r5, sp, #28
   b6428:	f7ff ff18 	bl	b625c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b642c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b642e:	1d3c      	adds	r4, r7, #4
   b6430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6432:	682b      	ldr	r3, [r5, #0]
   b6434:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6436:	4649      	mov	r1, r9
   b6438:	e7ca      	b.n	b63d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b643a:	9800      	ldr	r0, [sp, #0]
   b643c:	f7ff fc00 	bl	b5c40 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6440:	4638      	mov	r0, r7
   b6442:	b015      	add	sp, #84	; 0x54
   b6444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6448 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6448:	4b02      	ldr	r3, [pc, #8]	; (b6454 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b644a:	4a03      	ldr	r2, [pc, #12]	; (b6458 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b644c:	601a      	str	r2, [r3, #0]
   b644e:	2200      	movs	r2, #0
   b6450:	605a      	str	r2, [r3, #4]

} // spark
   b6452:	4770      	bx	lr
   b6454:	2003e6d4 	.word	0x2003e6d4
   b6458:	000be8ac 	.word	0x000be8ac

000b645c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b645e:	4606      	mov	r6, r0
   b6460:	460d      	mov	r5, r1
  size_t n = 0;
   b6462:	188f      	adds	r7, r1, r2
   b6464:	2400      	movs	r4, #0
  while (size--) {
   b6466:	42bd      	cmp	r5, r7
   b6468:	d00c      	beq.n	b6484 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b646a:	6833      	ldr	r3, [r6, #0]
   b646c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6470:	689b      	ldr	r3, [r3, #8]
   b6472:	4630      	mov	r0, r6
   b6474:	4798      	blx	r3
     if (chunk>=0)
   b6476:	1e03      	subs	r3, r0, #0
   b6478:	db01      	blt.n	b647e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b647a:	441c      	add	r4, r3
  while (size--) {
   b647c:	e7f3      	b.n	b6466 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b647e:	2c00      	cmp	r4, #0
   b6480:	bf08      	it	eq
   b6482:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6484:	4620      	mov	r0, r4
   b6486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6488 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6488:	b513      	push	{r0, r1, r4, lr}
   b648a:	4604      	mov	r4, r0
    }
   b648c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b648e:	b159      	cbz	r1, b64a8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6490:	9101      	str	r1, [sp, #4]
   b6492:	f002 fdd7 	bl	b9044 <strlen>
   b6496:	6823      	ldr	r3, [r4, #0]
   b6498:	9901      	ldr	r1, [sp, #4]
   b649a:	68db      	ldr	r3, [r3, #12]
   b649c:	4602      	mov	r2, r0
   b649e:	4620      	mov	r0, r4
    }
   b64a0:	b002      	add	sp, #8
   b64a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b64a6:	4718      	bx	r3
    }
   b64a8:	b002      	add	sp, #8
   b64aa:	bd10      	pop	{r4, pc}

000b64ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b64ac:	6803      	ldr	r3, [r0, #0]
   b64ae:	689b      	ldr	r3, [r3, #8]
   b64b0:	4718      	bx	r3

000b64b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b64b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b64b4:	210d      	movs	r1, #13
{
   b64b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b64b8:	f7ff fff8 	bl	b64ac <_ZN5Print5printEc>
  n += print('\n');
   b64bc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b64be:	4604      	mov	r4, r0
  n += print('\n');
   b64c0:	4628      	mov	r0, r5
   b64c2:	f7ff fff3 	bl	b64ac <_ZN5Print5printEc>
  return n;
}
   b64c6:	4420      	add	r0, r4
   b64c8:	bd38      	pop	{r3, r4, r5, pc}

000b64ca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b64ca:	b530      	push	{r4, r5, lr}
   b64cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b64ce:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b64d0:	2a01      	cmp	r2, #1
  *str = '\0';
   b64d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b64d6:	bf98      	it	ls
   b64d8:	220a      	movls	r2, #10
   b64da:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b64dc:	460d      	mov	r5, r1
   b64de:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b64e2:	fb01 5312 	mls	r3, r1, r2, r5
   b64e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b64ea:	2b09      	cmp	r3, #9
   b64ec:	bf94      	ite	ls
   b64ee:	3330      	addls	r3, #48	; 0x30
   b64f0:	3337      	addhi	r3, #55	; 0x37
   b64f2:	b2db      	uxtb	r3, r3
  } while(n);
   b64f4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b64f6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b64fa:	d9ef      	bls.n	b64dc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b64fc:	4621      	mov	r1, r4
   b64fe:	f7ff ffc3 	bl	b6488 <_ZN5Print5writeEPKc>
}
   b6502:	b00b      	add	sp, #44	; 0x2c
   b6504:	bd30      	pop	{r4, r5, pc}

000b6506 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b650a:	b086      	sub	sp, #24
   b650c:	af00      	add	r7, sp, #0
   b650e:	4605      	mov	r5, r0
   b6510:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6512:	1d38      	adds	r0, r7, #4
   b6514:	2114      	movs	r1, #20
{
   b6516:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6518:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b651a:	f7ff fd65 	bl	b5fe8 <vsnprintf>

    if (n<bufsize)
   b651e:	2813      	cmp	r0, #19
   b6520:	d80e      	bhi.n	b6540 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6522:	1d39      	adds	r1, r7, #4
   b6524:	4628      	mov	r0, r5
   b6526:	f7ff ffaf 	bl	b6488 <_ZN5Print5writeEPKc>
   b652a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b652c:	b11e      	cbz	r6, b6536 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b652e:	4628      	mov	r0, r5
   b6530:	f7ff ffbf 	bl	b64b2 <_ZN5Print7printlnEv>
   b6534:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6536:	4620      	mov	r0, r4
   b6538:	3718      	adds	r7, #24
   b653a:	46bd      	mov	sp, r7
   b653c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6540:	f100 0308 	add.w	r3, r0, #8
   b6544:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6548:	46e8      	mov	r8, sp
        char bigger[n+1];
   b654a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b654e:	4622      	mov	r2, r4
   b6550:	1c41      	adds	r1, r0, #1
   b6552:	683b      	ldr	r3, [r7, #0]
   b6554:	4668      	mov	r0, sp
   b6556:	f7ff fd47 	bl	b5fe8 <vsnprintf>
  return write(str);
   b655a:	4669      	mov	r1, sp
   b655c:	4628      	mov	r0, r5
   b655e:	f7ff ff93 	bl	b6488 <_ZN5Print5writeEPKc>
   b6562:	4604      	mov	r4, r0
   b6564:	46c5      	mov	sp, r8
   b6566:	e7e1      	b.n	b652c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6568 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6568:	4b01      	ldr	r3, [pc, #4]	; (b6570 <_GLOBAL__sub_I_RGB+0x8>)
   b656a:	2200      	movs	r2, #0
   b656c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b656e:	4770      	bx	lr
   b6570:	2003e6dc 	.word	0x2003e6dc

000b6574 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6574:	2100      	movs	r1, #0
   b6576:	f7ff bbeb 	b.w	b5d50 <hal_spi_release>

000b657a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b657a:	2100      	movs	r1, #0
   b657c:	f7ff bbe0 	b.w	b5d40 <hal_spi_acquire>

000b6580 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6580:	b510      	push	{r4, lr}
   b6582:	4604      	mov	r4, r0
   b6584:	4608      	mov	r0, r1
{
    _spi = spi;
   b6586:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6588:	f7ff fbc2 	bl	b5d10 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b658c:	2300      	movs	r3, #0
   b658e:	6063      	str	r3, [r4, #4]
}
   b6590:	4620      	mov	r0, r4
   b6592:	bd10      	pop	{r4, pc}

000b6594 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6594:	b513      	push	{r0, r1, r4, lr}
   b6596:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6598:	7800      	ldrb	r0, [r0, #0]
   b659a:	f7ff ffee 	bl	b657a <_ZN8SPIClass4lockEv.isra.0>
   b659e:	b958      	cbnz	r0, b65b8 <_ZN8SPIClass5beginEv+0x24>
   b65a0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b65a2:	9001      	str	r0, [sp, #4]
   b65a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b65a8:	f7ff fb8a 	bl	b5cc0 <hal_spi_begin>
        unlock();
   b65ac:	9801      	ldr	r0, [sp, #4]
    }
}
   b65ae:	b002      	add	sp, #8
   b65b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b65b4:	f7ff bfde 	b.w	b6574 <_ZN8SPIClass6unlockEv.isra.0>
   b65b8:	b002      	add	sp, #8
   b65ba:	bd10      	pop	{r4, pc}

000b65bc <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b65bc:	b513      	push	{r0, r1, r4, lr}
   b65be:	4604      	mov	r4, r0
    if (!lock())
   b65c0:	7800      	ldrb	r0, [r0, #0]
{
   b65c2:	9101      	str	r1, [sp, #4]
    if (!lock())
   b65c4:	f7ff ffd9 	bl	b657a <_ZN8SPIClass4lockEv.isra.0>
   b65c8:	9901      	ldr	r1, [sp, #4]
   b65ca:	b948      	cbnz	r0, b65e0 <_ZN8SPIClass11setBitOrderEh+0x24>
   b65cc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b65ce:	9001      	str	r0, [sp, #4]
   b65d0:	f7ff fb7e 	bl	b5cd0 <hal_spi_set_bit_order>
        unlock();
   b65d4:	9801      	ldr	r0, [sp, #4]
    }
}
   b65d6:	b002      	add	sp, #8
   b65d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b65dc:	f7ff bfca 	b.w	b6574 <_ZN8SPIClass6unlockEv.isra.0>
   b65e0:	b002      	add	sp, #8
   b65e2:	bd10      	pop	{r4, pc}

000b65e4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b65e4:	b513      	push	{r0, r1, r4, lr}
   b65e6:	4604      	mov	r4, r0
    if (!lock())
   b65e8:	7800      	ldrb	r0, [r0, #0]
{
   b65ea:	9101      	str	r1, [sp, #4]
    if (!lock())
   b65ec:	f7ff ffc5 	bl	b657a <_ZN8SPIClass4lockEv.isra.0>
   b65f0:	9901      	ldr	r1, [sp, #4]
   b65f2:	b948      	cbnz	r0, b6608 <_ZN8SPIClass11setDataModeEh+0x24>
   b65f4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b65f6:	9001      	str	r0, [sp, #4]
   b65f8:	f7ff fb72 	bl	b5ce0 <hal_spi_set_data_mode>
        unlock();
   b65fc:	9801      	ldr	r0, [sp, #4]
    }
}
   b65fe:	b002      	add	sp, #8
   b6600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6604:	f7ff bfb6 	b.w	b6574 <_ZN8SPIClass6unlockEv.isra.0>
   b6608:	b002      	add	sp, #8
   b660a:	bd10      	pop	{r4, pc}

000b660c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b660c:	0840      	lsrs	r0, r0, #1
{
   b660e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6610:	6018      	str	r0, [r3, #0]
   b6612:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6614:	6818      	ldr	r0, [r3, #0]
   b6616:	4288      	cmp	r0, r1
   b6618:	b2e5      	uxtb	r5, r4
   b661a:	d906      	bls.n	b662a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b661c:	3401      	adds	r4, #1
   b661e:	2c08      	cmp	r4, #8
   b6620:	d002      	beq.n	b6628 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6622:	0840      	lsrs	r0, r0, #1
   b6624:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6626:	e7f5      	b.n	b6614 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6628:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b662a:	4b02      	ldr	r3, [pc, #8]	; (b6634 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b662c:	5d5b      	ldrb	r3, [r3, r5]
   b662e:	7013      	strb	r3, [r2, #0]
}
   b6630:	bd30      	pop	{r4, r5, pc}
   b6632:	bf00      	nop
   b6634:	000be8e0 	.word	0x000be8e0

000b6638 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b663c:	b088      	sub	sp, #32
    unsigned clock = 0;
   b663e:	2300      	movs	r3, #0
{
   b6640:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6642:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6644:	9302      	str	r3, [sp, #8]
{
   b6646:	460e      	mov	r6, r1
   b6648:	4617      	mov	r7, r2
    if (!lock())
   b664a:	f7ff ff96 	bl	b657a <_ZN8SPIClass4lockEv.isra.0>
   b664e:	4605      	mov	r5, r0
   b6650:	bb00      	cbnz	r0, b6694 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6652:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6656:	4601      	mov	r1, r0
   b6658:	2214      	movs	r2, #20
   b665a:	a803      	add	r0, sp, #12
   b665c:	f002 fcb2 	bl	b8fc4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6660:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6662:	462a      	mov	r2, r5
   b6664:	a903      	add	r1, sp, #12
   b6666:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b6668:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b666c:	f7ff fb60 	bl	b5d30 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6670:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b6672:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6676:	ab02      	add	r3, sp, #8
   b6678:	f10d 0207 	add.w	r2, sp, #7
   b667c:	fb07 f106 	mul.w	r1, r7, r6
   b6680:	f7ff ffc4 	bl	b660c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6684:	7820      	ldrb	r0, [r4, #0]
   b6686:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b668a:	f7ff fb31 	bl	b5cf0 <hal_spi_set_clock_divider>
        unlock();
   b668e:	7820      	ldrb	r0, [r4, #0]
   b6690:	f7ff ff70 	bl	b6574 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6694:	9802      	ldr	r0, [sp, #8]
   b6696:	b008      	add	sp, #32
   b6698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b669c <_ZN8SPIClass15setClockDividerEh>:
{
   b669c:	b538      	push	{r3, r4, r5, lr}
   b669e:	4604      	mov	r4, r0
    if (!lock())
   b66a0:	7800      	ldrb	r0, [r0, #0]
{
   b66a2:	460d      	mov	r5, r1
    if (!lock())
   b66a4:	f7ff ff69 	bl	b657a <_ZN8SPIClass4lockEv.isra.0>
   b66a8:	4603      	mov	r3, r0
   b66aa:	b9d0      	cbnz	r0, b66e2 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b66ac:	6861      	ldr	r1, [r4, #4]
   b66ae:	b199      	cbz	r1, b66d8 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b66b0:	4a0c      	ldr	r2, [pc, #48]	; (b66e4 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b66b2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b66b6:	4285      	cmp	r5, r0
   b66b8:	d002      	beq.n	b66c0 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b66ba:	3301      	adds	r3, #1
   b66bc:	2b08      	cmp	r3, #8
   b66be:	d1f8      	bne.n	b66b2 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b66c0:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b66c2:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b66c4:	2201      	movs	r2, #1
   b66c6:	40d9      	lsrs	r1, r3
   b66c8:	4620      	mov	r0, r4
   b66ca:	f7ff ffb5 	bl	b6638 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b66ce:	7820      	ldrb	r0, [r4, #0]
}
   b66d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b66d4:	f7ff bf4e 	b.w	b6574 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b66d8:	7820      	ldrb	r0, [r4, #0]
   b66da:	4629      	mov	r1, r5
   b66dc:	f7ff fb08 	bl	b5cf0 <hal_spi_set_clock_divider>
   b66e0:	e7f5      	b.n	b66ce <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b66e2:	bd38      	pop	{r3, r4, r5, pc}
   b66e4:	000be8e0 	.word	0x000be8e0

000b66e8 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b66e8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b66ea:	7800      	ldrb	r0, [r0, #0]
   b66ec:	f7ff fb08 	bl	b5d00 <hal_spi_transfer>
}
   b66f0:	b2c0      	uxtb	r0, r0
   b66f2:	bd08      	pop	{r3, pc}

000b66f4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b66f4:	b510      	push	{r4, lr}
   b66f6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b66f8:	6800      	ldr	r0, [r0, #0]
   b66fa:	b108      	cbz	r0, b6700 <_ZN6String10invalidateEv+0xc>
   b66fc:	f7ff fc64 	bl	b5fc8 <free>
	buffer = NULL;
   b6700:	2300      	movs	r3, #0
	capacity = len = 0;
   b6702:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6706:	6023      	str	r3, [r4, #0]
}
   b6708:	bd10      	pop	{r4, pc}

000b670a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b670a:	b538      	push	{r3, r4, r5, lr}
   b670c:	4604      	mov	r4, r0
   b670e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6710:	6800      	ldr	r0, [r0, #0]
   b6712:	3101      	adds	r1, #1
   b6714:	f7ff fc60 	bl	b5fd8 <realloc>
	if (newbuffer) {
   b6718:	b110      	cbz	r0, b6720 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b671a:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b671e:	2001      	movs	r0, #1
	}
	return 0;
}
   b6720:	bd38      	pop	{r3, r4, r5, pc}

000b6722 <_ZN6String7reserveEj>:
{
   b6722:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6724:	6803      	ldr	r3, [r0, #0]
{
   b6726:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6728:	b123      	cbz	r3, b6734 <_ZN6String7reserveEj+0x12>
   b672a:	6843      	ldr	r3, [r0, #4]
   b672c:	428b      	cmp	r3, r1
   b672e:	d301      	bcc.n	b6734 <_ZN6String7reserveEj+0x12>
   b6730:	2001      	movs	r0, #1
}
   b6732:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6734:	4620      	mov	r0, r4
   b6736:	f7ff ffe8 	bl	b670a <_ZN6String12changeBufferEj>
   b673a:	2800      	cmp	r0, #0
   b673c:	d0f9      	beq.n	b6732 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b673e:	68a3      	ldr	r3, [r4, #8]
   b6740:	2b00      	cmp	r3, #0
   b6742:	d1f5      	bne.n	b6730 <_ZN6String7reserveEj+0xe>
   b6744:	6822      	ldr	r2, [r4, #0]
   b6746:	7013      	strb	r3, [r2, #0]
   b6748:	e7f2      	b.n	b6730 <_ZN6String7reserveEj+0xe>

000b674a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b674a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b674c:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b674e:	4611      	mov	r1, r2
   b6750:	9201      	str	r2, [sp, #4]
{
   b6752:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6754:	f7ff ffe5 	bl	b6722 <_ZN6String7reserveEj>
   b6758:	9a01      	ldr	r2, [sp, #4]
   b675a:	b928      	cbnz	r0, b6768 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b675c:	4620      	mov	r0, r4
   b675e:	f7ff ffc9 	bl	b66f4 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6762:	4620      	mov	r0, r4
   b6764:	b003      	add	sp, #12
   b6766:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6768:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b676a:	4629      	mov	r1, r5
   b676c:	6820      	ldr	r0, [r4, #0]
   b676e:	f002 fc1b 	bl	b8fa8 <memcpy>
	buffer[len] = 0;
   b6772:	6822      	ldr	r2, [r4, #0]
   b6774:	68a3      	ldr	r3, [r4, #8]
   b6776:	2100      	movs	r1, #0
   b6778:	54d1      	strb	r1, [r2, r3]
	return *this;
   b677a:	e7f2      	b.n	b6762 <_ZN6String4copyEPKcj+0x18>

000b677c <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b677c:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b677e:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6780:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6784:	4604      	mov	r4, r0
	len = 0;
   b6786:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6788:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b678a:	b141      	cbz	r1, b679e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b678c:	4608      	mov	r0, r1
   b678e:	9101      	str	r1, [sp, #4]
   b6790:	f002 fc58 	bl	b9044 <strlen>
   b6794:	9901      	ldr	r1, [sp, #4]
   b6796:	4602      	mov	r2, r0
   b6798:	4620      	mov	r0, r4
   b679a:	f7ff ffd6 	bl	b674a <_ZN6String4copyEPKcj>
}
   b679e:	4620      	mov	r0, r4
   b67a0:	b002      	add	sp, #8
   b67a2:	bd10      	pop	{r4, pc}

000b67a4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b67a4:	4b05      	ldr	r3, [pc, #20]	; (b67bc <_GLOBAL__sub_I_System+0x18>)
   b67a6:	2202      	movs	r2, #2
   b67a8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b67aa:	4b05      	ldr	r3, [pc, #20]	; (b67c0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b67ac:	4a05      	ldr	r2, [pc, #20]	; (b67c4 <_GLOBAL__sub_I_System+0x20>)
   b67ae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b67b0:	2000      	movs	r0, #0
   b67b2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b67b6:	f7ff bb63 	b.w	b5e80 <set_system_mode>
   b67ba:	bf00      	nop
   b67bc:	2003e6f8 	.word	0x2003e6f8
   b67c0:	2003e6ec 	.word	0x2003e6ec
   b67c4:	ffff0000 	.word	0xffff0000

000b67c8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b67c8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b67ca:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b67cc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b67d0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b67d2:	2201      	movs	r2, #1
   b67d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b67d8:	f10d 0107 	add.w	r1, sp, #7
   b67dc:	47a0      	blx	r4
}
   b67de:	b002      	add	sp, #8
   b67e0:	bd10      	pop	{r4, pc}

000b67e2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b67e2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b67e4:	6803      	ldr	r3, [r0, #0]
   b67e6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b67e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b67ec:	46a4      	mov	ip, r4
}
   b67ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b67f2:	4760      	bx	ip

000b67f4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b67f4:	b513      	push	{r0, r1, r4, lr}
   b67f6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b67f8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b67fa:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b67fe:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6800:	f10d 0107 	add.w	r1, sp, #7
   b6804:	2201      	movs	r2, #1
   b6806:	47a0      	blx	r4
}
   b6808:	b002      	add	sp, #8
   b680a:	bd10      	pop	{r4, pc}

000b680c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b680c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b680e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6810:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6814:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6818:	429a      	cmp	r2, r3
int TCPClient::read() {
   b681a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b681c:	d008      	beq.n	b6830 <_ZN9TCPClient4readEv+0x24>
   b681e:	6963      	ldr	r3, [r4, #20]
   b6820:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6824:	1c51      	adds	r1, r2, #1
   b6826:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b682a:	4413      	add	r3, r2
   b682c:	7918      	ldrb	r0, [r3, #4]
}
   b682e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6830:	6803      	ldr	r3, [r0, #0]
   b6832:	691b      	ldr	r3, [r3, #16]
   b6834:	4798      	blx	r3
   b6836:	2800      	cmp	r0, #0
   b6838:	d1f1      	bne.n	b681e <_ZN9TCPClient4readEv+0x12>
   b683a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b683e:	e7f6      	b.n	b682e <_ZN9TCPClient4readEv+0x22>

000b6840 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6840:	4770      	bx	lr

000b6842 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6842:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6844:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6846:	43c0      	mvns	r0, r0
   b6848:	0fc0      	lsrs	r0, r0, #31
   b684a:	4770      	bx	lr

000b684c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b684c:	4770      	bx	lr
	...

000b6850 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6850:	4b06      	ldr	r3, [pc, #24]	; (b686c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6852:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6854:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6856:	f100 040c 	add.w	r4, r0, #12
	    ||
   b685a:	d005      	beq.n	b6868 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b685c:	4608      	mov	r0, r1
   b685e:	f000 fd49 	bl	b72f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6862:	2800      	cmp	r0, #0
   b6864:	bf08      	it	eq
   b6866:	2400      	moveq	r4, #0
      }
   b6868:	4620      	mov	r0, r4
   b686a:	bd10      	pop	{r4, pc}
   b686c:	000be820 	.word	0x000be820

000b6870 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6870:	b510      	push	{r4, lr}
   b6872:	21ac      	movs	r1, #172	; 0xac
   b6874:	4604      	mov	r4, r0
   b6876:	f7fd fc12 	bl	b409e <_ZdlPvj>
   b687a:	4620      	mov	r0, r4
   b687c:	bd10      	pop	{r4, pc}

000b687e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b687e:	21ac      	movs	r1, #172	; 0xac
   b6880:	f7fd bc0d 	b.w	b409e <_ZdlPvj>

000b6884 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6888:	f04f 0800 	mov.w	r8, #0
   b688c:	b086      	sub	sp, #24
   b688e:	461c      	mov	r4, r3
   b6890:	f8c0 8004 	str.w	r8, [r0, #4]
   b6894:	4605      	mov	r5, r0
   b6896:	460e      	mov	r6, r1
   b6898:	4617      	mov	r7, r2
    struct timeval tv = {};
   b689a:	4641      	mov	r1, r8
   b689c:	2210      	movs	r2, #16
   b689e:	a802      	add	r0, sp, #8
   b68a0:	f002 fb90 	bl	b8fc4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b68a4:	1c63      	adds	r3, r4, #1
   b68a6:	d009      	beq.n	b68bc <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b68a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b68ac:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b68b0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b68b4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b68b8:	435c      	muls	r4, r3
   b68ba:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b68bc:	6968      	ldr	r0, [r5, #20]
   b68be:	2310      	movs	r3, #16
   b68c0:	9300      	str	r3, [sp, #0]
   b68c2:	6800      	ldr	r0, [r0, #0]
   b68c4:	ab02      	add	r3, sp, #8
   b68c6:	f241 0205 	movw	r2, #4101	; 0x1005
   b68ca:	f640 71ff 	movw	r1, #4095	; 0xfff
   b68ce:	f7ff f9c7 	bl	b5c60 <sock_setsockopt>
    if (ret < 0) {
   b68d2:	2800      	cmp	r0, #0
   b68d4:	da07      	bge.n	b68e6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b68d6:	f7ff fb8f 	bl	b5ff8 <__errno>
   b68da:	6803      	ldr	r3, [r0, #0]
   b68dc:	606b      	str	r3, [r5, #4]
        return 0;
   b68de:	2000      	movs	r0, #0
}
   b68e0:	b006      	add	sp, #24
   b68e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b68e6:	6968      	ldr	r0, [r5, #20]
   b68e8:	2300      	movs	r3, #0
   b68ea:	6800      	ldr	r0, [r0, #0]
   b68ec:	463a      	mov	r2, r7
   b68ee:	4631      	mov	r1, r6
   b68f0:	f7ff f9d6 	bl	b5ca0 <sock_send>
    if (ret < 0) {
   b68f4:	1e03      	subs	r3, r0, #0
   b68f6:	dbee      	blt.n	b68d6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b68f8:	4618      	mov	r0, r3
   b68fa:	e7f1      	b.n	b68e0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b68fc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b68fc:	b530      	push	{r4, r5, lr}
   b68fe:	b087      	sub	sp, #28
   b6900:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6902:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6904:	4668      	mov	r0, sp
   b6906:	f7ff fcdf 	bl	b62c8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b690a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b690c:	3404      	adds	r4, #4
   b690e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6910:	682b      	ldr	r3, [r5, #0]
   b6912:	7023      	strb	r3, [r4, #0]
    }
   b6914:	b007      	add	sp, #28
   b6916:	bd30      	pop	{r4, r5, pc}

000b6918 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6918:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b691a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b691c:	4b05      	ldr	r3, [pc, #20]	; (b6934 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b691e:	4604      	mov	r4, r0
   b6920:	358c      	adds	r5, #140	; 0x8c
   b6922:	f844 3b04 	str.w	r3, [r4], #4
   b6926:	4606      	mov	r6, r0
   b6928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b692a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b692c:	682b      	ldr	r3, [r5, #0]
   b692e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6930:	4630      	mov	r0, r6
   b6932:	bd70      	pop	{r4, r5, r6, pc}
   b6934:	000be894 	.word	0x000be894

000b6938 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b693c:	4698      	mov	r8, r3
    stop();
   b693e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6940:	b093      	sub	sp, #76	; 0x4c
   b6942:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6944:	2400      	movs	r4, #0
    stop();
   b6946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6948:	4606      	mov	r6, r0
   b694a:	4617      	mov	r7, r2
    stop();
   b694c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b694e:	4628      	mov	r0, r5
   b6950:	466b      	mov	r3, sp
   b6952:	4622      	mov	r2, r4
   b6954:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6956:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6958:	f7ff f97a 	bl	b5c50 <netdb_getaddrinfo>
   b695c:	4605      	mov	r5, r0
   b695e:	2800      	cmp	r0, #0
   b6960:	d163      	bne.n	b6a2a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6962:	9b00      	ldr	r3, [sp, #0]
   b6964:	2b00      	cmp	r3, #0
   b6966:	d04b      	beq.n	b6a00 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6968:	695b      	ldr	r3, [r3, #20]
   b696a:	2b00      	cmp	r3, #0
   b696c:	d048      	beq.n	b6a00 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b696e:	a806      	add	r0, sp, #24
   b6970:	f7ff fc66 	bl	b6240 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6974:	9b00      	ldr	r3, [sp, #0]
   b6976:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6978:	7863      	ldrb	r3, [r4, #1]
   b697a:	2b02      	cmp	r3, #2
   b697c:	d104      	bne.n	b6988 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b697e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6980:	a806      	add	r0, sp, #24
   b6982:	f7ff ffbb 	bl	b68fc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6986:	e026      	b.n	b69d6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6988:	2b0a      	cmp	r3, #10
   b698a:	d124      	bne.n	b69d6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b698c:	2211      	movs	r2, #17
   b698e:	4629      	mov	r1, r5
   b6990:	a801      	add	r0, sp, #4
   b6992:	f002 fb17 	bl	b8fc4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6996:	68a3      	ldr	r3, [r4, #8]
   b6998:	2b00      	cmp	r3, #0
   b699a:	d038      	beq.n	b6a0e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b699c:	f104 0308 	add.w	r3, r4, #8
   b69a0:	f10d 0c04 	add.w	ip, sp, #4
   b69a4:	3418      	adds	r4, #24
   b69a6:	6818      	ldr	r0, [r3, #0]
   b69a8:	6859      	ldr	r1, [r3, #4]
   b69aa:	4662      	mov	r2, ip
   b69ac:	c203      	stmia	r2!, {r0, r1}
   b69ae:	3308      	adds	r3, #8
   b69b0:	42a3      	cmp	r3, r4
   b69b2:	4694      	mov	ip, r2
   b69b4:	d1f7      	bne.n	b69a6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b69b6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b69b8:	a901      	add	r1, sp, #4
   b69ba:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b69bc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b69c0:	f7ff fc4c 	bl	b625c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b69c4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b69c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b69cc:	ac07      	add	r4, sp, #28
   b69ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b69d0:	f8dc 3000 	ldr.w	r3, [ip]
   b69d4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b69d6:	a806      	add	r0, sp, #24
   b69d8:	f7ff fc52 	bl	b6280 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b69dc:	b180      	cbz	r0, b6a00 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b69de:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b69e0:	ad07      	add	r5, sp, #28
   b69e2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b69e6:	4b12      	ldr	r3, [pc, #72]	; (b6a30 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b69e8:	930c      	str	r3, [sp, #48]	; 0x30
   b69ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b69ec:	ac0d      	add	r4, sp, #52	; 0x34
   b69ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b69f0:	682b      	ldr	r3, [r5, #0]
   b69f2:	7023      	strb	r3, [r4, #0]
   b69f4:	463a      	mov	r2, r7
   b69f6:	4643      	mov	r3, r8
   b69f8:	a90c      	add	r1, sp, #48	; 0x30
   b69fa:	4630      	mov	r0, r6
   b69fc:	47c8      	blx	r9
   b69fe:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6a00:	9800      	ldr	r0, [sp, #0]
   b6a02:	f7ff f91d 	bl	b5c40 <netdb_freeaddrinfo>
}
   b6a06:	4628      	mov	r0, r5
   b6a08:	b013      	add	sp, #76	; 0x4c
   b6a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6a0e:	68e3      	ldr	r3, [r4, #12]
   b6a10:	2b00      	cmp	r3, #0
   b6a12:	d1c3      	bne.n	b699c <_ZN9TCPClient7connectEPKctm+0x64>
   b6a14:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6a18:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6a1c:	f7ff f900 	bl	b5c20 <inet_htonl>
   b6a20:	4581      	cmp	r9, r0
   b6a22:	d1bb      	bne.n	b699c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6a24:	f104 0114 	add.w	r1, r4, #20
   b6a28:	e7aa      	b.n	b6980 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6a2a:	4625      	mov	r5, r4
   b6a2c:	e7e8      	b.n	b6a00 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6a2e:	bf00      	nop
   b6a30:	000be894 	.word	0x000be894

000b6a34 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6a34:	b538      	push	{r3, r4, r5, lr}
   b6a36:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6a38:	681a      	ldr	r2, [r3, #0]
   b6a3a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6a3c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6a3e:	da10      	bge.n	b6a62 <_ZN9TCPClient9connectedEv+0x2e>
   b6a40:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6a44:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6a48:	429a      	cmp	r2, r3
   b6a4a:	d10a      	bne.n	b6a62 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6a4c:	6803      	ldr	r3, [r0, #0]
   b6a4e:	691b      	ldr	r3, [r3, #16]
   b6a50:	4798      	blx	r3
        if (!rv) {
   b6a52:	4604      	mov	r4, r0
   b6a54:	b928      	cbnz	r0, b6a62 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6a56:	682b      	ldr	r3, [r5, #0]
   b6a58:	4628      	mov	r0, r5
   b6a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a5c:	4798      	blx	r3
        rv = available();
   b6a5e:	4620      	mov	r0, r4
}
   b6a60:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6a62:	2001      	movs	r0, #1
   b6a64:	e7fc      	b.n	b6a60 <_ZN9TCPClient9connectedEv+0x2c>

000b6a66 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6a66:	b510      	push	{r4, lr}
   b6a68:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6a6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6a6e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6a72:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6a74:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6a76:	d005      	beq.n	b6a84 <_ZN9TCPClient4peekEv+0x1e>
   b6a78:	6963      	ldr	r3, [r4, #20]
   b6a7a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6a7e:	4413      	add	r3, r2
   b6a80:	7918      	ldrb	r0, [r3, #4]
}
   b6a82:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6a84:	6803      	ldr	r3, [r0, #0]
   b6a86:	691b      	ldr	r3, [r3, #16]
   b6a88:	4798      	blx	r3
   b6a8a:	2800      	cmp	r0, #0
   b6a8c:	d1f4      	bne.n	b6a78 <_ZN9TCPClient4peekEv+0x12>
   b6a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6a92:	e7f6      	b.n	b6a82 <_ZN9TCPClient4peekEv+0x1c>

000b6a94 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a96:	6943      	ldr	r3, [r0, #20]
   b6a98:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6a9a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6a9e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6aa2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6aa4:	4605      	mov	r5, r0
   b6aa6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6aa8:	d016      	beq.n	b6ad8 <_ZN9TCPClient4readEPhj+0x44>
   b6aaa:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6aac:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6ab0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6ab4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6ab6:	42bc      	cmp	r4, r7
   b6ab8:	bf28      	it	cs
   b6aba:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6abc:	3304      	adds	r3, #4
   b6abe:	4622      	mov	r2, r4
   b6ac0:	4419      	add	r1, r3
   b6ac2:	4630      	mov	r0, r6
   b6ac4:	f002 fa70 	bl	b8fa8 <memcpy>
   b6ac8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6aca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6ace:	4423      	add	r3, r4
   b6ad0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6ad4:	4620      	mov	r0, r4
   b6ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6ad8:	6803      	ldr	r3, [r0, #0]
   b6ada:	691b      	ldr	r3, [r3, #16]
   b6adc:	4798      	blx	r3
   b6ade:	2800      	cmp	r0, #0
   b6ae0:	d1e3      	bne.n	b6aaa <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6ae2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b6ae6:	e7f5      	b.n	b6ad4 <_ZN9TCPClient4readEPhj+0x40>

000b6ae8 <_ZN9TCPClient12flush_bufferEv>:
   b6ae8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6aea:	2300      	movs	r3, #0
   b6aec:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6af0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6af2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6af6:	4770      	bx	lr

000b6af8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6afc:	461f      	mov	r7, r3
    stop();
   b6afe:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6b00:	460c      	mov	r4, r1
    stop();
   b6b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6b04:	b08a      	sub	sp, #40	; 0x28
   b6b06:	4605      	mov	r5, r0
   b6b08:	4616      	mov	r6, r2
    stop();
   b6b0a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b6b0c:	7d23      	ldrb	r3, [r4, #20]
   b6b0e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b6b12:	2b04      	cmp	r3, #4
   b6b14:	bf0c      	ite	eq
   b6b16:	2002      	moveq	r0, #2
   b6b18:	200a      	movne	r0, #10
   b6b1a:	2206      	movs	r2, #6
   b6b1c:	2101      	movs	r1, #1
   b6b1e:	f7ff f8c7 	bl	b5cb0 <sock_socket>
   b6b22:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b6b26:	696b      	ldr	r3, [r5, #20]
   b6b28:	681b      	ldr	r3, [r3, #0]
   b6b2a:	2b00      	cmp	r3, #0
   b6b2c:	da08      	bge.n	b6b40 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b6b2e:	682b      	ldr	r3, [r5, #0]
   b6b30:	4628      	mov	r0, r5
   b6b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6b34:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b6b36:	4798      	blx	r3
}
   b6b38:	4620      	mov	r0, r4
   b6b3a:	b00a      	add	sp, #40	; 0x28
   b6b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6b40:	4628      	mov	r0, r5
   b6b42:	f7ff ffd1 	bl	b6ae8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b6b46:	b1b7      	cbz	r7, b6b76 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6b48:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6b4a:	a903      	add	r1, sp, #12
   b6b4c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6b4e:	9303      	str	r3, [sp, #12]
   b6b50:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6b54:	f7ff f854 	bl	b5c00 <if_index_to_name>
   b6b58:	2800      	cmp	r0, #0
   b6b5a:	d1e8      	bne.n	b6b2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6b5c:	6968      	ldr	r0, [r5, #20]
   b6b5e:	2306      	movs	r3, #6
   b6b60:	9300      	str	r3, [sp, #0]
   b6b62:	6800      	ldr	r0, [r0, #0]
   b6b64:	ab03      	add	r3, sp, #12
   b6b66:	f241 020b 	movw	r2, #4107	; 0x100b
   b6b6a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6b6e:	f7ff f877 	bl	b5c60 <sock_setsockopt>
   b6b72:	2800      	cmp	r0, #0
   b6b74:	d1db      	bne.n	b6b2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6b76:	221c      	movs	r2, #28
   b6b78:	2100      	movs	r1, #0
   b6b7a:	a803      	add	r0, sp, #12
   b6b7c:	f002 fa22 	bl	b8fc4 <memset>
    if (ip.version() == 4) {
   b6b80:	7d23      	ldrb	r3, [r4, #20]
   b6b82:	2b04      	cmp	r3, #4
   b6b84:	d11d      	bne.n	b6bc2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6b86:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6b8a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6b8c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6b90:	f7ff f84e 	bl	b5c30 <inet_htons>
   b6b94:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6b98:	6860      	ldr	r0, [r4, #4]
   b6b9a:	f7ff f841 	bl	b5c20 <inet_htonl>
   b6b9e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6ba0:	696b      	ldr	r3, [r5, #20]
   b6ba2:	221c      	movs	r2, #28
   b6ba4:	6818      	ldr	r0, [r3, #0]
   b6ba6:	a903      	add	r1, sp, #12
   b6ba8:	f7ff f86a 	bl	b5c80 <sock_connect>
   b6bac:	2800      	cmp	r0, #0
   b6bae:	d1be      	bne.n	b6b2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6bb0:	3404      	adds	r4, #4
   b6bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6bb4:	696d      	ldr	r5, [r5, #20]
   b6bb6:	358c      	adds	r5, #140	; 0x8c
   b6bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6bba:	6823      	ldr	r3, [r4, #0]
   b6bbc:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6bbe:	2401      	movs	r4, #1
   b6bc0:	e7ba      	b.n	b6b38 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6bc2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6bc6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6bc8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6bcc:	f7ff f830 	bl	b5c30 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6bd0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6bd2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6bd6:	1d23      	adds	r3, r4, #4
   b6bd8:	f104 0714 	add.w	r7, r4, #20
   b6bdc:	6818      	ldr	r0, [r3, #0]
   b6bde:	6859      	ldr	r1, [r3, #4]
   b6be0:	4632      	mov	r2, r6
   b6be2:	c203      	stmia	r2!, {r0, r1}
   b6be4:	3308      	adds	r3, #8
   b6be6:	42bb      	cmp	r3, r7
   b6be8:	4616      	mov	r6, r2
   b6bea:	d1f7      	bne.n	b6bdc <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6bec:	e7d8      	b.n	b6ba0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6bf0 <_ZN9TCPClient9availableEv>:
{
   b6bf0:	b530      	push	{r4, r5, lr}
   b6bf2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6bf4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6bf8:	b08b      	sub	sp, #44	; 0x2c
   b6bfa:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6bfc:	b12b      	cbz	r3, b6c0a <_ZN9TCPClient9availableEv+0x1a>
   b6bfe:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6c02:	429a      	cmp	r2, r3
   b6c04:	d101      	bne.n	b6c0a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6c06:	f7ff ff6f 	bl	b6ae8 <_ZN9TCPClient12flush_bufferEv>
   b6c0a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6c0c:	6808      	ldr	r0, [r1, #0]
   b6c0e:	2800      	cmp	r0, #0
   b6c10:	db18      	blt.n	b6c44 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6c12:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b6c16:	2d7f      	cmp	r5, #127	; 0x7f
   b6c18:	d814      	bhi.n	b6c44 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6c1a:	3104      	adds	r1, #4
   b6c1c:	2308      	movs	r3, #8
   b6c1e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6c22:	4429      	add	r1, r5
   b6c24:	f7ff f834 	bl	b5c90 <sock_recv>
            if (ret > 0) {
   b6c28:	2800      	cmp	r0, #0
   b6c2a:	dd13      	ble.n	b6c54 <_ZN9TCPClient9availableEv+0x64>
   b6c2c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6c2e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6c32:	b90a      	cbnz	r2, b6c38 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6c34:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6c38:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6c3a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6c3e:	4410      	add	r0, r2
   b6c40:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6c44:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6c46:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6c4a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6c4e:	1ac0      	subs	r0, r0, r3
   b6c50:	b00b      	add	sp, #44	; 0x2c
   b6c52:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6c54:	f7ff f9d0 	bl	b5ff8 <__errno>
   b6c58:	6803      	ldr	r3, [r0, #0]
   b6c5a:	2b0b      	cmp	r3, #11
   b6c5c:	d0f2      	beq.n	b6c44 <_ZN9TCPClient9availableEv+0x54>
   b6c5e:	f7ff f9cb 	bl	b5ff8 <__errno>
   b6c62:	6803      	ldr	r3, [r0, #0]
   b6c64:	2b0b      	cmp	r3, #11
   b6c66:	d0ed      	beq.n	b6c44 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6c68:	2320      	movs	r3, #32
   b6c6a:	2500      	movs	r5, #0
   b6c6c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6c70:	f7ff f9c2 	bl	b5ff8 <__errno>
   b6c74:	6803      	ldr	r3, [r0, #0]
   b6c76:	9301      	str	r3, [sp, #4]
   b6c78:	4b08      	ldr	r3, [pc, #32]	; (b6c9c <_ZN9TCPClient9availableEv+0xac>)
   b6c7a:	4909      	ldr	r1, [pc, #36]	; (b6ca0 <_ZN9TCPClient9availableEv+0xb0>)
   b6c7c:	9300      	str	r3, [sp, #0]
   b6c7e:	aa02      	add	r2, sp, #8
   b6c80:	462b      	mov	r3, r5
   b6c82:	2032      	movs	r0, #50	; 0x32
   b6c84:	f7ff f8f4 	bl	b5e70 <log_message>
                    sock_close(d_->sock);
   b6c88:	6963      	ldr	r3, [r4, #20]
   b6c8a:	6818      	ldr	r0, [r3, #0]
   b6c8c:	f7fe fff0 	bl	b5c70 <sock_close>
   b6c90:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6c96:	601a      	str	r2, [r3, #0]
   b6c98:	e7d4      	b.n	b6c44 <_ZN9TCPClient9availableEv+0x54>
   b6c9a:	bf00      	nop
   b6c9c:	000be8ef 	.word	0x000be8ef
   b6ca0:	000be8e8 	.word	0x000be8e8

000b6ca4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6ca4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6ca6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6ca8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6caa:	6818      	ldr	r0, [r3, #0]
   b6cac:	2800      	cmp	r0, #0
   b6cae:	db01      	blt.n	b6cb4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6cb0:	f7fe ffde 	bl	b5c70 <sock_close>
   b6cb4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6cba:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6cbc:	6960      	ldr	r0, [r4, #20]
   b6cbe:	2211      	movs	r2, #17
   b6cc0:	2100      	movs	r1, #0
   b6cc2:	308c      	adds	r0, #140	; 0x8c
   b6cc4:	f002 f97e 	bl	b8fc4 <memset>
    flush_buffer();
   b6cc8:	4620      	mov	r0, r4
}
   b6cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6cce:	f7ff bf0b 	b.w	b6ae8 <_ZN9TCPClient12flush_bufferEv>

000b6cd2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6cd2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6cd4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6cd6:	4604      	mov	r4, r0
          total(0) {
   b6cd8:	6001      	str	r1, [r0, #0]
   b6cda:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6cde:	3088      	adds	r0, #136	; 0x88
   b6ce0:	f7ff faae 	bl	b6240 <_ZN9IPAddressC1Ev>
}
   b6ce4:	4620      	mov	r0, r4
   b6ce6:	bd10      	pop	{r4, pc}

000b6ce8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6ce8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6cea:	2300      	movs	r3, #0
   b6cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6cf0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6cf4:	4a0e      	ldr	r2, [pc, #56]	; (b6d30 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6cf6:	6103      	str	r3, [r0, #16]
   b6cf8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6cfa:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6cfc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6cfe:	20ac      	movs	r0, #172	; 0xac
   b6d00:	9101      	str	r1, [sp, #4]
   b6d02:	f7fd f9c8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6d06:	1e05      	subs	r5, r0, #0
   b6d08:	f105 060c 	add.w	r6, r5, #12
   b6d0c:	d008      	beq.n	b6d20 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6d0e:	2301      	movs	r3, #1
   b6d10:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6d14:	4b07      	ldr	r3, [pc, #28]	; (b6d34 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6d16:	9901      	ldr	r1, [sp, #4]
   b6d18:	602b      	str	r3, [r5, #0]
   b6d1a:	4630      	mov	r0, r6
   b6d1c:	f7ff ffd9 	bl	b6cd2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6d20:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6d22:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6d26:	f7ff fedf 	bl	b6ae8 <_ZN9TCPClient12flush_bufferEv>
}
   b6d2a:	b002      	add	sp, #8
   b6d2c:	bd70      	pop	{r4, r5, r6, pc}
   b6d2e:	bf00      	nop
   b6d30:	000be924 	.word	0x000be924
   b6d34:	000be908 	.word	0x000be908

000b6d38 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6d38:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6d3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b6d3e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6d40:	f7ff ffd2 	bl	b6ce8 <_ZN9TCPClientC1Ei>
}
   b6d44:	4620      	mov	r0, r4
   b6d46:	bd10      	pop	{r4, pc}

000b6d48 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6d48:	b510      	push	{r4, lr}
   b6d4a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6d4c:	6800      	ldr	r0, [r0, #0]
   b6d4e:	2800      	cmp	r0, #0
   b6d50:	db01      	blt.n	b6d56 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6d52:	f7fe ff8d 	bl	b5c70 <sock_close>
    }
}
   b6d56:	4620      	mov	r0, r4
   b6d58:	bd10      	pop	{r4, pc}

000b6d5a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6d5a:	300c      	adds	r0, #12
   b6d5c:	f7ff bff4 	b.w	b6d48 <_ZN9TCPClient4DataD1Ev>

000b6d60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6d60:	4b02      	ldr	r3, [pc, #8]	; (b6d6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6d62:	681a      	ldr	r2, [r3, #0]
   b6d64:	4b02      	ldr	r3, [pc, #8]	; (b6d70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6d66:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6d68:	4770      	bx	lr
   b6d6a:	bf00      	nop
   b6d6c:	2003e578 	.word	0x2003e578
   b6d70:	2003e6fc 	.word	0x2003e6fc

000b6d74 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6d74:	4770      	bx	lr

000b6d76 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6d76:	7441      	strb	r1, [r0, #17]
}
   b6d78:	4770      	bx	lr

000b6d7a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6d7a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6d7c:	7c00      	ldrb	r0, [r0, #16]
   b6d7e:	f7ff f81f 	bl	b5dc0 <hal_usart_available_data_for_write>
}
   b6d82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d86:	bd08      	pop	{r3, pc}

000b6d88 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6d88:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6d8a:	7c00      	ldrb	r0, [r0, #16]
   b6d8c:	f7fe fff0 	bl	b5d70 <hal_usart_available>
}
   b6d90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d94:	bd08      	pop	{r3, pc}

000b6d96 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6d96:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6d98:	7c00      	ldrb	r0, [r0, #16]
   b6d9a:	f7fe fff9 	bl	b5d90 <hal_usart_peek>
}
   b6d9e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6da2:	bd08      	pop	{r3, pc}

000b6da4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6da4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6da6:	7c00      	ldrb	r0, [r0, #16]
   b6da8:	f7fe ffea 	bl	b5d80 <hal_usart_read>
}
   b6dac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6db0:	bd08      	pop	{r3, pc}

000b6db2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6db2:	7c00      	ldrb	r0, [r0, #16]
   b6db4:	f7fe bff4 	b.w	b5da0 <hal_usart_flush>

000b6db8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6dba:	7c45      	ldrb	r5, [r0, #17]
{
   b6dbc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6dbe:	b12d      	cbz	r5, b6dcc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6dc0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6dc2:	b003      	add	sp, #12
   b6dc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6dc8:	f7fe bfca 	b.w	b5d60 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6dcc:	7c00      	ldrb	r0, [r0, #16]
   b6dce:	9101      	str	r1, [sp, #4]
   b6dd0:	f7fe fff6 	bl	b5dc0 <hal_usart_available_data_for_write>
   b6dd4:	2800      	cmp	r0, #0
   b6dd6:	9901      	ldr	r1, [sp, #4]
   b6dd8:	dcf2      	bgt.n	b6dc0 <_ZN11USARTSerial5writeEh+0x8>
}
   b6dda:	4628      	mov	r0, r5
   b6ddc:	b003      	add	sp, #12
   b6dde:	bd30      	pop	{r4, r5, pc}

000b6de0 <_ZN11USARTSerialD0Ev>:
   b6de0:	b510      	push	{r4, lr}
   b6de2:	2114      	movs	r1, #20
   b6de4:	4604      	mov	r4, r0
   b6de6:	f7fd f95a 	bl	b409e <_ZdlPvj>
   b6dea:	4620      	mov	r0, r4
   b6dec:	bd10      	pop	{r4, pc}
	...

000b6df0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6df0:	b510      	push	{r4, lr}
   b6df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6df6:	4604      	mov	r4, r0
   b6df8:	4608      	mov	r0, r1
   b6dfa:	4611      	mov	r1, r2
   b6dfc:	2200      	movs	r2, #0
   b6dfe:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6e02:	4b04      	ldr	r3, [pc, #16]	; (b6e14 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6e04:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6e06:	2301      	movs	r3, #1
  _serial = serial;
   b6e08:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6e0a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6e0c:	f7fe ffe0 	bl	b5dd0 <hal_usart_init_ex>
}
   b6e10:	4620      	mov	r0, r4
   b6e12:	bd10      	pop	{r4, pc}
   b6e14:	000be98c 	.word	0x000be98c

000b6e18 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6e18:	7441      	strb	r1, [r0, #17]
}
   b6e1a:	4770      	bx	lr

000b6e1c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6e1c:	4770      	bx	lr

000b6e1e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6e1e:	4770      	bx	lr

000b6e20 <_ZN9USBSerial4readEv>:
{
   b6e20:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6e22:	2100      	movs	r1, #0
   b6e24:	7c00      	ldrb	r0, [r0, #16]
   b6e26:	f7fe fffb 	bl	b5e20 <HAL_USB_USART_Receive_Data>
}
   b6e2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6e2e:	bd08      	pop	{r3, pc}

000b6e30 <_ZN9USBSerial4peekEv>:
{
   b6e30:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6e32:	2101      	movs	r1, #1
   b6e34:	7c00      	ldrb	r0, [r0, #16]
   b6e36:	f7fe fff3 	bl	b5e20 <HAL_USB_USART_Receive_Data>
}
   b6e3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6e3e:	bd08      	pop	{r3, pc}

000b6e40 <_ZN9USBSerial17availableForWriteEv>:
{
   b6e40:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6e42:	7c00      	ldrb	r0, [r0, #16]
   b6e44:	f7fe ffe4 	bl	b5e10 <HAL_USB_USART_Available_Data_For_Write>
}
   b6e48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6e4c:	bd08      	pop	{r3, pc}

000b6e4e <_ZN9USBSerial9availableEv>:
{
   b6e4e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6e50:	7c00      	ldrb	r0, [r0, #16]
   b6e52:	f7fe ffd5 	bl	b5e00 <HAL_USB_USART_Available_Data>
}
   b6e56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6e5a:	bd08      	pop	{r3, pc}

000b6e5c <_ZN9USBSerial5writeEh>:
{
   b6e5c:	b513      	push	{r0, r1, r4, lr}
   b6e5e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e60:	7c00      	ldrb	r0, [r0, #16]
{
   b6e62:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e64:	f7fe ffd4 	bl	b5e10 <HAL_USB_USART_Available_Data_For_Write>
   b6e68:	2800      	cmp	r0, #0
   b6e6a:	9901      	ldr	r1, [sp, #4]
   b6e6c:	dc01      	bgt.n	b6e72 <_ZN9USBSerial5writeEh+0x16>
   b6e6e:	7c60      	ldrb	r0, [r4, #17]
   b6e70:	b120      	cbz	r0, b6e7c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6e72:	7c20      	ldrb	r0, [r4, #16]
   b6e74:	f7fe ffdc 	bl	b5e30 <HAL_USB_USART_Send_Data>
   b6e78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6e7c:	b002      	add	sp, #8
   b6e7e:	bd10      	pop	{r4, pc}

000b6e80 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6e80:	7c00      	ldrb	r0, [r0, #16]
   b6e82:	f7fe bfdd 	b.w	b5e40 <HAL_USB_USART_Flush_Data>

000b6e86 <_ZN9USBSerialD0Ev>:
   b6e86:	b510      	push	{r4, lr}
   b6e88:	2114      	movs	r1, #20
   b6e8a:	4604      	mov	r4, r0
   b6e8c:	f7fd f907 	bl	b409e <_ZdlPvj>
   b6e90:	4620      	mov	r0, r4
   b6e92:	bd10      	pop	{r4, pc}

000b6e94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6e94:	b510      	push	{r4, lr}
   b6e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e9a:	4604      	mov	r4, r0
   b6e9c:	4608      	mov	r0, r1
   b6e9e:	2100      	movs	r1, #0
   b6ea0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6ea4:	4b04      	ldr	r3, [pc, #16]	; (b6eb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6ea6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6ea8:	2301      	movs	r3, #1
  _serial = serial;
   b6eaa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6eac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6eae:	4611      	mov	r1, r2
   b6eb0:	f7fe ff96 	bl	b5de0 <HAL_USB_USART_Init>
}
   b6eb4:	4620      	mov	r0, r4
   b6eb6:	bd10      	pop	{r4, pc}
   b6eb8:	000be9bc 	.word	0x000be9bc

000b6ebc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6ebc:	7c00      	ldrb	r0, [r0, #16]
   b6ebe:	2200      	movs	r2, #0
   b6ec0:	f7fe bf96 	b.w	b5df0 <HAL_USB_USART_Begin>

000b6ec4 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6ec4:	7c00      	ldrb	r0, [r0, #16]
   b6ec6:	f7fe bfc3 	b.w	b5e50 <HAL_USB_USART_Is_Connected>

000b6eca <_Z19acquireSerialBufferv>:
{
   b6eca:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6ecc:	2214      	movs	r2, #20
{
   b6ece:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6ed0:	2100      	movs	r1, #0
   b6ed2:	f002 f877 	bl	b8fc4 <memset>
}
   b6ed6:	4620      	mov	r0, r4
   b6ed8:	bd10      	pop	{r4, pc}
	...

000b6edc <_Z16_fetch_usbserialv>:
{
   b6edc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6ede:	4c0f      	ldr	r4, [pc, #60]	; (b6f1c <_Z16_fetch_usbserialv+0x40>)
{
   b6ee0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6ee2:	a803      	add	r0, sp, #12
   b6ee4:	f7ff fff1 	bl	b6eca <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6ee8:	7821      	ldrb	r1, [r4, #0]
   b6eea:	f3bf 8f5b 	dmb	ish
   b6eee:	f011 0101 	ands.w	r1, r1, #1
   b6ef2:	d10f      	bne.n	b6f14 <_Z16_fetch_usbserialv+0x38>
   b6ef4:	4620      	mov	r0, r4
   b6ef6:	9101      	str	r1, [sp, #4]
   b6ef8:	f7fd f8e0 	bl	b40bc <__cxa_guard_acquire>
   b6efc:	9901      	ldr	r1, [sp, #4]
   b6efe:	b148      	cbz	r0, b6f14 <_Z16_fetch_usbserialv+0x38>
   b6f00:	aa03      	add	r2, sp, #12
   b6f02:	4807      	ldr	r0, [pc, #28]	; (b6f20 <_Z16_fetch_usbserialv+0x44>)
   b6f04:	f7ff ffc6 	bl	b6e94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6f08:	4620      	mov	r0, r4
   b6f0a:	f7fd f8dc 	bl	b40c6 <__cxa_guard_release>
   b6f0e:	4805      	ldr	r0, [pc, #20]	; (b6f24 <_Z16_fetch_usbserialv+0x48>)
   b6f10:	f002 f844 	bl	b8f9c <atexit>
	return _usbserial;
}
   b6f14:	4802      	ldr	r0, [pc, #8]	; (b6f20 <_Z16_fetch_usbserialv+0x44>)
   b6f16:	b008      	add	sp, #32
   b6f18:	bd10      	pop	{r4, pc}
   b6f1a:	bf00      	nop
   b6f1c:	2003e700 	.word	0x2003e700
   b6f20:	2003e704 	.word	0x2003e704
   b6f24:	000b6e1d 	.word	0x000b6e1d

000b6f28 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6f28:	2200      	movs	r2, #0
   b6f2a:	6840      	ldr	r0, [r0, #4]
   b6f2c:	4611      	mov	r1, r2
   b6f2e:	f7fe bff3 	b.w	b5f18 <network_ready>

000b6f32 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6f32:	2200      	movs	r2, #0
   b6f34:	6840      	ldr	r0, [r0, #4]
   b6f36:	4611      	mov	r1, r2
   b6f38:	f7ff b80e 	b.w	b5f58 <network_listening>

000b6f3c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6f3c:	2200      	movs	r2, #0
   b6f3e:	6840      	ldr	r0, [r0, #4]
   b6f40:	4611      	mov	r1, r2
   b6f42:	f7ff b821 	b.w	b5f88 <network_get_listen_timeout>

000b6f46 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6f46:	6840      	ldr	r0, [r0, #4]
   b6f48:	2200      	movs	r2, #0
   b6f4a:	f7ff b815 	b.w	b5f78 <network_set_listen_timeout>

000b6f4e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6f4e:	6840      	ldr	r0, [r0, #4]
   b6f50:	2200      	movs	r2, #0
   b6f52:	f081 0101 	eor.w	r1, r1, #1
   b6f56:	f7fe bff7 	b.w	b5f48 <network_listen>

000b6f5a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6f5a:	2300      	movs	r3, #0
   b6f5c:	6840      	ldr	r0, [r0, #4]
   b6f5e:	461a      	mov	r2, r3
   b6f60:	4619      	mov	r1, r3
   b6f62:	f7fe bfe9 	b.w	b5f38 <network_off>

000b6f66 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6f66:	2300      	movs	r3, #0
   b6f68:	6840      	ldr	r0, [r0, #4]
   b6f6a:	461a      	mov	r2, r3
   b6f6c:	4619      	mov	r1, r3
   b6f6e:	f7fe bfdb 	b.w	b5f28 <network_on>

000b6f72 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6f72:	2200      	movs	r2, #0
   b6f74:	6840      	ldr	r0, [r0, #4]
   b6f76:	4611      	mov	r1, r2
   b6f78:	f7fe bfbe 	b.w	b5ef8 <network_connecting>

000b6f7c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6f7c:	6840      	ldr	r0, [r0, #4]
   b6f7e:	2200      	movs	r2, #0
   b6f80:	2102      	movs	r1, #2
   b6f82:	f7fe bfc1 	b.w	b5f08 <network_disconnect>

000b6f86 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6f86:	2300      	movs	r3, #0
   b6f88:	6840      	ldr	r0, [r0, #4]
   b6f8a:	461a      	mov	r2, r3
   b6f8c:	f7fe bfac 	b.w	b5ee8 <network_connect>

000b6f90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6f90:	4b02      	ldr	r3, [pc, #8]	; (b6f9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6f92:	2204      	movs	r2, #4
   b6f94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6f96:	4a02      	ldr	r2, [pc, #8]	; (b6fa0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6f98:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6f9a:	4770      	bx	lr
   b6f9c:	2003e718 	.word	0x2003e718
   b6fa0:	000be9ec 	.word	0x000be9ec

000b6fa4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6fa4:	4b01      	ldr	r3, [pc, #4]	; (b6fac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6fa6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6fa8:	4770      	bx	lr
   b6faa:	bf00      	nop
   b6fac:	2003e580 	.word	0x2003e580

000b6fb0 <serialEventRun>:
{
   b6fb0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6fb2:	4b0b      	ldr	r3, [pc, #44]	; (b6fe0 <serialEventRun+0x30>)
   b6fb4:	b143      	cbz	r3, b6fc8 <serialEventRun+0x18>
   b6fb6:	f7ff ff91 	bl	b6edc <_Z16_fetch_usbserialv>
   b6fba:	6803      	ldr	r3, [r0, #0]
   b6fbc:	691b      	ldr	r3, [r3, #16]
   b6fbe:	4798      	blx	r3
   b6fc0:	2800      	cmp	r0, #0
   b6fc2:	dd01      	ble.n	b6fc8 <serialEventRun+0x18>
        serialEvent();
   b6fc4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6fc8:	4b06      	ldr	r3, [pc, #24]	; (b6fe4 <serialEventRun+0x34>)
   b6fca:	b143      	cbz	r3, b6fde <serialEventRun+0x2e>
   b6fcc:	f000 f96c 	bl	b72a8 <_Z22__fetch_global_Serial1v>
   b6fd0:	6803      	ldr	r3, [r0, #0]
   b6fd2:	691b      	ldr	r3, [r3, #16]
   b6fd4:	4798      	blx	r3
   b6fd6:	2800      	cmp	r0, #0
   b6fd8:	dd01      	ble.n	b6fde <serialEventRun+0x2e>
        serialEvent1();
   b6fda:	f3af 8000 	nop.w
}
   b6fde:	bd08      	pop	{r3, pc}
	...

000b6fe8 <_post_loop>:
{
   b6fe8:	b508      	push	{r3, lr}
	serialEventRun();
   b6fea:	f7ff ffe1 	bl	b6fb0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6fee:	f7fe fd7f 	bl	b5af0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6ff2:	4b01      	ldr	r3, [pc, #4]	; (b6ff8 <_post_loop+0x10>)
   b6ff4:	6018      	str	r0, [r3, #0]
}
   b6ff6:	bd08      	pop	{r3, pc}
   b6ff8:	2003e728 	.word	0x2003e728

000b6ffc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6ffc:	4805      	ldr	r0, [pc, #20]	; (b7014 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6ffe:	4a06      	ldr	r2, [pc, #24]	; (b7018 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7000:	4906      	ldr	r1, [pc, #24]	; (b701c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7002:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7004:	1a12      	subs	r2, r2, r0
   b7006:	f001 ffcf 	bl	b8fa8 <memcpy>
    __backup_sram_signature = signature;
   b700a:	4b05      	ldr	r3, [pc, #20]	; (b7020 <_Z33system_initialize_user_backup_ramv+0x24>)
   b700c:	4a05      	ldr	r2, [pc, #20]	; (b7024 <_Z33system_initialize_user_backup_ramv+0x28>)
   b700e:	601a      	str	r2, [r3, #0]
}
   b7010:	bd08      	pop	{r3, pc}
   b7012:	bf00      	nop
   b7014:	2003f400 	.word	0x2003f400
   b7018:	2003f404 	.word	0x2003f404
   b701c:	000bebf4 	.word	0x000bebf4
   b7020:	2003f400 	.word	0x2003f400
   b7024:	9a271c1e 	.word	0x9a271c1e

000b7028 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7028:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b702a:	2300      	movs	r3, #0
   b702c:	9300      	str	r3, [sp, #0]
   b702e:	461a      	mov	r2, r3
   b7030:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7034:	f7fe ff3e 	bl	b5eb4 <system_ctrl_set_result>
}
   b7038:	b003      	add	sp, #12
   b703a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7040 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7040:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7042:	8843      	ldrh	r3, [r0, #2]
   b7044:	2b0a      	cmp	r3, #10
   b7046:	d008      	beq.n	b705a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7048:	2b50      	cmp	r3, #80	; 0x50
   b704a:	d10b      	bne.n	b7064 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b704c:	4b09      	ldr	r3, [pc, #36]	; (b7074 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b704e:	681b      	ldr	r3, [r3, #0]
   b7050:	b14b      	cbz	r3, b7066 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7052:	b003      	add	sp, #12
   b7054:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7058:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b705a:	f7ff ffe5 	bl	b7028 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b705e:	b003      	add	sp, #12
   b7060:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7064:	2300      	movs	r3, #0
   b7066:	9300      	str	r3, [sp, #0]
   b7068:	461a      	mov	r2, r3
   b706a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b706e:	f7fe ff21 	bl	b5eb4 <system_ctrl_set_result>
}
   b7072:	e7f4      	b.n	b705e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7074:	2003e724 	.word	0x2003e724

000b7078 <module_user_init_hook>:
{
   b7078:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b707a:	4812      	ldr	r0, [pc, #72]	; (b70c4 <module_user_init_hook+0x4c>)
   b707c:	2100      	movs	r1, #0
   b707e:	f7fe ffcb 	bl	b6018 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7082:	4b11      	ldr	r3, [pc, #68]	; (b70c8 <module_user_init_hook+0x50>)
   b7084:	681a      	ldr	r2, [r3, #0]
   b7086:	4b11      	ldr	r3, [pc, #68]	; (b70cc <module_user_init_hook+0x54>)
   b7088:	429a      	cmp	r2, r3
   b708a:	4b11      	ldr	r3, [pc, #68]	; (b70d0 <module_user_init_hook+0x58>)
   b708c:	bf0c      	ite	eq
   b708e:	2201      	moveq	r2, #1
   b7090:	2200      	movne	r2, #0
   b7092:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7094:	d001      	beq.n	b709a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7096:	f7ff ffb1 	bl	b6ffc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b709a:	f7fe fd11 	bl	b5ac0 <HAL_RNG_GetRandomNumber>
   b709e:	4604      	mov	r4, r0
    srand(seed);
   b70a0:	f001 ff98 	bl	b8fd4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b70a4:	4b0b      	ldr	r3, [pc, #44]	; (b70d4 <module_user_init_hook+0x5c>)
   b70a6:	b113      	cbz	r3, b70ae <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b70a8:	4620      	mov	r0, r4
   b70aa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b70ae:	2100      	movs	r1, #0
   b70b0:	4808      	ldr	r0, [pc, #32]	; (b70d4 <module_user_init_hook+0x5c>)
   b70b2:	f7fe ff11 	bl	b5ed8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b70b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b70ba:	4807      	ldr	r0, [pc, #28]	; (b70d8 <module_user_init_hook+0x60>)
   b70bc:	2100      	movs	r1, #0
   b70be:	f7fe beef 	b.w	b5ea0 <system_ctrl_set_app_request_handler>
   b70c2:	bf00      	nop
   b70c4:	000b6fa5 	.word	0x000b6fa5
   b70c8:	2003f400 	.word	0x2003f400
   b70cc:	9a271c1e 	.word	0x9a271c1e
   b70d0:	2003e720 	.word	0x2003e720
   b70d4:	00000000 	.word	0x00000000
   b70d8:	000b7041 	.word	0x000b7041

000b70dc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b70dc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b70de:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b70e0:	d902      	bls.n	b70e8 <pinAvailable+0xc>
    return false;
   b70e2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b70e4:	b002      	add	sp, #8
   b70e6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b70e8:	f1a0 030b 	sub.w	r3, r0, #11
   b70ec:	2b02      	cmp	r3, #2
   b70ee:	d81a      	bhi.n	b7126 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b70f0:	4c17      	ldr	r4, [pc, #92]	; (b7150 <pinAvailable+0x74>)
   b70f2:	7821      	ldrb	r1, [r4, #0]
   b70f4:	f3bf 8f5b 	dmb	ish
   b70f8:	f011 0101 	ands.w	r1, r1, #1
   b70fc:	d10b      	bne.n	b7116 <pinAvailable+0x3a>
   b70fe:	4620      	mov	r0, r4
   b7100:	9101      	str	r1, [sp, #4]
   b7102:	f7fc ffdb 	bl	b40bc <__cxa_guard_acquire>
   b7106:	9901      	ldr	r1, [sp, #4]
   b7108:	b128      	cbz	r0, b7116 <pinAvailable+0x3a>
   b710a:	4812      	ldr	r0, [pc, #72]	; (b7154 <pinAvailable+0x78>)
   b710c:	f7ff fa38 	bl	b6580 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7110:	4620      	mov	r0, r4
   b7112:	f7fc ffd8 	bl	b40c6 <__cxa_guard_release>
   b7116:	4b0f      	ldr	r3, [pc, #60]	; (b7154 <pinAvailable+0x78>)
   b7118:	7818      	ldrb	r0, [r3, #0]
   b711a:	f7fe fe01 	bl	b5d20 <hal_spi_is_enabled>
   b711e:	2800      	cmp	r0, #0
   b7120:	d1df      	bne.n	b70e2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7122:	2001      	movs	r0, #1
   b7124:	e7de      	b.n	b70e4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7126:	2801      	cmp	r0, #1
   b7128:	d809      	bhi.n	b713e <pinAvailable+0x62>
   b712a:	f000 f87d 	bl	b7228 <_Z19__fetch_global_Wirev>
   b712e:	2100      	movs	r1, #0
   b7130:	7c00      	ldrb	r0, [r0, #16]
   b7132:	f7fe fd4d 	bl	b5bd0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7136:	f080 0001 	eor.w	r0, r0, #1
   b713a:	b2c0      	uxtb	r0, r0
   b713c:	e7d2      	b.n	b70e4 <pinAvailable+0x8>
   b713e:	3809      	subs	r0, #9
   b7140:	2801      	cmp	r0, #1
   b7142:	d8ee      	bhi.n	b7122 <pinAvailable+0x46>
   b7144:	f000 f8b0 	bl	b72a8 <_Z22__fetch_global_Serial1v>
   b7148:	7c00      	ldrb	r0, [r0, #16]
   b714a:	f7fe fe31 	bl	b5db0 <hal_usart_is_enabled>
   b714e:	e7f2      	b.n	b7136 <pinAvailable+0x5a>
   b7150:	2003e6b8 	.word	0x2003e6b8
   b7154:	2003e6bc 	.word	0x2003e6bc

000b7158 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7158:	2823      	cmp	r0, #35	; 0x23
{
   b715a:	b538      	push	{r3, r4, r5, lr}
   b715c:	4604      	mov	r4, r0
   b715e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7160:	d80a      	bhi.n	b7178 <pinMode+0x20>
   b7162:	29ff      	cmp	r1, #255	; 0xff
   b7164:	d008      	beq.n	b7178 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7166:	f7ff ffb9 	bl	b70dc <pinAvailable>
   b716a:	b128      	cbz	r0, b7178 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b716c:	4629      	mov	r1, r5
   b716e:	4620      	mov	r0, r4
}
   b7170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7174:	f7fe bcd4 	b.w	b5b20 <HAL_Pin_Mode>
}
   b7178:	bd38      	pop	{r3, r4, r5, pc}

000b717a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b717a:	b538      	push	{r3, r4, r5, lr}
   b717c:	4604      	mov	r4, r0
   b717e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7180:	f7fe fcd6 	bl	b5b30 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7184:	28ff      	cmp	r0, #255	; 0xff
   b7186:	d010      	beq.n	b71aa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7188:	2806      	cmp	r0, #6
   b718a:	d804      	bhi.n	b7196 <digitalWrite+0x1c>
   b718c:	234d      	movs	r3, #77	; 0x4d
   b718e:	fa23 f000 	lsr.w	r0, r3, r0
   b7192:	07c3      	lsls	r3, r0, #31
   b7194:	d409      	bmi.n	b71aa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7196:	4620      	mov	r0, r4
   b7198:	f7ff ffa0 	bl	b70dc <pinAvailable>
   b719c:	b128      	cbz	r0, b71aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b719e:	4629      	mov	r1, r5
   b71a0:	4620      	mov	r0, r4
}
   b71a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b71a6:	f7fe bccb 	b.w	b5b40 <HAL_GPIO_Write>
}
   b71aa:	bd38      	pop	{r3, r4, r5, pc}

000b71ac <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b71ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b71b0:	4690      	mov	r8, r2
   b71b2:	461f      	mov	r7, r3
   b71b4:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b71b6:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b71b8:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b71ba:	f1c4 0107 	rsb	r1, r4, #7
   b71be:	f1b8 0f00 	cmp.w	r8, #0
   b71c2:	d112      	bne.n	b71ea <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b71c4:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b71c8:	f001 0101 	and.w	r1, r1, #1
   b71cc:	4630      	mov	r0, r6
   b71ce:	f7ff ffd4 	bl	b717a <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b71d2:	2101      	movs	r1, #1
   b71d4:	4628      	mov	r0, r5
   b71d6:	f7ff ffd0 	bl	b717a <digitalWrite>
    digitalWrite(clockPin, LOW);
   b71da:	2100      	movs	r1, #0
   b71dc:	4628      	mov	r0, r5
   b71de:	f7ff ffcc 	bl	b717a <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b71e2:	3c01      	subs	r4, #1
   b71e4:	d2e9      	bcs.n	b71ba <shiftOut+0xe>
  }
}
   b71e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b71ea:	fa47 f104 	asr.w	r1, r7, r4
   b71ee:	e7eb      	b.n	b71c8 <shiftOut+0x1c>

000b71f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b71f0:	4770      	bx	lr
	...

000b71f4 <_Z17acquireWireBufferv>:
{
   b71f4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b71f6:	4b0a      	ldr	r3, [pc, #40]	; (b7220 <_Z17acquireWireBufferv+0x2c>)
   b71f8:	6003      	str	r3, [r0, #0]
   b71fa:	2301      	movs	r3, #1
{
   b71fc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b71fe:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7200:	4908      	ldr	r1, [pc, #32]	; (b7224 <_Z17acquireWireBufferv+0x30>)
   b7202:	2020      	movs	r0, #32
   b7204:	f000 f874 	bl	b72f0 <_ZnajRKSt9nothrow_t>
	};
   b7208:	2520      	movs	r5, #32
   b720a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b720c:	4905      	ldr	r1, [pc, #20]	; (b7224 <_Z17acquireWireBufferv+0x30>)
	};
   b720e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7210:	4628      	mov	r0, r5
   b7212:	f000 f86d 	bl	b72f0 <_ZnajRKSt9nothrow_t>
	};
   b7216:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b721a:	4620      	mov	r0, r4
   b721c:	bd38      	pop	{r3, r4, r5, pc}
   b721e:	bf00      	nop
   b7220:	00010018 	.word	0x00010018
   b7224:	000bea20 	.word	0x000bea20

000b7228 <_Z19__fetch_global_Wirev>:
{
   b7228:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b722a:	4d0e      	ldr	r5, [pc, #56]	; (b7264 <_Z19__fetch_global_Wirev+0x3c>)
   b722c:	7829      	ldrb	r1, [r5, #0]
   b722e:	f3bf 8f5b 	dmb	ish
   b7232:	f011 0401 	ands.w	r4, r1, #1
{
   b7236:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7238:	d111      	bne.n	b725e <_Z19__fetch_global_Wirev+0x36>
   b723a:	4628      	mov	r0, r5
   b723c:	f7fc ff3e 	bl	b40bc <__cxa_guard_acquire>
   b7240:	b168      	cbz	r0, b725e <_Z19__fetch_global_Wirev+0x36>
   b7242:	4668      	mov	r0, sp
   b7244:	f7ff ffd6 	bl	b71f4 <_Z17acquireWireBufferv>
   b7248:	466a      	mov	r2, sp
   b724a:	4621      	mov	r1, r4
   b724c:	4806      	ldr	r0, [pc, #24]	; (b7268 <_Z19__fetch_global_Wirev+0x40>)
   b724e:	f7fe ff61 	bl	b6114 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7252:	4628      	mov	r0, r5
   b7254:	f7fc ff37 	bl	b40c6 <__cxa_guard_release>
   b7258:	4804      	ldr	r0, [pc, #16]	; (b726c <_Z19__fetch_global_Wirev+0x44>)
   b725a:	f001 fe9f 	bl	b8f9c <atexit>
	return wire;
}
   b725e:	4802      	ldr	r0, [pc, #8]	; (b7268 <_Z19__fetch_global_Wirev+0x40>)
   b7260:	b007      	add	sp, #28
   b7262:	bd30      	pop	{r4, r5, pc}
   b7264:	2003e72c 	.word	0x2003e72c
   b7268:	2003e730 	.word	0x2003e730
   b726c:	000b71f1 	.word	0x000b71f1

000b7270 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7270:	4770      	bx	lr
	...

000b7274 <_Z20acquireSerial1Bufferv>:
{
   b7274:	b538      	push	{r3, r4, r5, lr}
   b7276:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7278:	2514      	movs	r5, #20
   b727a:	462a      	mov	r2, r5
   b727c:	2100      	movs	r1, #0
   b727e:	f001 fea1 	bl	b8fc4 <memset>
   b7282:	8025      	strh	r5, [r4, #0]
   b7284:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7286:	4907      	ldr	r1, [pc, #28]	; (b72a4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7288:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b728a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b728c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b728e:	f000 f82f 	bl	b72f0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7292:	4904      	ldr	r1, [pc, #16]	; (b72a4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7294:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7296:	4628      	mov	r0, r5
   b7298:	f000 f82a 	bl	b72f0 <_ZnajRKSt9nothrow_t>
    };
   b729c:	60e0      	str	r0, [r4, #12]
}
   b729e:	4620      	mov	r0, r4
   b72a0:	bd38      	pop	{r3, r4, r5, pc}
   b72a2:	bf00      	nop
   b72a4:	000bea20 	.word	0x000bea20

000b72a8 <_Z22__fetch_global_Serial1v>:
{
   b72a8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b72aa:	4d0e      	ldr	r5, [pc, #56]	; (b72e4 <_Z22__fetch_global_Serial1v+0x3c>)
   b72ac:	7829      	ldrb	r1, [r5, #0]
   b72ae:	f3bf 8f5b 	dmb	ish
   b72b2:	f011 0401 	ands.w	r4, r1, #1
{
   b72b6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b72b8:	d111      	bne.n	b72de <_Z22__fetch_global_Serial1v+0x36>
   b72ba:	4628      	mov	r0, r5
   b72bc:	f7fc fefe 	bl	b40bc <__cxa_guard_acquire>
   b72c0:	b168      	cbz	r0, b72de <_Z22__fetch_global_Serial1v+0x36>
   b72c2:	a801      	add	r0, sp, #4
   b72c4:	f7ff ffd6 	bl	b7274 <_Z20acquireSerial1Bufferv>
   b72c8:	aa01      	add	r2, sp, #4
   b72ca:	4621      	mov	r1, r4
   b72cc:	4806      	ldr	r0, [pc, #24]	; (b72e8 <_Z22__fetch_global_Serial1v+0x40>)
   b72ce:	f7ff fd8f 	bl	b6df0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b72d2:	4628      	mov	r0, r5
   b72d4:	f7fc fef7 	bl	b40c6 <__cxa_guard_release>
   b72d8:	4804      	ldr	r0, [pc, #16]	; (b72ec <_Z22__fetch_global_Serial1v+0x44>)
   b72da:	f001 fe5f 	bl	b8f9c <atexit>
    return serial1;
}
   b72de:	4802      	ldr	r0, [pc, #8]	; (b72e8 <_Z22__fetch_global_Serial1v+0x40>)
   b72e0:	b007      	add	sp, #28
   b72e2:	bd30      	pop	{r4, r5, pc}
   b72e4:	2003e744 	.word	0x2003e744
   b72e8:	2003e748 	.word	0x2003e748
   b72ec:	000b7271 	.word	0x000b7271

000b72f0 <_ZnajRKSt9nothrow_t>:
   b72f0:	f7fc bed3 	b.w	b409a <_Znaj>

000b72f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b72f4:	4901      	ldr	r1, [pc, #4]	; (b72fc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b72f6:	f000 b8f9 	b.w	b74ec <_ZNKSt9type_infoeqERKS_>
   b72fa:	bf00      	nop
   b72fc:	000bea3c 	.word	0x000bea3c

000b7300 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7300:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7302:	2400      	movs	r4, #0
   b7304:	2310      	movs	r3, #16
   b7306:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b730a:	6803      	ldr	r3, [r0, #0]
   b730c:	4615      	mov	r5, r2
   b730e:	699e      	ldr	r6, [r3, #24]
   b7310:	6812      	ldr	r2, [r2, #0]
   b7312:	466b      	mov	r3, sp
   b7314:	e9cd 4400 	strd	r4, r4, [sp]
   b7318:	47b0      	blx	r6
   b731a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b731e:	f003 0306 	and.w	r3, r3, #6
   b7322:	2b06      	cmp	r3, #6
   b7324:	bf03      	ittte	eq
   b7326:	9b00      	ldreq	r3, [sp, #0]
   b7328:	602b      	streq	r3, [r5, #0]
   b732a:	2001      	moveq	r0, #1
   b732c:	4620      	movne	r0, r4
   b732e:	b004      	add	sp, #16
   b7330:	bd70      	pop	{r4, r5, r6, pc}

000b7332 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7332:	9800      	ldr	r0, [sp, #0]
   b7334:	4290      	cmp	r0, r2
   b7336:	bf14      	ite	ne
   b7338:	2001      	movne	r0, #1
   b733a:	2006      	moveq	r0, #6
   b733c:	4770      	bx	lr
	...

000b7340 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7340:	b510      	push	{r4, lr}
   b7342:	4b03      	ldr	r3, [pc, #12]	; (b7350 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7344:	6003      	str	r3, [r0, #0]
   b7346:	4604      	mov	r4, r0
   b7348:	f000 f8cd 	bl	b74e6 <_ZNSt9type_infoD1Ev>
   b734c:	4620      	mov	r0, r4
   b734e:	bd10      	pop	{r4, pc}
   b7350:	000bea7c 	.word	0x000bea7c

000b7354 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7354:	b510      	push	{r4, lr}
   b7356:	4604      	mov	r4, r0
   b7358:	f7ff fff2 	bl	b7340 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b735c:	4620      	mov	r0, r4
   b735e:	2108      	movs	r1, #8
   b7360:	f7fc fe9d 	bl	b409e <_ZdlPvj>
   b7364:	4620      	mov	r0, r4
   b7366:	bd10      	pop	{r4, pc}

000b7368 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b736c:	461f      	mov	r7, r3
   b736e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7372:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7376:	4598      	cmp	r8, r3
   b7378:	4606      	mov	r6, r0
   b737a:	4615      	mov	r5, r2
   b737c:	d107      	bne.n	b738e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b737e:	9907      	ldr	r1, [sp, #28]
   b7380:	f000 f8b4 	bl	b74ec <_ZNKSt9type_infoeqERKS_>
   b7384:	b118      	cbz	r0, b738e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7386:	7165      	strb	r5, [r4, #5]
   b7388:	2000      	movs	r0, #0
   b738a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b738e:	4639      	mov	r1, r7
   b7390:	4630      	mov	r0, r6
   b7392:	f000 f8ab 	bl	b74ec <_ZNKSt9type_infoeqERKS_>
   b7396:	2800      	cmp	r0, #0
   b7398:	d0f6      	beq.n	b7388 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b739a:	2301      	movs	r3, #1
   b739c:	f8c4 8000 	str.w	r8, [r4]
   b73a0:	7125      	strb	r5, [r4, #4]
   b73a2:	71a3      	strb	r3, [r4, #6]
   b73a4:	e7f0      	b.n	b7388 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b73a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b73a6:	b538      	push	{r3, r4, r5, lr}
   b73a8:	4615      	mov	r5, r2
   b73aa:	461c      	mov	r4, r3
   b73ac:	f000 f89e 	bl	b74ec <_ZNKSt9type_infoeqERKS_>
   b73b0:	b120      	cbz	r0, b73bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b73b2:	2308      	movs	r3, #8
   b73b4:	60e3      	str	r3, [r4, #12]
   b73b6:	2306      	movs	r3, #6
   b73b8:	6025      	str	r5, [r4, #0]
   b73ba:	7123      	strb	r3, [r4, #4]
   b73bc:	bd38      	pop	{r3, r4, r5, pc}

000b73be <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b73be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b73c0:	4605      	mov	r5, r0
   b73c2:	460c      	mov	r4, r1
   b73c4:	9201      	str	r2, [sp, #4]
   b73c6:	461e      	mov	r6, r3
   b73c8:	f000 f890 	bl	b74ec <_ZNKSt9type_infoeqERKS_>
   b73cc:	b950      	cbnz	r0, b73e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b73ce:	2e03      	cmp	r6, #3
   b73d0:	d808      	bhi.n	b73e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b73d2:	6823      	ldr	r3, [r4, #0]
   b73d4:	9a01      	ldr	r2, [sp, #4]
   b73d6:	695b      	ldr	r3, [r3, #20]
   b73d8:	4629      	mov	r1, r5
   b73da:	4620      	mov	r0, r4
   b73dc:	b002      	add	sp, #8
   b73de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b73e2:	4718      	bx	r3
   b73e4:	b002      	add	sp, #8
   b73e6:	bd70      	pop	{r4, r5, r6, pc}

000b73e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b73e8:	b510      	push	{r4, lr}
   b73ea:	4b03      	ldr	r3, [pc, #12]	; (b73f8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b73ec:	6003      	str	r3, [r0, #0]
   b73ee:	4604      	mov	r4, r0
   b73f0:	f7ff ffa6 	bl	b7340 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b73f4:	4620      	mov	r0, r4
   b73f6:	bd10      	pop	{r4, pc}
   b73f8:	000beadc 	.word	0x000beadc

000b73fc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b73fc:	b510      	push	{r4, lr}
   b73fe:	4604      	mov	r4, r0
   b7400:	f7ff fff2 	bl	b73e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7404:	4620      	mov	r0, r4
   b7406:	210c      	movs	r1, #12
   b7408:	f7fc fe49 	bl	b409e <_ZdlPvj>
   b740c:	4620      	mov	r0, r4
   b740e:	bd10      	pop	{r4, pc}

000b7410 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7412:	9f08      	ldr	r7, [sp, #32]
   b7414:	4297      	cmp	r7, r2
   b7416:	4605      	mov	r5, r0
   b7418:	460e      	mov	r6, r1
   b741a:	4614      	mov	r4, r2
   b741c:	d00a      	beq.n	b7434 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b741e:	68a8      	ldr	r0, [r5, #8]
   b7420:	6802      	ldr	r2, [r0, #0]
   b7422:	9708      	str	r7, [sp, #32]
   b7424:	6a15      	ldr	r5, [r2, #32]
   b7426:	4631      	mov	r1, r6
   b7428:	4622      	mov	r2, r4
   b742a:	46ac      	mov	ip, r5
   b742c:	b003      	add	sp, #12
   b742e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7432:	4760      	bx	ip
   b7434:	4619      	mov	r1, r3
   b7436:	9301      	str	r3, [sp, #4]
   b7438:	f000 f858 	bl	b74ec <_ZNKSt9type_infoeqERKS_>
   b743c:	9b01      	ldr	r3, [sp, #4]
   b743e:	2800      	cmp	r0, #0
   b7440:	d0ed      	beq.n	b741e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7442:	2006      	movs	r0, #6
   b7444:	b003      	add	sp, #12
   b7446:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7448 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7448:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b744c:	460d      	mov	r5, r1
   b744e:	4619      	mov	r1, r3
   b7450:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7454:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7458:	4681      	mov	r9, r0
   b745a:	4617      	mov	r7, r2
   b745c:	4698      	mov	r8, r3
   b745e:	f000 f845 	bl	b74ec <_ZNKSt9type_infoeqERKS_>
   b7462:	b190      	cbz	r0, b748a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7464:	2d00      	cmp	r5, #0
   b7466:	6034      	str	r4, [r6, #0]
   b7468:	7137      	strb	r7, [r6, #4]
   b746a:	db09      	blt.n	b7480 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b746c:	1961      	adds	r1, r4, r5
   b746e:	458a      	cmp	sl, r1
   b7470:	bf0c      	ite	eq
   b7472:	2106      	moveq	r1, #6
   b7474:	2101      	movne	r1, #1
   b7476:	71b1      	strb	r1, [r6, #6]
   b7478:	2000      	movs	r0, #0
   b747a:	b001      	add	sp, #4
   b747c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7480:	3502      	adds	r5, #2
   b7482:	d1f9      	bne.n	b7478 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7484:	2301      	movs	r3, #1
   b7486:	71b3      	strb	r3, [r6, #6]
   b7488:	e7f6      	b.n	b7478 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b748a:	4554      	cmp	r4, sl
   b748c:	d106      	bne.n	b749c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b748e:	4659      	mov	r1, fp
   b7490:	4648      	mov	r0, r9
   b7492:	f000 f82b 	bl	b74ec <_ZNKSt9type_infoeqERKS_>
   b7496:	b108      	cbz	r0, b749c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7498:	7177      	strb	r7, [r6, #5]
   b749a:	e7ed      	b.n	b7478 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b749c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b74a0:	6803      	ldr	r3, [r0, #0]
   b74a2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b74a6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b74aa:	69dc      	ldr	r4, [r3, #28]
   b74ac:	463a      	mov	r2, r7
   b74ae:	4643      	mov	r3, r8
   b74b0:	4629      	mov	r1, r5
   b74b2:	46a4      	mov	ip, r4
   b74b4:	b001      	add	sp, #4
   b74b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b74ba:	4760      	bx	ip

000b74bc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b74bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74c0:	4607      	mov	r7, r0
   b74c2:	460c      	mov	r4, r1
   b74c4:	4615      	mov	r5, r2
   b74c6:	461e      	mov	r6, r3
   b74c8:	f7ff ff6d 	bl	b73a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b74cc:	b948      	cbnz	r0, b74e2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b74ce:	68b8      	ldr	r0, [r7, #8]
   b74d0:	6803      	ldr	r3, [r0, #0]
   b74d2:	699f      	ldr	r7, [r3, #24]
   b74d4:	462a      	mov	r2, r5
   b74d6:	4633      	mov	r3, r6
   b74d8:	4621      	mov	r1, r4
   b74da:	46bc      	mov	ip, r7
   b74dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b74e0:	4760      	bx	ip
   b74e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b74e6 <_ZNSt9type_infoD1Ev>:
   b74e6:	4770      	bx	lr

000b74e8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b74e8:	2000      	movs	r0, #0
   b74ea:	4770      	bx	lr

000b74ec <_ZNKSt9type_infoeqERKS_>:
   b74ec:	4281      	cmp	r1, r0
   b74ee:	b508      	push	{r3, lr}
   b74f0:	d00e      	beq.n	b7510 <_ZNKSt9type_infoeqERKS_+0x24>
   b74f2:	6840      	ldr	r0, [r0, #4]
   b74f4:	7803      	ldrb	r3, [r0, #0]
   b74f6:	2b2a      	cmp	r3, #42	; 0x2a
   b74f8:	d00c      	beq.n	b7514 <_ZNKSt9type_infoeqERKS_+0x28>
   b74fa:	6849      	ldr	r1, [r1, #4]
   b74fc:	780b      	ldrb	r3, [r1, #0]
   b74fe:	2b2a      	cmp	r3, #42	; 0x2a
   b7500:	bf08      	it	eq
   b7502:	3101      	addeq	r1, #1
   b7504:	f001 fd94 	bl	b9030 <strcmp>
   b7508:	fab0 f080 	clz	r0, r0
   b750c:	0940      	lsrs	r0, r0, #5
   b750e:	bd08      	pop	{r3, pc}
   b7510:	2001      	movs	r0, #1
   b7512:	e7fc      	b.n	b750e <_ZNKSt9type_infoeqERKS_+0x22>
   b7514:	2000      	movs	r0, #0
   b7516:	e7fa      	b.n	b750e <_ZNKSt9type_infoeqERKS_+0x22>

000b7518 <pow>:
   b7518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b751a:	ed2d 8b02 	vpush	{d8}
   b751e:	ec57 6b10 	vmov	r6, r7, d0
   b7522:	ec55 4b11 	vmov	r4, r5, d1
   b7526:	f000 f8cb 	bl	b76c0 <__ieee754_pow>
   b752a:	4b63      	ldr	r3, [pc, #396]	; (b76b8 <pow+0x1a0>)
   b752c:	eeb0 8a40 	vmov.f32	s16, s0
   b7530:	eef0 8a60 	vmov.f32	s17, s1
   b7534:	f993 3000 	ldrsb.w	r3, [r3]
   b7538:	3301      	adds	r3, #1
   b753a:	d02a      	beq.n	b7592 <pow+0x7a>
   b753c:	4622      	mov	r2, r4
   b753e:	462b      	mov	r3, r5
   b7540:	4620      	mov	r0, r4
   b7542:	4629      	mov	r1, r5
   b7544:	f001 fcc4 	bl	b8ed0 <__aeabi_dcmpun>
   b7548:	bb18      	cbnz	r0, b7592 <pow+0x7a>
   b754a:	4632      	mov	r2, r6
   b754c:	463b      	mov	r3, r7
   b754e:	4630      	mov	r0, r6
   b7550:	4639      	mov	r1, r7
   b7552:	f001 fcbd 	bl	b8ed0 <__aeabi_dcmpun>
   b7556:	2800      	cmp	r0, #0
   b7558:	d144      	bne.n	b75e4 <pow+0xcc>
   b755a:	2200      	movs	r2, #0
   b755c:	2300      	movs	r3, #0
   b755e:	4630      	mov	r0, r6
   b7560:	4639      	mov	r1, r7
   b7562:	f001 fc83 	bl	b8e6c <__aeabi_dcmpeq>
   b7566:	b1d8      	cbz	r0, b75a0 <pow+0x88>
   b7568:	2200      	movs	r2, #0
   b756a:	2300      	movs	r3, #0
   b756c:	4620      	mov	r0, r4
   b756e:	4629      	mov	r1, r5
   b7570:	f001 fc7c 	bl	b8e6c <__aeabi_dcmpeq>
   b7574:	2800      	cmp	r0, #0
   b7576:	d13d      	bne.n	b75f4 <pow+0xdc>
   b7578:	ec45 4b10 	vmov	d0, r4, r5
   b757c:	f000 ff10 	bl	b83a0 <finite>
   b7580:	b138      	cbz	r0, b7592 <pow+0x7a>
   b7582:	4620      	mov	r0, r4
   b7584:	4629      	mov	r1, r5
   b7586:	2200      	movs	r2, #0
   b7588:	2300      	movs	r3, #0
   b758a:	f001 fc79 	bl	b8e80 <__aeabi_dcmplt>
   b758e:	2800      	cmp	r0, #0
   b7590:	d15c      	bne.n	b764c <pow+0x134>
   b7592:	eeb0 0a48 	vmov.f32	s0, s16
   b7596:	eef0 0a68 	vmov.f32	s1, s17
   b759a:	ecbd 8b02 	vpop	{d8}
   b759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b75a0:	eeb0 0a48 	vmov.f32	s0, s16
   b75a4:	eef0 0a68 	vmov.f32	s1, s17
   b75a8:	f000 fefa 	bl	b83a0 <finite>
   b75ac:	b358      	cbz	r0, b7606 <pow+0xee>
   b75ae:	ec51 0b18 	vmov	r0, r1, d8
   b75b2:	2200      	movs	r2, #0
   b75b4:	2300      	movs	r3, #0
   b75b6:	f001 fc59 	bl	b8e6c <__aeabi_dcmpeq>
   b75ba:	2800      	cmp	r0, #0
   b75bc:	d0e9      	beq.n	b7592 <pow+0x7a>
   b75be:	ec47 6b10 	vmov	d0, r6, r7
   b75c2:	f000 feed 	bl	b83a0 <finite>
   b75c6:	2800      	cmp	r0, #0
   b75c8:	d0e3      	beq.n	b7592 <pow+0x7a>
   b75ca:	ec45 4b10 	vmov	d0, r4, r5
   b75ce:	f000 fee7 	bl	b83a0 <finite>
   b75d2:	2800      	cmp	r0, #0
   b75d4:	d0dd      	beq.n	b7592 <pow+0x7a>
   b75d6:	f7fe fd0f 	bl	b5ff8 <__errno>
   b75da:	2322      	movs	r3, #34	; 0x22
   b75dc:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b7698 <pow+0x180>
   b75e0:	6003      	str	r3, [r0, #0]
   b75e2:	e7d6      	b.n	b7592 <pow+0x7a>
   b75e4:	4620      	mov	r0, r4
   b75e6:	4629      	mov	r1, r5
   b75e8:	2200      	movs	r2, #0
   b75ea:	2300      	movs	r3, #0
   b75ec:	f001 fc3e 	bl	b8e6c <__aeabi_dcmpeq>
   b75f0:	2800      	cmp	r0, #0
   b75f2:	d0ce      	beq.n	b7592 <pow+0x7a>
   b75f4:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b76a0 <pow+0x188>
   b75f8:	eeb0 0a48 	vmov.f32	s0, s16
   b75fc:	eef0 0a68 	vmov.f32	s1, s17
   b7600:	ecbd 8b02 	vpop	{d8}
   b7604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7606:	ec47 6b10 	vmov	d0, r6, r7
   b760a:	f000 fec9 	bl	b83a0 <finite>
   b760e:	2800      	cmp	r0, #0
   b7610:	d0cd      	beq.n	b75ae <pow+0x96>
   b7612:	ec45 4b10 	vmov	d0, r4, r5
   b7616:	f000 fec3 	bl	b83a0 <finite>
   b761a:	2800      	cmp	r0, #0
   b761c:	d0c7      	beq.n	b75ae <pow+0x96>
   b761e:	ec53 2b18 	vmov	r2, r3, d8
   b7622:	ee18 0a10 	vmov	r0, s16
   b7626:	4619      	mov	r1, r3
   b7628:	f001 fc52 	bl	b8ed0 <__aeabi_dcmpun>
   b762c:	bb20      	cbnz	r0, b7678 <pow+0x160>
   b762e:	f7fe fce3 	bl	b5ff8 <__errno>
   b7632:	4603      	mov	r3, r0
   b7634:	2222      	movs	r2, #34	; 0x22
   b7636:	601a      	str	r2, [r3, #0]
   b7638:	4630      	mov	r0, r6
   b763a:	4639      	mov	r1, r7
   b763c:	2200      	movs	r2, #0
   b763e:	2300      	movs	r3, #0
   b7640:	f001 fc1e 	bl	b8e80 <__aeabi_dcmplt>
   b7644:	b948      	cbnz	r0, b765a <pow+0x142>
   b7646:	ed9f 8b18 	vldr	d8, [pc, #96]	; b76a8 <pow+0x190>
   b764a:	e7a2      	b.n	b7592 <pow+0x7a>
   b764c:	f7fe fcd4 	bl	b5ff8 <__errno>
   b7650:	2321      	movs	r3, #33	; 0x21
   b7652:	ed9f 8b17 	vldr	d8, [pc, #92]	; b76b0 <pow+0x198>
   b7656:	6003      	str	r3, [r0, #0]
   b7658:	e79b      	b.n	b7592 <pow+0x7a>
   b765a:	ec45 4b10 	vmov	d0, r4, r5
   b765e:	f000 feb3 	bl	b83c8 <rint>
   b7662:	4622      	mov	r2, r4
   b7664:	ec51 0b10 	vmov	r0, r1, d0
   b7668:	462b      	mov	r3, r5
   b766a:	f001 fbff 	bl	b8e6c <__aeabi_dcmpeq>
   b766e:	2800      	cmp	r0, #0
   b7670:	d1e9      	bne.n	b7646 <pow+0x12e>
   b7672:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b76b0 <pow+0x198>
   b7676:	e78c      	b.n	b7592 <pow+0x7a>
   b7678:	f7fe fcbe 	bl	b5ff8 <__errno>
   b767c:	2200      	movs	r2, #0
   b767e:	2300      	movs	r3, #0
   b7680:	2121      	movs	r1, #33	; 0x21
   b7682:	6001      	str	r1, [r0, #0]
   b7684:	4610      	mov	r0, r2
   b7686:	4619      	mov	r1, r3
   b7688:	f001 fab2 	bl	b8bf0 <__aeabi_ddiv>
   b768c:	ec41 0b18 	vmov	d8, r0, r1
   b7690:	e77f      	b.n	b7592 <pow+0x7a>
   b7692:	bf00      	nop
   b7694:	f3af 8000 	nop.w
	...
   b76a4:	3ff00000 	.word	0x3ff00000
   b76a8:	00000000 	.word	0x00000000
   b76ac:	7ff00000 	.word	0x7ff00000
   b76b0:	00000000 	.word	0x00000000
   b76b4:	fff00000 	.word	0xfff00000
   b76b8:	2003e57c 	.word	0x2003e57c
   b76bc:	00000000 	.word	0x00000000

000b76c0 <__ieee754_pow>:
   b76c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76c4:	ec57 6b11 	vmov	r6, r7, d1
   b76c8:	ed2d 8b0c 	vpush	{d8-d13}
   b76cc:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b76d0:	ea5a 0206 	orrs.w	r2, sl, r6
   b76d4:	b087      	sub	sp, #28
   b76d6:	d03d      	beq.n	b7754 <__ieee754_pow+0x94>
   b76d8:	ec55 4b10 	vmov	r4, r5, d0
   b76dc:	4972      	ldr	r1, [pc, #456]	; (b78a8 <__ieee754_pow+0x1e8>)
   b76de:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b76e2:	4588      	cmp	r8, r1
   b76e4:	ee10 2a10 	vmov	r2, s0
   b76e8:	46a9      	mov	r9, r5
   b76ea:	dc2c      	bgt.n	b7746 <__ieee754_pow+0x86>
   b76ec:	ee11 3a10 	vmov	r3, s2
   b76f0:	46bb      	mov	fp, r7
   b76f2:	d036      	beq.n	b7762 <__ieee754_pow+0xa2>
   b76f4:	458a      	cmp	sl, r1
   b76f6:	dc26      	bgt.n	b7746 <__ieee754_pow+0x86>
   b76f8:	496b      	ldr	r1, [pc, #428]	; (b78a8 <__ieee754_pow+0x1e8>)
   b76fa:	458a      	cmp	sl, r1
   b76fc:	d021      	beq.n	b7742 <__ieee754_pow+0x82>
   b76fe:	f1b9 0f00 	cmp.w	r9, #0
   b7702:	db39      	blt.n	b7778 <__ieee754_pow+0xb8>
   b7704:	2100      	movs	r1, #0
   b7706:	9100      	str	r1, [sp, #0]
   b7708:	2b00      	cmp	r3, #0
   b770a:	d151      	bne.n	b77b0 <__ieee754_pow+0xf0>
   b770c:	4b66      	ldr	r3, [pc, #408]	; (b78a8 <__ieee754_pow+0x1e8>)
   b770e:	459a      	cmp	sl, r3
   b7710:	f000 80a2 	beq.w	b7858 <__ieee754_pow+0x198>
   b7714:	4b65      	ldr	r3, [pc, #404]	; (b78ac <__ieee754_pow+0x1ec>)
   b7716:	459a      	cmp	sl, r3
   b7718:	f000 80b0 	beq.w	b787c <__ieee754_pow+0x1bc>
   b771c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b7720:	f000 84c0 	beq.w	b80a4 <__ieee754_pow+0x9e4>
   b7724:	4b62      	ldr	r3, [pc, #392]	; (b78b0 <__ieee754_pow+0x1f0>)
   b7726:	459b      	cmp	fp, r3
   b7728:	d142      	bne.n	b77b0 <__ieee754_pow+0xf0>
   b772a:	f1b9 0f00 	cmp.w	r9, #0
   b772e:	db3f      	blt.n	b77b0 <__ieee754_pow+0xf0>
   b7730:	ec45 4b10 	vmov	d0, r4, r5
   b7734:	b007      	add	sp, #28
   b7736:	ecbd 8b0c 	vpop	{d8-d13}
   b773a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b773e:	f000 bd59 	b.w	b81f4 <__ieee754_sqrt>
   b7742:	2b00      	cmp	r3, #0
   b7744:	d0db      	beq.n	b76fe <__ieee754_pow+0x3e>
   b7746:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b774a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b774e:	ea58 0302 	orrs.w	r3, r8, r2
   b7752:	d109      	bne.n	b7768 <__ieee754_pow+0xa8>
   b7754:	ed9f 0b50 	vldr	d0, [pc, #320]	; b7898 <__ieee754_pow+0x1d8>
   b7758:	b007      	add	sp, #28
   b775a:	ecbd 8b0c 	vpop	{d8-d13}
   b775e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7762:	b90c      	cbnz	r4, b7768 <__ieee754_pow+0xa8>
   b7764:	45c2      	cmp	sl, r8
   b7766:	ddc7      	ble.n	b76f8 <__ieee754_pow+0x38>
   b7768:	4852      	ldr	r0, [pc, #328]	; (b78b4 <__ieee754_pow+0x1f4>)
   b776a:	b007      	add	sp, #28
   b776c:	ecbd 8b0c 	vpop	{d8-d13}
   b7770:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7774:	f000 be20 	b.w	b83b8 <nan>
   b7778:	494f      	ldr	r1, [pc, #316]	; (b78b8 <__ieee754_pow+0x1f8>)
   b777a:	458a      	cmp	sl, r1
   b777c:	f300 8085 	bgt.w	b788a <__ieee754_pow+0x1ca>
   b7780:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b7784:	458a      	cmp	sl, r1
   b7786:	dd0f      	ble.n	b77a8 <__ieee754_pow+0xe8>
   b7788:	ea4f 512a 	mov.w	r1, sl, asr #20
   b778c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b7790:	2914      	cmp	r1, #20
   b7792:	f340 849b 	ble.w	b80cc <__ieee754_pow+0xa0c>
   b7796:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b779a:	fa23 f001 	lsr.w	r0, r3, r1
   b779e:	fa00 f101 	lsl.w	r1, r0, r1
   b77a2:	4299      	cmp	r1, r3
   b77a4:	f000 84ed 	beq.w	b8182 <__ieee754_pow+0xac2>
   b77a8:	2100      	movs	r1, #0
   b77aa:	9100      	str	r1, [sp, #0]
   b77ac:	2b00      	cmp	r3, #0
   b77ae:	d0b1      	beq.n	b7714 <__ieee754_pow+0x54>
   b77b0:	ec45 4b10 	vmov	d0, r4, r5
   b77b4:	9202      	str	r2, [sp, #8]
   b77b6:	f000 fde9 	bl	b838c <fabs>
   b77ba:	9a02      	ldr	r2, [sp, #8]
   b77bc:	bb5a      	cbnz	r2, b7816 <__ieee754_pow+0x156>
   b77be:	f1b8 0f00 	cmp.w	r8, #0
   b77c2:	d004      	beq.n	b77ce <__ieee754_pow+0x10e>
   b77c4:	4b39      	ldr	r3, [pc, #228]	; (b78ac <__ieee754_pow+0x1ec>)
   b77c6:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b77ca:	429a      	cmp	r2, r3
   b77cc:	d123      	bne.n	b7816 <__ieee754_pow+0x156>
   b77ce:	f1bb 0f00 	cmp.w	fp, #0
   b77d2:	da07      	bge.n	b77e4 <__ieee754_pow+0x124>
   b77d4:	ec53 2b10 	vmov	r2, r3, d0
   b77d8:	4934      	ldr	r1, [pc, #208]	; (b78ac <__ieee754_pow+0x1ec>)
   b77da:	2000      	movs	r0, #0
   b77dc:	f001 fa08 	bl	b8bf0 <__aeabi_ddiv>
   b77e0:	ec41 0b10 	vmov	d0, r0, r1
   b77e4:	f1b9 0f00 	cmp.w	r9, #0
   b77e8:	dab6      	bge.n	b7758 <__ieee754_pow+0x98>
   b77ea:	9b00      	ldr	r3, [sp, #0]
   b77ec:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b77f0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b77f4:	ea58 0303 	orrs.w	r3, r8, r3
   b77f8:	f040 848d 	bne.w	b8116 <__ieee754_pow+0xa56>
   b77fc:	ec53 2b10 	vmov	r2, r3, d0
   b7800:	4610      	mov	r0, r2
   b7802:	4619      	mov	r1, r3
   b7804:	f000 ff12 	bl	b862c <__aeabi_dsub>
   b7808:	4602      	mov	r2, r0
   b780a:	460b      	mov	r3, r1
   b780c:	f001 f9f0 	bl	b8bf0 <__aeabi_ddiv>
   b7810:	ec41 0b10 	vmov	d0, r0, r1
   b7814:	e7a0      	b.n	b7758 <__ieee754_pow+0x98>
   b7816:	9a00      	ldr	r2, [sp, #0]
   b7818:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b781c:	3b01      	subs	r3, #1
   b781e:	9304      	str	r3, [sp, #16]
   b7820:	4313      	orrs	r3, r2
   b7822:	d035      	beq.n	b7890 <__ieee754_pow+0x1d0>
   b7824:	4b25      	ldr	r3, [pc, #148]	; (b78bc <__ieee754_pow+0x1fc>)
   b7826:	459a      	cmp	sl, r3
   b7828:	dd4c      	ble.n	b78c4 <__ieee754_pow+0x204>
   b782a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b782e:	459a      	cmp	sl, r3
   b7830:	4b23      	ldr	r3, [pc, #140]	; (b78c0 <__ieee754_pow+0x200>)
   b7832:	f340 83db 	ble.w	b7fec <__ieee754_pow+0x92c>
   b7836:	4598      	cmp	r8, r3
   b7838:	f340 8360 	ble.w	b7efc <__ieee754_pow+0x83c>
   b783c:	f1bb 0f00 	cmp.w	fp, #0
   b7840:	f340 8360 	ble.w	b7f04 <__ieee754_pow+0x844>
   b7844:	a316      	add	r3, pc, #88	; (adr r3, b78a0 <__ieee754_pow+0x1e0>)
   b7846:	e9d3 2300 	ldrd	r2, r3, [r3]
   b784a:	4610      	mov	r0, r2
   b784c:	4619      	mov	r1, r3
   b784e:	f001 f8a5 	bl	b899c <__aeabi_dmul>
   b7852:	ec41 0b10 	vmov	d0, r0, r1
   b7856:	e77f      	b.n	b7758 <__ieee754_pow+0x98>
   b7858:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b785c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b7860:	4313      	orrs	r3, r2
   b7862:	f43f af77 	beq.w	b7754 <__ieee754_pow+0x94>
   b7866:	4b16      	ldr	r3, [pc, #88]	; (b78c0 <__ieee754_pow+0x200>)
   b7868:	4598      	cmp	r8, r3
   b786a:	f340 837a 	ble.w	b7f62 <__ieee754_pow+0x8a2>
   b786e:	f1bb 0f00 	cmp.w	fp, #0
   b7872:	f2c0 8347 	blt.w	b7f04 <__ieee754_pow+0x844>
   b7876:	ec47 6b10 	vmov	d0, r6, r7
   b787a:	e76d      	b.n	b7758 <__ieee754_pow+0x98>
   b787c:	f1bb 0f00 	cmp.w	fp, #0
   b7880:	f2c0 841a 	blt.w	b80b8 <__ieee754_pow+0x9f8>
   b7884:	ec45 4b10 	vmov	d0, r4, r5
   b7888:	e766      	b.n	b7758 <__ieee754_pow+0x98>
   b788a:	2102      	movs	r1, #2
   b788c:	9100      	str	r1, [sp, #0]
   b788e:	e73b      	b.n	b7708 <__ieee754_pow+0x48>
   b7890:	4622      	mov	r2, r4
   b7892:	462b      	mov	r3, r5
   b7894:	e7b4      	b.n	b7800 <__ieee754_pow+0x140>
   b7896:	bf00      	nop
   b7898:	00000000 	.word	0x00000000
   b789c:	3ff00000 	.word	0x3ff00000
   b78a0:	8800759c 	.word	0x8800759c
   b78a4:	7e37e43c 	.word	0x7e37e43c
   b78a8:	7ff00000 	.word	0x7ff00000
   b78ac:	3ff00000 	.word	0x3ff00000
   b78b0:	3fe00000 	.word	0x3fe00000
   b78b4:	000beb18 	.word	0x000beb18
   b78b8:	433fffff 	.word	0x433fffff
   b78bc:	41e00000 	.word	0x41e00000
   b78c0:	3fefffff 	.word	0x3fefffff
   b78c4:	4be4      	ldr	r3, [pc, #912]	; (b7c58 <__ieee754_pow+0x598>)
   b78c6:	ea09 0303 	and.w	r3, r9, r3
   b78ca:	2200      	movs	r2, #0
   b78cc:	b953      	cbnz	r3, b78e4 <__ieee754_pow+0x224>
   b78ce:	ec51 0b10 	vmov	r0, r1, d0
   b78d2:	4be2      	ldr	r3, [pc, #904]	; (b7c5c <__ieee754_pow+0x59c>)
   b78d4:	f001 f862 	bl	b899c <__aeabi_dmul>
   b78d8:	ec41 0b10 	vmov	d0, r0, r1
   b78dc:	ee10 8a90 	vmov	r8, s1
   b78e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b78e4:	ea4f 5328 	mov.w	r3, r8, asr #20
   b78e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b78ec:	189a      	adds	r2, r3, r2
   b78ee:	4bdc      	ldr	r3, [pc, #880]	; (b7c60 <__ieee754_pow+0x5a0>)
   b78f0:	9205      	str	r2, [sp, #20]
   b78f2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b78f6:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b78fa:	4598      	cmp	r8, r3
   b78fc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b7900:	dd07      	ble.n	b7912 <__ieee754_pow+0x252>
   b7902:	4bd8      	ldr	r3, [pc, #864]	; (b7c64 <__ieee754_pow+0x5a4>)
   b7904:	4598      	cmp	r8, r3
   b7906:	f340 8414 	ble.w	b8132 <__ieee754_pow+0xa72>
   b790a:	3201      	adds	r2, #1
   b790c:	9205      	str	r2, [sp, #20]
   b790e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b7912:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b7bf8 <__ieee754_pow+0x538>
   b7916:	ed9f 7bba 	vldr	d7, [pc, #744]	; b7c00 <__ieee754_pow+0x540>
   b791a:	ec53 2b16 	vmov	r2, r3, d6
   b791e:	eeb0 ca47 	vmov.f32	s24, s14
   b7922:	eef0 ca67 	vmov.f32	s25, s15
   b7926:	2500      	movs	r5, #0
   b7928:	eeb0 da47 	vmov.f32	s26, s14
   b792c:	eef0 da67 	vmov.f32	s27, s15
   b7930:	ec5b ab10 	vmov	sl, fp, d0
   b7934:	46a3      	mov	fp, r4
   b7936:	4650      	mov	r0, sl
   b7938:	4659      	mov	r1, fp
   b793a:	ec43 2b1a 	vmov	d10, r2, r3
   b793e:	f000 fe75 	bl	b862c <__aeabi_dsub>
   b7942:	ec53 2b1a 	vmov	r2, r3, d10
   b7946:	4680      	mov	r8, r0
   b7948:	4689      	mov	r9, r1
   b794a:	4650      	mov	r0, sl
   b794c:	4659      	mov	r1, fp
   b794e:	f000 fe6f 	bl	b8630 <__adddf3>
   b7952:	4602      	mov	r2, r0
   b7954:	460b      	mov	r3, r1
   b7956:	2000      	movs	r0, #0
   b7958:	49c3      	ldr	r1, [pc, #780]	; (b7c68 <__ieee754_pow+0x5a8>)
   b795a:	f001 f949 	bl	b8bf0 <__aeabi_ddiv>
   b795e:	ec41 0b1b 	vmov	d11, r0, r1
   b7962:	4640      	mov	r0, r8
   b7964:	ec53 2b1b 	vmov	r2, r3, d11
   b7968:	4649      	mov	r1, r9
   b796a:	f001 f817 	bl	b899c <__aeabi_dmul>
   b796e:	ec41 0b18 	vmov	d8, r0, r1
   b7972:	460a      	mov	r2, r1
   b7974:	4601      	mov	r1, r0
   b7976:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b797a:	2100      	movs	r1, #0
   b797c:	9102      	str	r1, [sp, #8]
   b797e:	1064      	asrs	r4, r4, #1
   b7980:	ec4b ab19 	vmov	d9, sl, fp
   b7984:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b7988:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b798c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b7990:	2000      	movs	r0, #0
   b7992:	1959      	adds	r1, r3, r5
   b7994:	4604      	mov	r4, r0
   b7996:	460d      	mov	r5, r1
   b7998:	4602      	mov	r2, r0
   b799a:	460b      	mov	r3, r1
   b799c:	4650      	mov	r0, sl
   b799e:	4659      	mov	r1, fp
   b79a0:	f000 fffc 	bl	b899c <__aeabi_dmul>
   b79a4:	4602      	mov	r2, r0
   b79a6:	460b      	mov	r3, r1
   b79a8:	4640      	mov	r0, r8
   b79aa:	4649      	mov	r1, r9
   b79ac:	f000 fe3e 	bl	b862c <__aeabi_dsub>
   b79b0:	ec53 2b1a 	vmov	r2, r3, d10
   b79b4:	4680      	mov	r8, r0
   b79b6:	4689      	mov	r9, r1
   b79b8:	4620      	mov	r0, r4
   b79ba:	4629      	mov	r1, r5
   b79bc:	f000 fe36 	bl	b862c <__aeabi_dsub>
   b79c0:	4602      	mov	r2, r0
   b79c2:	460b      	mov	r3, r1
   b79c4:	ec51 0b19 	vmov	r0, r1, d9
   b79c8:	f000 fe30 	bl	b862c <__aeabi_dsub>
   b79cc:	4652      	mov	r2, sl
   b79ce:	465b      	mov	r3, fp
   b79d0:	f000 ffe4 	bl	b899c <__aeabi_dmul>
   b79d4:	4602      	mov	r2, r0
   b79d6:	460b      	mov	r3, r1
   b79d8:	4640      	mov	r0, r8
   b79da:	4649      	mov	r1, r9
   b79dc:	f000 fe26 	bl	b862c <__aeabi_dsub>
   b79e0:	ec53 2b1b 	vmov	r2, r3, d11
   b79e4:	f000 ffda 	bl	b899c <__aeabi_dmul>
   b79e8:	ec53 2b18 	vmov	r2, r3, d8
   b79ec:	ec41 0b19 	vmov	d9, r0, r1
   b79f0:	ec51 0b18 	vmov	r0, r1, d8
   b79f4:	f000 ffd2 	bl	b899c <__aeabi_dmul>
   b79f8:	a383      	add	r3, pc, #524	; (adr r3, b7c08 <__ieee754_pow+0x548>)
   b79fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b79fe:	4604      	mov	r4, r0
   b7a00:	460d      	mov	r5, r1
   b7a02:	f000 ffcb 	bl	b899c <__aeabi_dmul>
   b7a06:	a382      	add	r3, pc, #520	; (adr r3, b7c10 <__ieee754_pow+0x550>)
   b7a08:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a0c:	f000 fe10 	bl	b8630 <__adddf3>
   b7a10:	4622      	mov	r2, r4
   b7a12:	462b      	mov	r3, r5
   b7a14:	f000 ffc2 	bl	b899c <__aeabi_dmul>
   b7a18:	a37f      	add	r3, pc, #508	; (adr r3, b7c18 <__ieee754_pow+0x558>)
   b7a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a1e:	f000 fe07 	bl	b8630 <__adddf3>
   b7a22:	4622      	mov	r2, r4
   b7a24:	462b      	mov	r3, r5
   b7a26:	f000 ffb9 	bl	b899c <__aeabi_dmul>
   b7a2a:	a37d      	add	r3, pc, #500	; (adr r3, b7c20 <__ieee754_pow+0x560>)
   b7a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a30:	f000 fdfe 	bl	b8630 <__adddf3>
   b7a34:	4622      	mov	r2, r4
   b7a36:	462b      	mov	r3, r5
   b7a38:	f000 ffb0 	bl	b899c <__aeabi_dmul>
   b7a3c:	a37a      	add	r3, pc, #488	; (adr r3, b7c28 <__ieee754_pow+0x568>)
   b7a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a42:	f000 fdf5 	bl	b8630 <__adddf3>
   b7a46:	4622      	mov	r2, r4
   b7a48:	462b      	mov	r3, r5
   b7a4a:	f000 ffa7 	bl	b899c <__aeabi_dmul>
   b7a4e:	a378      	add	r3, pc, #480	; (adr r3, b7c30 <__ieee754_pow+0x570>)
   b7a50:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a54:	f000 fdec 	bl	b8630 <__adddf3>
   b7a58:	4622      	mov	r2, r4
   b7a5a:	4680      	mov	r8, r0
   b7a5c:	4689      	mov	r9, r1
   b7a5e:	462b      	mov	r3, r5
   b7a60:	4620      	mov	r0, r4
   b7a62:	4629      	mov	r1, r5
   b7a64:	f000 ff9a 	bl	b899c <__aeabi_dmul>
   b7a68:	4602      	mov	r2, r0
   b7a6a:	460b      	mov	r3, r1
   b7a6c:	4640      	mov	r0, r8
   b7a6e:	4649      	mov	r1, r9
   b7a70:	f000 ff94 	bl	b899c <__aeabi_dmul>
   b7a74:	4652      	mov	r2, sl
   b7a76:	4604      	mov	r4, r0
   b7a78:	460d      	mov	r5, r1
   b7a7a:	465b      	mov	r3, fp
   b7a7c:	ec51 0b18 	vmov	r0, r1, d8
   b7a80:	f000 fdd6 	bl	b8630 <__adddf3>
   b7a84:	ec53 2b19 	vmov	r2, r3, d9
   b7a88:	f000 ff88 	bl	b899c <__aeabi_dmul>
   b7a8c:	4622      	mov	r2, r4
   b7a8e:	462b      	mov	r3, r5
   b7a90:	f000 fdce 	bl	b8630 <__adddf3>
   b7a94:	4652      	mov	r2, sl
   b7a96:	4680      	mov	r8, r0
   b7a98:	4689      	mov	r9, r1
   b7a9a:	465b      	mov	r3, fp
   b7a9c:	4650      	mov	r0, sl
   b7a9e:	4659      	mov	r1, fp
   b7aa0:	f000 ff7c 	bl	b899c <__aeabi_dmul>
   b7aa4:	4602      	mov	r2, r0
   b7aa6:	460b      	mov	r3, r1
   b7aa8:	ec43 2b1a 	vmov	d10, r2, r3
   b7aac:	4b6f      	ldr	r3, [pc, #444]	; (b7c6c <__ieee754_pow+0x5ac>)
   b7aae:	2200      	movs	r2, #0
   b7ab0:	f000 fdbe 	bl	b8630 <__adddf3>
   b7ab4:	4642      	mov	r2, r8
   b7ab6:	464b      	mov	r3, r9
   b7ab8:	f000 fdba 	bl	b8630 <__adddf3>
   b7abc:	2400      	movs	r4, #0
   b7abe:	460d      	mov	r5, r1
   b7ac0:	4622      	mov	r2, r4
   b7ac2:	462b      	mov	r3, r5
   b7ac4:	4650      	mov	r0, sl
   b7ac6:	4659      	mov	r1, fp
   b7ac8:	f000 ff68 	bl	b899c <__aeabi_dmul>
   b7acc:	4b67      	ldr	r3, [pc, #412]	; (b7c6c <__ieee754_pow+0x5ac>)
   b7ace:	4682      	mov	sl, r0
   b7ad0:	468b      	mov	fp, r1
   b7ad2:	2200      	movs	r2, #0
   b7ad4:	4620      	mov	r0, r4
   b7ad6:	4629      	mov	r1, r5
   b7ad8:	f000 fda8 	bl	b862c <__aeabi_dsub>
   b7adc:	ec53 2b1a 	vmov	r2, r3, d10
   b7ae0:	f000 fda4 	bl	b862c <__aeabi_dsub>
   b7ae4:	4602      	mov	r2, r0
   b7ae6:	460b      	mov	r3, r1
   b7ae8:	4640      	mov	r0, r8
   b7aea:	4649      	mov	r1, r9
   b7aec:	f000 fd9e 	bl	b862c <__aeabi_dsub>
   b7af0:	ec53 2b18 	vmov	r2, r3, d8
   b7af4:	f000 ff52 	bl	b899c <__aeabi_dmul>
   b7af8:	4622      	mov	r2, r4
   b7afa:	462b      	mov	r3, r5
   b7afc:	4604      	mov	r4, r0
   b7afe:	460d      	mov	r5, r1
   b7b00:	ec51 0b19 	vmov	r0, r1, d9
   b7b04:	f000 ff4a 	bl	b899c <__aeabi_dmul>
   b7b08:	4602      	mov	r2, r0
   b7b0a:	460b      	mov	r3, r1
   b7b0c:	4620      	mov	r0, r4
   b7b0e:	4629      	mov	r1, r5
   b7b10:	f000 fd8e 	bl	b8630 <__adddf3>
   b7b14:	4680      	mov	r8, r0
   b7b16:	4689      	mov	r9, r1
   b7b18:	4642      	mov	r2, r8
   b7b1a:	464b      	mov	r3, r9
   b7b1c:	4650      	mov	r0, sl
   b7b1e:	4659      	mov	r1, fp
   b7b20:	f000 fd86 	bl	b8630 <__adddf3>
   b7b24:	a344      	add	r3, pc, #272	; (adr r3, b7c38 <__ieee754_pow+0x578>)
   b7b26:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b2a:	2000      	movs	r0, #0
   b7b2c:	4604      	mov	r4, r0
   b7b2e:	460d      	mov	r5, r1
   b7b30:	f000 ff34 	bl	b899c <__aeabi_dmul>
   b7b34:	4652      	mov	r2, sl
   b7b36:	ec41 0b19 	vmov	d9, r0, r1
   b7b3a:	465b      	mov	r3, fp
   b7b3c:	4620      	mov	r0, r4
   b7b3e:	4629      	mov	r1, r5
   b7b40:	f000 fd74 	bl	b862c <__aeabi_dsub>
   b7b44:	4602      	mov	r2, r0
   b7b46:	460b      	mov	r3, r1
   b7b48:	4640      	mov	r0, r8
   b7b4a:	4649      	mov	r1, r9
   b7b4c:	f000 fd6e 	bl	b862c <__aeabi_dsub>
   b7b50:	a33b      	add	r3, pc, #236	; (adr r3, b7c40 <__ieee754_pow+0x580>)
   b7b52:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b56:	f000 ff21 	bl	b899c <__aeabi_dmul>
   b7b5a:	4602      	mov	r2, r0
   b7b5c:	460b      	mov	r3, r1
   b7b5e:	4620      	mov	r0, r4
   b7b60:	4629      	mov	r1, r5
   b7b62:	4614      	mov	r4, r2
   b7b64:	461d      	mov	r5, r3
   b7b66:	a338      	add	r3, pc, #224	; (adr r3, b7c48 <__ieee754_pow+0x588>)
   b7b68:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b6c:	f000 ff16 	bl	b899c <__aeabi_dmul>
   b7b70:	4602      	mov	r2, r0
   b7b72:	460b      	mov	r3, r1
   b7b74:	4620      	mov	r0, r4
   b7b76:	4629      	mov	r1, r5
   b7b78:	f000 fd5a 	bl	b8630 <__adddf3>
   b7b7c:	ec53 2b1d 	vmov	r2, r3, d13
   b7b80:	f000 fd56 	bl	b8630 <__adddf3>
   b7b84:	4680      	mov	r8, r0
   b7b86:	9805      	ldr	r0, [sp, #20]
   b7b88:	4689      	mov	r9, r1
   b7b8a:	f000 fe9d 	bl	b88c8 <__aeabi_i2d>
   b7b8e:	4642      	mov	r2, r8
   b7b90:	4682      	mov	sl, r0
   b7b92:	468b      	mov	fp, r1
   b7b94:	464b      	mov	r3, r9
   b7b96:	ec51 0b19 	vmov	r0, r1, d9
   b7b9a:	f000 fd49 	bl	b8630 <__adddf3>
   b7b9e:	ec53 2b1c 	vmov	r2, r3, d12
   b7ba2:	f000 fd45 	bl	b8630 <__adddf3>
   b7ba6:	4652      	mov	r2, sl
   b7ba8:	465b      	mov	r3, fp
   b7baa:	f000 fd41 	bl	b8630 <__adddf3>
   b7bae:	4652      	mov	r2, sl
   b7bb0:	465b      	mov	r3, fp
   b7bb2:	2000      	movs	r0, #0
   b7bb4:	4604      	mov	r4, r0
   b7bb6:	460d      	mov	r5, r1
   b7bb8:	f000 fd38 	bl	b862c <__aeabi_dsub>
   b7bbc:	ec53 2b1c 	vmov	r2, r3, d12
   b7bc0:	f000 fd34 	bl	b862c <__aeabi_dsub>
   b7bc4:	ec53 2b19 	vmov	r2, r3, d9
   b7bc8:	f000 fd30 	bl	b862c <__aeabi_dsub>
   b7bcc:	4602      	mov	r2, r0
   b7bce:	460b      	mov	r3, r1
   b7bd0:	4640      	mov	r0, r8
   b7bd2:	4649      	mov	r1, r9
   b7bd4:	f000 fd2a 	bl	b862c <__aeabi_dsub>
   b7bd8:	9b00      	ldr	r3, [sp, #0]
   b7bda:	9a04      	ldr	r2, [sp, #16]
   b7bdc:	3b01      	subs	r3, #1
   b7bde:	4313      	orrs	r3, r2
   b7be0:	4682      	mov	sl, r0
   b7be2:	468b      	mov	fp, r1
   b7be4:	f040 81b6 	bne.w	b7f54 <__ieee754_pow+0x894>
   b7be8:	ed9f 7b19 	vldr	d7, [pc, #100]	; b7c50 <__ieee754_pow+0x590>
   b7bec:	eeb0 8a47 	vmov.f32	s16, s14
   b7bf0:	eef0 8a67 	vmov.f32	s17, s15
   b7bf4:	e03c      	b.n	b7c70 <__ieee754_pow+0x5b0>
   b7bf6:	bf00      	nop
   b7bf8:	00000000 	.word	0x00000000
   b7bfc:	3ff00000 	.word	0x3ff00000
	...
   b7c08:	4a454eef 	.word	0x4a454eef
   b7c0c:	3fca7e28 	.word	0x3fca7e28
   b7c10:	93c9db65 	.word	0x93c9db65
   b7c14:	3fcd864a 	.word	0x3fcd864a
   b7c18:	a91d4101 	.word	0xa91d4101
   b7c1c:	3fd17460 	.word	0x3fd17460
   b7c20:	518f264d 	.word	0x518f264d
   b7c24:	3fd55555 	.word	0x3fd55555
   b7c28:	db6fabff 	.word	0xdb6fabff
   b7c2c:	3fdb6db6 	.word	0x3fdb6db6
   b7c30:	33333303 	.word	0x33333303
   b7c34:	3fe33333 	.word	0x3fe33333
   b7c38:	e0000000 	.word	0xe0000000
   b7c3c:	3feec709 	.word	0x3feec709
   b7c40:	dc3a03fd 	.word	0xdc3a03fd
   b7c44:	3feec709 	.word	0x3feec709
   b7c48:	145b01f5 	.word	0x145b01f5
   b7c4c:	be3e2fe0 	.word	0xbe3e2fe0
   b7c50:	00000000 	.word	0x00000000
   b7c54:	bff00000 	.word	0xbff00000
   b7c58:	7ff00000 	.word	0x7ff00000
   b7c5c:	43400000 	.word	0x43400000
   b7c60:	0003988e 	.word	0x0003988e
   b7c64:	000bb679 	.word	0x000bb679
   b7c68:	3ff00000 	.word	0x3ff00000
   b7c6c:	40080000 	.word	0x40080000
   b7c70:	2300      	movs	r3, #0
   b7c72:	e9cd 6700 	strd	r6, r7, [sp]
   b7c76:	9300      	str	r3, [sp, #0]
   b7c78:	e9dd 8900 	ldrd	r8, r9, [sp]
   b7c7c:	4630      	mov	r0, r6
   b7c7e:	4642      	mov	r2, r8
   b7c80:	464b      	mov	r3, r9
   b7c82:	4639      	mov	r1, r7
   b7c84:	f000 fcd2 	bl	b862c <__aeabi_dsub>
   b7c88:	4622      	mov	r2, r4
   b7c8a:	462b      	mov	r3, r5
   b7c8c:	f000 fe86 	bl	b899c <__aeabi_dmul>
   b7c90:	4632      	mov	r2, r6
   b7c92:	463b      	mov	r3, r7
   b7c94:	4606      	mov	r6, r0
   b7c96:	460f      	mov	r7, r1
   b7c98:	4650      	mov	r0, sl
   b7c9a:	4659      	mov	r1, fp
   b7c9c:	f000 fe7e 	bl	b899c <__aeabi_dmul>
   b7ca0:	4602      	mov	r2, r0
   b7ca2:	460b      	mov	r3, r1
   b7ca4:	4630      	mov	r0, r6
   b7ca6:	4639      	mov	r1, r7
   b7ca8:	f000 fcc2 	bl	b8630 <__adddf3>
   b7cac:	4642      	mov	r2, r8
   b7cae:	464b      	mov	r3, r9
   b7cb0:	4606      	mov	r6, r0
   b7cb2:	460f      	mov	r7, r1
   b7cb4:	4620      	mov	r0, r4
   b7cb6:	4629      	mov	r1, r5
   b7cb8:	f000 fe70 	bl	b899c <__aeabi_dmul>
   b7cbc:	4604      	mov	r4, r0
   b7cbe:	460d      	mov	r5, r1
   b7cc0:	462b      	mov	r3, r5
   b7cc2:	4630      	mov	r0, r6
   b7cc4:	4639      	mov	r1, r7
   b7cc6:	4622      	mov	r2, r4
   b7cc8:	f000 fcb2 	bl	b8630 <__adddf3>
   b7ccc:	4bc2      	ldr	r3, [pc, #776]	; (b7fd8 <__ieee754_pow+0x918>)
   b7cce:	4299      	cmp	r1, r3
   b7cd0:	4680      	mov	r8, r0
   b7cd2:	4689      	mov	r9, r1
   b7cd4:	468a      	mov	sl, r1
   b7cd6:	f340 8118 	ble.w	b7f0a <__ieee754_pow+0x84a>
   b7cda:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b7cde:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b7ce2:	4303      	orrs	r3, r0
   b7ce4:	f040 8207 	bne.w	b80f6 <__ieee754_pow+0xa36>
   b7ce8:	a3a3      	add	r3, pc, #652	; (adr r3, b7f78 <__ieee754_pow+0x8b8>)
   b7cea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7cee:	4630      	mov	r0, r6
   b7cf0:	4639      	mov	r1, r7
   b7cf2:	f000 fc9d 	bl	b8630 <__adddf3>
   b7cf6:	4602      	mov	r2, r0
   b7cf8:	460b      	mov	r3, r1
   b7cfa:	4640      	mov	r0, r8
   b7cfc:	4649      	mov	r1, r9
   b7cfe:	4690      	mov	r8, r2
   b7d00:	4699      	mov	r9, r3
   b7d02:	4622      	mov	r2, r4
   b7d04:	462b      	mov	r3, r5
   b7d06:	f000 fc91 	bl	b862c <__aeabi_dsub>
   b7d0a:	4602      	mov	r2, r0
   b7d0c:	460b      	mov	r3, r1
   b7d0e:	4640      	mov	r0, r8
   b7d10:	4649      	mov	r1, r9
   b7d12:	f001 f8d3 	bl	b8ebc <__aeabi_dcmpgt>
   b7d16:	2800      	cmp	r0, #0
   b7d18:	f040 81ed 	bne.w	b80f6 <__ieee754_pow+0xa36>
   b7d1c:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b7d20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b7d24:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b7d28:	fa42 f303 	asr.w	r3, r2, r3
   b7d2c:	4453      	add	r3, sl
   b7d2e:	49ab      	ldr	r1, [pc, #684]	; (b7fdc <__ieee754_pow+0x91c>)
   b7d30:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b7d34:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b7d38:	fa41 fc02 	asr.w	ip, r1, r2
   b7d3c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b7d40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7d44:	f1c2 0214 	rsb	r2, r2, #20
   b7d48:	fa41 f202 	asr.w	r2, r1, r2
   b7d4c:	2000      	movs	r0, #0
   b7d4e:	ea23 010c 	bic.w	r1, r3, ip
   b7d52:	f1ba 0f00 	cmp.w	sl, #0
   b7d56:	9200      	str	r2, [sp, #0]
   b7d58:	460b      	mov	r3, r1
   b7d5a:	4602      	mov	r2, r0
   b7d5c:	da02      	bge.n	b7d64 <__ieee754_pow+0x6a4>
   b7d5e:	9900      	ldr	r1, [sp, #0]
   b7d60:	4249      	negs	r1, r1
   b7d62:	9100      	str	r1, [sp, #0]
   b7d64:	4620      	mov	r0, r4
   b7d66:	4629      	mov	r1, r5
   b7d68:	f000 fc60 	bl	b862c <__aeabi_dsub>
   b7d6c:	9b00      	ldr	r3, [sp, #0]
   b7d6e:	051b      	lsls	r3, r3, #20
   b7d70:	9302      	str	r3, [sp, #8]
   b7d72:	4602      	mov	r2, r0
   b7d74:	460b      	mov	r3, r1
   b7d76:	4604      	mov	r4, r0
   b7d78:	460d      	mov	r5, r1
   b7d7a:	4630      	mov	r0, r6
   b7d7c:	4639      	mov	r1, r7
   b7d7e:	f000 fc57 	bl	b8630 <__adddf3>
   b7d82:	4689      	mov	r9, r1
   b7d84:	f04f 0800 	mov.w	r8, #0
   b7d88:	a37d      	add	r3, pc, #500	; (adr r3, b7f80 <__ieee754_pow+0x8c0>)
   b7d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7d8e:	4640      	mov	r0, r8
   b7d90:	4649      	mov	r1, r9
   b7d92:	f000 fe03 	bl	b899c <__aeabi_dmul>
   b7d96:	4622      	mov	r2, r4
   b7d98:	462b      	mov	r3, r5
   b7d9a:	4682      	mov	sl, r0
   b7d9c:	468b      	mov	fp, r1
   b7d9e:	4640      	mov	r0, r8
   b7da0:	4649      	mov	r1, r9
   b7da2:	f000 fc43 	bl	b862c <__aeabi_dsub>
   b7da6:	4602      	mov	r2, r0
   b7da8:	460b      	mov	r3, r1
   b7daa:	4630      	mov	r0, r6
   b7dac:	4639      	mov	r1, r7
   b7dae:	f000 fc3d 	bl	b862c <__aeabi_dsub>
   b7db2:	a375      	add	r3, pc, #468	; (adr r3, b7f88 <__ieee754_pow+0x8c8>)
   b7db4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7db8:	f000 fdf0 	bl	b899c <__aeabi_dmul>
   b7dbc:	a374      	add	r3, pc, #464	; (adr r3, b7f90 <__ieee754_pow+0x8d0>)
   b7dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7dc2:	4604      	mov	r4, r0
   b7dc4:	460d      	mov	r5, r1
   b7dc6:	4640      	mov	r0, r8
   b7dc8:	4649      	mov	r1, r9
   b7dca:	f000 fde7 	bl	b899c <__aeabi_dmul>
   b7dce:	4602      	mov	r2, r0
   b7dd0:	460b      	mov	r3, r1
   b7dd2:	4620      	mov	r0, r4
   b7dd4:	4629      	mov	r1, r5
   b7dd6:	f000 fc2b 	bl	b8630 <__adddf3>
   b7dda:	4606      	mov	r6, r0
   b7ddc:	460f      	mov	r7, r1
   b7dde:	4632      	mov	r2, r6
   b7de0:	463b      	mov	r3, r7
   b7de2:	4650      	mov	r0, sl
   b7de4:	4659      	mov	r1, fp
   b7de6:	f000 fc23 	bl	b8630 <__adddf3>
   b7dea:	4652      	mov	r2, sl
   b7dec:	465b      	mov	r3, fp
   b7dee:	4604      	mov	r4, r0
   b7df0:	460d      	mov	r5, r1
   b7df2:	f000 fc1b 	bl	b862c <__aeabi_dsub>
   b7df6:	4602      	mov	r2, r0
   b7df8:	460b      	mov	r3, r1
   b7dfa:	4630      	mov	r0, r6
   b7dfc:	4639      	mov	r1, r7
   b7dfe:	f000 fc15 	bl	b862c <__aeabi_dsub>
   b7e02:	4622      	mov	r2, r4
   b7e04:	4680      	mov	r8, r0
   b7e06:	4689      	mov	r9, r1
   b7e08:	462b      	mov	r3, r5
   b7e0a:	4620      	mov	r0, r4
   b7e0c:	4629      	mov	r1, r5
   b7e0e:	f000 fdc5 	bl	b899c <__aeabi_dmul>
   b7e12:	a361      	add	r3, pc, #388	; (adr r3, b7f98 <__ieee754_pow+0x8d8>)
   b7e14:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e18:	4606      	mov	r6, r0
   b7e1a:	460f      	mov	r7, r1
   b7e1c:	f000 fdbe 	bl	b899c <__aeabi_dmul>
   b7e20:	a35f      	add	r3, pc, #380	; (adr r3, b7fa0 <__ieee754_pow+0x8e0>)
   b7e22:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e26:	f000 fc01 	bl	b862c <__aeabi_dsub>
   b7e2a:	4632      	mov	r2, r6
   b7e2c:	463b      	mov	r3, r7
   b7e2e:	f000 fdb5 	bl	b899c <__aeabi_dmul>
   b7e32:	a35d      	add	r3, pc, #372	; (adr r3, b7fa8 <__ieee754_pow+0x8e8>)
   b7e34:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e38:	f000 fbfa 	bl	b8630 <__adddf3>
   b7e3c:	4632      	mov	r2, r6
   b7e3e:	463b      	mov	r3, r7
   b7e40:	f000 fdac 	bl	b899c <__aeabi_dmul>
   b7e44:	a35a      	add	r3, pc, #360	; (adr r3, b7fb0 <__ieee754_pow+0x8f0>)
   b7e46:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e4a:	f000 fbef 	bl	b862c <__aeabi_dsub>
   b7e4e:	4632      	mov	r2, r6
   b7e50:	463b      	mov	r3, r7
   b7e52:	f000 fda3 	bl	b899c <__aeabi_dmul>
   b7e56:	a358      	add	r3, pc, #352	; (adr r3, b7fb8 <__ieee754_pow+0x8f8>)
   b7e58:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e5c:	f000 fbe8 	bl	b8630 <__adddf3>
   b7e60:	4632      	mov	r2, r6
   b7e62:	463b      	mov	r3, r7
   b7e64:	f000 fd9a 	bl	b899c <__aeabi_dmul>
   b7e68:	4602      	mov	r2, r0
   b7e6a:	460b      	mov	r3, r1
   b7e6c:	4620      	mov	r0, r4
   b7e6e:	4629      	mov	r1, r5
   b7e70:	f000 fbdc 	bl	b862c <__aeabi_dsub>
   b7e74:	4606      	mov	r6, r0
   b7e76:	460f      	mov	r7, r1
   b7e78:	4632      	mov	r2, r6
   b7e7a:	463b      	mov	r3, r7
   b7e7c:	4620      	mov	r0, r4
   b7e7e:	4629      	mov	r1, r5
   b7e80:	f000 fd8c 	bl	b899c <__aeabi_dmul>
   b7e84:	4602      	mov	r2, r0
   b7e86:	460b      	mov	r3, r1
   b7e88:	4630      	mov	r0, r6
   b7e8a:	4639      	mov	r1, r7
   b7e8c:	4616      	mov	r6, r2
   b7e8e:	461f      	mov	r7, r3
   b7e90:	2200      	movs	r2, #0
   b7e92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b7e96:	f000 fbc9 	bl	b862c <__aeabi_dsub>
   b7e9a:	4602      	mov	r2, r0
   b7e9c:	460b      	mov	r3, r1
   b7e9e:	4630      	mov	r0, r6
   b7ea0:	4639      	mov	r1, r7
   b7ea2:	f000 fea5 	bl	b8bf0 <__aeabi_ddiv>
   b7ea6:	4642      	mov	r2, r8
   b7ea8:	4606      	mov	r6, r0
   b7eaa:	460f      	mov	r7, r1
   b7eac:	464b      	mov	r3, r9
   b7eae:	4620      	mov	r0, r4
   b7eb0:	4629      	mov	r1, r5
   b7eb2:	f000 fd73 	bl	b899c <__aeabi_dmul>
   b7eb6:	4642      	mov	r2, r8
   b7eb8:	464b      	mov	r3, r9
   b7eba:	f000 fbb9 	bl	b8630 <__adddf3>
   b7ebe:	4602      	mov	r2, r0
   b7ec0:	460b      	mov	r3, r1
   b7ec2:	4630      	mov	r0, r6
   b7ec4:	4639      	mov	r1, r7
   b7ec6:	f000 fbb1 	bl	b862c <__aeabi_dsub>
   b7eca:	4622      	mov	r2, r4
   b7ecc:	462b      	mov	r3, r5
   b7ece:	f000 fbad 	bl	b862c <__aeabi_dsub>
   b7ed2:	4602      	mov	r2, r0
   b7ed4:	460b      	mov	r3, r1
   b7ed6:	2000      	movs	r0, #0
   b7ed8:	4941      	ldr	r1, [pc, #260]	; (b7fe0 <__ieee754_pow+0x920>)
   b7eda:	f000 fba7 	bl	b862c <__aeabi_dsub>
   b7ede:	9a02      	ldr	r2, [sp, #8]
   b7ee0:	460b      	mov	r3, r1
   b7ee2:	4413      	add	r3, r2
   b7ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b7ee8:	f2c0 8143 	blt.w	b8172 <__ieee754_pow+0xab2>
   b7eec:	4619      	mov	r1, r3
   b7eee:	ec53 2b18 	vmov	r2, r3, d8
   b7ef2:	f000 fd53 	bl	b899c <__aeabi_dmul>
   b7ef6:	ec41 0b10 	vmov	d0, r0, r1
   b7efa:	e42d      	b.n	b7758 <__ieee754_pow+0x98>
   b7efc:	f1bb 0f00 	cmp.w	fp, #0
   b7f00:	f6ff aca0 	blt.w	b7844 <__ieee754_pow+0x184>
   b7f04:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b7fc0 <__ieee754_pow+0x900>
   b7f08:	e426      	b.n	b7758 <__ieee754_pow+0x98>
   b7f0a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b7fe8 <__ieee754_pow+0x928>
   b7f0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b7f12:	4563      	cmp	r3, ip
   b7f14:	f340 80e7 	ble.w	b80e6 <__ieee754_pow+0xa26>
   b7f18:	4b32      	ldr	r3, [pc, #200]	; (b7fe4 <__ieee754_pow+0x924>)
   b7f1a:	440b      	add	r3, r1
   b7f1c:	4303      	orrs	r3, r0
   b7f1e:	d10a      	bne.n	b7f36 <__ieee754_pow+0x876>
   b7f20:	4622      	mov	r2, r4
   b7f22:	462b      	mov	r3, r5
   b7f24:	f000 fb82 	bl	b862c <__aeabi_dsub>
   b7f28:	4632      	mov	r2, r6
   b7f2a:	463b      	mov	r3, r7
   b7f2c:	f000 ffbc 	bl	b8ea8 <__aeabi_dcmpge>
   b7f30:	2800      	cmp	r0, #0
   b7f32:	f43f aef3 	beq.w	b7d1c <__ieee754_pow+0x65c>
   b7f36:	a324      	add	r3, pc, #144	; (adr r3, b7fc8 <__ieee754_pow+0x908>)
   b7f38:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7f3c:	ec51 0b18 	vmov	r0, r1, d8
   b7f40:	f000 fd2c 	bl	b899c <__aeabi_dmul>
   b7f44:	a320      	add	r3, pc, #128	; (adr r3, b7fc8 <__ieee754_pow+0x908>)
   b7f46:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7f4a:	f000 fd27 	bl	b899c <__aeabi_dmul>
   b7f4e:	ec41 0b10 	vmov	d0, r0, r1
   b7f52:	e401      	b.n	b7758 <__ieee754_pow+0x98>
   b7f54:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b7fd0 <__ieee754_pow+0x910>
   b7f58:	eeb0 8a47 	vmov.f32	s16, s14
   b7f5c:	eef0 8a67 	vmov.f32	s17, s15
   b7f60:	e686      	b.n	b7c70 <__ieee754_pow+0x5b0>
   b7f62:	f1bb 0f00 	cmp.w	fp, #0
   b7f66:	dacd      	bge.n	b7f04 <__ieee754_pow+0x844>
   b7f68:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b7f6c:	ee00 6a10 	vmov	s0, r6
   b7f70:	ee00 3a90 	vmov	s1, r3
   b7f74:	f7ff bbf0 	b.w	b7758 <__ieee754_pow+0x98>
   b7f78:	652b82fe 	.word	0x652b82fe
   b7f7c:	3c971547 	.word	0x3c971547
   b7f80:	00000000 	.word	0x00000000
   b7f84:	3fe62e43 	.word	0x3fe62e43
   b7f88:	fefa39ef 	.word	0xfefa39ef
   b7f8c:	3fe62e42 	.word	0x3fe62e42
   b7f90:	0ca86c39 	.word	0x0ca86c39
   b7f94:	be205c61 	.word	0xbe205c61
   b7f98:	72bea4d0 	.word	0x72bea4d0
   b7f9c:	3e663769 	.word	0x3e663769
   b7fa0:	c5d26bf1 	.word	0xc5d26bf1
   b7fa4:	3ebbbd41 	.word	0x3ebbbd41
   b7fa8:	af25de2c 	.word	0xaf25de2c
   b7fac:	3f11566a 	.word	0x3f11566a
   b7fb0:	16bebd93 	.word	0x16bebd93
   b7fb4:	3f66c16c 	.word	0x3f66c16c
   b7fb8:	5555553e 	.word	0x5555553e
   b7fbc:	3fc55555 	.word	0x3fc55555
	...
   b7fc8:	c2f8f359 	.word	0xc2f8f359
   b7fcc:	01a56e1f 	.word	0x01a56e1f
   b7fd0:	00000000 	.word	0x00000000
   b7fd4:	3ff00000 	.word	0x3ff00000
   b7fd8:	408fffff 	.word	0x408fffff
   b7fdc:	000fffff 	.word	0x000fffff
   b7fe0:	3ff00000 	.word	0x3ff00000
   b7fe4:	3f6f3400 	.word	0x3f6f3400
   b7fe8:	4090cbff 	.word	0x4090cbff
   b7fec:	4598      	cmp	r8, r3
   b7fee:	db85      	blt.n	b7efc <__ieee754_pow+0x83c>
   b7ff0:	4b7d      	ldr	r3, [pc, #500]	; (b81e8 <__ieee754_pow+0xb28>)
   b7ff2:	4598      	cmp	r8, r3
   b7ff4:	f73f ac22 	bgt.w	b783c <__ieee754_pow+0x17c>
   b7ff8:	ec51 0b10 	vmov	r0, r1, d0
   b7ffc:	4b7a      	ldr	r3, [pc, #488]	; (b81e8 <__ieee754_pow+0xb28>)
   b7ffe:	2200      	movs	r2, #0
   b8000:	f000 fb14 	bl	b862c <__aeabi_dsub>
   b8004:	a368      	add	r3, pc, #416	; (adr r3, b81a8 <__ieee754_pow+0xae8>)
   b8006:	e9d3 2300 	ldrd	r2, r3, [r3]
   b800a:	4604      	mov	r4, r0
   b800c:	460d      	mov	r5, r1
   b800e:	f000 fcc5 	bl	b899c <__aeabi_dmul>
   b8012:	a367      	add	r3, pc, #412	; (adr r3, b81b0 <__ieee754_pow+0xaf0>)
   b8014:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8018:	4682      	mov	sl, r0
   b801a:	468b      	mov	fp, r1
   b801c:	4620      	mov	r0, r4
   b801e:	4629      	mov	r1, r5
   b8020:	f000 fcbc 	bl	b899c <__aeabi_dmul>
   b8024:	4b71      	ldr	r3, [pc, #452]	; (b81ec <__ieee754_pow+0xb2c>)
   b8026:	ec41 0b18 	vmov	d8, r0, r1
   b802a:	2200      	movs	r2, #0
   b802c:	4620      	mov	r0, r4
   b802e:	4629      	mov	r1, r5
   b8030:	f000 fcb4 	bl	b899c <__aeabi_dmul>
   b8034:	4602      	mov	r2, r0
   b8036:	460b      	mov	r3, r1
   b8038:	a15f      	add	r1, pc, #380	; (adr r1, b81b8 <__ieee754_pow+0xaf8>)
   b803a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b803e:	f000 faf5 	bl	b862c <__aeabi_dsub>
   b8042:	4622      	mov	r2, r4
   b8044:	462b      	mov	r3, r5
   b8046:	f000 fca9 	bl	b899c <__aeabi_dmul>
   b804a:	4602      	mov	r2, r0
   b804c:	460b      	mov	r3, r1
   b804e:	2000      	movs	r0, #0
   b8050:	4967      	ldr	r1, [pc, #412]	; (b81f0 <__ieee754_pow+0xb30>)
   b8052:	f000 faeb 	bl	b862c <__aeabi_dsub>
   b8056:	4622      	mov	r2, r4
   b8058:	4680      	mov	r8, r0
   b805a:	4689      	mov	r9, r1
   b805c:	462b      	mov	r3, r5
   b805e:	4620      	mov	r0, r4
   b8060:	4629      	mov	r1, r5
   b8062:	f000 fc9b 	bl	b899c <__aeabi_dmul>
   b8066:	4602      	mov	r2, r0
   b8068:	460b      	mov	r3, r1
   b806a:	4640      	mov	r0, r8
   b806c:	4649      	mov	r1, r9
   b806e:	f000 fc95 	bl	b899c <__aeabi_dmul>
   b8072:	a353      	add	r3, pc, #332	; (adr r3, b81c0 <__ieee754_pow+0xb00>)
   b8074:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8078:	f000 fc90 	bl	b899c <__aeabi_dmul>
   b807c:	4602      	mov	r2, r0
   b807e:	460b      	mov	r3, r1
   b8080:	ec51 0b18 	vmov	r0, r1, d8
   b8084:	f000 fad2 	bl	b862c <__aeabi_dsub>
   b8088:	4680      	mov	r8, r0
   b808a:	4689      	mov	r9, r1
   b808c:	4642      	mov	r2, r8
   b808e:	464b      	mov	r3, r9
   b8090:	4650      	mov	r0, sl
   b8092:	4659      	mov	r1, fp
   b8094:	f000 facc 	bl	b8630 <__adddf3>
   b8098:	2000      	movs	r0, #0
   b809a:	4652      	mov	r2, sl
   b809c:	465b      	mov	r3, fp
   b809e:	4604      	mov	r4, r0
   b80a0:	460d      	mov	r5, r1
   b80a2:	e591      	b.n	b7bc8 <__ieee754_pow+0x508>
   b80a4:	4622      	mov	r2, r4
   b80a6:	462b      	mov	r3, r5
   b80a8:	4620      	mov	r0, r4
   b80aa:	4629      	mov	r1, r5
   b80ac:	f000 fc76 	bl	b899c <__aeabi_dmul>
   b80b0:	ec41 0b10 	vmov	d0, r0, r1
   b80b4:	f7ff bb50 	b.w	b7758 <__ieee754_pow+0x98>
   b80b8:	494b      	ldr	r1, [pc, #300]	; (b81e8 <__ieee754_pow+0xb28>)
   b80ba:	2000      	movs	r0, #0
   b80bc:	4622      	mov	r2, r4
   b80be:	462b      	mov	r3, r5
   b80c0:	f000 fd96 	bl	b8bf0 <__aeabi_ddiv>
   b80c4:	ec41 0b10 	vmov	d0, r0, r1
   b80c8:	f7ff bb46 	b.w	b7758 <__ieee754_pow+0x98>
   b80cc:	2b00      	cmp	r3, #0
   b80ce:	d144      	bne.n	b815a <__ieee754_pow+0xa9a>
   b80d0:	f1c1 0114 	rsb	r1, r1, #20
   b80d4:	fa4a f001 	asr.w	r0, sl, r1
   b80d8:	fa00 f101 	lsl.w	r1, r0, r1
   b80dc:	4551      	cmp	r1, sl
   b80de:	d05a      	beq.n	b8196 <__ieee754_pow+0xad6>
   b80e0:	9300      	str	r3, [sp, #0]
   b80e2:	f7ff bb17 	b.w	b7714 <__ieee754_pow+0x54>
   b80e6:	4a42      	ldr	r2, [pc, #264]	; (b81f0 <__ieee754_pow+0xb30>)
   b80e8:	4293      	cmp	r3, r2
   b80ea:	dc5b      	bgt.n	b81a4 <__ieee754_pow+0xae4>
   b80ec:	e9dd 1200 	ldrd	r1, r2, [sp]
   b80f0:	9102      	str	r1, [sp, #8]
   b80f2:	9100      	str	r1, [sp, #0]
   b80f4:	e646      	b.n	b7d84 <__ieee754_pow+0x6c4>
   b80f6:	a334      	add	r3, pc, #208	; (adr r3, b81c8 <__ieee754_pow+0xb08>)
   b80f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b80fc:	ec51 0b18 	vmov	r0, r1, d8
   b8100:	f000 fc4c 	bl	b899c <__aeabi_dmul>
   b8104:	a330      	add	r3, pc, #192	; (adr r3, b81c8 <__ieee754_pow+0xb08>)
   b8106:	e9d3 2300 	ldrd	r2, r3, [r3]
   b810a:	f000 fc47 	bl	b899c <__aeabi_dmul>
   b810e:	ec41 0b10 	vmov	d0, r0, r1
   b8112:	f7ff bb21 	b.w	b7758 <__ieee754_pow+0x98>
   b8116:	9b00      	ldr	r3, [sp, #0]
   b8118:	2b01      	cmp	r3, #1
   b811a:	f47f ab1d 	bne.w	b7758 <__ieee754_pow+0x98>
   b811e:	ee10 1a90 	vmov	r1, s1
   b8122:	ee10 2a10 	vmov	r2, s0
   b8126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b812a:	ec43 2b10 	vmov	d0, r2, r3
   b812e:	f7ff bb13 	b.w	b7758 <__ieee754_pow+0x98>
   b8132:	ed9f 7b27 	vldr	d7, [pc, #156]	; b81d0 <__ieee754_pow+0xb10>
   b8136:	eeb0 ca47 	vmov.f32	s24, s14
   b813a:	eef0 ca67 	vmov.f32	s25, s15
   b813e:	ed9f 7b26 	vldr	d7, [pc, #152]	; b81d8 <__ieee754_pow+0xb18>
   b8142:	eeb0 da47 	vmov.f32	s26, s14
   b8146:	eef0 da67 	vmov.f32	s27, s15
   b814a:	ed9f 7b25 	vldr	d7, [pc, #148]	; b81e0 <__ieee754_pow+0xb20>
   b814e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b8152:	ec53 2b17 	vmov	r2, r3, d7
   b8156:	f7ff bbeb 	b.w	b7930 <__ieee754_pow+0x270>
   b815a:	ec45 4b10 	vmov	d0, r4, r5
   b815e:	9200      	str	r2, [sp, #0]
   b8160:	f000 f914 	bl	b838c <fabs>
   b8164:	9a00      	ldr	r2, [sp, #0]
   b8166:	2a00      	cmp	r2, #0
   b8168:	f47f ab92 	bne.w	b7890 <__ieee754_pow+0x1d0>
   b816c:	9200      	str	r2, [sp, #0]
   b816e:	f7ff bb26 	b.w	b77be <__ieee754_pow+0xfe>
   b8172:	ec41 0b10 	vmov	d0, r0, r1
   b8176:	9800      	ldr	r0, [sp, #0]
   b8178:	f000 f9c2 	bl	b8500 <scalbn>
   b817c:	ec51 0b10 	vmov	r0, r1, d0
   b8180:	e6b5      	b.n	b7eee <__ieee754_pow+0x82e>
   b8182:	f000 0001 	and.w	r0, r0, #1
   b8186:	f1c0 0102 	rsb	r1, r0, #2
   b818a:	9100      	str	r1, [sp, #0]
   b818c:	2b00      	cmp	r3, #0
   b818e:	f43f aac1 	beq.w	b7714 <__ieee754_pow+0x54>
   b8192:	f7ff bb0d 	b.w	b77b0 <__ieee754_pow+0xf0>
   b8196:	f000 0001 	and.w	r0, r0, #1
   b819a:	f1c0 0302 	rsb	r3, r0, #2
   b819e:	9300      	str	r3, [sp, #0]
   b81a0:	f7ff bab8 	b.w	b7714 <__ieee754_pow+0x54>
   b81a4:	151b      	asrs	r3, r3, #20
   b81a6:	e5bb      	b.n	b7d20 <__ieee754_pow+0x660>
   b81a8:	60000000 	.word	0x60000000
   b81ac:	3ff71547 	.word	0x3ff71547
   b81b0:	f85ddf44 	.word	0xf85ddf44
   b81b4:	3e54ae0b 	.word	0x3e54ae0b
   b81b8:	55555555 	.word	0x55555555
   b81bc:	3fd55555 	.word	0x3fd55555
   b81c0:	652b82fe 	.word	0x652b82fe
   b81c4:	3ff71547 	.word	0x3ff71547
   b81c8:	8800759c 	.word	0x8800759c
   b81cc:	7e37e43c 	.word	0x7e37e43c
   b81d0:	40000000 	.word	0x40000000
   b81d4:	3fe2b803 	.word	0x3fe2b803
   b81d8:	43cfd006 	.word	0x43cfd006
   b81dc:	3e4cfdeb 	.word	0x3e4cfdeb
   b81e0:	00000000 	.word	0x00000000
   b81e4:	3ff80000 	.word	0x3ff80000
   b81e8:	3ff00000 	.word	0x3ff00000
   b81ec:	3fd00000 	.word	0x3fd00000
   b81f0:	3fe00000 	.word	0x3fe00000

000b81f4 <__ieee754_sqrt>:
   b81f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b81f8:	4a63      	ldr	r2, [pc, #396]	; (b8388 <__ieee754_sqrt+0x194>)
   b81fa:	ec55 4b10 	vmov	r4, r5, d0
   b81fe:	43aa      	bics	r2, r5
   b8200:	f000 809f 	beq.w	b8342 <__ieee754_sqrt+0x14e>
   b8204:	2d00      	cmp	r5, #0
   b8206:	ee10 ca10 	vmov	ip, s0
   b820a:	462b      	mov	r3, r5
   b820c:	dd54      	ble.n	b82b8 <__ieee754_sqrt+0xc4>
   b820e:	1529      	asrs	r1, r5, #20
   b8210:	d063      	beq.n	b82da <__ieee754_sqrt+0xe6>
   b8212:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8216:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b821a:	07c9      	lsls	r1, r1, #31
   b821c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8220:	d404      	bmi.n	b822c <__ieee754_sqrt+0x38>
   b8222:	005b      	lsls	r3, r3, #1
   b8224:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8228:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b822c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b8230:	2600      	movs	r6, #0
   b8232:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b8236:	107f      	asrs	r7, r7, #1
   b8238:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b823c:	f04f 0e16 	mov.w	lr, #22
   b8240:	4634      	mov	r4, r6
   b8242:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b8246:	18a1      	adds	r1, r4, r2
   b8248:	4299      	cmp	r1, r3
   b824a:	dc02      	bgt.n	b8252 <__ieee754_sqrt+0x5e>
   b824c:	1a5b      	subs	r3, r3, r1
   b824e:	188c      	adds	r4, r1, r2
   b8250:	4416      	add	r6, r2
   b8252:	005b      	lsls	r3, r3, #1
   b8254:	f1be 0e01 	subs.w	lr, lr, #1
   b8258:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b825c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8260:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8264:	d1ef      	bne.n	b8246 <__ieee754_sqrt+0x52>
   b8266:	4675      	mov	r5, lr
   b8268:	2020      	movs	r0, #32
   b826a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b826e:	e00a      	b.n	b8286 <__ieee754_sqrt+0x92>
   b8270:	d044      	beq.n	b82fc <__ieee754_sqrt+0x108>
   b8272:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b8276:	3801      	subs	r0, #1
   b8278:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b827c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8280:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8284:	d043      	beq.n	b830e <__ieee754_sqrt+0x11a>
   b8286:	42a3      	cmp	r3, r4
   b8288:	eb02 010e 	add.w	r1, r2, lr
   b828c:	ddf0      	ble.n	b8270 <__ieee754_sqrt+0x7c>
   b828e:	2900      	cmp	r1, #0
   b8290:	eb01 0e02 	add.w	lr, r1, r2
   b8294:	db0a      	blt.n	b82ac <__ieee754_sqrt+0xb8>
   b8296:	46a0      	mov	r8, r4
   b8298:	1b1b      	subs	r3, r3, r4
   b829a:	4561      	cmp	r1, ip
   b829c:	bf88      	it	hi
   b829e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b82a2:	ebac 0c01 	sub.w	ip, ip, r1
   b82a6:	4415      	add	r5, r2
   b82a8:	4644      	mov	r4, r8
   b82aa:	e7e2      	b.n	b8272 <__ieee754_sqrt+0x7e>
   b82ac:	f1be 0f00 	cmp.w	lr, #0
   b82b0:	dbf1      	blt.n	b8296 <__ieee754_sqrt+0xa2>
   b82b2:	f104 0801 	add.w	r8, r4, #1
   b82b6:	e7ef      	b.n	b8298 <__ieee754_sqrt+0xa4>
   b82b8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b82bc:	4322      	orrs	r2, r4
   b82be:	d038      	beq.n	b8332 <__ieee754_sqrt+0x13e>
   b82c0:	2d00      	cmp	r5, #0
   b82c2:	d14e      	bne.n	b8362 <__ieee754_sqrt+0x16e>
   b82c4:	4629      	mov	r1, r5
   b82c6:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b82ca:	3915      	subs	r1, #21
   b82cc:	4613      	mov	r3, r2
   b82ce:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b82d2:	2a00      	cmp	r2, #0
   b82d4:	d0f7      	beq.n	b82c6 <__ieee754_sqrt+0xd2>
   b82d6:	02d6      	lsls	r6, r2, #11
   b82d8:	d450      	bmi.n	b837c <__ieee754_sqrt+0x188>
   b82da:	2000      	movs	r0, #0
   b82dc:	005b      	lsls	r3, r3, #1
   b82de:	02dd      	lsls	r5, r3, #11
   b82e0:	4604      	mov	r4, r0
   b82e2:	f100 0001 	add.w	r0, r0, #1
   b82e6:	d5f9      	bpl.n	b82dc <__ieee754_sqrt+0xe8>
   b82e8:	461a      	mov	r2, r3
   b82ea:	4663      	mov	r3, ip
   b82ec:	fa0c fc00 	lsl.w	ip, ip, r0
   b82f0:	f1c0 0020 	rsb	r0, r0, #32
   b82f4:	40c3      	lsrs	r3, r0
   b82f6:	1b09      	subs	r1, r1, r4
   b82f8:	4313      	orrs	r3, r2
   b82fa:	e78a      	b.n	b8212 <__ieee754_sqrt+0x1e>
   b82fc:	4561      	cmp	r1, ip
   b82fe:	d8b8      	bhi.n	b8272 <__ieee754_sqrt+0x7e>
   b8300:	2900      	cmp	r1, #0
   b8302:	eb01 0e02 	add.w	lr, r1, r2
   b8306:	dbd1      	blt.n	b82ac <__ieee754_sqrt+0xb8>
   b8308:	4698      	mov	r8, r3
   b830a:	2300      	movs	r3, #0
   b830c:	e7c9      	b.n	b82a2 <__ieee754_sqrt+0xae>
   b830e:	ea53 030c 	orrs.w	r3, r3, ip
   b8312:	d110      	bne.n	b8336 <__ieee754_sqrt+0x142>
   b8314:	0868      	lsrs	r0, r5, #1
   b8316:	1071      	asrs	r1, r6, #1
   b8318:	07f3      	lsls	r3, r6, #31
   b831a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b831e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b8322:	bf48      	it	mi
   b8324:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b8328:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b832c:	4602      	mov	r2, r0
   b832e:	ec43 2b10 	vmov	d0, r2, r3
   b8332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8336:	1c6a      	adds	r2, r5, #1
   b8338:	bf16      	itet	ne
   b833a:	1c68      	addne	r0, r5, #1
   b833c:	3601      	addeq	r6, #1
   b833e:	0840      	lsrne	r0, r0, #1
   b8340:	e7e9      	b.n	b8316 <__ieee754_sqrt+0x122>
   b8342:	ee10 2a10 	vmov	r2, s0
   b8346:	ee10 0a10 	vmov	r0, s0
   b834a:	462b      	mov	r3, r5
   b834c:	4629      	mov	r1, r5
   b834e:	f000 fb25 	bl	b899c <__aeabi_dmul>
   b8352:	4622      	mov	r2, r4
   b8354:	462b      	mov	r3, r5
   b8356:	f000 f96b 	bl	b8630 <__adddf3>
   b835a:	ec41 0b10 	vmov	d0, r0, r1
   b835e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8362:	ee10 2a10 	vmov	r2, s0
   b8366:	4620      	mov	r0, r4
   b8368:	4629      	mov	r1, r5
   b836a:	f000 f95f 	bl	b862c <__aeabi_dsub>
   b836e:	4602      	mov	r2, r0
   b8370:	460b      	mov	r3, r1
   b8372:	f000 fc3d 	bl	b8bf0 <__aeabi_ddiv>
   b8376:	ec41 0b10 	vmov	d0, r0, r1
   b837a:	e7da      	b.n	b8332 <__ieee754_sqrt+0x13e>
   b837c:	4663      	mov	r3, ip
   b837e:	2020      	movs	r0, #32
   b8380:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8384:	e7b6      	b.n	b82f4 <__ieee754_sqrt+0x100>
   b8386:	bf00      	nop
   b8388:	7ff00000 	.word	0x7ff00000

000b838c <fabs>:
   b838c:	ec51 0b10 	vmov	r0, r1, d0
   b8390:	ee10 2a10 	vmov	r2, s0
   b8394:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b8398:	ec43 2b10 	vmov	d0, r2, r3
   b839c:	4770      	bx	lr
   b839e:	bf00      	nop

000b83a0 <finite>:
   b83a0:	b082      	sub	sp, #8
   b83a2:	ed8d 0b00 	vstr	d0, [sp]
   b83a6:	9801      	ldr	r0, [sp, #4]
   b83a8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b83ac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b83b0:	0fc0      	lsrs	r0, r0, #31
   b83b2:	b002      	add	sp, #8
   b83b4:	4770      	bx	lr
   b83b6:	bf00      	nop

000b83b8 <nan>:
   b83b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; b83c0 <nan+0x8>
   b83bc:	4770      	bx	lr
   b83be:	bf00      	nop
   b83c0:	00000000 	.word	0x00000000
   b83c4:	7ff80000 	.word	0x7ff80000

000b83c8 <rint>:
   b83c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b83ca:	ec53 2b10 	vmov	r2, r3, d0
   b83ce:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b83d2:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b83d6:	2913      	cmp	r1, #19
   b83d8:	ee10 0a10 	vmov	r0, s0
   b83dc:	b083      	sub	sp, #12
   b83de:	461c      	mov	r4, r3
   b83e0:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b83e4:	dc3a      	bgt.n	b845c <rint+0x94>
   b83e6:	2900      	cmp	r1, #0
   b83e8:	db30      	blt.n	b844c <rint+0x84>
   b83ea:	4d42      	ldr	r5, [pc, #264]	; (b84f4 <rint+0x12c>)
   b83ec:	fa45 fc01 	asr.w	ip, r5, r1
   b83f0:	ea03 050c 	and.w	r5, r3, ip
   b83f4:	4315      	orrs	r5, r2
   b83f6:	d02d      	beq.n	b8454 <rint+0x8c>
   b83f8:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b83fc:	4318      	orrs	r0, r3
   b83fe:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b8402:	d00c      	beq.n	b841e <rint+0x56>
   b8404:	ea24 0c0c 	bic.w	ip, r4, ip
   b8408:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b840c:	2913      	cmp	r1, #19
   b840e:	fa44 f101 	asr.w	r1, r4, r1
   b8412:	bf0c      	ite	eq
   b8414:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b8418:	2000      	movne	r0, #0
   b841a:	ea4c 0401 	orr.w	r4, ip, r1
   b841e:	4936      	ldr	r1, [pc, #216]	; (b84f8 <rint+0x130>)
   b8420:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b8424:	4623      	mov	r3, r4
   b8426:	e9de 4500 	ldrd	r4, r5, [lr]
   b842a:	4602      	mov	r2, r0
   b842c:	4629      	mov	r1, r5
   b842e:	4620      	mov	r0, r4
   b8430:	f000 f8fe 	bl	b8630 <__adddf3>
   b8434:	e9cd 0100 	strd	r0, r1, [sp]
   b8438:	e9dd 0100 	ldrd	r0, r1, [sp]
   b843c:	4622      	mov	r2, r4
   b843e:	462b      	mov	r3, r5
   b8440:	f000 f8f4 	bl	b862c <__aeabi_dsub>
   b8444:	ec41 0b10 	vmov	d0, r0, r1
   b8448:	b003      	add	sp, #12
   b844a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b844c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b8450:	4311      	orrs	r1, r2
   b8452:	d124      	bne.n	b849e <rint+0xd6>
   b8454:	ec43 2b10 	vmov	d0, r2, r3
   b8458:	b003      	add	sp, #12
   b845a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b845c:	2933      	cmp	r1, #51	; 0x33
   b845e:	dd08      	ble.n	b8472 <rint+0xaa>
   b8460:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b8464:	d1f6      	bne.n	b8454 <rint+0x8c>
   b8466:	4619      	mov	r1, r3
   b8468:	f000 f8e2 	bl	b8630 <__adddf3>
   b846c:	ec41 0b10 	vmov	d0, r0, r1
   b8470:	e7f2      	b.n	b8458 <rint+0x90>
   b8472:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b8476:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b847a:	fa21 f10c 	lsr.w	r1, r1, ip
   b847e:	420a      	tst	r2, r1
   b8480:	d0e8      	beq.n	b8454 <rint+0x8c>
   b8482:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b8486:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b848a:	d0c8      	beq.n	b841e <rint+0x56>
   b848c:	ea20 0303 	bic.w	r3, r0, r3
   b8490:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b8494:	fa40 fc0c 	asr.w	ip, r0, ip
   b8498:	ea43 000c 	orr.w	r0, r3, ip
   b849c:	e7bf      	b.n	b841e <rint+0x56>
   b849e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b84a2:	4318      	orrs	r0, r3
   b84a4:	4a14      	ldr	r2, [pc, #80]	; (b84f8 <rint+0x130>)
   b84a6:	4243      	negs	r3, r0
   b84a8:	4303      	orrs	r3, r0
   b84aa:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b84ae:	0b1b      	lsrs	r3, r3, #12
   b84b0:	0c62      	lsrs	r2, r4, #17
   b84b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b84b6:	0452      	lsls	r2, r2, #17
   b84b8:	ea43 0702 	orr.w	r7, r3, r2
   b84bc:	463b      	mov	r3, r7
   b84be:	e9de 6700 	ldrd	r6, r7, [lr]
   b84c2:	ee10 2a10 	vmov	r2, s0
   b84c6:	4630      	mov	r0, r6
   b84c8:	4639      	mov	r1, r7
   b84ca:	f000 f8b1 	bl	b8630 <__adddf3>
   b84ce:	e9cd 0100 	strd	r0, r1, [sp]
   b84d2:	4632      	mov	r2, r6
   b84d4:	463b      	mov	r3, r7
   b84d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   b84da:	f000 f8a7 	bl	b862c <__aeabi_dsub>
   b84de:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b84e2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b84e6:	4602      	mov	r2, r0
   b84e8:	ea41 0304 	orr.w	r3, r1, r4
   b84ec:	ec43 2b10 	vmov	d0, r2, r3
   b84f0:	b003      	add	sp, #12
   b84f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b84f4:	000fffff 	.word	0x000fffff
   b84f8:	000beb20 	.word	0x000beb20
   b84fc:	00000000 	.word	0x00000000

000b8500 <scalbn>:
   b8500:	b538      	push	{r3, r4, r5, lr}
   b8502:	ec53 2b10 	vmov	r2, r3, d0
   b8506:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b850a:	4604      	mov	r4, r0
   b850c:	469c      	mov	ip, r3
   b850e:	bb89      	cbnz	r1, b8574 <scalbn+0x74>
   b8510:	ee10 1a10 	vmov	r1, s0
   b8514:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b8518:	ea5c 0101 	orrs.w	r1, ip, r1
   b851c:	d029      	beq.n	b8572 <scalbn+0x72>
   b851e:	4619      	mov	r1, r3
   b8520:	2200      	movs	r2, #0
   b8522:	4b3d      	ldr	r3, [pc, #244]	; (b8618 <scalbn+0x118>)
   b8524:	4d3d      	ldr	r5, [pc, #244]	; (b861c <scalbn+0x11c>)
   b8526:	ee10 0a10 	vmov	r0, s0
   b852a:	f000 fa37 	bl	b899c <__aeabi_dmul>
   b852e:	42ac      	cmp	r4, r5
   b8530:	4602      	mov	r2, r0
   b8532:	460b      	mov	r3, r1
   b8534:	db16      	blt.n	b8564 <scalbn+0x64>
   b8536:	468c      	mov	ip, r1
   b8538:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b853c:	3936      	subs	r1, #54	; 0x36
   b853e:	4421      	add	r1, r4
   b8540:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b8544:	4281      	cmp	r1, r0
   b8546:	dc21      	bgt.n	b858c <scalbn+0x8c>
   b8548:	2900      	cmp	r1, #0
   b854a:	dc47      	bgt.n	b85dc <scalbn+0xdc>
   b854c:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b8550:	da34      	bge.n	b85bc <scalbn+0xbc>
   b8552:	f24c 3150 	movw	r1, #50000	; 0xc350
   b8556:	428c      	cmp	r4, r1
   b8558:	dc18      	bgt.n	b858c <scalbn+0x8c>
   b855a:	2b00      	cmp	r3, #0
   b855c:	a126      	add	r1, pc, #152	; (adr r1, b85f8 <scalbn+0xf8>)
   b855e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8562:	db44      	blt.n	b85ee <scalbn+0xee>
   b8564:	a324      	add	r3, pc, #144	; (adr r3, b85f8 <scalbn+0xf8>)
   b8566:	e9d3 2300 	ldrd	r2, r3, [r3]
   b856a:	f000 fa17 	bl	b899c <__aeabi_dmul>
   b856e:	ec41 0b10 	vmov	d0, r0, r1
   b8572:	bd38      	pop	{r3, r4, r5, pc}
   b8574:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b8578:	4281      	cmp	r1, r0
   b857a:	d1e0      	bne.n	b853e <scalbn+0x3e>
   b857c:	ee10 0a10 	vmov	r0, s0
   b8580:	4619      	mov	r1, r3
   b8582:	f000 f855 	bl	b8630 <__adddf3>
   b8586:	ec41 0b10 	vmov	d0, r0, r1
   b858a:	bd38      	pop	{r3, r4, r5, pc}
   b858c:	2b00      	cmp	r3, #0
   b858e:	a11c      	add	r1, pc, #112	; (adr r1, b8600 <scalbn+0x100>)
   b8590:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8594:	db07      	blt.n	b85a6 <scalbn+0xa6>
   b8596:	a31a      	add	r3, pc, #104	; (adr r3, b8600 <scalbn+0x100>)
   b8598:	e9d3 2300 	ldrd	r2, r3, [r3]
   b859c:	f000 f9fe 	bl	b899c <__aeabi_dmul>
   b85a0:	ec41 0b10 	vmov	d0, r0, r1
   b85a4:	bd38      	pop	{r3, r4, r5, pc}
   b85a6:	a118      	add	r1, pc, #96	; (adr r1, b8608 <scalbn+0x108>)
   b85a8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b85ac:	a314      	add	r3, pc, #80	; (adr r3, b8600 <scalbn+0x100>)
   b85ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b85b2:	f000 f9f3 	bl	b899c <__aeabi_dmul>
   b85b6:	ec41 0b10 	vmov	d0, r0, r1
   b85ba:	e7f3      	b.n	b85a4 <scalbn+0xa4>
   b85bc:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b85c0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b85c4:	3136      	adds	r1, #54	; 0x36
   b85c6:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b85ca:	4610      	mov	r0, r2
   b85cc:	4619      	mov	r1, r3
   b85ce:	2200      	movs	r2, #0
   b85d0:	4b13      	ldr	r3, [pc, #76]	; (b8620 <scalbn+0x120>)
   b85d2:	f000 f9e3 	bl	b899c <__aeabi_dmul>
   b85d6:	ec41 0b10 	vmov	d0, r0, r1
   b85da:	bd38      	pop	{r3, r4, r5, pc}
   b85dc:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b85e0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b85e4:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b85e8:	ec43 2b10 	vmov	d0, r2, r3
   b85ec:	bd38      	pop	{r3, r4, r5, pc}
   b85ee:	a108      	add	r1, pc, #32	; (adr r1, b8610 <scalbn+0x110>)
   b85f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b85f4:	e7b6      	b.n	b8564 <scalbn+0x64>
   b85f6:	bf00      	nop
   b85f8:	c2f8f359 	.word	0xc2f8f359
   b85fc:	01a56e1f 	.word	0x01a56e1f
   b8600:	8800759c 	.word	0x8800759c
   b8604:	7e37e43c 	.word	0x7e37e43c
   b8608:	8800759c 	.word	0x8800759c
   b860c:	fe37e43c 	.word	0xfe37e43c
   b8610:	c2f8f359 	.word	0xc2f8f359
   b8614:	81a56e1f 	.word	0x81a56e1f
   b8618:	43500000 	.word	0x43500000
   b861c:	ffff3cb0 	.word	0xffff3cb0
   b8620:	3c900000 	.word	0x3c900000

000b8624 <__aeabi_drsub>:
   b8624:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8628:	e002      	b.n	b8630 <__adddf3>
   b862a:	bf00      	nop

000b862c <__aeabi_dsub>:
   b862c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8630 <__adddf3>:
   b8630:	b530      	push	{r4, r5, lr}
   b8632:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8636:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b863a:	ea94 0f05 	teq	r4, r5
   b863e:	bf08      	it	eq
   b8640:	ea90 0f02 	teqeq	r0, r2
   b8644:	bf1f      	itttt	ne
   b8646:	ea54 0c00 	orrsne.w	ip, r4, r0
   b864a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b864e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8652:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8656:	f000 80e2 	beq.w	b881e <__adddf3+0x1ee>
   b865a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b865e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8662:	bfb8      	it	lt
   b8664:	426d      	neglt	r5, r5
   b8666:	dd0c      	ble.n	b8682 <__adddf3+0x52>
   b8668:	442c      	add	r4, r5
   b866a:	ea80 0202 	eor.w	r2, r0, r2
   b866e:	ea81 0303 	eor.w	r3, r1, r3
   b8672:	ea82 0000 	eor.w	r0, r2, r0
   b8676:	ea83 0101 	eor.w	r1, r3, r1
   b867a:	ea80 0202 	eor.w	r2, r0, r2
   b867e:	ea81 0303 	eor.w	r3, r1, r3
   b8682:	2d36      	cmp	r5, #54	; 0x36
   b8684:	bf88      	it	hi
   b8686:	bd30      	pophi	{r4, r5, pc}
   b8688:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b868c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8690:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8694:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8698:	d002      	beq.n	b86a0 <__adddf3+0x70>
   b869a:	4240      	negs	r0, r0
   b869c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b86a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b86a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b86a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b86ac:	d002      	beq.n	b86b4 <__adddf3+0x84>
   b86ae:	4252      	negs	r2, r2
   b86b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b86b4:	ea94 0f05 	teq	r4, r5
   b86b8:	f000 80a7 	beq.w	b880a <__adddf3+0x1da>
   b86bc:	f1a4 0401 	sub.w	r4, r4, #1
   b86c0:	f1d5 0e20 	rsbs	lr, r5, #32
   b86c4:	db0d      	blt.n	b86e2 <__adddf3+0xb2>
   b86c6:	fa02 fc0e 	lsl.w	ip, r2, lr
   b86ca:	fa22 f205 	lsr.w	r2, r2, r5
   b86ce:	1880      	adds	r0, r0, r2
   b86d0:	f141 0100 	adc.w	r1, r1, #0
   b86d4:	fa03 f20e 	lsl.w	r2, r3, lr
   b86d8:	1880      	adds	r0, r0, r2
   b86da:	fa43 f305 	asr.w	r3, r3, r5
   b86de:	4159      	adcs	r1, r3
   b86e0:	e00e      	b.n	b8700 <__adddf3+0xd0>
   b86e2:	f1a5 0520 	sub.w	r5, r5, #32
   b86e6:	f10e 0e20 	add.w	lr, lr, #32
   b86ea:	2a01      	cmp	r2, #1
   b86ec:	fa03 fc0e 	lsl.w	ip, r3, lr
   b86f0:	bf28      	it	cs
   b86f2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b86f6:	fa43 f305 	asr.w	r3, r3, r5
   b86fa:	18c0      	adds	r0, r0, r3
   b86fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8704:	d507      	bpl.n	b8716 <__adddf3+0xe6>
   b8706:	f04f 0e00 	mov.w	lr, #0
   b870a:	f1dc 0c00 	rsbs	ip, ip, #0
   b870e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8712:	eb6e 0101 	sbc.w	r1, lr, r1
   b8716:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b871a:	d31b      	bcc.n	b8754 <__adddf3+0x124>
   b871c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8720:	d30c      	bcc.n	b873c <__adddf3+0x10c>
   b8722:	0849      	lsrs	r1, r1, #1
   b8724:	ea5f 0030 	movs.w	r0, r0, rrx
   b8728:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b872c:	f104 0401 	add.w	r4, r4, #1
   b8730:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8734:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8738:	f080 809a 	bcs.w	b8870 <__adddf3+0x240>
   b873c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8740:	bf08      	it	eq
   b8742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8746:	f150 0000 	adcs.w	r0, r0, #0
   b874a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b874e:	ea41 0105 	orr.w	r1, r1, r5
   b8752:	bd30      	pop	{r4, r5, pc}
   b8754:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8758:	4140      	adcs	r0, r0
   b875a:	eb41 0101 	adc.w	r1, r1, r1
   b875e:	3c01      	subs	r4, #1
   b8760:	bf28      	it	cs
   b8762:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8766:	d2e9      	bcs.n	b873c <__adddf3+0x10c>
   b8768:	f091 0f00 	teq	r1, #0
   b876c:	bf04      	itt	eq
   b876e:	4601      	moveq	r1, r0
   b8770:	2000      	moveq	r0, #0
   b8772:	fab1 f381 	clz	r3, r1
   b8776:	bf08      	it	eq
   b8778:	3320      	addeq	r3, #32
   b877a:	f1a3 030b 	sub.w	r3, r3, #11
   b877e:	f1b3 0220 	subs.w	r2, r3, #32
   b8782:	da0c      	bge.n	b879e <__adddf3+0x16e>
   b8784:	320c      	adds	r2, #12
   b8786:	dd08      	ble.n	b879a <__adddf3+0x16a>
   b8788:	f102 0c14 	add.w	ip, r2, #20
   b878c:	f1c2 020c 	rsb	r2, r2, #12
   b8790:	fa01 f00c 	lsl.w	r0, r1, ip
   b8794:	fa21 f102 	lsr.w	r1, r1, r2
   b8798:	e00c      	b.n	b87b4 <__adddf3+0x184>
   b879a:	f102 0214 	add.w	r2, r2, #20
   b879e:	bfd8      	it	le
   b87a0:	f1c2 0c20 	rsble	ip, r2, #32
   b87a4:	fa01 f102 	lsl.w	r1, r1, r2
   b87a8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b87ac:	bfdc      	itt	le
   b87ae:	ea41 010c 	orrle.w	r1, r1, ip
   b87b2:	4090      	lslle	r0, r2
   b87b4:	1ae4      	subs	r4, r4, r3
   b87b6:	bfa2      	ittt	ge
   b87b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b87bc:	4329      	orrge	r1, r5
   b87be:	bd30      	popge	{r4, r5, pc}
   b87c0:	ea6f 0404 	mvn.w	r4, r4
   b87c4:	3c1f      	subs	r4, #31
   b87c6:	da1c      	bge.n	b8802 <__adddf3+0x1d2>
   b87c8:	340c      	adds	r4, #12
   b87ca:	dc0e      	bgt.n	b87ea <__adddf3+0x1ba>
   b87cc:	f104 0414 	add.w	r4, r4, #20
   b87d0:	f1c4 0220 	rsb	r2, r4, #32
   b87d4:	fa20 f004 	lsr.w	r0, r0, r4
   b87d8:	fa01 f302 	lsl.w	r3, r1, r2
   b87dc:	ea40 0003 	orr.w	r0, r0, r3
   b87e0:	fa21 f304 	lsr.w	r3, r1, r4
   b87e4:	ea45 0103 	orr.w	r1, r5, r3
   b87e8:	bd30      	pop	{r4, r5, pc}
   b87ea:	f1c4 040c 	rsb	r4, r4, #12
   b87ee:	f1c4 0220 	rsb	r2, r4, #32
   b87f2:	fa20 f002 	lsr.w	r0, r0, r2
   b87f6:	fa01 f304 	lsl.w	r3, r1, r4
   b87fa:	ea40 0003 	orr.w	r0, r0, r3
   b87fe:	4629      	mov	r1, r5
   b8800:	bd30      	pop	{r4, r5, pc}
   b8802:	fa21 f004 	lsr.w	r0, r1, r4
   b8806:	4629      	mov	r1, r5
   b8808:	bd30      	pop	{r4, r5, pc}
   b880a:	f094 0f00 	teq	r4, #0
   b880e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8812:	bf06      	itte	eq
   b8814:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8818:	3401      	addeq	r4, #1
   b881a:	3d01      	subne	r5, #1
   b881c:	e74e      	b.n	b86bc <__adddf3+0x8c>
   b881e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8822:	bf18      	it	ne
   b8824:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8828:	d029      	beq.n	b887e <__adddf3+0x24e>
   b882a:	ea94 0f05 	teq	r4, r5
   b882e:	bf08      	it	eq
   b8830:	ea90 0f02 	teqeq	r0, r2
   b8834:	d005      	beq.n	b8842 <__adddf3+0x212>
   b8836:	ea54 0c00 	orrs.w	ip, r4, r0
   b883a:	bf04      	itt	eq
   b883c:	4619      	moveq	r1, r3
   b883e:	4610      	moveq	r0, r2
   b8840:	bd30      	pop	{r4, r5, pc}
   b8842:	ea91 0f03 	teq	r1, r3
   b8846:	bf1e      	ittt	ne
   b8848:	2100      	movne	r1, #0
   b884a:	2000      	movne	r0, #0
   b884c:	bd30      	popne	{r4, r5, pc}
   b884e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8852:	d105      	bne.n	b8860 <__adddf3+0x230>
   b8854:	0040      	lsls	r0, r0, #1
   b8856:	4149      	adcs	r1, r1
   b8858:	bf28      	it	cs
   b885a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b885e:	bd30      	pop	{r4, r5, pc}
   b8860:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8864:	bf3c      	itt	cc
   b8866:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b886a:	bd30      	popcc	{r4, r5, pc}
   b886c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8870:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8874:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8878:	f04f 0000 	mov.w	r0, #0
   b887c:	bd30      	pop	{r4, r5, pc}
   b887e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8882:	bf1a      	itte	ne
   b8884:	4619      	movne	r1, r3
   b8886:	4610      	movne	r0, r2
   b8888:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b888c:	bf1c      	itt	ne
   b888e:	460b      	movne	r3, r1
   b8890:	4602      	movne	r2, r0
   b8892:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8896:	bf06      	itte	eq
   b8898:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b889c:	ea91 0f03 	teqeq	r1, r3
   b88a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b88a4:	bd30      	pop	{r4, r5, pc}
   b88a6:	bf00      	nop

000b88a8 <__aeabi_ui2d>:
   b88a8:	f090 0f00 	teq	r0, #0
   b88ac:	bf04      	itt	eq
   b88ae:	2100      	moveq	r1, #0
   b88b0:	4770      	bxeq	lr
   b88b2:	b530      	push	{r4, r5, lr}
   b88b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b88b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b88bc:	f04f 0500 	mov.w	r5, #0
   b88c0:	f04f 0100 	mov.w	r1, #0
   b88c4:	e750      	b.n	b8768 <__adddf3+0x138>
   b88c6:	bf00      	nop

000b88c8 <__aeabi_i2d>:
   b88c8:	f090 0f00 	teq	r0, #0
   b88cc:	bf04      	itt	eq
   b88ce:	2100      	moveq	r1, #0
   b88d0:	4770      	bxeq	lr
   b88d2:	b530      	push	{r4, r5, lr}
   b88d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b88d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b88dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b88e0:	bf48      	it	mi
   b88e2:	4240      	negmi	r0, r0
   b88e4:	f04f 0100 	mov.w	r1, #0
   b88e8:	e73e      	b.n	b8768 <__adddf3+0x138>
   b88ea:	bf00      	nop

000b88ec <__aeabi_f2d>:
   b88ec:	0042      	lsls	r2, r0, #1
   b88ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b88f2:	ea4f 0131 	mov.w	r1, r1, rrx
   b88f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b88fa:	bf1f      	itttt	ne
   b88fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8900:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8904:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8908:	4770      	bxne	lr
   b890a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b890e:	bf08      	it	eq
   b8910:	4770      	bxeq	lr
   b8912:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b8916:	bf04      	itt	eq
   b8918:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b891c:	4770      	bxeq	lr
   b891e:	b530      	push	{r4, r5, lr}
   b8920:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8924:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8928:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b892c:	e71c      	b.n	b8768 <__adddf3+0x138>
   b892e:	bf00      	nop

000b8930 <__aeabi_ul2d>:
   b8930:	ea50 0201 	orrs.w	r2, r0, r1
   b8934:	bf08      	it	eq
   b8936:	4770      	bxeq	lr
   b8938:	b530      	push	{r4, r5, lr}
   b893a:	f04f 0500 	mov.w	r5, #0
   b893e:	e00a      	b.n	b8956 <__aeabi_l2d+0x16>

000b8940 <__aeabi_l2d>:
   b8940:	ea50 0201 	orrs.w	r2, r0, r1
   b8944:	bf08      	it	eq
   b8946:	4770      	bxeq	lr
   b8948:	b530      	push	{r4, r5, lr}
   b894a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b894e:	d502      	bpl.n	b8956 <__aeabi_l2d+0x16>
   b8950:	4240      	negs	r0, r0
   b8952:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8956:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b895a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b895e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8962:	f43f aed8 	beq.w	b8716 <__adddf3+0xe6>
   b8966:	f04f 0203 	mov.w	r2, #3
   b896a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b896e:	bf18      	it	ne
   b8970:	3203      	addne	r2, #3
   b8972:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8976:	bf18      	it	ne
   b8978:	3203      	addne	r2, #3
   b897a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b897e:	f1c2 0320 	rsb	r3, r2, #32
   b8982:	fa00 fc03 	lsl.w	ip, r0, r3
   b8986:	fa20 f002 	lsr.w	r0, r0, r2
   b898a:	fa01 fe03 	lsl.w	lr, r1, r3
   b898e:	ea40 000e 	orr.w	r0, r0, lr
   b8992:	fa21 f102 	lsr.w	r1, r1, r2
   b8996:	4414      	add	r4, r2
   b8998:	e6bd      	b.n	b8716 <__adddf3+0xe6>
   b899a:	bf00      	nop

000b899c <__aeabi_dmul>:
   b899c:	b570      	push	{r4, r5, r6, lr}
   b899e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b89a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b89a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b89aa:	bf1d      	ittte	ne
   b89ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b89b0:	ea94 0f0c 	teqne	r4, ip
   b89b4:	ea95 0f0c 	teqne	r5, ip
   b89b8:	f000 f8de 	bleq	b8b78 <__aeabi_dmul+0x1dc>
   b89bc:	442c      	add	r4, r5
   b89be:	ea81 0603 	eor.w	r6, r1, r3
   b89c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b89c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b89ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b89ce:	bf18      	it	ne
   b89d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b89d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b89d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b89dc:	d038      	beq.n	b8a50 <__aeabi_dmul+0xb4>
   b89de:	fba0 ce02 	umull	ip, lr, r0, r2
   b89e2:	f04f 0500 	mov.w	r5, #0
   b89e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b89ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b89ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   b89f2:	f04f 0600 	mov.w	r6, #0
   b89f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b89fa:	f09c 0f00 	teq	ip, #0
   b89fe:	bf18      	it	ne
   b8a00:	f04e 0e01 	orrne.w	lr, lr, #1
   b8a04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8a08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8a0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b8a10:	d204      	bcs.n	b8a1c <__aeabi_dmul+0x80>
   b8a12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b8a16:	416d      	adcs	r5, r5
   b8a18:	eb46 0606 	adc.w	r6, r6, r6
   b8a1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b8a20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b8a24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8a28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8a2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b8a30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8a34:	bf88      	it	hi
   b8a36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8a3a:	d81e      	bhi.n	b8a7a <__aeabi_dmul+0xde>
   b8a3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8a40:	bf08      	it	eq
   b8a42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b8a46:	f150 0000 	adcs.w	r0, r0, #0
   b8a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8a4e:	bd70      	pop	{r4, r5, r6, pc}
   b8a50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8a54:	ea46 0101 	orr.w	r1, r6, r1
   b8a58:	ea40 0002 	orr.w	r0, r0, r2
   b8a5c:	ea81 0103 	eor.w	r1, r1, r3
   b8a60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8a64:	bfc2      	ittt	gt
   b8a66:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8a6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8a6e:	bd70      	popgt	{r4, r5, r6, pc}
   b8a70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8a74:	f04f 0e00 	mov.w	lr, #0
   b8a78:	3c01      	subs	r4, #1
   b8a7a:	f300 80ab 	bgt.w	b8bd4 <__aeabi_dmul+0x238>
   b8a7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8a82:	bfde      	ittt	le
   b8a84:	2000      	movle	r0, #0
   b8a86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8a8a:	bd70      	pople	{r4, r5, r6, pc}
   b8a8c:	f1c4 0400 	rsb	r4, r4, #0
   b8a90:	3c20      	subs	r4, #32
   b8a92:	da35      	bge.n	b8b00 <__aeabi_dmul+0x164>
   b8a94:	340c      	adds	r4, #12
   b8a96:	dc1b      	bgt.n	b8ad0 <__aeabi_dmul+0x134>
   b8a98:	f104 0414 	add.w	r4, r4, #20
   b8a9c:	f1c4 0520 	rsb	r5, r4, #32
   b8aa0:	fa00 f305 	lsl.w	r3, r0, r5
   b8aa4:	fa20 f004 	lsr.w	r0, r0, r4
   b8aa8:	fa01 f205 	lsl.w	r2, r1, r5
   b8aac:	ea40 0002 	orr.w	r0, r0, r2
   b8ab0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8ab4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8ab8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8abc:	fa21 f604 	lsr.w	r6, r1, r4
   b8ac0:	eb42 0106 	adc.w	r1, r2, r6
   b8ac4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8ac8:	bf08      	it	eq
   b8aca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8ace:	bd70      	pop	{r4, r5, r6, pc}
   b8ad0:	f1c4 040c 	rsb	r4, r4, #12
   b8ad4:	f1c4 0520 	rsb	r5, r4, #32
   b8ad8:	fa00 f304 	lsl.w	r3, r0, r4
   b8adc:	fa20 f005 	lsr.w	r0, r0, r5
   b8ae0:	fa01 f204 	lsl.w	r2, r1, r4
   b8ae4:	ea40 0002 	orr.w	r0, r0, r2
   b8ae8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8aec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8af0:	f141 0100 	adc.w	r1, r1, #0
   b8af4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8af8:	bf08      	it	eq
   b8afa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8afe:	bd70      	pop	{r4, r5, r6, pc}
   b8b00:	f1c4 0520 	rsb	r5, r4, #32
   b8b04:	fa00 f205 	lsl.w	r2, r0, r5
   b8b08:	ea4e 0e02 	orr.w	lr, lr, r2
   b8b0c:	fa20 f304 	lsr.w	r3, r0, r4
   b8b10:	fa01 f205 	lsl.w	r2, r1, r5
   b8b14:	ea43 0302 	orr.w	r3, r3, r2
   b8b18:	fa21 f004 	lsr.w	r0, r1, r4
   b8b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8b20:	fa21 f204 	lsr.w	r2, r1, r4
   b8b24:	ea20 0002 	bic.w	r0, r0, r2
   b8b28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8b2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8b30:	bf08      	it	eq
   b8b32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8b36:	bd70      	pop	{r4, r5, r6, pc}
   b8b38:	f094 0f00 	teq	r4, #0
   b8b3c:	d10f      	bne.n	b8b5e <__aeabi_dmul+0x1c2>
   b8b3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b8b42:	0040      	lsls	r0, r0, #1
   b8b44:	eb41 0101 	adc.w	r1, r1, r1
   b8b48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8b4c:	bf08      	it	eq
   b8b4e:	3c01      	subeq	r4, #1
   b8b50:	d0f7      	beq.n	b8b42 <__aeabi_dmul+0x1a6>
   b8b52:	ea41 0106 	orr.w	r1, r1, r6
   b8b56:	f095 0f00 	teq	r5, #0
   b8b5a:	bf18      	it	ne
   b8b5c:	4770      	bxne	lr
   b8b5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b8b62:	0052      	lsls	r2, r2, #1
   b8b64:	eb43 0303 	adc.w	r3, r3, r3
   b8b68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8b6c:	bf08      	it	eq
   b8b6e:	3d01      	subeq	r5, #1
   b8b70:	d0f7      	beq.n	b8b62 <__aeabi_dmul+0x1c6>
   b8b72:	ea43 0306 	orr.w	r3, r3, r6
   b8b76:	4770      	bx	lr
   b8b78:	ea94 0f0c 	teq	r4, ip
   b8b7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8b80:	bf18      	it	ne
   b8b82:	ea95 0f0c 	teqne	r5, ip
   b8b86:	d00c      	beq.n	b8ba2 <__aeabi_dmul+0x206>
   b8b88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8b8c:	bf18      	it	ne
   b8b8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8b92:	d1d1      	bne.n	b8b38 <__aeabi_dmul+0x19c>
   b8b94:	ea81 0103 	eor.w	r1, r1, r3
   b8b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8b9c:	f04f 0000 	mov.w	r0, #0
   b8ba0:	bd70      	pop	{r4, r5, r6, pc}
   b8ba2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8ba6:	bf06      	itte	eq
   b8ba8:	4610      	moveq	r0, r2
   b8baa:	4619      	moveq	r1, r3
   b8bac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8bb0:	d019      	beq.n	b8be6 <__aeabi_dmul+0x24a>
   b8bb2:	ea94 0f0c 	teq	r4, ip
   b8bb6:	d102      	bne.n	b8bbe <__aeabi_dmul+0x222>
   b8bb8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8bbc:	d113      	bne.n	b8be6 <__aeabi_dmul+0x24a>
   b8bbe:	ea95 0f0c 	teq	r5, ip
   b8bc2:	d105      	bne.n	b8bd0 <__aeabi_dmul+0x234>
   b8bc4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8bc8:	bf1c      	itt	ne
   b8bca:	4610      	movne	r0, r2
   b8bcc:	4619      	movne	r1, r3
   b8bce:	d10a      	bne.n	b8be6 <__aeabi_dmul+0x24a>
   b8bd0:	ea81 0103 	eor.w	r1, r1, r3
   b8bd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8bd8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8bdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8be0:	f04f 0000 	mov.w	r0, #0
   b8be4:	bd70      	pop	{r4, r5, r6, pc}
   b8be6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8bea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b8bee:	bd70      	pop	{r4, r5, r6, pc}

000b8bf0 <__aeabi_ddiv>:
   b8bf0:	b570      	push	{r4, r5, r6, lr}
   b8bf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8bf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8bfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8bfe:	bf1d      	ittte	ne
   b8c00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8c04:	ea94 0f0c 	teqne	r4, ip
   b8c08:	ea95 0f0c 	teqne	r5, ip
   b8c0c:	f000 f8a7 	bleq	b8d5e <__aeabi_ddiv+0x16e>
   b8c10:	eba4 0405 	sub.w	r4, r4, r5
   b8c14:	ea81 0e03 	eor.w	lr, r1, r3
   b8c18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8c1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8c20:	f000 8088 	beq.w	b8d34 <__aeabi_ddiv+0x144>
   b8c24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8c28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8c2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8c30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8c34:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8c38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8c3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8c40:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8c44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8c48:	429d      	cmp	r5, r3
   b8c4a:	bf08      	it	eq
   b8c4c:	4296      	cmpeq	r6, r2
   b8c4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8c52:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8c56:	d202      	bcs.n	b8c5e <__aeabi_ddiv+0x6e>
   b8c58:	085b      	lsrs	r3, r3, #1
   b8c5a:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c5e:	1ab6      	subs	r6, r6, r2
   b8c60:	eb65 0503 	sbc.w	r5, r5, r3
   b8c64:	085b      	lsrs	r3, r3, #1
   b8c66:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8c6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8c72:	ebb6 0e02 	subs.w	lr, r6, r2
   b8c76:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c7a:	bf22      	ittt	cs
   b8c7c:	1ab6      	subcs	r6, r6, r2
   b8c7e:	4675      	movcs	r5, lr
   b8c80:	ea40 000c 	orrcs.w	r0, r0, ip
   b8c84:	085b      	lsrs	r3, r3, #1
   b8c86:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c8a:	ebb6 0e02 	subs.w	lr, r6, r2
   b8c8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c92:	bf22      	ittt	cs
   b8c94:	1ab6      	subcs	r6, r6, r2
   b8c96:	4675      	movcs	r5, lr
   b8c98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8c9c:	085b      	lsrs	r3, r3, #1
   b8c9e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8ca2:	ebb6 0e02 	subs.w	lr, r6, r2
   b8ca6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8caa:	bf22      	ittt	cs
   b8cac:	1ab6      	subcs	r6, r6, r2
   b8cae:	4675      	movcs	r5, lr
   b8cb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8cb4:	085b      	lsrs	r3, r3, #1
   b8cb6:	ea4f 0232 	mov.w	r2, r2, rrx
   b8cba:	ebb6 0e02 	subs.w	lr, r6, r2
   b8cbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8cc2:	bf22      	ittt	cs
   b8cc4:	1ab6      	subcs	r6, r6, r2
   b8cc6:	4675      	movcs	r5, lr
   b8cc8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8ccc:	ea55 0e06 	orrs.w	lr, r5, r6
   b8cd0:	d018      	beq.n	b8d04 <__aeabi_ddiv+0x114>
   b8cd2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8cd6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8cda:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8cde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8ce2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8ce6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8cea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8cee:	d1c0      	bne.n	b8c72 <__aeabi_ddiv+0x82>
   b8cf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8cf4:	d10b      	bne.n	b8d0e <__aeabi_ddiv+0x11e>
   b8cf6:	ea41 0100 	orr.w	r1, r1, r0
   b8cfa:	f04f 0000 	mov.w	r0, #0
   b8cfe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8d02:	e7b6      	b.n	b8c72 <__aeabi_ddiv+0x82>
   b8d04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8d08:	bf04      	itt	eq
   b8d0a:	4301      	orreq	r1, r0
   b8d0c:	2000      	moveq	r0, #0
   b8d0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8d12:	bf88      	it	hi
   b8d14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8d18:	f63f aeaf 	bhi.w	b8a7a <__aeabi_dmul+0xde>
   b8d1c:	ebb5 0c03 	subs.w	ip, r5, r3
   b8d20:	bf04      	itt	eq
   b8d22:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8d26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8d2a:	f150 0000 	adcs.w	r0, r0, #0
   b8d2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8d32:	bd70      	pop	{r4, r5, r6, pc}
   b8d34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8d38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8d3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8d40:	bfc2      	ittt	gt
   b8d42:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8d46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8d4a:	bd70      	popgt	{r4, r5, r6, pc}
   b8d4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8d50:	f04f 0e00 	mov.w	lr, #0
   b8d54:	3c01      	subs	r4, #1
   b8d56:	e690      	b.n	b8a7a <__aeabi_dmul+0xde>
   b8d58:	ea45 0e06 	orr.w	lr, r5, r6
   b8d5c:	e68d      	b.n	b8a7a <__aeabi_dmul+0xde>
   b8d5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8d62:	ea94 0f0c 	teq	r4, ip
   b8d66:	bf08      	it	eq
   b8d68:	ea95 0f0c 	teqeq	r5, ip
   b8d6c:	f43f af3b 	beq.w	b8be6 <__aeabi_dmul+0x24a>
   b8d70:	ea94 0f0c 	teq	r4, ip
   b8d74:	d10a      	bne.n	b8d8c <__aeabi_ddiv+0x19c>
   b8d76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8d7a:	f47f af34 	bne.w	b8be6 <__aeabi_dmul+0x24a>
   b8d7e:	ea95 0f0c 	teq	r5, ip
   b8d82:	f47f af25 	bne.w	b8bd0 <__aeabi_dmul+0x234>
   b8d86:	4610      	mov	r0, r2
   b8d88:	4619      	mov	r1, r3
   b8d8a:	e72c      	b.n	b8be6 <__aeabi_dmul+0x24a>
   b8d8c:	ea95 0f0c 	teq	r5, ip
   b8d90:	d106      	bne.n	b8da0 <__aeabi_ddiv+0x1b0>
   b8d92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8d96:	f43f aefd 	beq.w	b8b94 <__aeabi_dmul+0x1f8>
   b8d9a:	4610      	mov	r0, r2
   b8d9c:	4619      	mov	r1, r3
   b8d9e:	e722      	b.n	b8be6 <__aeabi_dmul+0x24a>
   b8da0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8da4:	bf18      	it	ne
   b8da6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8daa:	f47f aec5 	bne.w	b8b38 <__aeabi_dmul+0x19c>
   b8dae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8db2:	f47f af0d 	bne.w	b8bd0 <__aeabi_dmul+0x234>
   b8db6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8dba:	f47f aeeb 	bne.w	b8b94 <__aeabi_dmul+0x1f8>
   b8dbe:	e712      	b.n	b8be6 <__aeabi_dmul+0x24a>

000b8dc0 <__gedf2>:
   b8dc0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8dc4:	e006      	b.n	b8dd4 <__cmpdf2+0x4>
   b8dc6:	bf00      	nop

000b8dc8 <__ledf2>:
   b8dc8:	f04f 0c01 	mov.w	ip, #1
   b8dcc:	e002      	b.n	b8dd4 <__cmpdf2+0x4>
   b8dce:	bf00      	nop

000b8dd0 <__cmpdf2>:
   b8dd0:	f04f 0c01 	mov.w	ip, #1
   b8dd4:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8dd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8ddc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8de0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8de4:	bf18      	it	ne
   b8de6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8dea:	d01b      	beq.n	b8e24 <__cmpdf2+0x54>
   b8dec:	b001      	add	sp, #4
   b8dee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b8df2:	bf0c      	ite	eq
   b8df4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8df8:	ea91 0f03 	teqne	r1, r3
   b8dfc:	bf02      	ittt	eq
   b8dfe:	ea90 0f02 	teqeq	r0, r2
   b8e02:	2000      	moveq	r0, #0
   b8e04:	4770      	bxeq	lr
   b8e06:	f110 0f00 	cmn.w	r0, #0
   b8e0a:	ea91 0f03 	teq	r1, r3
   b8e0e:	bf58      	it	pl
   b8e10:	4299      	cmppl	r1, r3
   b8e12:	bf08      	it	eq
   b8e14:	4290      	cmpeq	r0, r2
   b8e16:	bf2c      	ite	cs
   b8e18:	17d8      	asrcs	r0, r3, #31
   b8e1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b8e1e:	f040 0001 	orr.w	r0, r0, #1
   b8e22:	4770      	bx	lr
   b8e24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8e28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8e2c:	d102      	bne.n	b8e34 <__cmpdf2+0x64>
   b8e2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8e32:	d107      	bne.n	b8e44 <__cmpdf2+0x74>
   b8e34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8e3c:	d1d6      	bne.n	b8dec <__cmpdf2+0x1c>
   b8e3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8e42:	d0d3      	beq.n	b8dec <__cmpdf2+0x1c>
   b8e44:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8e48:	4770      	bx	lr
   b8e4a:	bf00      	nop

000b8e4c <__aeabi_cdrcmple>:
   b8e4c:	4684      	mov	ip, r0
   b8e4e:	4610      	mov	r0, r2
   b8e50:	4662      	mov	r2, ip
   b8e52:	468c      	mov	ip, r1
   b8e54:	4619      	mov	r1, r3
   b8e56:	4663      	mov	r3, ip
   b8e58:	e000      	b.n	b8e5c <__aeabi_cdcmpeq>
   b8e5a:	bf00      	nop

000b8e5c <__aeabi_cdcmpeq>:
   b8e5c:	b501      	push	{r0, lr}
   b8e5e:	f7ff ffb7 	bl	b8dd0 <__cmpdf2>
   b8e62:	2800      	cmp	r0, #0
   b8e64:	bf48      	it	mi
   b8e66:	f110 0f00 	cmnmi.w	r0, #0
   b8e6a:	bd01      	pop	{r0, pc}

000b8e6c <__aeabi_dcmpeq>:
   b8e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e70:	f7ff fff4 	bl	b8e5c <__aeabi_cdcmpeq>
   b8e74:	bf0c      	ite	eq
   b8e76:	2001      	moveq	r0, #1
   b8e78:	2000      	movne	r0, #0
   b8e7a:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e7e:	bf00      	nop

000b8e80 <__aeabi_dcmplt>:
   b8e80:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e84:	f7ff ffea 	bl	b8e5c <__aeabi_cdcmpeq>
   b8e88:	bf34      	ite	cc
   b8e8a:	2001      	movcc	r0, #1
   b8e8c:	2000      	movcs	r0, #0
   b8e8e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e92:	bf00      	nop

000b8e94 <__aeabi_dcmple>:
   b8e94:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e98:	f7ff ffe0 	bl	b8e5c <__aeabi_cdcmpeq>
   b8e9c:	bf94      	ite	ls
   b8e9e:	2001      	movls	r0, #1
   b8ea0:	2000      	movhi	r0, #0
   b8ea2:	f85d fb08 	ldr.w	pc, [sp], #8
   b8ea6:	bf00      	nop

000b8ea8 <__aeabi_dcmpge>:
   b8ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8eac:	f7ff ffce 	bl	b8e4c <__aeabi_cdrcmple>
   b8eb0:	bf94      	ite	ls
   b8eb2:	2001      	movls	r0, #1
   b8eb4:	2000      	movhi	r0, #0
   b8eb6:	f85d fb08 	ldr.w	pc, [sp], #8
   b8eba:	bf00      	nop

000b8ebc <__aeabi_dcmpgt>:
   b8ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8ec0:	f7ff ffc4 	bl	b8e4c <__aeabi_cdrcmple>
   b8ec4:	bf34      	ite	cc
   b8ec6:	2001      	movcc	r0, #1
   b8ec8:	2000      	movcs	r0, #0
   b8eca:	f85d fb08 	ldr.w	pc, [sp], #8
   b8ece:	bf00      	nop

000b8ed0 <__aeabi_dcmpun>:
   b8ed0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8ed4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8ed8:	d102      	bne.n	b8ee0 <__aeabi_dcmpun+0x10>
   b8eda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8ede:	d10a      	bne.n	b8ef6 <__aeabi_dcmpun+0x26>
   b8ee0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8ee8:	d102      	bne.n	b8ef0 <__aeabi_dcmpun+0x20>
   b8eea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8eee:	d102      	bne.n	b8ef6 <__aeabi_dcmpun+0x26>
   b8ef0:	f04f 0000 	mov.w	r0, #0
   b8ef4:	4770      	bx	lr
   b8ef6:	f04f 0001 	mov.w	r0, #1
   b8efa:	4770      	bx	lr

000b8efc <__aeabi_d2f>:
   b8efc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8f00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b8f04:	bf24      	itt	cs
   b8f06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b8f0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b8f0e:	d90d      	bls.n	b8f2c <__aeabi_d2f+0x30>
   b8f10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b8f14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b8f18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b8f1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b8f20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b8f24:	bf08      	it	eq
   b8f26:	f020 0001 	biceq.w	r0, r0, #1
   b8f2a:	4770      	bx	lr
   b8f2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b8f30:	d121      	bne.n	b8f76 <__aeabi_d2f+0x7a>
   b8f32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b8f36:	bfbc      	itt	lt
   b8f38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8f3c:	4770      	bxlt	lr
   b8f3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8f42:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b8f46:	f1c2 0218 	rsb	r2, r2, #24
   b8f4a:	f1c2 0c20 	rsb	ip, r2, #32
   b8f4e:	fa10 f30c 	lsls.w	r3, r0, ip
   b8f52:	fa20 f002 	lsr.w	r0, r0, r2
   b8f56:	bf18      	it	ne
   b8f58:	f040 0001 	orrne.w	r0, r0, #1
   b8f5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8f60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b8f64:	fa03 fc0c 	lsl.w	ip, r3, ip
   b8f68:	ea40 000c 	orr.w	r0, r0, ip
   b8f6c:	fa23 f302 	lsr.w	r3, r3, r2
   b8f70:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b8f74:	e7cc      	b.n	b8f10 <__aeabi_d2f+0x14>
   b8f76:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b8f7a:	d107      	bne.n	b8f8c <__aeabi_d2f+0x90>
   b8f7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b8f80:	bf1e      	ittt	ne
   b8f82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b8f86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b8f8a:	4770      	bxne	lr
   b8f8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8f90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8f94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8f98:	4770      	bx	lr
   b8f9a:	bf00      	nop

000b8f9c <atexit>:
   b8f9c:	2300      	movs	r3, #0
   b8f9e:	4601      	mov	r1, r0
   b8fa0:	461a      	mov	r2, r3
   b8fa2:	4618      	mov	r0, r3
   b8fa4:	f000 b856 	b.w	b9054 <__register_exitproc>

000b8fa8 <memcpy>:
   b8fa8:	440a      	add	r2, r1
   b8faa:	4291      	cmp	r1, r2
   b8fac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8fb0:	d100      	bne.n	b8fb4 <memcpy+0xc>
   b8fb2:	4770      	bx	lr
   b8fb4:	b510      	push	{r4, lr}
   b8fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8fba:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8fbe:	4291      	cmp	r1, r2
   b8fc0:	d1f9      	bne.n	b8fb6 <memcpy+0xe>
   b8fc2:	bd10      	pop	{r4, pc}

000b8fc4 <memset>:
   b8fc4:	4402      	add	r2, r0
   b8fc6:	4603      	mov	r3, r0
   b8fc8:	4293      	cmp	r3, r2
   b8fca:	d100      	bne.n	b8fce <memset+0xa>
   b8fcc:	4770      	bx	lr
   b8fce:	f803 1b01 	strb.w	r1, [r3], #1
   b8fd2:	e7f9      	b.n	b8fc8 <memset+0x4>

000b8fd4 <srand>:
   b8fd4:	b538      	push	{r3, r4, r5, lr}
   b8fd6:	4b10      	ldr	r3, [pc, #64]	; (b9018 <srand+0x44>)
   b8fd8:	681d      	ldr	r5, [r3, #0]
   b8fda:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8fdc:	4604      	mov	r4, r0
   b8fde:	b9b3      	cbnz	r3, b900e <srand+0x3a>
   b8fe0:	2018      	movs	r0, #24
   b8fe2:	f7fc ffe9 	bl	b5fb8 <malloc>
   b8fe6:	4602      	mov	r2, r0
   b8fe8:	63a8      	str	r0, [r5, #56]	; 0x38
   b8fea:	b920      	cbnz	r0, b8ff6 <srand+0x22>
   b8fec:	4b0b      	ldr	r3, [pc, #44]	; (b901c <srand+0x48>)
   b8fee:	480c      	ldr	r0, [pc, #48]	; (b9020 <srand+0x4c>)
   b8ff0:	2142      	movs	r1, #66	; 0x42
   b8ff2:	f7fd f809 	bl	b6008 <__assert_func>
   b8ff6:	490b      	ldr	r1, [pc, #44]	; (b9024 <srand+0x50>)
   b8ff8:	4b0b      	ldr	r3, [pc, #44]	; (b9028 <srand+0x54>)
   b8ffa:	e9c0 1300 	strd	r1, r3, [r0]
   b8ffe:	4b0b      	ldr	r3, [pc, #44]	; (b902c <srand+0x58>)
   b9000:	6083      	str	r3, [r0, #8]
   b9002:	230b      	movs	r3, #11
   b9004:	8183      	strh	r3, [r0, #12]
   b9006:	2100      	movs	r1, #0
   b9008:	2001      	movs	r0, #1
   b900a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b900e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9010:	2200      	movs	r2, #0
   b9012:	611c      	str	r4, [r3, #16]
   b9014:	615a      	str	r2, [r3, #20]
   b9016:	bd38      	pop	{r3, r4, r5, pc}
   b9018:	2003e580 	.word	0x2003e580
   b901c:	000beb30 	.word	0x000beb30
   b9020:	000beb47 	.word	0x000beb47
   b9024:	abcd330e 	.word	0xabcd330e
   b9028:	e66d1234 	.word	0xe66d1234
   b902c:	0005deec 	.word	0x0005deec

000b9030 <strcmp>:
   b9030:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9034:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9038:	2a01      	cmp	r2, #1
   b903a:	bf28      	it	cs
   b903c:	429a      	cmpcs	r2, r3
   b903e:	d0f7      	beq.n	b9030 <strcmp>
   b9040:	1ad0      	subs	r0, r2, r3
   b9042:	4770      	bx	lr

000b9044 <strlen>:
   b9044:	4603      	mov	r3, r0
   b9046:	f813 2b01 	ldrb.w	r2, [r3], #1
   b904a:	2a00      	cmp	r2, #0
   b904c:	d1fb      	bne.n	b9046 <strlen+0x2>
   b904e:	1a18      	subs	r0, r3, r0
   b9050:	3801      	subs	r0, #1
   b9052:	4770      	bx	lr

000b9054 <__register_exitproc>:
   b9054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9058:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9114 <__register_exitproc+0xc0>
   b905c:	4606      	mov	r6, r0
   b905e:	f8d8 0000 	ldr.w	r0, [r8]
   b9062:	461f      	mov	r7, r3
   b9064:	460d      	mov	r5, r1
   b9066:	4691      	mov	r9, r2
   b9068:	f000 f856 	bl	b9118 <__retarget_lock_acquire_recursive>
   b906c:	4b25      	ldr	r3, [pc, #148]	; (b9104 <__register_exitproc+0xb0>)
   b906e:	681c      	ldr	r4, [r3, #0]
   b9070:	b934      	cbnz	r4, b9080 <__register_exitproc+0x2c>
   b9072:	4c25      	ldr	r4, [pc, #148]	; (b9108 <__register_exitproc+0xb4>)
   b9074:	601c      	str	r4, [r3, #0]
   b9076:	4b25      	ldr	r3, [pc, #148]	; (b910c <__register_exitproc+0xb8>)
   b9078:	b113      	cbz	r3, b9080 <__register_exitproc+0x2c>
   b907a:	681b      	ldr	r3, [r3, #0]
   b907c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9080:	6863      	ldr	r3, [r4, #4]
   b9082:	2b1f      	cmp	r3, #31
   b9084:	dd07      	ble.n	b9096 <__register_exitproc+0x42>
   b9086:	f8d8 0000 	ldr.w	r0, [r8]
   b908a:	f000 f847 	bl	b911c <__retarget_lock_release_recursive>
   b908e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9096:	b34e      	cbz	r6, b90ec <__register_exitproc+0x98>
   b9098:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b909c:	b988      	cbnz	r0, b90c2 <__register_exitproc+0x6e>
   b909e:	4b1c      	ldr	r3, [pc, #112]	; (b9110 <__register_exitproc+0xbc>)
   b90a0:	b923      	cbnz	r3, b90ac <__register_exitproc+0x58>
   b90a2:	f8d8 0000 	ldr.w	r0, [r8]
   b90a6:	f000 f838 	bl	b911a <__retarget_lock_release>
   b90aa:	e7f0      	b.n	b908e <__register_exitproc+0x3a>
   b90ac:	f44f 7084 	mov.w	r0, #264	; 0x108
   b90b0:	f7fc ff82 	bl	b5fb8 <malloc>
   b90b4:	2800      	cmp	r0, #0
   b90b6:	d0f4      	beq.n	b90a2 <__register_exitproc+0x4e>
   b90b8:	2300      	movs	r3, #0
   b90ba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b90be:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b90c2:	6863      	ldr	r3, [r4, #4]
   b90c4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b90c8:	2201      	movs	r2, #1
   b90ca:	409a      	lsls	r2, r3
   b90cc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b90d0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b90d4:	4313      	orrs	r3, r2
   b90d6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b90da:	2e02      	cmp	r6, #2
   b90dc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b90e0:	bf02      	ittt	eq
   b90e2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b90e6:	4313      	orreq	r3, r2
   b90e8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b90ec:	6863      	ldr	r3, [r4, #4]
   b90ee:	f8d8 0000 	ldr.w	r0, [r8]
   b90f2:	1c5a      	adds	r2, r3, #1
   b90f4:	3302      	adds	r3, #2
   b90f6:	6062      	str	r2, [r4, #4]
   b90f8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b90fc:	f000 f80e 	bl	b911c <__retarget_lock_release_recursive>
   b9100:	2000      	movs	r0, #0
   b9102:	e7c6      	b.n	b9092 <__register_exitproc+0x3e>
   b9104:	2003e7e8 	.word	0x2003e7e8
   b9108:	2003e75c 	.word	0x2003e75c
   b910c:	00000000 	.word	0x00000000
   b9110:	000b5fb9 	.word	0x000b5fb9
   b9114:	2003e5e4 	.word	0x2003e5e4

000b9118 <__retarget_lock_acquire_recursive>:
   b9118:	4770      	bx	lr

000b911a <__retarget_lock_release>:
   b911a:	4770      	bx	lr

000b911c <__retarget_lock_release_recursive>:
   b911c:	4770      	bx	lr

000b911e <link_code_end>:
	...

000b9120 <dynalib_user>:
   b9120:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9130:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9140:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   b9150:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   b9160:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   b9170:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   b9180:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   b9190:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   b91a0:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   b91b0:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   b91c0:	6174 6574 4820 5454 2f50 2e31 0031 656b     tate HTTP/1.1.ke
   b91d0:	7065 612d 696c 6576 4800 736f 3a74 0020     ep-alive.Host: .
   b91e0:	6f43 746e 6e65 2d74 654c 676e 6874 203a     Content-Length: 
   b91f0:	4300 6e6f 6574 746e 542d 7079 3a65 7420     .Content-Type: t
   b9200:	7865 2f74 6c70 6961 3b6e 6863 7261 6573     ext/plain;charse
   b9210:	3d74 5455 2d46 0038 7246 6d6f 4820 6575     t=UTF-8.From Hue
   b9220:	5300 6163 696c 676e 4620 6361 6f74 2072     .Scaling Factor 
   b9230:	7369 203a 3025 382e 0a66 4900 546f 654e     is: %0.8f..IoTNe
   b9240:	7774 726f 006b 002e 0a0a 4100 6363 6c65     twork......Accel
   b9250:	7265 7461 6f69 206e 6144 6174 2820 6e69     eration Data (in
   b9260:	4720 7327 3a29 7820 253d 2e30 6633 202c      G's): x=%0.3f, 
   b9270:	3d79 3025 332e 2c66 7a20 253d 2e30 6633     y=%0.3f, z=%0.3f
   b9280:	000a 3d58 2520 2e30 6633 200a 3d59 2520     ..X= %0.3f. Y= %
   b9290:	2e30 6633 200a 3d5a 2520 2e30 6633 000a     0.3f. Z= %0.3f..

000b92a0 <_ZL13maybeNextTime>:
	...
   b9368:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   b9378:	3800 0000 0000 0000 0000 0000 0000 0000     .8..............
   b9388:	5800 0000 0000 0000 0000 0000 0000 0000     .X..............
   b9398:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   b93a8:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   b93b8:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   b93c8:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   b93d8:	1800 0000 0000 0000 0000 1f00 0378 3ce0     ............x..<
   b93e8:	1f3c 3e80 0000 0000 0000 3b00 02dc 1cf0     <..>.......;....
   b93f8:	1810 63c0 0000 0000 0000 1900 018c 0eb8     ...c............
   b9408:	1830 ff60 0000 0000 0000 1900 03ce 061c     0.`.............
   b9418:	1820 c060 0000 0000 0000 1800 03c7 070e      .`.............
   b9428:	1860 c060 0000 0000 0000 1800 03c3 038f     `.`.............
   b9438:	7cc0 61c0 0080 0000 0000 3c00 c1f7 81f1     .|.a.......<....
   b9448:	3f80 3ec0 0000 0000 0000 0000 0000 0100     .?.>............
   b9458:	0880 0000 0000 0000 0000 0000 0000 fb00     ................
	...
   b9474:	0000 1f01 0010 0000 0000 0000 0000 0000     ................
   b9484:	0000 0f01 00e0 0000 0000 0000 0000 0000     ................
   b9494:	0000 b000 0000 0000 0000 0000 0000 0000     ................
	...
   b9544:	0000 0008 4000 0060 0000 0000 0000 0000     .....@`.........
   b9554:	0000 0008 c000 0060 0000 0000 0000 0000     ......`.........
   b9564:	0000 0018 c000 0010 0000 0000 3e00 7c00     .............>.|
   b9574:	1c07 007c e003 1f70 0078 00f8 7300 c300     ..|...p.x....s..
   b9584:	9807 0018 c000 3b30 01dc 0086 3300 ff01     ......0;.....3..
   b9594:	f001 0018 c000 1930 038c 00fe 3100 8081     ......0......1..
   b95a4:	e000 0018 c000 1930 03ce 0000 3100 8181     ......0......1..
   b95b4:	e000 0018 c000 1830 03c7 0002 3100 c3c0     ......0......1..
   b95c4:	fc01 001b d000 1830 01c3 0086 7900 7ee0     ......0......y.~
   b95d4:	3c07 001d d000 3c78 c0f7 00fc 0000 0000     .<....x<........
	...

000b96a0 <_ZL13youNeededThat>:
	...
   b9734:	0300 0fcf 6087 0000 0000 0000 0000 0000     .....`..........
   b9744:	0100 1ec6 e08e 0000 0000 0000 0000 0000     ................
   b9754:	0000 39cc 6086 0000 0000 0000 0000 0000     ...9.`..........
   b9764:	0000 33ec 6086 0000 0000 0000 0000 0000     ...3.`..........
   b9774:	0000 3f78 7807 0000 0000 0000 0000 0000     ..x?.x..........
   b9784:	0000 1e38 f003 0000 0000 0000 0000 0000     ..8.............
   b9794:	0000 0030 0000 0000 0000 0000 0000 0000     ..0.............
   b97a4:	0f00 00e4 0000 0000 0000 0000 0000 0000     ................
   b97b4:	0800 00fc 0000 0000 0000 0000 0000 0000     ................
   b97c4:	0f00 0080 0000 0000 0000 0000 0000 0000     ................
	...
   b9818:	0018 7000 0000 0000 0000 0000 0000 0000     ...p............
   b9828:	0078 f000 0000 0000 0000 0000 0000 0000     x...............
   b9838:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   b9848:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   b9858:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   b9868:	0018 3000 0000 0000 0000 0300 7ec0 810f     ...0.........~..
   b9878:	1ff8 f003 0000 0000 0000 0700 e7e0 c31c     ................
   b9888:	3998 7086 0000 0000 0000 0300 ff60 c31f     .9.p........`...
   b9898:	3f18 308c 0000 0000 0000 0300 c070 0318     .?.0........p...
   b98a8:	3018 300c 0000 0000 0000 0300 e330 631c     .0.0........0..c
   b98b8:	383e 78ce 0000 0000 0000 0700 7e3c c10f     >8.x........<~..
   b98c8:	1ff8 f087 0000 0000 0000 0000 0000 0000     ................
	...
   b9954:	0000 0004 0000 0000 0000 0000 0000 0000     ................
   b9964:	0000 000c 0000 0000 0000 0000 0000 0000     ................
   b9974:	0000 001c 0000 0000 0000 0000 0000 0000     ................
   b9984:	0000 000c 0000 0000 0000 0000 0000 0000     ................
   b9994:	0400 000c 1800 0000 0000 0000 0000 0000     ................
   b99a4:	0c00 000c 1800 0000 0000 0000 0000 0000     ................
   b99b4:	1e00 830f 78c0 0000 0000 0000 0000 0000     .....x..........
   b99c4:	0c00 830f 18e0 0000 0000 0000 0000 0000     ................
   b99d4:	0c00 c10d 1830 0000 0000 0000 0000 0000     ....0...........
   b99e4:	0c00 c30c 1818 0000 0000 0000 0000 0000     ................
   b99f4:	0f00 e30c 1cdc 0000 0000 0000 0000 0000     ................
   b9a04:	0f00 f11e 1cf6 0000 0000 0000 0000 0000     ................
	...

000b9aa0 <_ZL14niceKnowingYou>:
	...
   b9be4:	0000 8001 0000 0000 0000 0000 381c 0000     .............8..
   b9bf4:	0000 8003 0000 0000 0000 0000 100e 0000     ................
   b9c04:	0000 8001 0000 0000 0000 0000 100e 0000     ................
   b9c14:	0000 8001 0000 0000 0000 0000 100b 0020     .............. .
   b9c24:	0000 8001 0000 0000 0002 0000 900b 0060     ..............`.
   b9c34:	0000 8001 0000 0000 0003 1000 9009 3c30     ..............0<
   b9c44:	8007 f001 0378 fdc3 83c1 78c0 d008 6670     ....x......x..pf
   b9c54:	c018 c001 076c 9821 8783 e460 7008 c230     ....l.!...`..p0.
   b9c64:	c01f e001 0c66 d920 8301 c460 7008 c030     ....f. ...`..p0.
   b9c74:	0018 a001 0c66 dd60 8301 8c30 3008 c630     ....f.`...0..00.
   b9c84:	401c b001 0967 76c0 8301 dc30 101c 7c38     .@..g..v..0...8|
   b9c94:	800f b803 8777 2680 8703 7838 0000 0000     ....w..&..8x....
	...
   b9cac:	0000 3880 0000 0000 0000 0000 0000 0000     ...8............
   b9cbc:	0100 1000 0000 0000 0000 0000 0000 0000     ................
   b9ccc:	0000 e080 0000 0000 0000 0000 0000 0000     ................
   b9cdc:	0000 c07f 0000 0000 0000 0000 0000 0000     ................
   b9cec:	0000 0008 0000 0000 0000 0000 0000 0000     ................
	...
   b9d34:	e301 0080 0000 0000 0000 0000 0000 0000     ................
   b9d44:	c300 0000 0000 0000 0000 0000 0000 0000     ................
   b9d54:	6600 0000 0000 0000 0000 0000 0000 0000     .f..............
   b9d64:	7400 0000 0000 0000 0000 0000 0000 0000     .t..............
   b9d74:	3800 0000 0000 0000 0000 0000 0000 0000     .8..............
   b9d84:	1800 020f 0030 0000 0000 0000 0000 0000     ....0...........
   b9d94:	1800 861c 0070 0000 0000 0000 0000 0000     ....p...........
   b9da4:	1800 8630 0030 0000 0000 0000 0000 0000     ..0.0...........
   b9db4:	1800 8631 0030 0000 0000 0000 0000 0000     ..1.0...........
   b9dc4:	1800 0627 6038 80c1 0000 0000 0000 0000     ..'.8`..........
   b9dd4:	1e00 031e 60f0 80c1 0000 0000 0000 0000     .....`..........
	...

000b9ea0 <_ZL3rip>:
	...
   b9fc4:	0000 0700 00fc 0000 0000 0000 0000 0f00     ................
   b9fd4:	00f8 0300 00fc c0ff 0000 0000 0000 0f00     ................
   b9fe4:	80ff 0000 00f0 fcff 0000 0000 0000 0100     ................
   b9ff4:	e0ff 0000 00f0 3f1f 0000 0000 0000 0100     .......?........
   ba004:	f8e0 0000 00f0 071c 0080 0000 0000 0100     ................
   ba014:	3ce0 0000 00f0 031c 00c0 0000 0000 0100     .<..............
   ba024:	1ce0 0000 00f0 011c 00e0 0000 0000 0100     ................
   ba034:	1ee0 0000 00f0 011c 00e0 0000 0000 0100     ................
   ba044:	1ee0 0000 00f0 001c 00f0 0000 0000 0100     ................
   ba054:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   ba064:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   ba074:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   ba084:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   ba094:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   ba0a4:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   ba0b4:	1ff0 0000 00f0 011e 00f0 0000 0000 0100     ................
   ba0c4:	1ef8 0000 00f0 011f 00e0 0000 0000 0100     ................
   ba0d4:	3efc 0000 00f0 c31f 00e0 0000 0000 0100     .>..............
   ba0e4:	fcef 0000 00f0 e71c 00c0 0000 0000 0100     ................
   ba0f4:	f8e3 0000 00f0 7f1c 00c0 0000 0000 0100     ................
   ba104:	f0e1 0000 00f0 1f1c 0000 0000 0000 0100     ................
   ba114:	f0e1 0000 00f0 001c 0000 0000 0000 0100     ................
   ba124:	f0e0 0000 00f0 001c 0000 0000 0000 0100     ................
   ba134:	78e0 0000 00f0 001c 0000 0000 0000 0100     .x..............
   ba144:	3ce0 0000 00f0 001c 0000 0000 0000 0100     .<..............
   ba154:	1fe0 00c0 00f0 001e 0000 0000 0000 0700     ................
   ba164:	1ff8 03e0 00f8 807f 0000 0000 0000 0700     ................
   ba174:	07fc 07c0 00fc 807f 0000 0000 0000 0000     ................
   ba184:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

000ba2a0 <_ZL4lame>:
	...
   ba444:	c003 8001 3838 807f 0000 0000 0000 0000     ....88..........
   ba454:	8001 8001 701c 8030 0000 0000 0000 0000     .....p0.........
   ba464:	8001 c001 701e 0032 0000 0000 0000 0000     .....p2.........
   ba474:	8001 c003 b036 003e 0000 0000 0000 0000     ....6.>.........
   ba484:	8001 c002 b033 0032 0000 0000 0000 0000     ....3.2.........
   ba494:	8001 7c06 3033 0030 0000 0000 0000 0000     ...|300.........
   ba4a4:	8001 e004 1821 0030 0000 0000 0000 0000     ....!.0.........
   ba4b4:	8001 f00d 1820 0030 0000 0000 0000 0000     .... .0.........
   ba4c4:	8001 300f 1820 0030 0000 0000 0000 0000     ...0 .0.........
   ba4d4:	8c01 3818 1820 8030 0000 0000 0000 0000     ...8 .0.........
   ba4e4:	f803 3c38 3c70 807f 0000 0000 0000 0000     ..8<p<..........
	...

000ba6a0 <_ZL4pray>:
	...
   ba774:	0000 0100 00f8 0000 0000 0000 0000 0000     ................
   ba784:	0000 0f00 00f8 0000 0000 0000 0000 0000     ................
   ba794:	0000 3e00 0078 0000 0000 0000 0000 0000     ...>x...........
   ba7a4:	0000 f000 0030 0000 0000 0000 0000 0000     ....0...........
   ba7b4:	0000 8003 0000 0000 0000 0000 0000 0000     ................
   ba7c4:	0000 0006 0000 0000 0000 0000 0000 0060     ..............`.
   ba7d4:	0000 009c 0000 0000 0000 0000 0100 f0e3     ................
   ba7e4:	0300 00b8 007f 7f00 0ff0 00f0 0300 fcef     ................
   ba7f4:	0f00 00f0 c0ff 3f00 07e0 00f0 0f00 3efc     .......?.......>
   ba804:	1f00 00e0 e0e3 0f00 01c0 0080 1f00 0ff8     ................
   ba814:	0300 00e0 f007 0700 03c0 0000 0000 0ff0     ................
   ba824:	0380 00c0 f80e 0300 07e0 0000 0000 07e0     ................
   ba834:	0380 00c0 7c38 0100 06f0 0000 0000 07e0     ....8|..........
   ba844:	0380 00c0 3e38 0100 0ef0 0000 0000 07e0     ....8>..........
   ba854:	0380 00c0 1f70 0000 0cf8 0000 0000 07e0     ....p...........
   ba864:	0380 00c0 0f70 0080 1c7c 0000 0000 07e0     ....p...|.......
   ba874:	0380 00c0 07f0 00c0 183e 0000 0000 0fe0     ........>.......
   ba884:	0380 00c0 03f8 00c0 383e 0000 0000 0ff0     ........>8......
   ba894:	0300 00c0 037c 00e0 701f 0000 0000 1ff0     ....|....p......
   ba8a4:	0300 00c0 037e 00f0 e00f 0000 0000 3efc     ....~..........>
   ba8b4:	0300 00c0 ff3f 00f8 e007 0000 0000 fcff     ....?...........
   ba8c4:	0f00 00e0 fc3f 001c c007 0000 0000 f0ff     ....?...........
   ba8d4:	1f00 00f0 f00f 0006 c003 0000 0000 00f0     ................
	...
   ba8ec:	8007 0000 0000 00f0 0000 0000 0000 0000     ................
   ba8fc:	8007 0000 0000 00f0 0000 0000 0000 fe00     ................
   ba90c:	000f 0000 0000 00f0 0000 0000 0000 ff03     ................
   ba91c:	02ce 0000 0000 00f0 0000 0000 0000 0f07     ................
   ba92c:	07dc 0000 0000 00f0 0000 0000 0000 030c     ................
   ba93c:	03b8 0000 0000 00f0 0000 0000 0000 0008     ................
   ba94c:	8277 0000 0000 00f0 0000 0000 0000 0008     w...............
   ba95c:	fcef 0000 0000 00f0 0000 0000 0000 030c     ................
   ba96c:	e0c3 0000 0000 00f0 0000 0000 0000 0f06     ................
   ba97c:	0000 0000 0000 00f0 0000 0000 0000 f803     ................
   ba98c:	0000 0000 0000 00f0 0000 0000 0000 0000     ................
   ba99c:	0000 0000 0000 00f0 0000 0000 0000 0000     ................
   ba9ac:	0000 0000 0100 00f8 0000 0000 0000 0000     ................
   ba9bc:	0000 0000 0100 00f8 0000 0000 0000 0000     ................
   ba9cc:	0000 0000 0300 00e0 0000 0000 0000 0000     ................
   ba9dc:	0000 0000 0f00 0080 0000 0000 0000 0000     ................
   ba9ec:	0000 0000 1e00 0000 0000 0000 0000 0000     ................
   ba9fc:	0000 0000 1800 0000 0000 0000 0000 0000     ................
	...

000baaa0 <_ZL4uhOh>:
	...
   bac30:	0000 3c00 041e 0000 0000 0010 0000 0000     ...<............
   bac40:	0000 3800 1c0c 0000 0000 0070 0000 0000     ...8......p.....
   bac50:	0000 1800 0c08 0000 0000 0030 0000 0000     ..........0.....
   bac60:	0000 1800 0c18 0000 0000 0030 0000 0000     ..........0.....
   bac70:	0000 1800 0c18 0000 0000 0030 0000 0000     ..........0.....
   bac80:	0000 1800 0c10 0000 0000 0030 0000 0000     ..........0.....
   bac90:	0000 1800 0c10 0000 0000 0030 0000 0000     ..........0.....
   baca0:	0000 1800 0f30 0080 f001 003e 0000 0000     ....0.....>.....
   bacb0:	0000 0c00 0e30 00c0 8807 003b 0000 0000     ....0.....;.....
   bacc0:	0000 0c00 0c20 00c0 180e 0033 0000 0000     .... .....3.....
   bacd0:	0000 0c00 0c20 0060 180c 8031 0000 0000     .... .`...1.....
   bace0:	0000 0e00 0c60 0060 3008 8031 0000 0000     ....`.`..01.....
   bacf0:	0000 0700 0cc0 0070 f009 c031 0000 0000     ......p...1.....
   bad00:	0000 0300 1e80 0078 c007 e079 0000 0000     ......x...y.....
	...

000baea0 <_ZL4welp>:
	...
   baff0:	0000 0080 0000 0000 0000 0c00 3c00 0000     .............<..
   bb000:	0100 0080 0000 0000 0000 0e00 ff00 0080     ................
   bb010:	0100 00c0 0000 0000 0000 1e00 8701 00e0     ................
   bb020:	0300 00c0 0000 0000 0000 0e00 c001 00e0     ................
   bb030:	0300 00c0 0000 0000 0000 0e00 c001 0070     ..............p.
   bb040:	0200 00e0 0000 0000 0000 0e00 8000 0070     ..............p.
   bb050:	0600 00e0 0020 0100 00c0 0c00 0000 00e0     .... ...........
   bb060:	0400 0070 0030 0100 0080 0c00 0300 00c0     ..p.0...........
   bb070:	0c00 807f 07f0 00c0 1f60 0c00 1f00 0000     ........`.......
   bb080:	0800 0178 06fc 01e0 7fe0 0c80 7000 0000     ..x..........p..
   bb090:	1800 0378 01c4 00f0 19e0 0cc0 7000 0000     ..x..........p..
   bb0a0:	1800 03f8 0386 0038 1860 0cc0 7e00 0000     ......8.`....~..
   bb0b0:	1300 03dc 060e 001c 1860 04e0 3e00 0000     ........`....>..
   bb0c0:	3f00 031c 070e 000e 1860 0460 1e00 0000     .?......`.`.....
   bb0d0:	2000 010e 073c 0007 1860 0070 0800 0000     . ..<...`.p.....
   bb0e0:	6000 010f 03f8 80ff 18e0 0e70 1c00 0000     .`........p.....
   bb0f0:	f001 801f 017c c1f0 7cf0 0efc 1c00 0000     ....|....|......
   bb100:	0000 0000 0078 0000 0000 0000 0000 0000     ....x...........
   bb110:	0000 0030 0018 0000 0000 0000 0000 0000     ..0.............
   bb120:	0000 0040 0030 0000 0000 0000 0000 0000     ..@.0...........
   bb130:	0000 0330 00e0 0000 0000 0000 0000 0000     ..0.............
   bb140:	0000 ff1f 0080 0000 0000 0000 0000 0000     ................
   bb150:	0000 fc07 0000 0000 0000 0000 0000 0000     ................
	...

000bb2a0 <_ZL5again>:
	...
   bb3f0:	0000 0080 0000 0000 0000 0c00 3c00 0000     .............<..
   bb400:	0100 0080 0000 0000 0000 0e00 ff00 0080     ................
   bb410:	0100 00c0 0000 0000 0000 1e00 8701 00e0     ................
   bb420:	0300 00c0 0000 0000 0000 0e00 c001 00e0     ................
   bb430:	0300 00c0 0000 0000 0000 0e00 c001 0070     ..............p.
   bb440:	0200 00e0 0000 0000 0000 0e00 8000 0070     ..............p.
   bb450:	0600 00e0 0020 0100 00c0 0c00 0000 00e0     .... ...........
   bb460:	0400 0070 0030 0100 0080 0c00 0300 00c0     ..p.0...........
   bb470:	0c00 807f 07f0 00c0 1f60 0c00 1f00 0000     ........`.......
   bb480:	0800 0178 06fc 01e0 7fe0 0c80 7000 0000     ..x..........p..
   bb490:	1800 0378 01c4 00f0 19e0 0cc0 7000 0000     ..x..........p..
   bb4a0:	1800 03f8 0386 0038 1860 0cc0 7e00 0000     ......8.`....~..
   bb4b0:	1300 03dc 060e 001c 1860 04e0 3e00 0000     ........`....>..
   bb4c0:	3f00 031c 070e 000e 1860 0460 1e00 0000     .?......`.`.....
   bb4d0:	2000 010e 073c 0007 1860 0070 0800 0000     . ..<...`.p.....
   bb4e0:	6000 010f 03f8 80ff 18e0 0e70 1c00 0000     .`........p.....
   bb4f0:	f001 801f 017c c1f0 7cf0 0efc 1c00 0000     ....|....|......
   bb500:	0000 0000 0078 0000 0000 0000 0000 0000     ....x...........
   bb510:	0000 0030 0018 0000 0000 0000 0000 0000     ..0.............
   bb520:	0000 0040 0030 0000 0000 0000 0000 0000     ..@.0...........
   bb530:	0000 0330 00e0 0000 0000 0000 0000 0000     ..0.............
   bb540:	0000 ff1f 0080 0000 0000 0000 0000 0000     ................
   bb550:	0000 fc07 0000 0000 0000 0000 0000 0000     ................
	...

000bb6a0 <_ZL5fight>:
	...
   bb820:	0000 80ff 00fc 20ff 0000 3f00 01fc 0080     ....... ...?....
   bb830:	0100 c0ff 0178 f0ff 871f 7ff0 03fe 00c0     ....x...........
   bb840:	0000 c0f1 0370 f080 0107 61c0 03c7 00c0     ....p......a....
   bb850:	0000 c072 0670 7000 0107 41c0 03c3 00c0     ..r.p..p...A....
   bb860:	0000 0072 0e70 3000 ff07 01c0 03c0 00c0     ..r.p..0........
   bb870:	0000 007f 0c70 3000 ff07 01c0 03c0 0080     ....p..0........
   bb880:	0000 007f 0c70 0000 0107 01c0 01c0 0080     ....p...........
   bb890:	0000 0073 1c70 0000 0107 01c0 01c0 0080     ..s.p...........
   bb8a0:	0000 0072 1c70 fc01 0107 01c0 01c0 0080     ..r.p...........
   bb8b0:	0000 0070 1e70 7800 0107 01c0 01c0 0080     ..p.p..x........
   bb8c0:	0000 0070 0e70 3800 0107 01c0 01c0 0080     ..p.p..8........
   bb8d0:	0000 0070 0f70 3800 0107 01c0 01c0 0080     ..p.p..8........
   bb8e0:	0000 0070 0770 3800 0107 01c0 01c0 0080     ..p.p..8........
   bb8f0:	0000 0070 0770 7880 0107 01c0 01c0 0080     ..p.p..x........
   bb900:	0000 0070 0370 f8e1 0107 01c0 01c0 0000     ..p.p...........
   bb910:	0000 00f8 0178 c0ff 010f 03c0 03c0 0080     ....x...........
   bb920:	0100 00fc 00fc 807f c71f 07f0 03e0 0080     ................
	...

000bbaa0 <_ZL5lucky>:
	...
   bbc44:	1cf0 1f38 e341 8e87 0000 0000 0000 0000     ..8.A...........
   bbc54:	0c60 3110 c6c0 0c03 0000 0000 0000 0000     `..1............
   bbc64:	0c60 4030 d8c0 9801 0000 0000 0000 0000     `.0@............
   bbc74:	0c60 c020 f040 d001 0000 0000 0000 0000     `. .@...........
   bbc84:	0c60 c020 d840 e000 0000 0000 0000 0000     `. .@...........
   bbc94:	0c60 c020 dc00 6000 0000 0000 0000 0000     `. ....`........
   bbca4:	0c60 c060 cc00 6000 0000 0000 0000 0000     `.`....`........
   bbcb4:	0460 c040 ce00 6000 0000 0000 0000 0000     `.@....`........
   bbcc4:	0660 6040 c640 6000 0000 0000 0000 0000     `.@`@..`........
   bbcd4:	0763 39c0 c380 6000 0000 0000 0000 0000     c..9...`........
   bbce4:	03fe 1f80 e701 7880 0000 0000 0000 0000     .......x........
	...

000bbea0 <_ZL5skull>:
   bbea0:	0000 0000 0000 6002 3100 0000 0000 0000     .......`.1......
   bbeb0:	0002 0000 8021 6002 1c00 001c 0000 0000     ....!..`........
   bbec0:	0003 0000 c661 c002 df00 f03f 0000 0000     ....a.....?.....
   bbed0:	801b 0000 cf01 eec6 7f00 f8ff 0000 0000     ................
   bbee0:	e009 4000 fc01 ff7e 370c f0ff 0000 0000     ...@..~..7......
   bbef0:	7800 0000 fd01 9f01 bfbf f0ff 8000 0006     .x..............
   bbf00:	0800 4002 ff01 0fc0 febf f801 0000 0000     ...@............
   bbf10:	2000 0000 f001 0f00 f83f 3800 4000 1820     . ......?..8.@ .
   bbf20:	0000 0000 c001 0d00 f0ef 1800 8002 0e10     ................
   bbf30:	0000 0000 0002 0100 e0e3 0c00 0000 0708     ................
   bbf40:	0801 0000 0040 0100 e0ff 0400 0000 0f0c     ....@...........
   bbf50:	1f02 0000 0040 0100 c0ff 0400 0000 0700     ....@...........
   bbf60:	1700 0000 0040 0100 c0ff 0400 0000 0000     ....@...........
   bbf70:	2910 0400 0060 0100 c0ff 0600 0100 ccc0     .)..`...........
   bbf80:	1824 0600 00a0 0d00 c0ff 0e00 0000 e0bc     $...............
   bbf90:	da24 61c0 0080 0f00 c0ff 0e00 0600 e0f7     $..a............
   bbfa0:	b124 e580 0080 0f00 e0ff 0e00 0100 8003     $...............
   bbfb0:	6109 0d10 0000 0f00 e0ff 0e00 0080 0001     .a..............
   bbfc0:	6709 8916 0010 0f00 c2ff 1e00 0080 0000     .g..............
   bbfd0:	4601 8a44 8013 0f00 c0ff 3f00 0400 0000     .FD........?....
   bbfe0:	4812 0843 b093 0f00 c0ff 7f00 8f00 00c0     .HC.............
   bbff0:	c812 0201 f01b 0f00 e0ff fe00 8701 00c0     ................
   bc000:	ce12 0000 f803 0f00 f8ff fe00 0707 00e0     ................
   bc010:	cc12 0044 fc87 1f07 ffff feff 238e 00f0     ..D..........#..
   bc020:	d012 0cce ff07 3ffc ffff ffff 019f 00e3     .......?........
   bc030:	d012 00cf ff03 77ee ff83 fffe 83bf 00ff     .......w........
   bc040:	c112 a0cc ff03 efef ff01 ffff 87ff 20ff     ............... 
   bc050:	c332 920c ff03 faff ff00 ffff 2fff f8ff     2............/..
   bc060:	8626 3259 ff01 b0ff 7f00 ffff ffff f8ff     &.Y2............
   bc070:	9424 6012 ff01 d0ff 7b00 ffff ffff f8ff     $..`.....{......
   bc080:	2465 e014 bc00 886f 3b00 ffff ffff fcff     e$....o..;......
   bc090:	414c c035 0000 0003 3900 ffff ffff fcff     LA5......9......
   bc0a0:	c3c8 c07f 0000 4000 3f00 ff9f ffff fcff     .......@.?......
   bc0b0:	929e 80df 0000 4000 3f00 ffff ffff 7efc     .......@.?.....~
   bc0c0:	3086 00bd 0000 4800 3f00 ffff ffff 7eff     .0.....H.?.....~
   bc0d0:	3142 10fc 0000 7800 3f00 ffff ffff feff     B1.....x.?......
   bc0e0:	2179 00fc 0000 7c00 3f00 dfff ffff feff     y!.....|.?......
   bc0f0:	820c 20f8 0000 fc0d 7f00 fff7 ffff feff     ... ............
   bc100:	0201 00f0 6000 ff04 7f80 ffe7 ffff feff     .....`..........
   bc110:	0303 0070 2000 ff02 7fff 7fc6 ffff feff     ..p.. ..........
   bc120:	8602 00e0 2000 ff00 ffff ffc7 ffff feff     ..... ..........
   bc130:	0504 00c0 6000 ff02 ffff ff86 ffff feff     .....`..........
   bc140:	0d08 00c0 1000 ff03 ffff ff86 ffff feff     ................
   bc150:	0900 00c0 1000 ff01 ffff ff8d ffff feff     ................
   bc160:	1b12 0080 1000 ff01 ffdf ff8d ffff feff     ................
   bc170:	1320 0080 5002 ff03 ffdf ff8d ffff fef7      ....P..........
   bc180:	1300 0000 7000 ff01 ffff ff9f ffff fef7     .....p..........
   bc190:	0310 0000 f004 ff01 ffff ff3f ffff fcf7     ..........?.....
   bc1a0:	2700 0000 e10e ff81 ffff ffbf ffff fcff     .'..............
   bc1b0:	2600 0000 e809 ffe4 ffff fffb feff f8ff     .&..............
   bc1c0:	4600 0000 c811 1ff0 ffff ffff ffff f9ff     .F..............
   bc1d0:	0600 0000 8831 43fe 6fff ffff ffff f1ff     ....1..C.o......
   bc1e0:	0400 0000 a461 6cfe 7f43 ffff ffff f37f     ....a..lC.......
   bc1f0:	0c00 0000 c843 6ef9 ffe7 ffff ffff e33f     ....C..n......?.
   bc200:	0c00 0000 d087 8ef8 ffff ffff ffff e73f     ..............?.
   bc210:	0800 0300 820f 0e7e 77ff ffff ffff ce3f     ......~..w....?.
   bc220:	0800 0400 001f 4e7e 77e6 ffff ffff cc7f     ......~N.w......
   bc230:	0880 0800 001e 1a3d ff64 ffff feff 9d7f     ......=.d.......
   bc240:	0002 1000 003c 1b0e ff3e ffff feff 9b7f     ....<...>.......
   bc250:	1004 2000 0038 2303 ff26 ffff feff 37ff     ... 8..#&......7
   bc260:	1008 4000 0038 1100 ff26 ffff feff 36ff     ...@8...&......6
   bc270:	0000 8000 0070 0d00 ff93 ffff feff 6cfe     ....p..........l
   bc280:	0000 0001 00f0 0000 ff94 ffff ffff dcfe     ................
   bc290:	0000 0002 00e0 0000 ff00 ffff ffff d8fc     ................

000bc2a0 <_ZL6cheers>:
	...
   bc440:	0000 7e00 cf83 f00f 0fff 1fc0 8081 0000     ...~............
   bc450:	0000 e700 8681 3006 0763 3be0 c081 0000     .......0c..;....
   bc460:	0000 c101 fe81 5006 0665 3c70 c0c1 0000     .......Pe.p<....
   bc470:	0000 8101 fe81 c007 067c 1f30 c0c1 0000     ........|.0.....
   bc480:	0000 8001 86c1 4006 066c 1f30 c0c1 0000     .......@l.0.....
   bc490:	0000 8001 8681 0006 0660 4130 80c1 0000     ........`.0A....
   bc4a0:	0000 8001 8601 0006 0760 40f0 80e1 0000     ........`..@....
   bc4b0:	0000 c001 8601 0006 0760 60e0 8060 0000     ........`..``...
   bc4c0:	0000 e100 8681 1006 0661 60e0 80e0 0000     ........a..`....
   bc4d0:	0000 ff00 8681 3807 0663 7b78 80c1 0000     .......8c.x{....
   bc4e0:	0000 3f00 cf03 f00f 0fff 7f38 8081 0000     ...?......8.....
	...

000bc6a0 <_ZL6gentle>:
	...
   bc740:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bc750:	0e00 0000 0000 0000 0000 0000 000e 0000     ................
   bc760:	1600 0000 0000 0000 0000 0000 0006 0000     ................
   bc770:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bc780:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bc790:	0600 0000 0000 0000 0000 0800 0006 0000     ................
   bc7a0:	0600 0000 0000 0000 0000 1800 0006 0000     ................
   bc7b0:	0600 0000 0000 0002 0000 1800 0006 0000     ................
   bc7c0:	0700 0fe0 0080 000f 07f8 7cc0 0306 00e0     ...........|....
   bc7d0:	0600 1830 00c0 811f 0e86 18e0 0606 0018     ..0.............
   bc7e0:	0600 3f18 00c0 8338 06fe 1860 0f06 00f8     ...?..8...`.....
   bc7f0:	0600 3018 0000 8330 0600 1870 0c06 0000     ...0..0...p.....
   bc800:	0600 3018 0000 8321 0602 1830 0c06 0008     ...0..!...0.....
   bc810:	1f00 1838 0060 8117 0686 1e38 0606 0018     ..8.`.....8.....
   bc820:	0f00 0ff0 0080 000f 0efc 1a3c 030f 00f0     ..........<.....
   bc830:	0200 0000 0000 0007 0000 0000 0000 0000     ................
   bc840:	0000 0000 8000 0003 0000 0000 0000 0000     ................
   bc850:	0000 0000 0001 0006 0000 0000 0000 0000     ................
   bc860:	0000 0000 c000 003c 0000 0000 0000 0000     ......<.........
   bc870:	0000 0000 7f00 00f0 0000 0000 0000 0000     ................
   bc880:	0000 0000 0f00 0000 0000 0000 0000 0000     ................
	...
   bc8e4:	0000 2000 0000 0000 0000 0000 0000 0000     ... ............
   bc8f4:	0000 e000 0000 0000 0000 0000 0000 0000     ................
   bc904:	0000 6000 0000 0000 0000 0000 0000 0000     ...`............
   bc914:	0000 6000 0000 0000 0000 0000 0000 0000     ...`............
   bc924:	0003 6080 0000 0000 0000 0000 0000 0000     ...`............
   bc934:	0007 6080 0000 0000 0000 0000 0000 0000     ...`............
   bc944:	8100 6080 0000 0000 0000 0000 0000 f33d     ...`..........=.
   bc954:	8787 7cc0 0000 703e f801 0000 0000 e20c     ...|..>p........
   bc964:	8101 6e80 0000 b873 0c03 0000 0000 620c     ...n..s........b
   bc974:	8101 6680 0000 9c33 fc07 0000 0000 e406     ...f..3.........
   bc984:	8101 6780 0000 8c31 0006 0000 0000 b407     ...g..1.........
   bc994:	8101 6380 0000 8e31 0006 0000 0000 3803     ...c..1........8
   bc9a4:	8101 63a0 0080 c731 0603 0000 0000 1003     ...c..1.........
   bc9b4:	c103 e3e0 00c0 e779 f8c1 0000 0000 0000     ......y.........
	...

000bcaa0 <_ZL8goodIdea>:
	...
   bcb28:	0000 0700 0000 0000 0000 0000 0000 0000     ................
   bcb38:	0000 1f00 0000 0000 0000 0000 0000 0000     ................
   bcb48:	0000 1300 0000 0000 0000 0000 0000 0000     ................
   bcb58:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcb68:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcb78:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcb88:	0000 0300 0000 0000 0000 0000 0800 0000     ................
   bcb98:	0000 0300 0000 0000 0000 0000 1800 0000     ................
   bcba8:	0000 0300 0000 0000 0000 0000 3c00 3e00     .............<.>
   bcbb8:	7e00 ff00 0000 0000 0000 0000 fe00 fb00     .~..............
   bcbc8:	fb00 cf01 0000 0000 0000 0000 e300 e101     ................
   bcbd8:	e101 8703 0000 0000 0000 0000 c301 8301     ................
   bcbe8:	8303 0303 0000 0000 0000 0000 8301 0303     ................
   bcbf8:	0703 0307 0000 0000 0000 0000 8700 0703     ................
   bcc08:	0e03 0303 0000 0000 0000 0000 8e00 1e02     ................
   bcc18:	1e02 0703 00c0 0000 0000 0000 7e00 fc03     .............~..
   bcc28:	fc03 df03 0080 0000 0000 0000 1a00 f001     ................
   bcc38:	f001 f201 0000 0000 0000 0000 1e00 0000     ................
	...
   bcc50:	0000 1800 0400 0000 0000 0000 0000 0000     ................
   bcc60:	0000 1000 1800 0000 0000 0000 0000 0000     ................
   bcc70:	0000 0c00 f000 0000 0000 0000 0000 0000     ................
   bcc80:	0000 0700 e0ff 0000 0000 0000 0000 0000     ................
   bcc90:	0000 0100 00ff 0000 0000 0000 0000 0000     ................
	...
   bccf4:	0000 0100 0000 0000 0000 0000 0000 0000     ................
   bcd04:	0000 0700 0000 0000 0000 0000 0000 0000     ................
   bcd14:	0000 0f00 0000 0000 0000 0000 0000 0000     ................
   bcd24:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcd34:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcd44:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcd54:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcd64:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcd74:	0e00 0300 0000 0000 0000 0000 0000 0000     ................
   bcd84:	0c00 0300 0000 0000 0000 0000 0000 0000     ................
   bcd94:	0300 7f00 1f00 7800 0000 0000 0000 0000     .......x........
   bcda4:	0f00 c700 7300 fe80 0000 0000 0000 0000     .....s..........
   bcdb4:	0700 8301 e100 1fc0 0000 0000 0000 0000     ................
   bcdc4:	0300 8303 c100 23c0 0000 0000 0000 0000     .......#........
   bcdd4:	0300 8303 ff01 61c0 0080 0000 0000 0000     .......a........
   bcde4:	0300 8303 c001 6000 00c0 0000 0000 0000     .......`........
   bcdf4:	0300 8703 c0e0 7040 00e0 0000 0000 0000     ......@p........
   bce04:	0700 cf01 f0c0 7fc0 00f0 0000 0000 0000     ................
   bce14:	0f00 fb80 3f00 3f00 0018 0000 0000 0000     .....?.?........
	...

000bcea0 <_ZL8goodLuck>:
	...
   bcff4:	0000 3800 0100 0080 0000 0010 3f00 00a0     ...8.........?..
   bd004:	0000 7800 0300 0080 0000 0070 e000 00e0     ...x......p.....
   bd014:	0000 1800 0100 0080 0000 0030 8000 0060     ..........0...`.
   bd024:	0000 1800 0100 0080 0000 0030 8001 0030     ..........0...0.
   bd034:	0000 1800 0100 0080 0000 0030 0003 0010     ..........0.....
   bd044:	0000 1800 0100 0080 0000 0030 0003 0000     ..........0.....
   bd054:	0000 1800 0100 0080 0000 0030 0003 0000     ..........0.....
   bd064:	0000 1800 0100 0080 0000 0030 8003 0778     ..........0...x.
   bd074:	3ec0 f803 0100 8c80 f003 8037 8003 1f30     .>........7...0.
   bd084:	7920 3806 0100 9c83 1006 0036 8001 1830      y.8......6...0.
   bd094:	e120 180c 0100 8c81 080c 003e c001 3030      .........>...00
   bd0a4:	8361 180c 0100 8c81 000c 003b e000 2070     a.........;...p 
   bd0b4:	87c1 180c 0100 8c81 080c 8033 7900 23e0     ..........3..y.#
   bd0c4:	1ec1 3e0e 0100 8f81 1806 8031 3f00 1f80     ...>......1..?..
   bd0d4:	f800 d807 0300 fcc0 f003 c039 0000 0000     ..........9.....
	...

000bd2a0 <_ZL8heroTime>:
	...
   bd334:	0e00 0078 0000 fc03 0000 0000 0000 e107     ..x.............
   bd344:	1ff8 0ffc 00f0 ff0f 0000 0000 0000 8003     ................
   bd354:	0ef0 0f0e 00fc 831f 0080 0000 0000 8003     ................
   bd364:	0e70 0316 008f 013e 0080 0000 0000 ff03     p.....>.........
   bd374:	0ff0 03f0 0087 017c 00c0 0000 0000 ff03     ......|.........
   bd384:	0ff0 03f0 8083 0078 00c0 0000 0000 8003     ......x.........
   bd394:	0e70 0330 8083 00f0 00e0 0000 0000 8003     p.0.............
   bd3a4:	0e70 0330 8083 00e0 00e0 0000 0000 8003     p.0.............
   bd3b4:	0e70 0300 8083 01e0 00e0 0000 0000 8003     p...............
   bd3c4:	0e70 0300 8083 01e0 00c0 0000 0000 8003     p...............
   bd3d4:	0e70 0300 80e7 03e0 00c0 0000 0000 8003     p...............
   bd3e4:	0e70 0300 00ff 03e0 00c0 0000 0000 8003     p...............
   bd3f4:	0e70 0300 009e 07e0 0080 0000 0000 8003     p...............
   bd404:	0e70 0302 008e 1f60 0000 0000 0000 8003     p.....`.........
   bd414:	0e70 0306 008f 3e38 0000 0000 0000 c003     p.....8>........
   bd424:	1ff0 03fe e087 fc1f 0000 0000 0000 e107     ................
   bd434:	1ff8 07fc e0e3 f007 0000 0000 0000 0000     ................
	...
   bd510:	0000 3f00 07fe 7ce0 c003 e039 0000 0000     ...?...|..9.....
   bd520:	0000 3f00 03ff 7ec0 c007 f87f 0000 0000     ...?...~........
   bd530:	0000 6100 01c3 1ec0 8007 383c 0000 0000     ...a......<8....
   bd540:	0000 4100 01c1 1fc0 800f 581c 0000 0000     ...A.......X....
   bd550:	0000 0100 01c0 17c0 800b c01f 0000 0000     ................
   bd560:	0000 0100 01c0 17c0 809b c01f 0000 0000     ................
   bd570:	0000 0100 01c0 1bc0 80f3 c01c 0000 0000     ................
   bd580:	0000 0100 01c0 19c0 80f3 401c 0000 0000     ...........@....
   bd590:	0000 0100 01c0 19c0 80e3 001c 0000 0000     ................
   bd5a0:	0000 0100 01c0 18c0 80e3 001c 0000 0000     ................
   bd5b0:	0000 0100 01c0 18c0 80c3 001c 0000 0000     ................
   bd5c0:	0000 0100 01c0 10c0 8003 001c 0000 0000     ................
   bd5d0:	0000 0100 01c0 30c0 c001 001c 0000 0000     .......0........
   bd5e0:	0000 0100 01c0 30c0 c001 081c 0000 0000     .......0........
   bd5f0:	0000 0100 01c0 30c0 c001 1c1c 0000 0000     .......0........
   bd600:	0000 0100 03e0 30c0 e003 f87f 0000 0000     .......0........
   bd610:	0000 0300 07f0 78e0 f007 f87f 0000 0000     .......x........
	...

000bd6a0 <_ZL9killUmAll>:
	...
   bd830:	0000 0200 0002 0000 0000 0000 2000 0040     ............. @.
   bd840:	0000 0600 000e 0000 0000 0000 e100 00c0     ................
   bd850:	f300 0ec0 001e 0000 0000 0600 e301 80c1     ................
   bd860:	6700 0600 0006 0000 0000 0600 6000 c0c1     .g...........`..
   bd870:	6c00 0600 0006 0000 0000 0f00 6000 c0c1     .l...........`..
   bd880:	7c00 0603 0006 0000 0000 0f00 6000 c0c1     .|...........`..
   bd890:	6c00 0607 0006 0000 0000 0b00 6080 c0c1     .l...........`..
   bd8a0:	6e00 8603 0006 c10e 00f7 1900 60f0 80c1     .n...........`..
   bd8b0:	6600 8603 0006 c11d 80ff 1300 60c0 80c1     .f...........`..
   bd8c0:	6700 8601 0006 c00c c0dd 3700 60c0 80c0     .g.........7.`..
   bd8d0:	6300 8601 0006 c00c c0dc 3e00 60e0 80c0     .c.........>.`..
   bd8e0:	6300 8681 0006 f00e e0cc 6000 60e0 80c1     .c.........`.`..
   bd8f0:	fb00 8fe3 000f e107 f8ef f100 f1f0 80e1     ................
	...

000bdaa0 <_ZL9messenger>:
	...
   bdbd0:	0000 0300 0080 0000 0001 0000 0000 0000     ................
   bdbe0:	0000 0100 0080 0006 0003 0000 0000 0000     ................
   bdbf0:	0000 0100 0080 0002 0003 0000 0000 0000     ................
   bdc00:	0000 0100 0080 1004 0003 8000 0000 0000     ................
   bdc10:	0000 0f00 8e87 3000 c303 8381 0080 0000     .......0........
   bdc20:	0000 1900 8f8c 3000 6303 86c1 00c0 0000     .......0.c......
   bdc30:	0000 1900 8d89 3000 6203 8f61 00c0 0000     .......0.ba.....
   bdc40:	0000 1900 8d8b 3880 2303 c471 0000 0000     .......8.#q.....
   bdc50:	0000 0f00 1d8f 18c0 3303 c7d0 00c0 0000     .........3......
	...
   bdcc0:	0000 0020 0000 0000 0000 0000 0000 0000     .. .............
   bdcd0:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bdce0:	0000 0060 0000 0000 0000 0000 0000 0070     ..`...........p.
   bdcf0:	0c00 0060 0000 0000 0000 0100 0100 0080     ..`.............
   bdd00:	1c00 1c78 7600 8007 c370 8387 8687 0000     ..x..v..p.......
   bdd10:	0c00 366c db00 800c 46d3 c6c6 864c 0000     ..l6.....F..L...
   bdd20:	0c00 7e6c 6900 c10f 0f83 c4c6 c64f 0000     ..l~.i......O...
   bdd30:	0e00 2064 4d00 058c 0406 4506 06cc 0000     ..d .M.....E....
   bdd40:	0e00 3e66 ef00 86c7 071c 63c7 8ec7 0000     ..f>.......c....
	...
   bdd58:	0000 0101 0080 0000 0000 0000 0000 0000     ................
   bdd68:	0000 0301 0000 0000 0000 0000 0000 0000     ................
   bdd78:	0000 fe00 0000 0000 0000 0000 0000 0000     ................
	...

000bdea0 <_ZL9mushrooms>:
   bdea0:	0000 0000 0f00 80ff 0000 0000 0000 0000     ................
   bdeb0:	0000 0000 7f00 f8ff 0000 0000 0000 0000     ................
   bdec0:	0000 0000 ff03 ffff 0000 0000 0000 0000     ................
   bded0:	0000 0000 ff0f ffff 00c0 0000 0000 0000     ................
   bdee0:	0000 0000 ee3f ffff 00f0 0000 0000 0000     ....?...........
   bdef0:	0000 0000 00f0 ff3f 00fc 0000 0000 0000     ......?.........
   bdf00:	0000 0100 00e0 ff7f 00ff 0000 0000 0000     ................
   bdf10:	0000 0300 00c0 ff3f c0ff 0000 0000 0000     ......?.........
   bdf20:	0000 0700 0000 ff07 f0ff 0000 0000 0000     ................
   bdf30:	0000 0e00 0000 ff0f f8ff 0000 0000 0000     ................
   bdf40:	0000 1e00 0000 ff1f fcff 0000 0000 0000     ................
   bdf50:	0000 1c00 0000 ff8f feff 0000 0000 0000     ................
   bdf60:	0000 3c00 0000 ff9f ffff 0000 0000 0000     ...<............
   bdf70:	0000 7e00 0100 ffff ffff 0080 0000 0000     ...~............
   bdf80:	0000 7e00 ff00 ffff ffff fcff 0000 0000     ...~............
   bdf90:	0000 ff00 ffff 00f8 0700 ffff 0000 0000     ................
   bdfa0:	0000 ff00 00fe 0000 0100 ffff 00c0 0000     ................
   bdfb0:	0000 ff01 0080 0000 0800 ffff 00e0 0000     ................
   bdfc0:	0000 f801 0000 0000 0300 3fff 00f0 0000     ...........?....
   bdfd0:	0000 e001 0f00 c0ff 1f00 0ffe 00f0 0000     ................
   bdfe0:	0000 b001 3f00 ffff ff04 8ffd 00f8 0000     .....?..........
   bdff0:	0000 e201 fe01 ff5f ff83 07fc 00fc 0000     ......_.........
   be000:	0000 f000 ed0b ff9f ffc3 ffff 00fc 0000     ................
   be010:	0000 3b00 e10f fba7 ff07 fbff 00fe 0000     ...;............
   be020:	0000 0000 c227 e011 ff0f fbff 00ff 0000     ....'...........
   be030:	0000 0000 0000 f013 ff0f ffff 00ff 0000     ................
   be040:	0000 0000 4400 f012 ff1f ffff 80ff 0000     .....D..........
   be050:	0000 0000 c000 7800 ff1f ffff 80ff 0000     .......x........
   be060:	0000 0000 0000 7802 ff1f 0fe0 80ff 0000     .......x........
   be070:	0000 0000 0000 fc00 801f 0000 800f 0000     ................
   be080:	0000 0000 0000 fc00 0018 8037 8009 0000     ..........7.....
   be090:	0000 0000 0001 be00 0118 f0ef 8000 0000     ................
   be0a0:	0000 0000 0002 5c00 070c fccd 8001 0000     .......\........
   be0b0:	0000 0000 0000 0600 0703 ffc0 008f 0000     ................
   be0c0:	0000 0000 0000 6700 e201 7b04 00e0 0000     .......g...{....
   be0d0:	0000 0000 0006 6d00 0200 7c04 0000 0000     .......m...|....
   be0e0:	0000 0000 0002 6502 0480 fe08 0000 0000     .......e........
   be0f0:	0000 0000 0008 0700 0c00 1f00 0000 0000     ................
   be100:	0000 0000 000c b700 1080 0f00 0080 0000     ................
   be110:	0000 0000 0008 9700 2080 2300 0080 0000     ......... .#....
   be120:	0000 0000 0018 6f03 6080 3630 00c0 0000     .......o.`06....
   be130:	0000 0000 1818 3b00 40c0 2800 00c0 0000     .......;.@.(....
   be140:	0000 0000 1c08 9100 80c0 4b00 0060 0000     ...........K`...
   be150:	0000 0000 1c00 2d41 8080 2700 00e0 0000     ......A-...'....
   be160:	0000 0000 300c 6dc0 00c1 0e00 00e0 0000     .....0.m........
   be170:	0000 0000 3108 cf80 0041 b900 0020 0000     .....1..A... ...
   be180:	0000 0000 3100 ff80 00c1 0100 00e0 0000     .....1..........
   be190:	0000 0000 1900 fd81 0081 0400 00e0 0000     ................
   be1a0:	0000 0000 0708 fff1 00c0 0600 0000 0000     ................
   be1b0:	0000 0000 070e eff2 00c0 4300 00e0 0000     ...........C....
   be1c0:	0000 0000 0f07 8fc1 4080 4d00 00c0 0000     .........@.M....
   be1d0:	0000 0000 2e07 7f01 0080 8dc0 00c0 0000     ................
   be1e0:	0000 0000 6c03 ff30 0cc1 8fc0 00c0 0000     .....l0.........
   be1f0:	0000 0000 e7cb bff3 0de3 3f80 00c0 0000     ...........?....
   be200:	0000 0100 e7ff ff0f 9ffb ff11 00c0 0000     ................
   be210:	0000 0100 e7ff 7f0f d3ff ff03 00c0 0000     ................
   be220:	0000 0000 dfaf ff8f eff3 ff3f 00c0 0000     ..........?.....
   be230:	0000 0000 7399 ff3f 6fe1 ffdf 0080 0000     .....s?..o......
   be240:	0000 0100 e7e2 ffbf f3c3 fcdf 0000 0000     ................
   be250:	0000 0000 de0e ff7f 2181 ecb7 0000 0000     .........!......
   be260:	0000 0000 9e0d f87f 0000 e000 0000 0000     ................
   be270:	0000 0000 3d01 800d 0000 6002 0000 0000     .....=.....`....
   be280:	0000 0000 fc00 0000 0000 0000 0000 0000     ................
   be290:	0000 0000 ec00 0000 0000 0000 0000 0000     ................

000be2a0 <CSWTCH.88>:
   be2a0:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   be2b0:	0050 0000                                   P...

000be2b4 <_ZL4font>:
   be2b4:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   be2c4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   be2d4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   be2e4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   be2f4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   be304:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   be314:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   be324:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   be334:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   be344:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   be354:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   be364:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   be374:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   be384:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   be394:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   be3a4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   be3b4:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   be3c4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   be3d4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   be3e4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   be3f4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   be404:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   be414:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   be424:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   be434:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   be444:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   be454:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   be464:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   be474:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   be484:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   be494:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   be4a4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   be4b4:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   be4c4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   be4d4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   be4e4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   be4f4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   be504:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   be514:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   be524:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   be534:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   be544:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   be554:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   be564:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   be574:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   be584:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   be594:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   be5a4:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   be5b4:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   be5c4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   be5d4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   be5e4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   be5f4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   be604:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   be614:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   be624:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   be634:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   be644:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   be654:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   be664:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   be674:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   be684:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   be694:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   be6a4:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   be6b4:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   be6c4:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   be6d4:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   be6e4:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   be6f4:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   be704:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   be714:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   be724:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   be734:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   be744:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   be754:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   be764:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   be774:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   be784:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   be794:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   be7a4:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000be7b0 <_ZTV12Adafruit_GFX>:
	...
   be7c0:	52d9 000b 645d 000b 40a5 000b 4f5d 000b     .R..]d...@..]O..
   be7d0:	5083 000b 509f 000b 501b 000b 50b9 000b     .P...P...P...P..
   be7e0:	50ef 000b 510b 000b                         .P...Q..

000be7e8 <_ZTV16Adafruit_SSD1306>:
	...
   be7f0:	5665 000b 56f5 000b 52d9 000b 645d 000b     eV...V...R..]d..
   be800:	5669 000b 4f5d 000b 54f1 000b 5381 000b     iV..]O...T...S..
   be810:	501b 000b 50b9 000b 50ef 000b 510b 000b     .P...P...P...Q..

000be820 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000be828 <_ZTVN5spark13EthernetClassE>:
	...
   be830:	609f 000b 6095 000b 608b 000b 6081 000b     .`...`...`...`..
   be840:	6075 000b 6069 000b 6339 000b 6341 000b     u`..i`..9c..Ac..
   be850:	605d 000b 6055 000b 604b 000b 6041 000b     ]`..U`..K`..A`..
   be860:	6371 000b                                   qc..

000be864 <_ZTV7TwoWire>:
	...
   be86c:	60bd 000b 6107 000b 60df 000b 60bf 000b     .`...a...`...`..
   be87c:	60e7 000b 60ef 000b 60f7 000b 60ff 000b     .`...`...`...`..

000be88c <_ZTV9IPAddress>:
	...
   be894:	61db 000b 61cb 000b 61cd 000b 7061 0070     .a...a...a..app.

000be8a4 <_ZTVN5spark12NetworkClassE>:
	...
   be8ac:	62f9 000b 6303 000b 630d 000b 6317 000b     .b...c...c...c..
   be8bc:	6321 000b 632d 000b 6339 000b 6341 000b     !c..-c..9c..Ac..
   be8cc:	6349 000b 6355 000b 635d 000b 6367 000b     Ic..Uc..]c..gc..
   be8dc:	6371 000b                                   qc..

000be8e0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   be8e0:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   be8f0:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000be900 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be908:	684d 000b 6871 000b 6d5b 000b 687f 000b     Mh..qh..[m...h..
   be918:	6851 000b                                   Qh..

000be91c <_ZTV9TCPClient>:
	...
   be924:	40f1 000b 4125 000b 67c9 000b 67e3 000b     .@..%A...g...g..
   be934:	6bf1 000b 680d 000b 6a67 000b 6841 000b     .k...h..gj..Ah..
   be944:	6af9 000b 6939 000b 6a95 000b 6ca5 000b     .j..9i...j...l..
   be954:	6a35 000b 6843 000b 67f5 000b 6885 000b     5j..Ch...g...h..
   be964:	6919 000b 5925 252d 2d6d 6425 2554 3a48     .i..%Y-%m-%dT%H:
   be974:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000be984 <_ZTV11USARTSerial>:
	...
   be98c:	6d75 000b 6de1 000b 6db9 000b 645d 000b     um...m...m..]d..
   be99c:	6d89 000b 6da5 000b 6d97 000b 6db3 000b     .m...m...m...m..
   be9ac:	6d77 000b 6d7b 000b                         wm..{m..

000be9b4 <_ZTV9USBSerial>:
	...
   be9bc:	6e1f 000b 6e87 000b 6e5d 000b 645d 000b     .n...n..]n..]d..
   be9cc:	6e4f 000b 6e21 000b 6e31 000b 6e81 000b     On..!n..1n...n..
   be9dc:	6e41 000b 6e19 000b                         An...n..

000be9e4 <_ZTVN5spark9WiFiClassE>:
	...
   be9ec:	6f87 000b 6f7d 000b 6f73 000b 6f29 000b     .o..}o..so..)o..
   be9fc:	6f67 000b 6f5b 000b 6339 000b 6341 000b     go..[o..9c..Ac..
   bea0c:	6f4f 000b 6f47 000b 6f3d 000b 6f33 000b     Oo..Go..=o..3o..
   bea1c:	6371 000b                                   qc..

000bea20 <_ZSt7nothrow>:
	...

000bea21 <_ZTSSt19_Sp_make_shared_tag>:
   bea21:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bea31:	6572 5f64 6174 0067 0000                     red_tag....

000bea3c <_ZTISt19_Sp_make_shared_tag>:
   bea3c:	ea7c 000b ea21 000b                         |...!...

000bea44 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bea44:	eadc 000b ea50 000b eb00 000b               ....P.......

000bea50 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bea50:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bea60:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bea70:	0045 0000                                   E...

000bea74 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bea74:	0000 0000 ea44 000b 7341 000b 7355 000b     ....D...As..Us..
   bea84:	74e9 000b 74e9 000b 73bf 000b 7301 000b     .t...t...s...s..
   bea94:	73a7 000b 7369 000b 7333 000b               .s..is..3s..

000beaa0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   beaa0:	eadc 000b eaac 000b ea44 000b               ........D...

000beaac <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   beaac:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   beabc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   beacc:	666e 456f 0000 0000                         nfoE....

000bead4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bead4:	0000 0000 eaa0 000b 73e9 000b 73fd 000b     .........s...s..
   beae4:	74e9 000b 74e9 000b 73bf 000b 7301 000b     .t...t...s...s..
   beaf4:	74bd 000b 7449 000b 7411 000b               .t..It...t..

000beb00 <_ZTISt9type_info>:
   beb00:	ea7c 000b eb08 000b                         |.......

000beb08 <_ZTSSt9type_info>:
   beb08:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
	...

000beb20 <TWO52>:
   beb20:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   beb30:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   beb40:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   beb50:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   beb60:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   beb70:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   beb80:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   beb90:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000beba0 <link_const_variable_data_end>:
   beba0:	000b4a9d 	.word	0x000b4a9d
   beba4:	000b4f4d 	.word	0x000b4f4d
   beba8:	000b6031 	.word	0x000b6031
   bebac:	000b60a9 	.word	0x000b60a9
   bebb0:	000b62e9 	.word	0x000b62e9
   bebb4:	000b6449 	.word	0x000b6449
   bebb8:	000b6569 	.word	0x000b6569
   bebbc:	000b67a5 	.word	0x000b67a5
   bebc0:	000b6d61 	.word	0x000b6d61
   bebc4:	000b6f91 	.word	0x000b6f91

000bebc8 <link_constructors_end>:
	...
