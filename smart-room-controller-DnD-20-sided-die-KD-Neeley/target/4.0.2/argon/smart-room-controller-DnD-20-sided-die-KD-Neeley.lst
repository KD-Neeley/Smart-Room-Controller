
/Users/kdneeley/Documents/IoT/Smart-Room-Controller/smart-room-controller-DnD-20-sided-die-KD-Neeley/target/4.0.2/argon/smart-room-controller-DnD-20-sided-die-KD-Neeley.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ad34  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bed50  000bed50  0000ed50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bed74  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004ac  2003e140  000bed78  0001e140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000204  2003e5ec  2003e5ec  0002e5ec  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bf224  000bf224  0001f224  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bf24c  000bf24c  0001f24c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012803a  00000000  00000000  0001f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014c9a  00000000  00000000  0014728a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003dd98  00000000  00000000  0015bf24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030f0  00000000  00000000  00199cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a978  00000000  00000000  0019cdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d7ba  00000000  00000000  001a7724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00046ef6  00000000  00000000  001e4ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a06e  00000000  00000000  0022bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008a4c  00000000  00000000  00365e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fe43 	bl	b7cb8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fe4b 	bl	b7cd4 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e140 	.word	0x2003e140
   b4048:	000bed78 	.word	0x000bed78
   b404c:	2003e5ec 	.word	0x2003e5ec
   b4050:	2003e5ec 	.word	0x2003e5ec
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fbd5 	bl	b780c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bed28 	.word	0x000bed28
   b407c:	000bed50 	.word	0x000bed50

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 ba52 	b.w	b4528 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fa87 	bl	b4598 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 bb75 	b.w	b777c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 ba59 	b.w	b6548 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 ba57 	b.w	b6548 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 ba5d 	b.w	b6558 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 f9aa 	bl	b6400 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b6081 	.word	0x000b6081
   b40b4:	000b7ed0 	.word	0x000b7ed0

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40c8:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ca:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40cc:	4606      	mov	r6, r0
   b40ce:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d0:	da0b      	bge.n	b40ea <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d2:	2a0a      	cmp	r2, #10
   b40d4:	d109      	bne.n	b40ea <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40d6:	212d      	movs	r1, #45	; 0x2d
   b40d8:	f002 fc8a 	bl	b69f0 <_ZN5Print5printEc>
            val = -n;
   b40dc:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40de:	b2ea      	uxtb	r2, r5
   b40e0:	4630      	mov	r0, r6
    }
}
   b40e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40e6:	f002 bc9c 	b.w	b6a22 <_ZN5Print11printNumberEmh>
            val = n;
   b40ea:	4621      	mov	r1, r4
   b40ec:	e7f7      	b.n	b40de <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40ee <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ee:	b40e      	push	{r1, r2, r3}
   b40f0:	b503      	push	{r0, r1, lr}
   b40f2:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b40f4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40fa:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40fc:	f002 fcaf 	bl	b6a5e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4100:	b002      	add	sp, #8
   b4102:	f85d eb04 	ldr.w	lr, [sp], #4
   b4106:	b003      	add	sp, #12
   b4108:	4770      	bx	lr
	...

000b410c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b410c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b410e:	6984      	ldr	r4, [r0, #24]
   b4110:	4b0a      	ldr	r3, [pc, #40]	; (b413c <_ZN9TCPClientD1Ev+0x30>)
   b4112:	6003      	str	r3, [r0, #0]
   b4114:	4605      	mov	r5, r0
   b4116:	b17c      	cbz	r4, b4138 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4118:	6863      	ldr	r3, [r4, #4]
   b411a:	3b01      	subs	r3, #1
   b411c:	6063      	str	r3, [r4, #4]
   b411e:	b95b      	cbnz	r3, b4138 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4120:	6823      	ldr	r3, [r4, #0]
   b4122:	4620      	mov	r0, r4
   b4124:	689b      	ldr	r3, [r3, #8]
   b4126:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4128:	68a3      	ldr	r3, [r4, #8]
   b412a:	3b01      	subs	r3, #1
   b412c:	60a3      	str	r3, [r4, #8]
   b412e:	b91b      	cbnz	r3, b4138 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4130:	6823      	ldr	r3, [r4, #0]
   b4132:	4620      	mov	r0, r4
   b4134:	68db      	ldr	r3, [r3, #12]
   b4136:	4798      	blx	r3
   b4138:	4628      	mov	r0, r5
   b413a:	bd38      	pop	{r3, r4, r5, pc}
   b413c:	000beac4 	.word	0x000beac4

000b4140 <_ZN9TCPClientD0Ev>:
   b4140:	b510      	push	{r4, lr}
   b4142:	4604      	mov	r4, r0
   b4144:	f7ff ffe2 	bl	b410c <_ZN9TCPClientD1Ev>
   b4148:	4620      	mov	r0, r4
   b414a:	211c      	movs	r1, #28
   b414c:	f7ff ffa5 	bl	b409a <_ZdlPvj>
   b4150:	4620      	mov	r0, r4
   b4152:	bd10      	pop	{r4, pc}

000b4154 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4158:	b08c      	sub	sp, #48	; 0x30
   b415a:	4605      	mov	r5, r0
   b415c:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b415e:	4668      	mov	r0, sp
   b4160:	4977      	ldr	r1, [pc, #476]	; (b4340 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4162:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b4166:	4614      	mov	r4, r2
   b4168:	461e      	mov	r6, r3
  String command = "";  
   b416a:	f002 fdf0 	bl	b6d4e <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b416e:	f8df e228 	ldr.w	lr, [pc, #552]	; b4398 <_Z6setHueibiii+0x244>
   b4172:	4974      	ldr	r1, [pc, #464]	; (b4344 <_Z6setHueibiii+0x1f0>)
   b4174:	f8de 3000 	ldr.w	r3, [lr]
   b4178:	4873      	ldr	r0, [pc, #460]	; (b4348 <_Z6setHueibiii+0x1f4>)
   b417a:	4a74      	ldr	r2, [pc, #464]	; (b434c <_Z6setHueibiii+0x1f8>)
   b417c:	f8df c21c 	ldr.w	ip, [pc, #540]	; b439c <_Z6setHueibiii+0x248>
   b4180:	42ab      	cmp	r3, r5
   b4182:	d119      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b4184:	680b      	ldr	r3, [r1, #0]
   b4186:	42bb      	cmp	r3, r7
   b4188:	d116      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b418a:	6803      	ldr	r3, [r0, #0]
   b418c:	42a3      	cmp	r3, r4
   b418e:	d113      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b4190:	6813      	ldr	r3, [r2, #0]
   b4192:	42b3      	cmp	r3, r6
   b4194:	d110      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b4196:	f8dc 3000 	ldr.w	r3, [ip]
   b419a:	4543      	cmp	r3, r8
   b419c:	d10c      	bne.n	b41b8 <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b419e:	f003 fa1b 	bl	b75d8 <_Z16_fetch_usbserialv>
   b41a2:	496b      	ldr	r1, [pc, #428]	; (b4350 <_Z6setHueibiii+0x1fc>)
   b41a4:	f7ff ffa3 	bl	b40ee <_ZN5Print6printfEPKcz>
    return false;
   b41a8:	2400      	movs	r4, #0
  String command = "";  
   b41aa:	4668      	mov	r0, sp
   b41ac:	f002 fd84 	bl	b6cb8 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b41b0:	4620      	mov	r0, r4
   b41b2:	b00c      	add	sp, #48	; 0x30
   b41b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b41b8:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41bc:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41be:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41c0:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41c2:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41c6:	2f00      	cmp	r7, #0
   b41c8:	f000 80b5 	beq.w	b4336 <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41cc:	4961      	ldr	r1, [pc, #388]	; (b4354 <_Z6setHueibiii+0x200>)
   b41ce:	4668      	mov	r0, sp
   b41d0:	f002 fdeb 	bl	b6daa <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41d4:	4669      	mov	r1, sp
   b41d6:	a808      	add	r0, sp, #32
   b41d8:	f002 fddc 	bl	b6d94 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41dc:	220a      	movs	r2, #10
   b41de:	4641      	mov	r1, r8
   b41e0:	a804      	add	r0, sp, #16
   b41e2:	f002 fdf4 	bl	b6dce <_ZN6StringC1Eih>
   b41e6:	a904      	add	r1, sp, #16
   b41e8:	a808      	add	r0, sp, #32
   b41ea:	f002 fe38 	bl	b6e5e <_ZplRK15StringSumHelperRK6String>
   b41ee:	495a      	ldr	r1, [pc, #360]	; (b4358 <_Z6setHueibiii+0x204>)
   b41f0:	f002 fe41 	bl	b6e76 <_ZplRK15StringSumHelperPKc>
   b41f4:	4601      	mov	r1, r0
   b41f6:	4668      	mov	r0, sp
   b41f8:	f002 fdbd 	bl	b6d76 <_ZN6StringaSERKS_>
   b41fc:	a804      	add	r0, sp, #16
   b41fe:	f002 fd5b 	bl	b6cb8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4202:	a808      	add	r0, sp, #32
   b4204:	f002 fd58 	bl	b6cb8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4208:	4669      	mov	r1, sp
   b420a:	a808      	add	r0, sp, #32
   b420c:	f002 fdc2 	bl	b6d94 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b4210:	220a      	movs	r2, #10
   b4212:	4631      	mov	r1, r6
   b4214:	a804      	add	r0, sp, #16
   b4216:	f002 fdda 	bl	b6dce <_ZN6StringC1Eih>
   b421a:	a904      	add	r1, sp, #16
   b421c:	a808      	add	r0, sp, #32
   b421e:	f002 fe1e 	bl	b6e5e <_ZplRK15StringSumHelperRK6String>
   b4222:	494e      	ldr	r1, [pc, #312]	; (b435c <_Z6setHueibiii+0x208>)
   b4224:	f002 fe27 	bl	b6e76 <_ZplRK15StringSumHelperPKc>
   b4228:	4601      	mov	r1, r0
   b422a:	4668      	mov	r0, sp
   b422c:	f002 fda3 	bl	b6d76 <_ZN6StringaSERKS_>
   b4230:	a804      	add	r0, sp, #16
   b4232:	f002 fd41 	bl	b6cb8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4236:	a808      	add	r0, sp, #32
   b4238:	f002 fd3e 	bl	b6cb8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b423c:	4669      	mov	r1, sp
   b423e:	a808      	add	r0, sp, #32
   b4240:	f002 fda8 	bl	b6d94 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4244:	220a      	movs	r2, #10
   b4246:	4621      	mov	r1, r4
   b4248:	a804      	add	r0, sp, #16
   b424a:	f002 fdc0 	bl	b6dce <_ZN6StringC1Eih>
   b424e:	a904      	add	r1, sp, #16
   b4250:	a808      	add	r0, sp, #32
   b4252:	f002 fe04 	bl	b6e5e <_ZplRK15StringSumHelperRK6String>
   b4256:	4942      	ldr	r1, [pc, #264]	; (b4360 <_Z6setHueibiii+0x20c>)
   b4258:	f002 fe0d 	bl	b6e76 <_ZplRK15StringSumHelperPKc>
   b425c:	4601      	mov	r1, r0
   b425e:	4668      	mov	r0, sp
   b4260:	f002 fd89 	bl	b6d76 <_ZN6StringaSERKS_>
   b4264:	a804      	add	r0, sp, #16
   b4266:	f002 fd27 	bl	b6cb8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b426a:	a808      	add	r0, sp, #32
   b426c:	f002 fd24 	bl	b6cb8 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b4270:	493c      	ldr	r1, [pc, #240]	; (b4364 <_Z6setHueibiii+0x210>)
   b4272:	483d      	ldr	r0, [pc, #244]	; (b4368 <_Z6setHueibiii+0x214>)
   b4274:	2300      	movs	r3, #0
   b4276:	2250      	movs	r2, #80	; 0x50
   b4278:	f002 fedc 	bl	b7034 <_ZN9TCPClient7connectEPKctm>
   b427c:	4604      	mov	r4, r0
   b427e:	2800      	cmp	r0, #0
   b4280:	d093      	beq.n	b41aa <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b4282:	f003 f9a9 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4286:	4939      	ldr	r1, [pc, #228]	; (b436c <_Z6setHueibiii+0x218>)
   b4288:	f002 fbc1 	bl	b6a0e <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b428c:	f003 f9a4 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4290:	9900      	ldr	r1, [sp, #0]
   b4292:	f002 fbbc 	bl	b6a0e <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b4296:	4936      	ldr	r1, [pc, #216]	; (b4370 <_Z6setHueibiii+0x21c>)
   b4298:	4833      	ldr	r0, [pc, #204]	; (b4368 <_Z6setHueibiii+0x214>)
   b429a:	f002 fba5 	bl	b69e8 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b429e:	4935      	ldr	r1, [pc, #212]	; (b4374 <_Z6setHueibiii+0x220>)
   b42a0:	4831      	ldr	r0, [pc, #196]	; (b4368 <_Z6setHueibiii+0x214>)
   b42a2:	f002 fba1 	bl	b69e8 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b42a6:	4934      	ldr	r1, [pc, #208]	; (b4378 <_Z6setHueibiii+0x224>)
   b42a8:	482f      	ldr	r0, [pc, #188]	; (b4368 <_Z6setHueibiii+0x214>)
   b42aa:	f002 fb9d 	bl	b69e8 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b42ae:	220a      	movs	r2, #10
   b42b0:	482d      	ldr	r0, [pc, #180]	; (b4368 <_Z6setHueibiii+0x214>)
   b42b2:	4629      	mov	r1, r5
   b42b4:	f7ff ff08 	bl	b40c8 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b42b8:	4930      	ldr	r1, [pc, #192]	; (b437c <_Z6setHueibiii+0x228>)
   b42ba:	482b      	ldr	r0, [pc, #172]	; (b4368 <_Z6setHueibiii+0x214>)
   b42bc:	f002 fba7 	bl	b6a0e <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42c0:	492f      	ldr	r1, [pc, #188]	; (b4380 <_Z6setHueibiii+0x22c>)
   b42c2:	4829      	ldr	r0, [pc, #164]	; (b4368 <_Z6setHueibiii+0x214>)
   b42c4:	f002 fba3 	bl	b6a0e <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42c8:	492e      	ldr	r1, [pc, #184]	; (b4384 <_Z6setHueibiii+0x230>)
   b42ca:	4827      	ldr	r0, [pc, #156]	; (b4368 <_Z6setHueibiii+0x214>)
   b42cc:	f002 fb8c 	bl	b69e8 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42d0:	4924      	ldr	r1, [pc, #144]	; (b4364 <_Z6setHueibiii+0x210>)
   b42d2:	4825      	ldr	r0, [pc, #148]	; (b4368 <_Z6setHueibiii+0x214>)
   b42d4:	f002 fb9b 	bl	b6a0e <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42d8:	492b      	ldr	r1, [pc, #172]	; (b4388 <_Z6setHueibiii+0x234>)
   b42da:	4823      	ldr	r0, [pc, #140]	; (b4368 <_Z6setHueibiii+0x214>)
   b42dc:	f002 fb84 	bl	b69e8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42e0:	220a      	movs	r2, #10
   b42e2:	9902      	ldr	r1, [sp, #8]
   b42e4:	4820      	ldr	r0, [pc, #128]	; (b4368 <_Z6setHueibiii+0x214>)
   b42e6:	f002 fb9c 	bl	b6a22 <_ZN5Print11printNumberEmh>
        n += println();
   b42ea:	481f      	ldr	r0, [pc, #124]	; (b4368 <_Z6setHueibiii+0x214>)
   b42ec:	f002 fb83 	bl	b69f6 <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42f0:	4926      	ldr	r1, [pc, #152]	; (b438c <_Z6setHueibiii+0x238>)
   b42f2:	481d      	ldr	r0, [pc, #116]	; (b4368 <_Z6setHueibiii+0x214>)
   b42f4:	f002 fb8b 	bl	b6a0e <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b42f8:	481b      	ldr	r0, [pc, #108]	; (b4368 <_Z6setHueibiii+0x214>)
   b42fa:	f002 fb7c 	bl	b69f6 <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b42fe:	9900      	ldr	r1, [sp, #0]
   b4300:	4819      	ldr	r0, [pc, #100]	; (b4368 <_Z6setHueibiii+0x214>)
   b4302:	f002 fb84 	bl	b6a0e <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b4306:	f003 f967 	bl	b75d8 <_Z16_fetch_usbserialv>
   b430a:	4921      	ldr	r1, [pc, #132]	; (b4390 <_Z6setHueibiii+0x23c>)
   b430c:	f002 fb7f 	bl	b6a0e <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b4310:	f003 f962 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4314:	4914      	ldr	r1, [pc, #80]	; (b4368 <_Z6setHueibiii+0x214>)
   b4316:	4604      	mov	r4, r0
   b4318:	a808      	add	r0, sp, #32
   b431a:	f002 fcb9 	bl	b6c90 <_ZN6Stream10readStringEv>
   b431e:	9908      	ldr	r1, [sp, #32]
   b4320:	4620      	mov	r0, r4
   b4322:	f002 fb74 	bl	b6a0e <_ZN5Print7printlnEPKc>
   b4326:	a808      	add	r0, sp, #32
   b4328:	f002 fcc6 	bl	b6cb8 <_ZN6StringD1Ev>
    HueClient.stop();
   b432c:	480e      	ldr	r0, [pc, #56]	; (b4368 <_Z6setHueibiii+0x214>)
   b432e:	f003 f837 	bl	b73a0 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b4332:	2401      	movs	r4, #1
   b4334:	e739      	b.n	b41aa <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b4336:	4917      	ldr	r1, [pc, #92]	; (b4394 <_Z6setHueibiii+0x240>)
   b4338:	4668      	mov	r0, sp
   b433a:	f002 fd36 	bl	b6daa <_ZN6StringaSEPKc>
   b433e:	e797      	b.n	b4270 <_Z6setHueibiii+0x11c>
   b4340:	000b819c 	.word	0x000b819c
   b4344:	2003e658 	.word	0x2003e658
   b4348:	2003e660 	.word	0x2003e660
   b434c:	2003e650 	.word	0x2003e650
   b4350:	000b7ee5 	.word	0x000b7ee5
   b4354:	000b7f01 	.word	0x000b7f01
   b4358:	000b7f13 	.word	0x000b7f13
   b435c:	000b7f1b 	.word	0x000b7f1b
   b4360:	000b7f2e 	.word	0x000b7f2e
   b4364:	000bd832 	.word	0x000bd832
   b4368:	2003e5ec 	.word	0x2003e5ec
   b436c:	000b7f30 	.word	0x000b7f30
   b4370:	000b7f47 	.word	0x000b7f47
   b4374:	000b8409 	.word	0x000b8409
   b4378:	000b7f51 	.word	0x000b7f51
   b437c:	000b7f5a 	.word	0x000b7f5a
   b4380:	000b8183 	.word	0x000b8183
   b4384:	000b7f6a 	.word	0x000b7f6a
   b4388:	000b7f71 	.word	0x000b7f71
   b438c:	000b7f82 	.word	0x000b7f82
   b4390:	000b7fa9 	.word	0x000b7fa9
   b4394:	000b7f23 	.word	0x000b7f23
   b4398:	2003e654 	.word	0x2003e654
   b439c:	2003e65c 	.word	0x2003e65c

000b43a0 <_Z8switchONi>:
TCPClient WemoClient;

int wemoPort = 49153;
const char *wemoIP[5] = {"192.168.1.30","192.168.1.31","192.168.1.32","192.168.1.33","192.168.1.34"};

void switchON(int wemo) {
   b43a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  
  String data1;
   b43a2:	4925      	ldr	r1, [pc, #148]	; (b4438 <_Z8switchONi+0x98>)
void switchON(int wemo) {
   b43a4:	4604      	mov	r4, r0
  String data1;
   b43a6:	4668      	mov	r0, sp
   b43a8:	f002 fcd1 	bl	b6d4e <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("SwitchON %i \n",wemo);
   b43ac:	f003 f914 	bl	b75d8 <_Z16_fetch_usbserialv>
   b43b0:	4622      	mov	r2, r4
   b43b2:	4922      	ldr	r1, [pc, #136]	; (b443c <_Z8switchONi+0x9c>)
   b43b4:	f7ff fe9b 	bl	b40ee <_ZN5Print6printfEPKcz>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b43b8:	4921      	ldr	r1, [pc, #132]	; (b4440 <_Z8switchONi+0xa0>)
   b43ba:	4668      	mov	r0, sp
   b43bc:	f002 fd31 	bl	b6e22 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b43c0:	4a20      	ldr	r2, [pc, #128]	; (b4444 <_Z8switchONi+0xa4>)
   b43c2:	4921      	ldr	r1, [pc, #132]	; (b4448 <_Z8switchONi+0xa8>)
   b43c4:	8812      	ldrh	r2, [r2, #0]
   b43c6:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b43ca:	4820      	ldr	r0, [pc, #128]	; (b444c <_Z8switchONi+0xac>)
   b43cc:	2300      	movs	r3, #0
   b43ce:	f002 fe31 	bl	b7034 <_ZN9TCPClient7connectEPKctm>
   b43d2:	b328      	cbz	r0, b4420 <_Z8switchONi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b43d4:	491e      	ldr	r1, [pc, #120]	; (b4450 <_Z8switchONi+0xb0>)
   b43d6:	481d      	ldr	r0, [pc, #116]	; (b444c <_Z8switchONi+0xac>)
   b43d8:	f002 fb19 	bl	b6a0e <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b43dc:	491d      	ldr	r1, [pc, #116]	; (b4454 <_Z8switchONi+0xb4>)
   b43de:	481b      	ldr	r0, [pc, #108]	; (b444c <_Z8switchONi+0xac>)
   b43e0:	f002 fb15 	bl	b6a0e <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b43e4:	491c      	ldr	r1, [pc, #112]	; (b4458 <_Z8switchONi+0xb8>)
   b43e6:	4819      	ldr	r0, [pc, #100]	; (b444c <_Z8switchONi+0xac>)
   b43e8:	f002 fb11 	bl	b6a0e <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b43ec:	491b      	ldr	r1, [pc, #108]	; (b445c <_Z8switchONi+0xbc>)
   b43ee:	4817      	ldr	r0, [pc, #92]	; (b444c <_Z8switchONi+0xac>)
   b43f0:	f002 fb0d 	bl	b6a0e <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b43f4:	491a      	ldr	r1, [pc, #104]	; (b4460 <_Z8switchONi+0xc0>)
   b43f6:	4815      	ldr	r0, [pc, #84]	; (b444c <_Z8switchONi+0xac>)
   b43f8:	f002 faf6 	bl	b69e8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b43fc:	9902      	ldr	r1, [sp, #8]
   b43fe:	4813      	ldr	r0, [pc, #76]	; (b444c <_Z8switchONi+0xac>)
   b4400:	220a      	movs	r2, #10
   b4402:	f002 fb0e 	bl	b6a22 <_ZN5Print11printNumberEmh>
        n += println();
   b4406:	4811      	ldr	r0, [pc, #68]	; (b444c <_Z8switchONi+0xac>)
   b4408:	f002 faf5 	bl	b69f6 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b440c:	480f      	ldr	r0, [pc, #60]	; (b444c <_Z8switchONi+0xac>)
   b440e:	f002 faf2 	bl	b69f6 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b4412:	9900      	ldr	r1, [sp, #0]
   b4414:	480d      	ldr	r0, [pc, #52]	; (b444c <_Z8switchONi+0xac>)
   b4416:	f002 fae7 	bl	b69e8 <_ZN5Print5printEPKc>
        WemoClient.println();
   b441a:	480c      	ldr	r0, [pc, #48]	; (b444c <_Z8switchONi+0xac>)
   b441c:	f002 faeb 	bl	b69f6 <_ZN5Print7printlnEv>
    }

  if (WemoClient.connected()) {
   b4420:	480a      	ldr	r0, [pc, #40]	; (b444c <_Z8switchONi+0xac>)
   b4422:	f002 fe85 	bl	b7130 <_ZN9TCPClient9connectedEv>
   b4426:	b110      	cbz	r0, b442e <_Z8switchONi+0x8e>
     WemoClient.stop();
   b4428:	4808      	ldr	r0, [pc, #32]	; (b444c <_Z8switchONi+0xac>)
   b442a:	f002 ffb9 	bl	b73a0 <_ZN9TCPClient4stopEv>
  String data1;
   b442e:	4668      	mov	r0, sp
   b4430:	f002 fc42 	bl	b6cb8 <_ZN6StringD1Ev>
  }
}
   b4434:	b004      	add	sp, #16
   b4436:	bd10      	pop	{r4, pc}
   b4438:	000b819c 	.word	0x000b819c
   b443c:	000b7fb2 	.word	0x000b7fb2
   b4440:	000b7fc0 	.word	0x000b7fc0
   b4444:	2003e16c 	.word	0x2003e16c
   b4448:	2003e158 	.word	0x2003e158
   b444c:	2003e634 	.word	0x2003e634
   b4450:	000b80ec 	.word	0x000b80ec
   b4454:	000b8114 	.word	0x000b8114
   b4458:	000b813a 	.word	0x000b813a
   b445c:	000b8177 	.word	0x000b8177
   b4460:	000b7f71 	.word	0x000b7f71

000b4464 <_Z9switchOFFi>:

void switchOFF(int wemo){
   b4464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String data1;
   b4466:	4925      	ldr	r1, [pc, #148]	; (b44fc <_Z9switchOFFi+0x98>)
void switchOFF(int wemo){
   b4468:	4604      	mov	r4, r0
  String data1;
   b446a:	4668      	mov	r0, sp
   b446c:	f002 fc6f 	bl	b6d4e <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("switchOFF %i \n",wemo);
   b4470:	f003 f8b2 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4474:	4622      	mov	r2, r4
   b4476:	4922      	ldr	r1, [pc, #136]	; (b4500 <_Z9switchOFFi+0x9c>)
   b4478:	f7ff fe39 	bl	b40ee <_ZN5Print6printfEPKcz>
   b447c:	4921      	ldr	r1, [pc, #132]	; (b4504 <_Z9switchOFFi+0xa0>)
   b447e:	4668      	mov	r0, sp
   b4480:	f002 fccf 	bl	b6e22 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b4484:	4a20      	ldr	r2, [pc, #128]	; (b4508 <_Z9switchOFFi+0xa4>)
   b4486:	4921      	ldr	r1, [pc, #132]	; (b450c <_Z9switchOFFi+0xa8>)
   b4488:	8812      	ldrh	r2, [r2, #0]
   b448a:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b448e:	4820      	ldr	r0, [pc, #128]	; (b4510 <_Z9switchOFFi+0xac>)
   b4490:	2300      	movs	r3, #0
   b4492:	f002 fdcf 	bl	b7034 <_ZN9TCPClient7connectEPKctm>
   b4496:	b328      	cbz	r0, b44e4 <_Z9switchOFFi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b4498:	491e      	ldr	r1, [pc, #120]	; (b4514 <_Z9switchOFFi+0xb0>)
   b449a:	481d      	ldr	r0, [pc, #116]	; (b4510 <_Z9switchOFFi+0xac>)
   b449c:	f002 fab7 	bl	b6a0e <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b44a0:	491d      	ldr	r1, [pc, #116]	; (b4518 <_Z9switchOFFi+0xb4>)
   b44a2:	481b      	ldr	r0, [pc, #108]	; (b4510 <_Z9switchOFFi+0xac>)
   b44a4:	f002 fab3 	bl	b6a0e <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b44a8:	491c      	ldr	r1, [pc, #112]	; (b451c <_Z9switchOFFi+0xb8>)
   b44aa:	4819      	ldr	r0, [pc, #100]	; (b4510 <_Z9switchOFFi+0xac>)
   b44ac:	f002 faaf 	bl	b6a0e <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b44b0:	491b      	ldr	r1, [pc, #108]	; (b4520 <_Z9switchOFFi+0xbc>)
   b44b2:	4817      	ldr	r0, [pc, #92]	; (b4510 <_Z9switchOFFi+0xac>)
   b44b4:	f002 faab 	bl	b6a0e <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b44b8:	491a      	ldr	r1, [pc, #104]	; (b4524 <_Z9switchOFFi+0xc0>)
   b44ba:	4815      	ldr	r0, [pc, #84]	; (b4510 <_Z9switchOFFi+0xac>)
   b44bc:	f002 fa94 	bl	b69e8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b44c0:	9902      	ldr	r1, [sp, #8]
   b44c2:	4813      	ldr	r0, [pc, #76]	; (b4510 <_Z9switchOFFi+0xac>)
   b44c4:	220a      	movs	r2, #10
   b44c6:	f002 faac 	bl	b6a22 <_ZN5Print11printNumberEmh>
        n += println();
   b44ca:	4811      	ldr	r0, [pc, #68]	; (b4510 <_Z9switchOFFi+0xac>)
   b44cc:	f002 fa93 	bl	b69f6 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b44d0:	480f      	ldr	r0, [pc, #60]	; (b4510 <_Z9switchOFFi+0xac>)
   b44d2:	f002 fa90 	bl	b69f6 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b44d6:	9900      	ldr	r1, [sp, #0]
   b44d8:	480d      	ldr	r0, [pc, #52]	; (b4510 <_Z9switchOFFi+0xac>)
   b44da:	f002 fa85 	bl	b69e8 <_ZN5Print5printEPKc>
        WemoClient.println();
   b44de:	480c      	ldr	r0, [pc, #48]	; (b4510 <_Z9switchOFFi+0xac>)
   b44e0:	f002 fa89 	bl	b69f6 <_ZN5Print7printlnEv>
    }
   
  if (WemoClient.connected()) {
   b44e4:	480a      	ldr	r0, [pc, #40]	; (b4510 <_Z9switchOFFi+0xac>)
   b44e6:	f002 fe23 	bl	b7130 <_ZN9TCPClient9connectedEv>
   b44ea:	b110      	cbz	r0, b44f2 <_Z9switchOFFi+0x8e>
     WemoClient.stop();
   b44ec:	4808      	ldr	r0, [pc, #32]	; (b4510 <_Z9switchOFFi+0xac>)
   b44ee:	f002 ff57 	bl	b73a0 <_ZN9TCPClient4stopEv>
  String data1;
   b44f2:	4668      	mov	r0, sp
   b44f4:	f002 fbe0 	bl	b6cb8 <_ZN6StringD1Ev>
  }
}
   b44f8:	b004      	add	sp, #16
   b44fa:	bd10      	pop	{r4, pc}
   b44fc:	000b819c 	.word	0x000b819c
   b4500:	000b818e 	.word	0x000b818e
   b4504:	000b819d 	.word	0x000b819d
   b4508:	2003e16c 	.word	0x2003e16c
   b450c:	2003e158 	.word	0x2003e158
   b4510:	2003e634 	.word	0x2003e634
   b4514:	000b80ec 	.word	0x000b80ec
   b4518:	000b8114 	.word	0x000b8114
   b451c:	000b813a 	.word	0x000b813a
   b4520:	000b8177 	.word	0x000b8177
   b4524:	000b7f71 	.word	0x000b7f71

000b4528 <setup>:
// /*The MPU6050 combines a 3-axis gyroscope and a 3-axis accelerometer on the same silicon die together 
//     with an onboard Digital Motion Processor(DMP) which processes complex 6-axis MotionFusion algorithms.*/



void setup() {
   b4528:	b538      	push	{r3, r4, r5, lr}
    Serial.begin(9600);
   b452a:	f003 f855 	bl	b75d8 <_Z16_fetch_usbserialv>
   b452e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4532:	f003 f841 	bl	b75b8 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4536:	2000      	movs	r0, #0
   b4538:	f001 fdba 	bl	b60b0 <hal_timer_millis>
        while (_while() && !_condition()) {
   b453c:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4540:	4604      	mov	r4, r0
   b4542:	2000      	movs	r0, #0
   b4544:	f001 fdb4 	bl	b60b0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4548:	1b00      	subs	r0, r0, r4
   b454a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b454e:	42a8      	cmp	r0, r5
   b4550:	f171 0300 	sbcs.w	r3, r1, #0
   b4554:	d207      	bcs.n	b4566 <setup+0x3e>
    waitFor(Serial.isConnected, 10000);
   b4556:	f003 f83f 	bl	b75d8 <_Z16_fetch_usbserialv>
   b455a:	f003 f831 	bl	b75c0 <_ZN9USBSerial11isConnectedEv>
   b455e:	b910      	cbnz	r0, b4566 <setup+0x3e>
            spark_process();
   b4560:	f001 ff82 	bl	b6468 <spark_process>
        while (_while() && !_condition()) {
   b4564:	e7ed      	b.n	b4542 <setup+0x1a>
   b4566:	f003 f837 	bl	b75d8 <_Z16_fetch_usbserialv>
   b456a:	f003 f829 	bl	b75c0 <_ZN9USBSerial11isConnectedEv>
    // }
    // delay(1000);
    // Serial.printf("\n\n");

//NEOPIXEL
    pixel.begin();
   b456e:	4808      	ldr	r0, [pc, #32]	; (b4590 <setup+0x68>)
   b4570:	f000 fddf 	bl	b5132 <_ZN17Adafruit_NeoPixel5beginEv>
    pixel.show();
   b4574:	4806      	ldr	r0, [pc, #24]	; (b4590 <setup+0x68>)
   b4576:	f000 fe15 	bl	b51a4 <_ZN17Adafruit_NeoPixel4showEv>

//OLED
    myDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b457a:	4806      	ldr	r0, [pc, #24]	; (b4594 <setup+0x6c>)
   b457c:	223c      	movs	r2, #60	; 0x3c
   b457e:	2102      	movs	r1, #2
   b4580:	f001 fc96 	bl	b5eb0 <_ZN16Adafruit_SSD13065beginEhh>
	myDisplay.clearDisplay();
}
   b4584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	myDisplay.clearDisplay();
   b4588:	4802      	ldr	r0, [pc, #8]	; (b4594 <setup+0x6c>)
   b458a:	f001 bba9 	b.w	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b458e:	bf00      	nop
   b4590:	2003e69c 	.word	0x2003e69c
   b4594:	2003e678 	.word	0x2003e678

000b4598 <loop>:



//////////BEGIN/////////

void loop() {
   b4598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//Display DnD Title on the OLED
    myDisplay.setRotation(2); //0-3
   b459c:	48c4      	ldr	r0, [pc, #784]	; (b48b0 <loop+0x318>)





    if(roll==1) {
   b459e:	4dc5      	ldr	r5, [pc, #788]	; (b48b4 <loop+0x31c>)
void loop() {
   b45a0:	b085      	sub	sp, #20
    myDisplay.setRotation(2); //0-3
   b45a2:	2102      	movs	r1, #2
   b45a4:	f001 f9af 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
    myDisplay.setCursor(0,0);
   b45a8:	2200      	movs	r2, #0
   b45aa:	4611      	mov	r1, r2
   b45ac:	48c0      	ldr	r0, [pc, #768]	; (b48b0 <loop+0x318>)
   b45ae:	f001 f99d 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
  	myDisplay.drawBitmap(0, 0, dNdTitle, 128, 64, WHITE);
   b45b2:	2401      	movs	r4, #1
   b45b4:	2200      	movs	r2, #0
   b45b6:	2740      	movs	r7, #64	; 0x40
   b45b8:	2680      	movs	r6, #128	; 0x80
   b45ba:	4bbf      	ldr	r3, [pc, #764]	; (b48b8 <loop+0x320>)
   b45bc:	48bc      	ldr	r0, [pc, #752]	; (b48b0 <loop+0x318>)
   b45be:	9600      	str	r6, [sp, #0]
   b45c0:	4611      	mov	r1, r2
   b45c2:	e9cd 7401 	strd	r7, r4, [sp, #4]
   b45c6:	f001 f88d 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
	myDisplay.display();
   b45ca:	48b9      	ldr	r0, [pc, #740]	; (b48b0 <loop+0x318>)
   b45cc:	f001 fc00 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
    delay(1000);
   b45d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b45d4:	f001 fff0 	bl	b65b8 <delay>
    myDisplay.clearDisplay();
   b45d8:	48b5      	ldr	r0, [pc, #724]	; (b48b0 <loop+0x318>)
   b45da:	f001 fb81 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
            myDisplay.setRotation(2); //0-3
   b45de:	48b4      	ldr	r0, [pc, #720]	; (b48b0 <loop+0x318>)
   b45e0:	2102      	movs	r1, #2
   b45e2:	f001 f990 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
            myDisplay.setCursor(0,0);
   b45e6:	2200      	movs	r2, #0
   b45e8:	4611      	mov	r1, r2
   b45ea:	48b1      	ldr	r0, [pc, #708]	; (b48b0 <loop+0x318>)
   b45ec:	f001 f97e 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
            myDisplay.drawBitmap(0, 0, inTime, 128, 64, WHITE);
   b45f0:	2200      	movs	r2, #0
   b45f2:	4bb2      	ldr	r3, [pc, #712]	; (b48bc <loop+0x324>)
   b45f4:	48ae      	ldr	r0, [pc, #696]	; (b48b0 <loop+0x318>)
   b45f6:	9600      	str	r6, [sp, #0]
   b45f8:	4611      	mov	r1, r2
   b45fa:	e9cd 7401 	strd	r7, r4, [sp, #4]
   b45fe:	f001 f871 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
            myDisplay.display();
   b4602:	48ab      	ldr	r0, [pc, #684]	; (b48b0 <loop+0x318>)
   b4604:	f001 fbe4 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
            delay(1000);
   b4608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b460c:	f001 ffd4 	bl	b65b8 <delay>
            myDisplay.clearDisplay();
   b4610:	48a7      	ldr	r0, [pc, #668]	; (b48b0 <loop+0x318>)
   b4612:	f001 fb65 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
            myDisplay.setRotation(2); //0-3
   b4616:	48a6      	ldr	r0, [pc, #664]	; (b48b0 <loop+0x318>)
   b4618:	2102      	movs	r1, #2
   b461a:	f001 f974 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
            myDisplay.setCursor(0,0);
   b461e:	2200      	movs	r2, #0
   b4620:	4611      	mov	r1, r2
   b4622:	48a3      	ldr	r0, [pc, #652]	; (b48b0 <loop+0x318>)
   b4624:	f001 f962 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
            myDisplay.drawBitmap(0, 0, ready, 128, 64, WHITE);
   b4628:	2200      	movs	r2, #0
   b462a:	4ba5      	ldr	r3, [pc, #660]	; (b48c0 <loop+0x328>)
   b462c:	48a0      	ldr	r0, [pc, #640]	; (b48b0 <loop+0x318>)
   b462e:	9600      	str	r6, [sp, #0]
   b4630:	4611      	mov	r1, r2
   b4632:	e9cd 7401 	strd	r7, r4, [sp, #4]
   b4636:	f001 f855 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
            myDisplay.display();
   b463a:	489d      	ldr	r0, [pc, #628]	; (b48b0 <loop+0x318>)
   b463c:	f001 fbc8 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
            delay(1000);
   b4640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4644:	f001 ffb8 	bl	b65b8 <delay>
            myDisplay.clearDisplay();
   b4648:	4899      	ldr	r0, [pc, #612]	; (b48b0 <loop+0x318>)
   b464a:	f001 fb49 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    myDisplay.setRotation(3); //0-3
   b464e:	4898      	ldr	r0, [pc, #608]	; (b48b0 <loop+0x318>)
   b4650:	2103      	movs	r1, #3
   b4652:	f001 f958 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
    myDisplay.setCursor(10,1);
   b4656:	4622      	mov	r2, r4
   b4658:	4895      	ldr	r0, [pc, #596]	; (b48b0 <loop+0x318>)
   b465a:	210a      	movs	r1, #10
   b465c:	f001 f946 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
  	myDisplay.drawBitmap(0, 0, fSocietyBitmap, 64, 128, WHITE);
   b4660:	2200      	movs	r2, #0
   b4662:	4611      	mov	r1, r2
   b4664:	4b97      	ldr	r3, [pc, #604]	; (b48c4 <loop+0x32c>)
   b4666:	4892      	ldr	r0, [pc, #584]	; (b48b0 <loop+0x318>)
   b4668:	9700      	str	r7, [sp, #0]
   b466a:	e9cd 6401 	strd	r6, r4, [sp, #4]
   b466e:	f001 f839 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
	myDisplay.display();
   b4672:	488f      	ldr	r0, [pc, #572]	; (b48b0 <loop+0x318>)
   b4674:	f001 fbac 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
    delay(1000);
   b4678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b467c:	f001 ff9c 	bl	b65b8 <delay>
    myDisplay.clearDisplay();
   b4680:	488b      	ldr	r0, [pc, #556]	; (b48b0 <loop+0x318>)
   b4682:	f001 fb2d 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    myDisplay.setTextSize(1);
   b4686:	4621      	mov	r1, r4
   b4688:	4889      	ldr	r0, [pc, #548]	; (b48b0 <loop+0x318>)
   b468a:	f001 f932 	bl	b58f2 <_ZN12Adafruit_GFX11setTextSizeEh>
    myDisplay.setTextColor(WHITE);
   b468e:	4621      	mov	r1, r4
   b4690:	4887      	ldr	r0, [pc, #540]	; (b48b0 <loop+0x318>)
   b4692:	f001 f933 	bl	b58fc <_ZN12Adafruit_GFX12setTextColorEt>
    myDisplay.printf("Is\nTesting\nYou.\n");
   b4696:	498c      	ldr	r1, [pc, #560]	; (b48c8 <loop+0x330>)
   b4698:	4885      	ldr	r0, [pc, #532]	; (b48b0 <loop+0x318>)
   b469a:	f7ff fd28 	bl	b40ee <_ZN5Print6printfEPKcz>
    myDisplay.display();
   b469e:	4884      	ldr	r0, [pc, #528]	; (b48b0 <loop+0x318>)
   b46a0:	f001 fb96 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
    delay(1000);
   b46a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b46a8:	f001 ff86 	bl	b65b8 <delay>
    myDisplay.clearDisplay();
   b46ac:	4880      	ldr	r0, [pc, #512]	; (b48b0 <loop+0x318>)
   b46ae:	f001 fb17 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    if(roll==1) {
   b46b2:	682c      	ldr	r4, [r5, #0]
   b46b4:	2c01      	cmp	r4, #1
   b46b6:	f040 848b 	bne.w	b4fd0 <loop+0xa38>

// 1 Red Flickering Lights, DOOM!
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b46ba:	487d      	ldr	r0, [pc, #500]	; (b48b0 <loop+0x318>)
        switchOFF(MRWEMO);
        delay(10000);

        hueOnOff = true;
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b46bc:	f8df 9228 	ldr.w	r9, [pc, #552]	; b48e8 <loop+0x350>
        myDisplay.setRotation(2); //0-3
   b46c0:	2102      	movs	r1, #2
   b46c2:	f001 f920 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b46c6:	2200      	movs	r2, #0
   b46c8:	4611      	mov	r1, r2
   b46ca:	4879      	ldr	r0, [pc, #484]	; (b48b0 <loop+0x318>)
   b46cc:	f001 f90e 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, rip, 128, 64, WHITE);
   b46d0:	2200      	movs	r2, #0
   b46d2:	4b7e      	ldr	r3, [pc, #504]	; (b48cc <loop+0x334>)
   b46d4:	4876      	ldr	r0, [pc, #472]	; (b48b0 <loop+0x318>)
   b46d6:	9600      	str	r6, [sp, #0]
   b46d8:	4611      	mov	r1, r2
   b46da:	e9cd 7401 	strd	r7, r4, [sp, #4]
   b46de:	f001 f801 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b46e2:	4873      	ldr	r0, [pc, #460]	; (b48b0 <loop+0x318>)
        hueOnOff = true;
   b46e4:	4e7a      	ldr	r6, [pc, #488]	; (b48d0 <loop+0x338>)
        myDisplay.display();
   b46e6:	f001 fb73 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b46ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b46ee:	f001 ff63 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b46f2:	486f      	ldr	r0, [pc, #444]	; (b48b0 <loop+0x318>)
   b46f4:	f001 faf4 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
        Serial.printf("Turniing on MRWEMO #%i\n", MRWEMO);
   b46f8:	f002 ff6e 	bl	b75d8 <_Z16_fetch_usbserialv>
   b46fc:	4975      	ldr	r1, [pc, #468]	; (b48d4 <loop+0x33c>)
   b46fe:	2203      	movs	r2, #3
   b4700:	f7ff fcf5 	bl	b40ee <_ZN5Print6printfEPKcz>
        switchON(MRWEMO);
   b4704:	2003      	movs	r0, #3
   b4706:	f7ff fe4b 	bl	b43a0 <_Z8switchONi>
        delay(10000);
   b470a:	f242 7010 	movw	r0, #10000	; 0x2710
   b470e:	f001 ff53 	bl	b65b8 <delay>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b4712:	f002 ff61 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4716:	4970      	ldr	r1, [pc, #448]	; (b48d8 <loop+0x340>)
   b4718:	2203      	movs	r2, #3
   b471a:	f7ff fce8 	bl	b40ee <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b471e:	2003      	movs	r0, #3
   b4720:	f7ff fea0 	bl	b4464 <_Z9switchOFFi>
        delay(10000);
   b4724:	f242 7010 	movw	r0, #10000	; 0x2710
   b4728:	f001 ff46 	bl	b65b8 <delay>
        hueOnOff = true;
   b472c:	7034      	strb	r4, [r6, #0]
            setHue(1, hueOnOff, HueRed, i, 255);
   b472e:	4c6b      	ldr	r4, [pc, #428]	; (b48dc <loop+0x344>)
        for(int i=255; i>=0; i=i-100) {
   b4730:	f04f 08ff 	mov.w	r8, #255	; 0xff
            setHue(1, hueOnOff, HueRed, i, 255);
   b4734:	27ff      	movs	r7, #255	; 0xff
            Serial.printf("turning on the light\n");
   b4736:	f002 ff4f 	bl	b75d8 <_Z16_fetch_usbserialv>
   b473a:	4649      	mov	r1, r9
   b473c:	f7ff fcd7 	bl	b40ee <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b4740:	9700      	str	r7, [sp, #0]
   b4742:	4643      	mov	r3, r8
   b4744:	6822      	ldr	r2, [r4, #0]
   b4746:	7831      	ldrb	r1, [r6, #0]
   b4748:	2001      	movs	r0, #1
   b474a:	f7ff fd03 	bl	b4154 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b474e:	9700      	str	r7, [sp, #0]
   b4750:	4643      	mov	r3, r8
   b4752:	6822      	ldr	r2, [r4, #0]
   b4754:	7831      	ldrb	r1, [r6, #0]
   b4756:	2002      	movs	r0, #2
   b4758:	f7ff fcfc 	bl	b4154 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b475c:	9700      	str	r7, [sp, #0]
   b475e:	4643      	mov	r3, r8
   b4760:	6822      	ldr	r2, [r4, #0]
   b4762:	7831      	ldrb	r1, [r6, #0]
   b4764:	2003      	movs	r0, #3
   b4766:	f7ff fcf5 	bl	b4154 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b476a:	9700      	str	r7, [sp, #0]
   b476c:	4643      	mov	r3, r8
   b476e:	6822      	ldr	r2, [r4, #0]
   b4770:	7831      	ldrb	r1, [r6, #0]
   b4772:	2004      	movs	r0, #4
   b4774:	f7ff fcee 	bl	b4154 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b4778:	9700      	str	r7, [sp, #0]
   b477a:	4643      	mov	r3, r8
   b477c:	6822      	ldr	r2, [r4, #0]
   b477e:	7831      	ldrb	r1, [r6, #0]
   b4780:	2005      	movs	r0, #5
   b4782:	f7ff fce7 	bl	b4154 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b4786:	9700      	str	r7, [sp, #0]
   b4788:	4643      	mov	r3, r8
   b478a:	6822      	ldr	r2, [r4, #0]
   b478c:	7831      	ldrb	r1, [r6, #0]
   b478e:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b4790:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b4794:	f7ff fcde 	bl	b4154 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b4798:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b479c:	d1ca      	bne.n	b4734 <loop+0x19c>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b479e:	f8df 9148 	ldr.w	r9, [pc, #328]	; b48e8 <loop+0x350>
        for(int i=0; i<=255; i=i+100) {
   b47a2:	f04f 0800 	mov.w	r8, #0
            Serial.printf("turning on the light\n");
   b47a6:	f002 ff17 	bl	b75d8 <_Z16_fetch_usbserialv>
   b47aa:	4649      	mov	r1, r9
   b47ac:	f7ff fc9f 	bl	b40ee <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b47b0:	9700      	str	r7, [sp, #0]
   b47b2:	4643      	mov	r3, r8
   b47b4:	6822      	ldr	r2, [r4, #0]
   b47b6:	7831      	ldrb	r1, [r6, #0]
   b47b8:	2001      	movs	r0, #1
   b47ba:	f7ff fccb 	bl	b4154 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b47be:	9700      	str	r7, [sp, #0]
   b47c0:	4643      	mov	r3, r8
   b47c2:	6822      	ldr	r2, [r4, #0]
   b47c4:	7831      	ldrb	r1, [r6, #0]
   b47c6:	2002      	movs	r0, #2
   b47c8:	f7ff fcc4 	bl	b4154 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b47cc:	9700      	str	r7, [sp, #0]
   b47ce:	4643      	mov	r3, r8
   b47d0:	6822      	ldr	r2, [r4, #0]
   b47d2:	7831      	ldrb	r1, [r6, #0]
   b47d4:	2003      	movs	r0, #3
   b47d6:	f7ff fcbd 	bl	b4154 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b47da:	9700      	str	r7, [sp, #0]
   b47dc:	4643      	mov	r3, r8
   b47de:	6822      	ldr	r2, [r4, #0]
   b47e0:	7831      	ldrb	r1, [r6, #0]
   b47e2:	2004      	movs	r0, #4
   b47e4:	f7ff fcb6 	bl	b4154 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b47e8:	9700      	str	r7, [sp, #0]
   b47ea:	4643      	mov	r3, r8
   b47ec:	6822      	ldr	r2, [r4, #0]
   b47ee:	7831      	ldrb	r1, [r6, #0]
   b47f0:	2005      	movs	r0, #5
   b47f2:	f7ff fcaf 	bl	b4154 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b47f6:	9700      	str	r7, [sp, #0]
   b47f8:	4643      	mov	r3, r8
   b47fa:	6822      	ldr	r2, [r4, #0]
   b47fc:	7831      	ldrb	r1, [r6, #0]
   b47fe:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b4800:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b4804:	f7ff fca6 	bl	b4154 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b4808:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b480c:	d1cb      	bne.n	b47a6 <loop+0x20e>
        }

        hueOnOff = false;
   b480e:	2300      	movs	r3, #0
   b4810:	7033      	strb	r3, [r6, #0]
        Serial.printf("turning off the light");
   b4812:	f002 fee1 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4816:	4932      	ldr	r1, [pc, #200]	; (b48e0 <loop+0x348>)
   b4818:	f7ff fc69 	bl	b40ee <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b481c:	9700      	str	r7, [sp, #0]
   b481e:	6822      	ldr	r2, [r4, #0]
   b4820:	7831      	ldrb	r1, [r6, #0]
   b4822:	23ff      	movs	r3, #255	; 0xff
   b4824:	2001      	movs	r0, #1
   b4826:	f7ff fc95 	bl	b4154 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b482a:	9700      	str	r7, [sp, #0]
   b482c:	6822      	ldr	r2, [r4, #0]
   b482e:	7831      	ldrb	r1, [r6, #0]
   b4830:	23ff      	movs	r3, #255	; 0xff
   b4832:	2002      	movs	r0, #2
   b4834:	f7ff fc8e 	bl	b4154 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b4838:	9700      	str	r7, [sp, #0]
   b483a:	6822      	ldr	r2, [r4, #0]
   b483c:	7831      	ldrb	r1, [r6, #0]
   b483e:	23ff      	movs	r3, #255	; 0xff
   b4840:	2003      	movs	r0, #3
   b4842:	f7ff fc87 	bl	b4154 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b4846:	9700      	str	r7, [sp, #0]
   b4848:	6822      	ldr	r2, [r4, #0]
   b484a:	7831      	ldrb	r1, [r6, #0]
   b484c:	23ff      	movs	r3, #255	; 0xff
   b484e:	2004      	movs	r0, #4
   b4850:	f7ff fc80 	bl	b4154 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b4854:	9700      	str	r7, [sp, #0]
   b4856:	6822      	ldr	r2, [r4, #0]
   b4858:	7831      	ldrb	r1, [r6, #0]
   b485a:	23ff      	movs	r3, #255	; 0xff
   b485c:	2005      	movs	r0, #5
   b485e:	f7ff fc79 	bl	b4154 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b4862:	9700      	str	r7, [sp, #0]
   b4864:	23ff      	movs	r3, #255	; 0xff
   b4866:	6822      	ldr	r2, [r4, #0]
   b4868:	7831      	ldrb	r1, [r6, #0]
   b486a:	2006      	movs	r0, #6
   b486c:	f7ff fc72 	bl	b4154 <_Z6setHueibiii>
        delay(10000);
   b4870:	f242 7010 	movw	r0, #10000	; 0x2710
   b4874:	f001 fea0 	bl	b65b8 <delay>

//HUE SETTINGS
// 1 Red Flickering Lights, DOOM!
        roll=2;
   b4878:	2302      	movs	r3, #2
   b487a:	602b      	str	r3, [r5, #0]


    if(roll==2) {
//2 Red & Orange Flame Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b487c:	480c      	ldr	r0, [pc, #48]	; (b48b0 <loop+0x318>)
   b487e:	2102      	movs	r1, #2
   b4880:	f001 f841 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4884:	2200      	movs	r2, #0
   b4886:	4611      	mov	r1, r2
   b4888:	4809      	ldr	r0, [pc, #36]	; (b48b0 <loop+0x318>)
   b488a:	f001 f82f 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, uhOh, 128, 64, WHITE);
   b488e:	2701      	movs	r7, #1
   b4890:	2340      	movs	r3, #64	; 0x40
   b4892:	2200      	movs	r2, #0
   b4894:	e9cd 3701 	strd	r3, r7, [sp, #4]
   b4898:	2380      	movs	r3, #128	; 0x80
   b489a:	4611      	mov	r1, r2
   b489c:	4804      	ldr	r0, [pc, #16]	; (b48b0 <loop+0x318>)
   b489e:	9300      	str	r3, [sp, #0]
   b48a0:	4b10      	ldr	r3, [pc, #64]	; (b48e4 <loop+0x34c>)
   b48a2:	f000 ff1f 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b48a6:	4802      	ldr	r0, [pc, #8]	; (b48b0 <loop+0x318>)
   b48a8:	f001 fa92 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
   b48ac:	e01e      	b.n	b48ec <loop+0x354>
   b48ae:	bf00      	nop
   b48b0:	2003e678 	.word	0x2003e678
   b48b4:	2003e6b0 	.word	0x2003e6b0
   b48b8:	000bc832 	.word	0x000bc832
   b48bc:	000bc432 	.word	0x000bc432
   b48c0:	000bb432 	.word	0x000bb432
   b48c4:	000b8c32 	.word	0x000b8c32
   b48c8:	000b82c9 	.word	0x000b82c9
   b48cc:	000b9432 	.word	0x000b9432
   b48d0:	2003e674 	.word	0x2003e674
   b48d4:	000b82da 	.word	0x000b82da
   b48d8:	000b82f2 	.word	0x000b82f2
   b48dc:	2003e624 	.word	0x2003e624
   b48e0:	000b8321 	.word	0x000b8321
   b48e4:	000ba032 	.word	0x000ba032
   b48e8:	000b830b 	.word	0x000b830b
        delay(3000);
   b48ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b48f0:	f001 fe62 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b48f4:	48cb      	ldr	r0, [pc, #812]	; (b4c24 <loop+0x68c>)
   b48f6:	f001 f9f3 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//2 Red & Orange Flame Lights

//HUE SETTINGS
// 2 Red & Orange Flame Lights
        roll=3;
   b48fa:	2303      	movs	r3, #3
   b48fc:	602b      	str	r3, [r5, #0]


    if(roll==3) {
//3 Yellow Flame Light
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b48fe:	48c9      	ldr	r0, [pc, #804]	; (b4c24 <loop+0x68c>)
   b4900:	2102      	movs	r1, #2
   b4902:	f001 f800 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4906:	2200      	movs	r2, #0
   b4908:	4611      	mov	r1, r2
   b490a:	48c6      	ldr	r0, [pc, #792]	; (b4c24 <loop+0x68c>)
   b490c:	f000 ffee 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, messenger, 128, 64, WHITE);
   b4910:	2601      	movs	r6, #1
   b4912:	2340      	movs	r3, #64	; 0x40
   b4914:	2200      	movs	r2, #0
   b4916:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b491a:	2380      	movs	r3, #128	; 0x80
   b491c:	4611      	mov	r1, r2
   b491e:	48c1      	ldr	r0, [pc, #772]	; (b4c24 <loop+0x68c>)
   b4920:	9300      	str	r3, [sp, #0]
   b4922:	4bc1      	ldr	r3, [pc, #772]	; (b4c28 <loop+0x690>)
   b4924:	f000 fede 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4928:	48be      	ldr	r0, [pc, #760]	; (b4c24 <loop+0x68c>)
   b492a:	f001 fa51 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b492e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4932:	f001 fe41 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4936:	48bb      	ldr	r0, [pc, #748]	; (b4c24 <loop+0x68c>)
   b4938:	f001 f9d2 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//3 Yellow Flame Light

//HUE SETTINGS
// 3 Yellow Flame Light
        roll=4;
   b493c:	2304      	movs	r3, #4
   b493e:	602b      	str	r3, [r5, #0]


    if(roll==4) {
// 4 Red & Magenta Flickering Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4940:	48b8      	ldr	r0, [pc, #736]	; (b4c24 <loop+0x68c>)
   b4942:	2102      	movs	r1, #2
   b4944:	f000 ffdf 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4948:	2200      	movs	r2, #0
   b494a:	4611      	mov	r1, r2
   b494c:	48b5      	ldr	r0, [pc, #724]	; (b4c24 <loop+0x68c>)
   b494e:	f000 ffcd 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, niceKnowingYou, 128, 64, WHITE);
   b4952:	2401      	movs	r4, #1
   b4954:	2340      	movs	r3, #64	; 0x40
   b4956:	2200      	movs	r2, #0
   b4958:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b495c:	2380      	movs	r3, #128	; 0x80
   b495e:	4611      	mov	r1, r2
   b4960:	48b0      	ldr	r0, [pc, #704]	; (b4c24 <loop+0x68c>)
   b4962:	9300      	str	r3, [sp, #0]
   b4964:	4bb1      	ldr	r3, [pc, #708]	; (b4c2c <loop+0x694>)
   b4966:	f000 febd 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b496a:	48ae      	ldr	r0, [pc, #696]	; (b4c24 <loop+0x68c>)
   b496c:	f001 fa30 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4970:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4974:	f001 fe20 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4978:	48aa      	ldr	r0, [pc, #680]	; (b4c24 <loop+0x68c>)
   b497a:	f001 f9b1 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//4 Red & Magenta Flickering Lights

//HUE SETTINGS
// 4 Red & Magenta Flickering Lights
        roll=5;
   b497e:	2305      	movs	r3, #5
   b4980:	602b      	str	r3, [r5, #0]


    if(roll==5) {
//5 Yellow & Red Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4982:	48a8      	ldr	r0, [pc, #672]	; (b4c24 <loop+0x68c>)
   b4984:	2102      	movs	r1, #2
   b4986:	f000 ffbe 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b498a:	2200      	movs	r2, #0
   b498c:	4611      	mov	r1, r2
   b498e:	48a5      	ldr	r0, [pc, #660]	; (b4c24 <loop+0x68c>)
   b4990:	f000 ffac 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, maybeNextTime, 128, 64, WHITE);
   b4994:	2340      	movs	r3, #64	; 0x40
   b4996:	2001      	movs	r0, #1
   b4998:	2200      	movs	r2, #0
   b499a:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b499e:	2380      	movs	r3, #128	; 0x80
   b49a0:	4611      	mov	r1, r2
   b49a2:	48a0      	ldr	r0, [pc, #640]	; (b4c24 <loop+0x68c>)
   b49a4:	9300      	str	r3, [sp, #0]
   b49a6:	4ba2      	ldr	r3, [pc, #648]	; (b4c30 <loop+0x698>)
   b49a8:	f000 fe9c 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b49ac:	489d      	ldr	r0, [pc, #628]	; (b4c24 <loop+0x68c>)
   b49ae:	f001 fa0f 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b49b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b49b6:	f001 fdff 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b49ba:	489a      	ldr	r0, [pc, #616]	; (b4c24 <loop+0x68c>)
   b49bc:	f001 f990 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//5 Yellow & Red Lights

//HUE SETTINGS
// 5 Yellow & Red Lights
        roll=6;
   b49c0:	2306      	movs	r3, #6
   b49c2:	602b      	str	r3, [r5, #0]


    if(roll==6) {
//6 Red & Cyan Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b49c4:	4897      	ldr	r0, [pc, #604]	; (b4c24 <loop+0x68c>)
   b49c6:	2102      	movs	r1, #2
   b49c8:	f000 ff9d 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b49cc:	2200      	movs	r2, #0
   b49ce:	4611      	mov	r1, r2
   b49d0:	4894      	ldr	r0, [pc, #592]	; (b4c24 <loop+0x68c>)
   b49d2:	f000 ff8b 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, again, 128, 64, WHITE);
   b49d6:	2340      	movs	r3, #64	; 0x40
   b49d8:	2101      	movs	r1, #1
   b49da:	2200      	movs	r2, #0
   b49dc:	e9cd 3101 	strd	r3, r1, [sp, #4]
   b49e0:	2380      	movs	r3, #128	; 0x80
   b49e2:	4611      	mov	r1, r2
   b49e4:	488f      	ldr	r0, [pc, #572]	; (b4c24 <loop+0x68c>)
   b49e6:	9300      	str	r3, [sp, #0]
   b49e8:	4b92      	ldr	r3, [pc, #584]	; (b4c34 <loop+0x69c>)
   b49ea:	f000 fe7b 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b49ee:	488d      	ldr	r0, [pc, #564]	; (b4c24 <loop+0x68c>)
   b49f0:	f001 f9ee 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b49f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b49f8:	f001 fdde 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b49fc:	4889      	ldr	r0, [pc, #548]	; (b4c24 <loop+0x68c>)
   b49fe:	f001 f96f 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//6 Red & Cyan Lights

//HUE SETTINGS
// 6 Red & Cyan Lights
        roll=7;
   b4a02:	2307      	movs	r3, #7
   b4a04:	602b      	str	r3, [r5, #0]


    if(roll==7) {
//7 Green & Yellow Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4a06:	4887      	ldr	r0, [pc, #540]	; (b4c24 <loop+0x68c>)
   b4a08:	2102      	movs	r1, #2
   b4a0a:	f000 ff7c 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4a0e:	2200      	movs	r2, #0
   b4a10:	4611      	mov	r1, r2
   b4a12:	4884      	ldr	r0, [pc, #528]	; (b4c24 <loop+0x68c>)
   b4a14:	f000 ff6a 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, welp, 128, 64, WHITE);
   b4a18:	2340      	movs	r3, #64	; 0x40
   b4a1a:	2201      	movs	r2, #1
   b4a1c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4a20:	2200      	movs	r2, #0
   b4a22:	2380      	movs	r3, #128	; 0x80
   b4a24:	4611      	mov	r1, r2
   b4a26:	487f      	ldr	r0, [pc, #508]	; (b4c24 <loop+0x68c>)
   b4a28:	9300      	str	r3, [sp, #0]
   b4a2a:	4b83      	ldr	r3, [pc, #524]	; (b4c38 <loop+0x6a0>)
   b4a2c:	f000 fe5a 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4a30:	487c      	ldr	r0, [pc, #496]	; (b4c24 <loop+0x68c>)
   b4a32:	f001 f9cd 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4a36:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4a3a:	f001 fdbd 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4a3e:	4879      	ldr	r0, [pc, #484]	; (b4c24 <loop+0x68c>)
   b4a40:	f001 f94e 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//7 Green & Yellow Lights

//HUE SETTINGS
// 7 Green & Yellow Lights
        roll=8;
   b4a44:	2308      	movs	r3, #8
   b4a46:	602b      	str	r3, [r5, #0]


    if(roll==8) {
//8 Blue, Green & Yellow Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4a48:	4876      	ldr	r0, [pc, #472]	; (b4c24 <loop+0x68c>)
   b4a4a:	2102      	movs	r1, #2
   b4a4c:	f000 ff5b 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4a50:	2200      	movs	r2, #0
   b4a52:	4611      	mov	r1, r2
   b4a54:	4873      	ldr	r0, [pc, #460]	; (b4c24 <loop+0x68c>)
   b4a56:	f000 ff49 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, lame, 128, 64, WHITE);
   b4a5a:	f04f 0b01 	mov.w	fp, #1
   b4a5e:	2340      	movs	r3, #64	; 0x40
   b4a60:	2200      	movs	r2, #0
   b4a62:	e9cd 3b01 	strd	r3, fp, [sp, #4]
   b4a66:	2380      	movs	r3, #128	; 0x80
   b4a68:	4611      	mov	r1, r2
   b4a6a:	486e      	ldr	r0, [pc, #440]	; (b4c24 <loop+0x68c>)
   b4a6c:	9300      	str	r3, [sp, #0]
   b4a6e:	4b73      	ldr	r3, [pc, #460]	; (b4c3c <loop+0x6a4>)
   b4a70:	f000 fe38 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4a74:	486b      	ldr	r0, [pc, #428]	; (b4c24 <loop+0x68c>)
   b4a76:	f001 f9ab 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4a7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4a7e:	f001 fd9b 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4a82:	4868      	ldr	r0, [pc, #416]	; (b4c24 <loop+0x68c>)
   b4a84:	f001 f92c 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//8 Blue, Green & Yellow Lights

//HUE SETTINGS
// 8 Blue, Green & Yellow Lights
        roll=9;
   b4a88:	2309      	movs	r3, #9
   b4a8a:	602b      	str	r3, [r5, #0]


    if(roll==9) {
//9 Orange & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4a8c:	4865      	ldr	r0, [pc, #404]	; (b4c24 <loop+0x68c>)
   b4a8e:	2102      	movs	r1, #2
   b4a90:	f000 ff39 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4a94:	2200      	movs	r2, #0
   b4a96:	4611      	mov	r1, r2
   b4a98:	4862      	ldr	r0, [pc, #392]	; (b4c24 <loop+0x68c>)
   b4a9a:	f000 ff27 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, pray, 128, 64, WHITE);
   b4a9e:	f04f 0a01 	mov.w	sl, #1
   b4aa2:	2340      	movs	r3, #64	; 0x40
   b4aa4:	2200      	movs	r2, #0
   b4aa6:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   b4aaa:	2380      	movs	r3, #128	; 0x80
   b4aac:	4611      	mov	r1, r2
   b4aae:	485d      	ldr	r0, [pc, #372]	; (b4c24 <loop+0x68c>)
   b4ab0:	9300      	str	r3, [sp, #0]
   b4ab2:	4b63      	ldr	r3, [pc, #396]	; (b4c40 <loop+0x6a8>)
   b4ab4:	f000 fe16 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4ab8:	485a      	ldr	r0, [pc, #360]	; (b4c24 <loop+0x68c>)
   b4aba:	f001 f989 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4abe:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4ac2:	f001 fd79 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4ac6:	4857      	ldr	r0, [pc, #348]	; (b4c24 <loop+0x68c>)
   b4ac8:	f001 f90a 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//9 Orange & Green Lights

//HUE SETTINGS
// 9 Orange & Green Lights
        roll=10;
   b4acc:	230a      	movs	r3, #10
   b4ace:	602b      	str	r3, [r5, #0]


    if(roll==10) {
//10 Blue & Cyan Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4ad0:	4854      	ldr	r0, [pc, #336]	; (b4c24 <loop+0x68c>)
   b4ad2:	2102      	movs	r1, #2
   b4ad4:	f000 ff17 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4ad8:	2200      	movs	r2, #0
   b4ada:	4611      	mov	r1, r2
   b4adc:	4851      	ldr	r0, [pc, #324]	; (b4c24 <loop+0x68c>)
   b4ade:	f000 ff05 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, gentle, 128, 64, WHITE);
   b4ae2:	f04f 0901 	mov.w	r9, #1
   b4ae6:	2340      	movs	r3, #64	; 0x40
   b4ae8:	2200      	movs	r2, #0
   b4aea:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4aee:	2380      	movs	r3, #128	; 0x80
   b4af0:	4611      	mov	r1, r2
   b4af2:	484c      	ldr	r0, [pc, #304]	; (b4c24 <loop+0x68c>)
   b4af4:	9300      	str	r3, [sp, #0]
   b4af6:	4b53      	ldr	r3, [pc, #332]	; (b4c44 <loop+0x6ac>)
   b4af8:	f000 fdf4 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4afc:	4849      	ldr	r0, [pc, #292]	; (b4c24 <loop+0x68c>)
   b4afe:	f001 f967 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4b02:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4b06:	f001 fd57 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4b0a:	4846      	ldr	r0, [pc, #280]	; (b4c24 <loop+0x68c>)
   b4b0c:	f001 f8e8 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
//10 Blue & Cyan Lights


//HUE SETTINGS
// 10 Blue & Cyan Lights
        roll=11;
   b4b10:	230b      	movs	r3, #11
   b4b12:	602b      	str	r3, [r5, #0]


    if(roll==11) {
//11 Purple & Cyan Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4b14:	4843      	ldr	r0, [pc, #268]	; (b4c24 <loop+0x68c>)
   b4b16:	2102      	movs	r1, #2
   b4b18:	f000 fef5 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4b1c:	2200      	movs	r2, #0
   b4b1e:	4611      	mov	r1, r2
   b4b20:	4840      	ldr	r0, [pc, #256]	; (b4c24 <loop+0x68c>)
   b4b22:	f000 fee3 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, goodLuck, 128, 64, WHITE);
   b4b26:	f04f 0801 	mov.w	r8, #1
   b4b2a:	2340      	movs	r3, #64	; 0x40
   b4b2c:	2200      	movs	r2, #0
   b4b2e:	e9cd 3801 	strd	r3, r8, [sp, #4]
   b4b32:	2380      	movs	r3, #128	; 0x80
   b4b34:	4611      	mov	r1, r2
   b4b36:	483b      	ldr	r0, [pc, #236]	; (b4c24 <loop+0x68c>)
   b4b38:	9300      	str	r3, [sp, #0]
   b4b3a:	4b43      	ldr	r3, [pc, #268]	; (b4c48 <loop+0x6b0>)
   b4b3c:	f000 fdd2 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4b40:	4838      	ldr	r0, [pc, #224]	; (b4c24 <loop+0x68c>)
   b4b42:	f001 f945 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4b46:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4b4a:	f001 fd35 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4b4e:	4835      	ldr	r0, [pc, #212]	; (b4c24 <loop+0x68c>)
   b4b50:	f001 f8c6 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//11 Purple & Cyan Lights

//HUE SETTINGS
// 11 Purple & Cyan Lights
        roll=12;
   b4b54:	230c      	movs	r3, #12
   b4b56:	602b      	str	r3, [r5, #0]


    if(roll==12) {
//12 Pink & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4b58:	4832      	ldr	r0, [pc, #200]	; (b4c24 <loop+0x68c>)
   b4b5a:	2102      	movs	r1, #2
   b4b5c:	f000 fed3 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4b60:	2200      	movs	r2, #0
   b4b62:	4611      	mov	r1, r2
   b4b64:	482f      	ldr	r0, [pc, #188]	; (b4c24 <loop+0x68c>)
   b4b66:	f000 fec1 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, skull, 128, 64, WHITE);
   b4b6a:	f04f 0e01 	mov.w	lr, #1
   b4b6e:	2340      	movs	r3, #64	; 0x40
   b4b70:	e9cd 3e01 	strd	r3, lr, [sp, #4]
   b4b74:	2200      	movs	r2, #0
   b4b76:	2380      	movs	r3, #128	; 0x80
   b4b78:	4611      	mov	r1, r2
   b4b7a:	482a      	ldr	r0, [pc, #168]	; (b4c24 <loop+0x68c>)
   b4b7c:	9300      	str	r3, [sp, #0]
   b4b7e:	4b33      	ldr	r3, [pc, #204]	; (b4c4c <loop+0x6b4>)
   b4b80:	f000 fdb0 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4b84:	4827      	ldr	r0, [pc, #156]	; (b4c24 <loop+0x68c>)
   b4b86:	f001 f923 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4b8a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4b8e:	f001 fd13 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4b92:	4824      	ldr	r0, [pc, #144]	; (b4c24 <loop+0x68c>)
   b4b94:	f001 f8a4 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//12 Pink & Green Lights

//HUE SETTINGS
// 12 Pink & Green Lights
        roll=13;
   b4b98:	230d      	movs	r3, #13
   b4b9a:	602b      	str	r3, [r5, #0]


    if(roll==13) {
//13 Blue, Cyan & Purple Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4b9c:	4821      	ldr	r0, [pc, #132]	; (b4c24 <loop+0x68c>)
   b4b9e:	2102      	movs	r1, #2
   b4ba0:	f000 feb1 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4ba4:	2200      	movs	r2, #0
   b4ba6:	4611      	mov	r1, r2
   b4ba8:	481e      	ldr	r0, [pc, #120]	; (b4c24 <loop+0x68c>)
   b4baa:	f000 fe9f 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, lucky, 128, 64, WHITE);
   b4bae:	f04f 0c01 	mov.w	ip, #1
   b4bb2:	2340      	movs	r3, #64	; 0x40
   b4bb4:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b4bb8:	2200      	movs	r2, #0
   b4bba:	2380      	movs	r3, #128	; 0x80
   b4bbc:	4611      	mov	r1, r2
   b4bbe:	4819      	ldr	r0, [pc, #100]	; (b4c24 <loop+0x68c>)
   b4bc0:	9300      	str	r3, [sp, #0]
   b4bc2:	4b23      	ldr	r3, [pc, #140]	; (b4c50 <loop+0x6b8>)
   b4bc4:	f000 fd8e 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4bc8:	4816      	ldr	r0, [pc, #88]	; (b4c24 <loop+0x68c>)
   b4bca:	f001 f901 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4bce:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4bd2:	f001 fcf1 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4bd6:	4813      	ldr	r0, [pc, #76]	; (b4c24 <loop+0x68c>)
   b4bd8:	f001 f882 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//13 Blue, Cyan & Purple Lights

//HUE SETTINGS
// 13 Blue, Cyan & Purple Lights
        roll=14;
   b4bdc:	230e      	movs	r3, #14
   b4bde:	602b      	str	r3, [r5, #0]


    if(roll==14) {
//14 Orange & Purple Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4be0:	4810      	ldr	r0, [pc, #64]	; (b4c24 <loop+0x68c>)
   b4be2:	2102      	movs	r1, #2
   b4be4:	f000 fe8f 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4be8:	2200      	movs	r2, #0
   b4bea:	4611      	mov	r1, r2
   b4bec:	480d      	ldr	r0, [pc, #52]	; (b4c24 <loop+0x68c>)
   b4bee:	f000 fe7d 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, goodIdea, 128, 64, WHITE);
   b4bf2:	2701      	movs	r7, #1
   b4bf4:	2340      	movs	r3, #64	; 0x40
   b4bf6:	2200      	movs	r2, #0
   b4bf8:	e9cd 3701 	strd	r3, r7, [sp, #4]
   b4bfc:	2380      	movs	r3, #128	; 0x80
   b4bfe:	4611      	mov	r1, r2
   b4c00:	4808      	ldr	r0, [pc, #32]	; (b4c24 <loop+0x68c>)
   b4c02:	9300      	str	r3, [sp, #0]
   b4c04:	4b13      	ldr	r3, [pc, #76]	; (b4c54 <loop+0x6bc>)
   b4c06:	f000 fd6d 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4c0a:	4806      	ldr	r0, [pc, #24]	; (b4c24 <loop+0x68c>)
   b4c0c:	f001 f8e0 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4c10:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4c14:	f001 fcd0 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4c18:	4802      	ldr	r0, [pc, #8]	; (b4c24 <loop+0x68c>)
   b4c1a:	f001 f861 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//14 Orange & Purple Lights

//HUE SETTINGS
// 14 Orange & Purple Lights
        roll=15;
   b4c1e:	230f      	movs	r3, #15
   b4c20:	602b      	str	r3, [r5, #0]
   b4c22:	e019      	b.n	b4c58 <loop+0x6c0>
   b4c24:	2003e678 	.word	0x2003e678
   b4c28:	000bdc3e 	.word	0x000bdc3e
   b4c2c:	000b9032 	.word	0x000b9032
   b4c30:	000b8432 	.word	0x000b8432
   b4c34:	000ba832 	.word	0x000ba832
   b4c38:	000ba432 	.word	0x000ba432
   b4c3c:	000b9832 	.word	0x000b9832
   b4c40:	000b9c32 	.word	0x000b9c32
   b4c44:	000bc032 	.word	0x000bc032
   b4c48:	000bd032 	.word	0x000bd032
   b4c4c:	000bb832 	.word	0x000bb832
   b4c50:	000bb032 	.word	0x000bb032
   b4c54:	000bcc32 	.word	0x000bcc32


    if(roll==15) {
//15 Magenta, Pink, and Orange Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4c58:	48c9      	ldr	r0, [pc, #804]	; (b4f80 <loop+0x9e8>)
   b4c5a:	2102      	movs	r1, #2
   b4c5c:	f000 fe53 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4c60:	2200      	movs	r2, #0
   b4c62:	4611      	mov	r1, r2
   b4c64:	48c6      	ldr	r0, [pc, #792]	; (b4f80 <loop+0x9e8>)
   b4c66:	f000 fe41 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, mushrooms, 128, 64, WHITE);
   b4c6a:	2601      	movs	r6, #1
   b4c6c:	2340      	movs	r3, #64	; 0x40
   b4c6e:	2200      	movs	r2, #0
   b4c70:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b4c74:	2380      	movs	r3, #128	; 0x80
   b4c76:	4611      	mov	r1, r2
   b4c78:	48c1      	ldr	r0, [pc, #772]	; (b4f80 <loop+0x9e8>)
   b4c7a:	9300      	str	r3, [sp, #0]
   b4c7c:	4bc1      	ldr	r3, [pc, #772]	; (b4f84 <loop+0x9ec>)
   b4c7e:	f000 fd31 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4c82:	48bf      	ldr	r0, [pc, #764]	; (b4f80 <loop+0x9e8>)
   b4c84:	f001 f8a4 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4c88:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4c8c:	f001 fc94 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4c90:	48bb      	ldr	r0, [pc, #748]	; (b4f80 <loop+0x9e8>)
   b4c92:	f001 f825 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//15 Magenta, Pink, and Orange Lights

//HUE SETTINGS
// 15 Magenta, Pink, and Orange Lights
        roll=16;
   b4c96:	2310      	movs	r3, #16
   b4c98:	602b      	str	r3, [r5, #0]


    if(roll==16) {
//16 Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4c9a:	48b9      	ldr	r0, [pc, #740]	; (b4f80 <loop+0x9e8>)
   b4c9c:	2102      	movs	r1, #2
   b4c9e:	f000 fe32 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4ca2:	2200      	movs	r2, #0
   b4ca4:	4611      	mov	r1, r2
   b4ca6:	48b6      	ldr	r0, [pc, #728]	; (b4f80 <loop+0x9e8>)
   b4ca8:	f000 fe20 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, fight, 128, 64, WHITE);
   b4cac:	2401      	movs	r4, #1
   b4cae:	2340      	movs	r3, #64	; 0x40
   b4cb0:	2200      	movs	r2, #0
   b4cb2:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b4cb6:	2380      	movs	r3, #128	; 0x80
   b4cb8:	4611      	mov	r1, r2
   b4cba:	48b1      	ldr	r0, [pc, #708]	; (b4f80 <loop+0x9e8>)
   b4cbc:	9300      	str	r3, [sp, #0]
   b4cbe:	4bb2      	ldr	r3, [pc, #712]	; (b4f88 <loop+0x9f0>)
   b4cc0:	f000 fd10 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4cc4:	48ae      	ldr	r0, [pc, #696]	; (b4f80 <loop+0x9e8>)
   b4cc6:	f001 f883 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4cca:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4cce:	f001 fc73 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4cd2:	48ab      	ldr	r0, [pc, #684]	; (b4f80 <loop+0x9e8>)
   b4cd4:	f001 f804 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//16 Green Lights

//HUE SETTINGS
// 16 Green Lights
        roll=17;
   b4cd8:	2311      	movs	r3, #17
   b4cda:	602b      	str	r3, [r5, #0]


    if(roll==17) {
//17 Green & Yellow Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4cdc:	48a8      	ldr	r0, [pc, #672]	; (b4f80 <loop+0x9e8>)
   b4cde:	2102      	movs	r1, #2
   b4ce0:	f000 fe11 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4ce4:	2200      	movs	r2, #0
   b4ce6:	4611      	mov	r1, r2
   b4ce8:	48a5      	ldr	r0, [pc, #660]	; (b4f80 <loop+0x9e8>)
   b4cea:	f000 fdff 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, cheers, 128, 64, WHITE);
   b4cee:	2340      	movs	r3, #64	; 0x40
   b4cf0:	2001      	movs	r0, #1
   b4cf2:	2200      	movs	r2, #0
   b4cf4:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b4cf8:	2380      	movs	r3, #128	; 0x80
   b4cfa:	4611      	mov	r1, r2
   b4cfc:	48a0      	ldr	r0, [pc, #640]	; (b4f80 <loop+0x9e8>)
   b4cfe:	9300      	str	r3, [sp, #0]
   b4d00:	4ba2      	ldr	r3, [pc, #648]	; (b4f8c <loop+0x9f4>)
   b4d02:	f000 fcef 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4d06:	489e      	ldr	r0, [pc, #632]	; (b4f80 <loop+0x9e8>)
   b4d08:	f001 f862 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4d0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4d10:	f001 fc52 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4d14:	489a      	ldr	r0, [pc, #616]	; (b4f80 <loop+0x9e8>)
   b4d16:	f000 ffe3 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//17 Green & Yellow Lights

//HUE SETTINGS
// 17 Green & Yellow Lights
        roll=18;
   b4d1a:	2312      	movs	r3, #18
   b4d1c:	602b      	str	r3, [r5, #0]


    if(roll==18) {
//18 Blue & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4d1e:	4898      	ldr	r0, [pc, #608]	; (b4f80 <loop+0x9e8>)
   b4d20:	2102      	movs	r1, #2
   b4d22:	f000 fdf0 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4d26:	2200      	movs	r2, #0
   b4d28:	4611      	mov	r1, r2
   b4d2a:	4895      	ldr	r0, [pc, #596]	; (b4f80 <loop+0x9e8>)
   b4d2c:	f000 fdde 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, youNeededThat, 128, 64, WHITE);
   b4d30:	2340      	movs	r3, #64	; 0x40
   b4d32:	2101      	movs	r1, #1
   b4d34:	2200      	movs	r2, #0
   b4d36:	e9cd 3101 	strd	r3, r1, [sp, #4]
   b4d3a:	2380      	movs	r3, #128	; 0x80
   b4d3c:	4611      	mov	r1, r2
   b4d3e:	4890      	ldr	r0, [pc, #576]	; (b4f80 <loop+0x9e8>)
   b4d40:	9300      	str	r3, [sp, #0]
   b4d42:	4b93      	ldr	r3, [pc, #588]	; (b4f90 <loop+0x9f8>)
   b4d44:	f000 fcce 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4d48:	488d      	ldr	r0, [pc, #564]	; (b4f80 <loop+0x9e8>)
   b4d4a:	f001 f841 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4d4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4d52:	f001 fc31 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4d56:	488a      	ldr	r0, [pc, #552]	; (b4f80 <loop+0x9e8>)
   b4d58:	f000 ffc2 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//18 Blue & Green Lights

//HUE SETTINGS
// 18 Blue & Green Lights
        roll=19;
   b4d5c:	2313      	movs	r3, #19
   b4d5e:	602b      	str	r3, [r5, #0]


    if(roll==19) {
//19 Magenta, Purple & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4d60:	4887      	ldr	r0, [pc, #540]	; (b4f80 <loop+0x9e8>)
   b4d62:	2102      	movs	r1, #2
   b4d64:	f000 fdcf 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4d68:	2200      	movs	r2, #0
   b4d6a:	4611      	mov	r1, r2
   b4d6c:	4884      	ldr	r0, [pc, #528]	; (b4f80 <loop+0x9e8>)
   b4d6e:	f000 fdbd 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, heroTime, 128, 64, WHITE);
   b4d72:	2340      	movs	r3, #64	; 0x40
   b4d74:	2201      	movs	r2, #1
   b4d76:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4d7a:	2200      	movs	r2, #0
   b4d7c:	2380      	movs	r3, #128	; 0x80
   b4d7e:	4611      	mov	r1, r2
   b4d80:	487f      	ldr	r0, [pc, #508]	; (b4f80 <loop+0x9e8>)
   b4d82:	9300      	str	r3, [sp, #0]
   b4d84:	4b83      	ldr	r3, [pc, #524]	; (b4f94 <loop+0x9fc>)
   b4d86:	f000 fcad 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4d8a:	487d      	ldr	r0, [pc, #500]	; (b4f80 <loop+0x9e8>)
   b4d8c:	f001 f820 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4d90:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4d94:	f001 fc10 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4d98:	4879      	ldr	r0, [pc, #484]	; (b4f80 <loop+0x9e8>)
   b4d9a:	f000 ffa1 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
// NEOPIXEL SETTINGS
//19 Magenta, Purple & Green Lights

//HUE SETTINGS
// 19 Magenta, Purple & Green Lights
        roll=20;
   b4d9e:	2314      	movs	r3, #20
   b4da0:	602b      	str	r3, [r5, #0]


    if(roll==20) {
// 20 Rainbow Lights, random colors, excitement!
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4da2:	4877      	ldr	r0, [pc, #476]	; (b4f80 <loop+0x9e8>)
    delay(10000);

//HUE SETTINGS
//20 Rainbow Lights, random colors, excitement!
           int r;
            hueOnOff = true;
   b4da4:	4e7c      	ldr	r6, [pc, #496]	; (b4f98 <loop+0xa00>)
            for(int hr=2; hr>=0; hr--) {
                Serial.printf("turning on the light\n");
   b4da6:	f8df b220 	ldr.w	fp, [pc, #544]	; b4fc8 <loop+0xa30>
                r=random(7);
                Serial.printf("light 1, r= %i\n", r);
   b4daa:	f8df a220 	ldr.w	sl, [pc, #544]	; b4fcc <loop+0xa34>
        myDisplay.setRotation(2); //0-3
   b4dae:	2102      	movs	r1, #2
   b4db0:	f000 fda9 	bl	b5906 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4db4:	2200      	movs	r2, #0
   b4db6:	4611      	mov	r1, r2
   b4db8:	4871      	ldr	r0, [pc, #452]	; (b4f80 <loop+0x9e8>)
   b4dba:	f000 fd97 	bl	b58ec <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, killUmAll, 128, 64, WHITE);
   b4dbe:	2401      	movs	r4, #1
   b4dc0:	2340      	movs	r3, #64	; 0x40
   b4dc2:	2200      	movs	r2, #0
   b4dc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b4dc8:	2380      	movs	r3, #128	; 0x80
   b4dca:	4611      	mov	r1, r2
   b4dcc:	486c      	ldr	r0, [pc, #432]	; (b4f80 <loop+0x9e8>)
   b4dce:	9300      	str	r3, [sp, #0]
   b4dd0:	4b72      	ldr	r3, [pc, #456]	; (b4f9c <loop+0xa04>)
   b4dd2:	f000 fc87 	bl	b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4dd6:	486a      	ldr	r0, [pc, #424]	; (b4f80 <loop+0x9e8>)
   b4dd8:	f000 fffa 	bl	b5dd0 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4ddc:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4de0:	f001 fbea 	bl	b65b8 <delay>
        myDisplay.clearDisplay();
   b4de4:	4866      	ldr	r0, [pc, #408]	; (b4f80 <loop+0x9e8>)
   b4de6:	f000 ff7b 	bl	b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    Serial.printf("Turniing on MSWEMO #%i\n", MSWEMO);
   b4dea:	f002 fbf5 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4dee:	496c      	ldr	r1, [pc, #432]	; (b4fa0 <loop+0xa08>)
   b4df0:	4622      	mov	r2, r4
   b4df2:	f7ff f97c 	bl	b40ee <_ZN5Print6printfEPKcz>
    switchON(MSWEMO);
   b4df6:	4620      	mov	r0, r4
   b4df8:	f7ff fad2 	bl	b43a0 <_Z8switchONi>
    delay(10000);
   b4dfc:	f242 7010 	movw	r0, #10000	; 0x2710
   b4e00:	f001 fbda 	bl	b65b8 <delay>
    Serial.printf("Turniing off MSWEMO #%i\n", MSWEMO);
   b4e04:	f002 fbe8 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4e08:	4966      	ldr	r1, [pc, #408]	; (b4fa4 <loop+0xa0c>)
   b4e0a:	4622      	mov	r2, r4
   b4e0c:	f7ff f96f 	bl	b40ee <_ZN5Print6printfEPKcz>
    switchOFF(MSWEMO);
   b4e10:	4620      	mov	r0, r4
   b4e12:	f7ff fb27 	bl	b4464 <_Z9switchOFFi>
    delay(10000);
   b4e16:	f242 7010 	movw	r0, #10000	; 0x2710
   b4e1a:	f001 fbcd 	bl	b65b8 <delay>
            hueOnOff = true;
   b4e1e:	f04f 0803 	mov.w	r8, #3
   b4e22:	7034      	strb	r4, [r6, #0]
                Serial.printf("turning on the light\n");
   b4e24:	f002 fbd8 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4e28:	4659      	mov	r1, fp
   b4e2a:	f7ff f960 	bl	b40ee <_ZN5Print6printfEPKcz>
                r=random(7);
   b4e2e:	2007      	movs	r0, #7
   b4e30:	f001 fe46 	bl	b6ac0 <_Z6randomi>
   b4e34:	4681      	mov	r9, r0
                setHue(1, hueOnOff, HueRainbow[r], 255, 255);
   b4e36:	24ff      	movs	r4, #255	; 0xff
   b4e38:	4f5b      	ldr	r7, [pc, #364]	; (b4fa8 <loop+0xa10>)
                Serial.printf("light 1, r= %i\n", r);
   b4e3a:	f002 fbcd 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4e3e:	464a      	mov	r2, r9
   b4e40:	4651      	mov	r1, sl
   b4e42:	f7ff f954 	bl	b40ee <_ZN5Print6printfEPKcz>
                setHue(1, hueOnOff, HueRainbow[r], 255, 255);
   b4e46:	9400      	str	r4, [sp, #0]
   b4e48:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b4e4c:	7831      	ldrb	r1, [r6, #0]
   b4e4e:	4623      	mov	r3, r4
   b4e50:	2001      	movs	r0, #1
   b4e52:	f7ff f97f 	bl	b4154 <_Z6setHueibiii>
                r=random(7);
   b4e56:	2007      	movs	r0, #7
   b4e58:	f001 fe32 	bl	b6ac0 <_Z6randomi>
   b4e5c:	4681      	mov	r9, r0
                Serial.printf("light 2, r= %i\n", r);
   b4e5e:	f002 fbbb 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4e62:	464a      	mov	r2, r9
   b4e64:	4951      	ldr	r1, [pc, #324]	; (b4fac <loop+0xa14>)
   b4e66:	f7ff f942 	bl	b40ee <_ZN5Print6printfEPKcz>
                setHue(2, hueOnOff, HueRainbow[r], 255, 255);
   b4e6a:	9400      	str	r4, [sp, #0]
   b4e6c:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b4e70:	7831      	ldrb	r1, [r6, #0]
   b4e72:	4623      	mov	r3, r4
   b4e74:	2002      	movs	r0, #2
   b4e76:	f7ff f96d 	bl	b4154 <_Z6setHueibiii>
                r=random(7);
   b4e7a:	2007      	movs	r0, #7
   b4e7c:	f001 fe20 	bl	b6ac0 <_Z6randomi>
   b4e80:	4681      	mov	r9, r0
                Serial.printf("light 3, r= %i\n", r);
   b4e82:	f002 fba9 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4e86:	464a      	mov	r2, r9
   b4e88:	4949      	ldr	r1, [pc, #292]	; (b4fb0 <loop+0xa18>)
   b4e8a:	f7ff f930 	bl	b40ee <_ZN5Print6printfEPKcz>
                setHue(3, hueOnOff, HueRainbow[r], 255, 255);
   b4e8e:	9400      	str	r4, [sp, #0]
   b4e90:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b4e94:	7831      	ldrb	r1, [r6, #0]
   b4e96:	4623      	mov	r3, r4
   b4e98:	2003      	movs	r0, #3
   b4e9a:	f7ff f95b 	bl	b4154 <_Z6setHueibiii>
                r=random(7);
   b4e9e:	2007      	movs	r0, #7
   b4ea0:	f001 fe0e 	bl	b6ac0 <_Z6randomi>
   b4ea4:	4681      	mov	r9, r0
                Serial.printf("light 4, r= %i\n", r);
   b4ea6:	f002 fb97 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4eaa:	464a      	mov	r2, r9
   b4eac:	4941      	ldr	r1, [pc, #260]	; (b4fb4 <loop+0xa1c>)
   b4eae:	f7ff f91e 	bl	b40ee <_ZN5Print6printfEPKcz>
                setHue(4, hueOnOff, HueRainbow[r], 255, 255);
   b4eb2:	9400      	str	r4, [sp, #0]
   b4eb4:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b4eb8:	7831      	ldrb	r1, [r6, #0]
   b4eba:	4623      	mov	r3, r4
   b4ebc:	2004      	movs	r0, #4
   b4ebe:	f7ff f949 	bl	b4154 <_Z6setHueibiii>
                r=random(7);
   b4ec2:	2007      	movs	r0, #7
   b4ec4:	f001 fdfc 	bl	b6ac0 <_Z6randomi>
   b4ec8:	4681      	mov	r9, r0
                Serial.printf("light 5, r= %i\n", r);
   b4eca:	f002 fb85 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4ece:	464a      	mov	r2, r9
   b4ed0:	4939      	ldr	r1, [pc, #228]	; (b4fb8 <loop+0xa20>)
   b4ed2:	f7ff f90c 	bl	b40ee <_ZN5Print6printfEPKcz>
                setHue(5, hueOnOff, HueRainbow[r], 255, 255);
   b4ed6:	9400      	str	r4, [sp, #0]
   b4ed8:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b4edc:	7831      	ldrb	r1, [r6, #0]
   b4ede:	4623      	mov	r3, r4
   b4ee0:	2005      	movs	r0, #5
   b4ee2:	f7ff f937 	bl	b4154 <_Z6setHueibiii>
                r=random(7);
   b4ee6:	2007      	movs	r0, #7
   b4ee8:	f001 fdea 	bl	b6ac0 <_Z6randomi>
   b4eec:	4681      	mov	r9, r0
                Serial.printf("light 6, r= %i\n", r);
   b4eee:	f002 fb73 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4ef2:	4932      	ldr	r1, [pc, #200]	; (b4fbc <loop+0xa24>)
   b4ef4:	464a      	mov	r2, r9
   b4ef6:	f7ff f8fa 	bl	b40ee <_ZN5Print6printfEPKcz>
                setHue(6, hueOnOff, HueRainbow[r], 255, 255);
   b4efa:	9400      	str	r4, [sp, #0]
   b4efc:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b4f00:	7831      	ldrb	r1, [r6, #0]
   b4f02:	4623      	mov	r3, r4
   b4f04:	2006      	movs	r0, #6
   b4f06:	f7ff f925 	bl	b4154 <_Z6setHueibiii>
            for(int hr=2; hr>=0; hr--) {
   b4f0a:	f1b8 0801 	subs.w	r8, r8, #1
   b4f0e:	d189      	bne.n	b4e24 <loop+0x88c>

    
            }
            hueOnOff = false;
            Serial.printf("turning off the light");
            setHue(1, hueOnOff, HueRed, 255, 255);
   b4f10:	4f2b      	ldr	r7, [pc, #172]	; (b4fc0 <loop+0xa28>)
            hueOnOff = false;
   b4f12:	f886 8000 	strb.w	r8, [r6]
            Serial.printf("turning off the light");
   b4f16:	f002 fb5f 	bl	b75d8 <_Z16_fetch_usbserialv>
   b4f1a:	492a      	ldr	r1, [pc, #168]	; (b4fc4 <loop+0xa2c>)
   b4f1c:	f7ff f8e7 	bl	b40ee <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, 255, 255);
   b4f20:	9400      	str	r4, [sp, #0]
   b4f22:	683a      	ldr	r2, [r7, #0]
   b4f24:	7831      	ldrb	r1, [r6, #0]
   b4f26:	4623      	mov	r3, r4
   b4f28:	2001      	movs	r0, #1
   b4f2a:	f7ff f913 	bl	b4154 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, 255, 255);
   b4f2e:	9400      	str	r4, [sp, #0]
   b4f30:	683a      	ldr	r2, [r7, #0]
   b4f32:	7831      	ldrb	r1, [r6, #0]
   b4f34:	4623      	mov	r3, r4
   b4f36:	2002      	movs	r0, #2
   b4f38:	f7ff f90c 	bl	b4154 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, 255, 255);
   b4f3c:	9400      	str	r4, [sp, #0]
   b4f3e:	683a      	ldr	r2, [r7, #0]
   b4f40:	7831      	ldrb	r1, [r6, #0]
   b4f42:	4623      	mov	r3, r4
   b4f44:	2003      	movs	r0, #3
   b4f46:	f7ff f905 	bl	b4154 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, 255, 255);
   b4f4a:	9400      	str	r4, [sp, #0]
   b4f4c:	683a      	ldr	r2, [r7, #0]
   b4f4e:	7831      	ldrb	r1, [r6, #0]
   b4f50:	4623      	mov	r3, r4
   b4f52:	2004      	movs	r0, #4
   b4f54:	f7ff f8fe 	bl	b4154 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, 255, 255);
   b4f58:	9400      	str	r4, [sp, #0]
   b4f5a:	683a      	ldr	r2, [r7, #0]
   b4f5c:	7831      	ldrb	r1, [r6, #0]
   b4f5e:	4623      	mov	r3, r4
   b4f60:	2005      	movs	r0, #5
   b4f62:	f7ff f8f7 	bl	b4154 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, 255, 255);
   b4f66:	9400      	str	r4, [sp, #0]
   b4f68:	683a      	ldr	r2, [r7, #0]
   b4f6a:	7831      	ldrb	r1, [r6, #0]
   b4f6c:	4623      	mov	r3, r4
   b4f6e:	2006      	movs	r0, #6
   b4f70:	f7ff f8f0 	bl	b4154 <_Z6setHueibiii>
            delay(10000);
   b4f74:	f242 7010 	movw	r0, #10000	; 0x2710
   b4f78:	f001 fb1e 	bl	b65b8 <delay>
   b4f7c:	e061      	b.n	b5042 <loop+0xaaa>
   b4f7e:	bf00      	nop
   b4f80:	2003e678 	.word	0x2003e678
   b4f84:	000be03e 	.word	0x000be03e
   b4f88:	000bac32 	.word	0x000bac32
   b4f8c:	000bbc32 	.word	0x000bbc32
   b4f90:	000b8832 	.word	0x000b8832
   b4f94:	000bd432 	.word	0x000bd432
   b4f98:	2003e674 	.word	0x2003e674
   b4f9c:	000bd83e 	.word	0x000bd83e
   b4fa0:	000b8337 	.word	0x000b8337
   b4fa4:	000b834f 	.word	0x000b834f
   b4fa8:	2003e608 	.word	0x2003e608
   b4fac:	000b8378 	.word	0x000b8378
   b4fb0:	000b8388 	.word	0x000b8388
   b4fb4:	000b8398 	.word	0x000b8398
   b4fb8:	000b83a8 	.word	0x000b83a8
   b4fbc:	000b83b8 	.word	0x000b83b8
   b4fc0:	2003e624 	.word	0x2003e624
   b4fc4:	000b8321 	.word	0x000b8321
   b4fc8:	000b830b 	.word	0x000b830b
   b4fcc:	000b8368 	.word	0x000b8368
    if(roll==2) {
   b4fd0:	2c02      	cmp	r4, #2
   b4fd2:	f43f ac53 	beq.w	b487c <loop+0x2e4>
    if(roll==3) {
   b4fd6:	2c03      	cmp	r4, #3
   b4fd8:	f43f ac91 	beq.w	b48fe <loop+0x366>
    if(roll==4) {
   b4fdc:	2c04      	cmp	r4, #4
   b4fde:	f43f acaf 	beq.w	b4940 <loop+0x3a8>
    if(roll==5) {
   b4fe2:	2c05      	cmp	r4, #5
   b4fe4:	f43f accd 	beq.w	b4982 <loop+0x3ea>
    if(roll==6) {
   b4fe8:	2c06      	cmp	r4, #6
   b4fea:	f43f aceb 	beq.w	b49c4 <loop+0x42c>
    if(roll==7) {
   b4fee:	2c07      	cmp	r4, #7
   b4ff0:	f43f ad09 	beq.w	b4a06 <loop+0x46e>
    if(roll==8) {
   b4ff4:	2c08      	cmp	r4, #8
   b4ff6:	f43f ad27 	beq.w	b4a48 <loop+0x4b0>
    if(roll==9) {
   b4ffa:	2c09      	cmp	r4, #9
   b4ffc:	f43f ad46 	beq.w	b4a8c <loop+0x4f4>
    if(roll==10) {
   b5000:	2c0a      	cmp	r4, #10
   b5002:	f43f ad65 	beq.w	b4ad0 <loop+0x538>
    if(roll==11) {
   b5006:	2c0b      	cmp	r4, #11
   b5008:	f43f ad84 	beq.w	b4b14 <loop+0x57c>
    if(roll==12) {
   b500c:	2c0c      	cmp	r4, #12
   b500e:	f43f ada3 	beq.w	b4b58 <loop+0x5c0>
    if(roll==13) {
   b5012:	2c0d      	cmp	r4, #13
   b5014:	f43f adc2 	beq.w	b4b9c <loop+0x604>
    if(roll==14) {
   b5018:	2c0e      	cmp	r4, #14
   b501a:	f43f ade1 	beq.w	b4be0 <loop+0x648>
    if(roll==15) {
   b501e:	2c0f      	cmp	r4, #15
   b5020:	f43f ae1a 	beq.w	b4c58 <loop+0x6c0>
    if(roll==16) {
   b5024:	2c10      	cmp	r4, #16
   b5026:	f43f ae38 	beq.w	b4c9a <loop+0x702>
    if(roll==17) {
   b502a:	2c11      	cmp	r4, #17
   b502c:	f43f ae56 	beq.w	b4cdc <loop+0x744>
    if(roll==18) {
   b5030:	2c12      	cmp	r4, #18
   b5032:	f43f ae74 	beq.w	b4d1e <loop+0x786>
    if(roll==19) {
   b5036:	2c13      	cmp	r4, #19
   b5038:	f43f ae92 	beq.w	b4d60 <loop+0x7c8>
    if(roll==20) {
   b503c:	2c14      	cmp	r4, #20
   b503e:	f43f aeb0 	beq.w	b4da2 <loop+0x80a>
        } 
        roll=1;
   b5042:	2301      	movs	r3, #1
   b5044:	602b      	str	r3, [r5, #0]
}
   b5046:	b005      	add	sp, #20
   b5048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b504c <_GLOBAL__sub_I_hueOn>:
   b504c:	b508      	push	{r3, lr}
String hueCmd;  // Hue command
   b504e:	491b      	ldr	r1, [pc, #108]	; (b50bc <_GLOBAL__sub_I_hueOn+0x70>)
   b5050:	481b      	ldr	r0, [pc, #108]	; (b50c0 <_GLOBAL__sub_I_hueOn+0x74>)
   b5052:	f001 fe7c 	bl	b6d4e <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b5056:	4a1b      	ldr	r2, [pc, #108]	; (b50c4 <_GLOBAL__sub_I_hueOn+0x78>)
   b5058:	4b1b      	ldr	r3, [pc, #108]	; (b50c8 <_GLOBAL__sub_I_hueOn+0x7c>)
   b505a:	6812      	ldr	r2, [r2, #0]
   b505c:	601a      	str	r2, [r3, #0]
   b505e:	4a1b      	ldr	r2, [pc, #108]	; (b50cc <_GLOBAL__sub_I_hueOn+0x80>)
TCPClient HueClient;
   b5060:	481b      	ldr	r0, [pc, #108]	; (b50d0 <_GLOBAL__sub_I_hueOn+0x84>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b5062:	6812      	ldr	r2, [r2, #0]
   b5064:	605a      	str	r2, [r3, #4]
   b5066:	4a1b      	ldr	r2, [pc, #108]	; (b50d4 <_GLOBAL__sub_I_hueOn+0x88>)
   b5068:	6812      	ldr	r2, [r2, #0]
   b506a:	609a      	str	r2, [r3, #8]
   b506c:	4a1a      	ldr	r2, [pc, #104]	; (b50d8 <_GLOBAL__sub_I_hueOn+0x8c>)
   b506e:	6812      	ldr	r2, [r2, #0]
   b5070:	60da      	str	r2, [r3, #12]
   b5072:	4a1a      	ldr	r2, [pc, #104]	; (b50dc <_GLOBAL__sub_I_hueOn+0x90>)
   b5074:	6812      	ldr	r2, [r2, #0]
   b5076:	611a      	str	r2, [r3, #16]
   b5078:	4a19      	ldr	r2, [pc, #100]	; (b50e0 <_GLOBAL__sub_I_hueOn+0x94>)
   b507a:	6812      	ldr	r2, [r2, #0]
   b507c:	615a      	str	r2, [r3, #20]
   b507e:	4a19      	ldr	r2, [pc, #100]	; (b50e4 <_GLOBAL__sub_I_hueOn+0x98>)
   b5080:	6812      	ldr	r2, [r2, #0]
   b5082:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b5084:	f002 f9d6 	bl	b7434 <_ZN9TCPClientC1Ev>
TCPClient WemoClient;
   b5088:	4817      	ldr	r0, [pc, #92]	; (b50e8 <_GLOBAL__sub_I_hueOn+0x9c>)
   b508a:	f002 f9d3 	bl	b7434 <_ZN9TCPClientC1Ev>
Adafruit_SSD1306 myDisplay(OLED_RESET); 
   b508e:	2104      	movs	r1, #4
   b5090:	4816      	ldr	r0, [pc, #88]	; (b50ec <_GLOBAL__sub_I_hueOn+0xa0>)
   b5092:	f000 fe0f 	bl	b5cb4 <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b5096:	2302      	movs	r3, #2
   b5098:	2208      	movs	r2, #8
   b509a:	4815      	ldr	r0, [pc, #84]	; (b50f0 <_GLOBAL__sub_I_hueOn+0xa4>)
   b509c:	2101      	movs	r1, #1
   b509e:	f000 f86f 	bl	b5180 <_ZN17Adafruit_NeoPixelC1Ethh>
              error_(SYSTEM_ERROR_NONE) {
   b50a2:	4b14      	ldr	r3, [pc, #80]	; (b50f4 <_GLOBAL__sub_I_hueOn+0xa8>)
   b50a4:	2200      	movs	r2, #0
   b50a6:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b50aa:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b50ae:	609a      	str	r2, [r3, #8]
}
   b50b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   b50b4:	2002      	movs	r0, #2
   b50b6:	f001 b9b3 	b.w	b6420 <set_system_mode>
   b50ba:	bf00      	nop
   b50bc:	000b819c 	.word	0x000b819c
   b50c0:	2003e664 	.word	0x2003e664
   b50c4:	2003e624 	.word	0x2003e624
   b50c8:	2003e608 	.word	0x2003e608
   b50cc:	2003e14c 	.word	0x2003e14c
   b50d0:	2003e5ec 	.word	0x2003e5ec
   b50d4:	2003e154 	.word	0x2003e154
   b50d8:	2003e144 	.word	0x2003e144
   b50dc:	2003e140 	.word	0x2003e140
   b50e0:	2003e148 	.word	0x2003e148
   b50e4:	2003e150 	.word	0x2003e150
   b50e8:	2003e634 	.word	0x2003e634
   b50ec:	2003e678 	.word	0x2003e678
   b50f0:	2003e69c 	.word	0x2003e69c
   b50f4:	2003e628 	.word	0x2003e628

000b50f8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b50f8:	b538      	push	{r3, r4, r5, lr}
   b50fa:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b50fc:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b50fe:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b5100:	b108      	cbz	r0, b5106 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b5102:	f001 fa29 	bl	b6558 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b5106:	79a3      	ldrb	r3, [r4, #6]
   b5108:	2b06      	cmp	r3, #6
   b510a:	bf0c      	ite	eq
   b510c:	2004      	moveq	r0, #4
   b510e:	2003      	movne	r0, #3
   b5110:	fb10 f005 	smulbb	r0, r0, r5
   b5114:	b280      	uxth	r0, r0
   b5116:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b5118:	f001 fa16 	bl	b6548 <malloc>
   b511c:	60e0      	str	r0, [r4, #12]
   b511e:	b128      	cbz	r0, b512c <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b5120:	88a2      	ldrh	r2, [r4, #4]
   b5122:	2100      	movs	r1, #0
   b5124:	f002 fdd6 	bl	b7cd4 <memset>
    numLEDs = n;
   b5128:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b512a:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b512c:	80a0      	strh	r0, [r4, #4]
   b512e:	8060      	strh	r0, [r4, #2]
}
   b5130:	e7fb      	b.n	b512a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b5132 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b5132:	b510      	push	{r4, lr}
   b5134:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b5136:	2101      	movs	r1, #1
   b5138:	79c0      	ldrb	r0, [r0, #7]
   b513a:	f002 fbd7 	bl	b78ec <pinMode>
  digitalWrite(pin, LOW);
   b513e:	79e0      	ldrb	r0, [r4, #7]
   b5140:	2100      	movs	r1, #0
   b5142:	f002 fbe4 	bl	b790e <digitalWrite>
  begun = true;
   b5146:	2301      	movs	r3, #1
   b5148:	7023      	strb	r3, [r4, #0]
}
   b514a:	bd10      	pop	{r4, pc}

000b514c <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b514c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b514e:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b5150:	4605      	mov	r5, r0
   b5152:	460c      	mov	r4, r1
    if (begun) {
   b5154:	b11b      	cbz	r3, b515e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b5156:	79c0      	ldrb	r0, [r0, #7]
   b5158:	2100      	movs	r1, #0
   b515a:	f002 fbc7 	bl	b78ec <pinMode>
    }
    pin = p;
    if (begun) {
   b515e:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b5160:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b5162:	b15b      	cbz	r3, b517c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b5164:	b2a0      	uxth	r0, r4
   b5166:	2101      	movs	r1, #1
   b5168:	9001      	str	r0, [sp, #4]
   b516a:	f002 fbbf 	bl	b78ec <pinMode>
        digitalWrite(p, LOW);
   b516e:	9801      	ldr	r0, [sp, #4]
   b5170:	2100      	movs	r1, #0
    }
}
   b5172:	b003      	add	sp, #12
   b5174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b5178:	f002 bbc9 	b.w	b790e <digitalWrite>
}
   b517c:	b003      	add	sp, #12
   b517e:	bd30      	pop	{r4, r5, pc}

000b5180 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b5180:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b5182:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b5184:	4604      	mov	r4, r0
   b5186:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b5188:	7183      	strb	r3, [r0, #6]
   b518a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b518e:	7005      	strb	r5, [r0, #0]
   b5190:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b5192:	f7ff ffb1 	bl	b50f8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b5196:	4620      	mov	r0, r4
   b5198:	4631      	mov	r1, r6
   b519a:	f7ff ffd7 	bl	b514c <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b519e:	4620      	mov	r0, r4
   b51a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b51a4 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b51a4:	68c3      	ldr	r3, [r0, #12]
   b51a6:	2b00      	cmp	r3, #0
   b51a8:	f000 81a4 	beq.w	b54f4 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b51ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51b0:	7983      	ldrb	r3, [r0, #6]
   b51b2:	3b02      	subs	r3, #2
   b51b4:	b2db      	uxtb	r3, r3
   b51b6:	2b04      	cmp	r3, #4
   b51b8:	bf9c      	itt	ls
   b51ba:	4abf      	ldrls	r2, [pc, #764]	; (b54b8 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b51bc:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b51c0:	b085      	sub	sp, #20
   b51c2:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b51c4:	bf88      	it	hi
   b51c6:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b51c8:	f000 ff62 	bl	b6090 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b51cc:	692b      	ldr	r3, [r5, #16]
   b51ce:	1ac0      	subs	r0, r0, r3
   b51d0:	42a0      	cmp	r0, r4
   b51d2:	d3f9      	bcc.n	b51c8 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b51d4:	4cb9      	ldr	r4, [pc, #740]	; (b54bc <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b51d6:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b51d8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b51dc:	b91b      	cbnz	r3, b51e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b51de:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b51e2:	2b00      	cmp	r3, #0
   b51e4:	db7e      	blt.n	b52e4 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b51e6:	4cb6      	ldr	r4, [pc, #728]	; (b54c0 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b51e8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b51ec:	b923      	cbnz	r3, b51f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b51ee:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b51f2:	2b00      	cmp	r3, #0
   b51f4:	f2c0 816e 	blt.w	b54d4 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b51f8:	4cb2      	ldr	r4, [pc, #712]	; (b54c4 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b51fa:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b51fe:	2b00      	cmp	r3, #0
   b5200:	f000 8144 	beq.w	b548c <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5204:	79eb      	ldrb	r3, [r5, #7]
   b5206:	4ab0      	ldr	r2, [pc, #704]	; (b54c8 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5208:	4cb0      	ldr	r4, [pc, #704]	; (b54cc <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b520a:	6812      	ldr	r2, [r2, #0]
   b520c:	0119      	lsls	r1, r3, #4
   b520e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b5212:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5214:	49ae      	ldr	r1, [pc, #696]	; (b54d0 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5216:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5218:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b521c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b5220:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5224:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5226:	f003 031f 	and.w	r3, r3, #31
   b522a:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b522e:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5230:	433a      	orrs	r2, r7
   b5232:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b5234:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b5236:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b523a:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b523e:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b5240:	2900      	cmp	r1, #0
   b5242:	d044      	beq.n	b52ce <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b5244:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b5248:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b524a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b524e:	f818 cb01 	ldrb.w	ip, [r8], #1
   b5252:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5254:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5256:	6863      	ldr	r3, [r4, #4]
   b5258:	1a9b      	subs	r3, r3, r2
   b525a:	2b46      	cmp	r3, #70	; 0x46
   b525c:	d9fb      	bls.n	b5256 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b525e:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b5260:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b5264:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b5268:	ea43 0307 	orr.w	r3, r3, r7
   b526c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b5270:	d02f      	beq.n	b52d2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b5272:	6863      	ldr	r3, [r4, #4]
   b5274:	1a9b      	subs	r3, r3, r2
   b5276:	2b28      	cmp	r3, #40	; 0x28
   b5278:	d9fb      	bls.n	b5272 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b527a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b527e:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5280:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5284:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5288:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b528c:	d1e3      	bne.n	b5256 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b528e:	88ab      	ldrh	r3, [r5, #4]
   b5290:	f10e 0e01 	add.w	lr, lr, #1
   b5294:	fa1f fe8e 	uxth.w	lr, lr
   b5298:	4573      	cmp	r3, lr
   b529a:	d8d8      	bhi.n	b524e <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b529c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b52a0:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b52a4:	6863      	ldr	r3, [r4, #4]
   b52a6:	1a9b      	subs	r3, r3, r2
   b52a8:	2b46      	cmp	r3, #70	; 0x46
   b52aa:	d9fb      	bls.n	b52a4 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b52ac:	6863      	ldr	r3, [r4, #4]
   b52ae:	eba3 0909 	sub.w	r9, r3, r9
   b52b2:	4589      	cmp	r9, r1
   b52b4:	f0c0 80e4 	bcc.w	b5480 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b52b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b52bc:	f000 fee0 	bl	b6080 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b52c0:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b52c2:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b52c6:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b52ca:	2900      	cmp	r1, #0
   b52cc:	d1ba      	bne.n	b5244 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b52ce:	460a      	mov	r2, r1
   b52d0:	e7e8      	b.n	b52a4 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b52d2:	6863      	ldr	r3, [r4, #4]
   b52d4:	1a9b      	subs	r3, r3, r2
   b52d6:	2b11      	cmp	r3, #17
   b52d8:	d8cf      	bhi.n	b527a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b52da:	6863      	ldr	r3, [r4, #4]
   b52dc:	1a9b      	subs	r3, r3, r2
   b52de:	2b11      	cmp	r3, #17
   b52e0:	d9f7      	bls.n	b52d2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b52e2:	e7ca      	b.n	b527a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b52e4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b52e8:	2b00      	cmp	r3, #0
   b52ea:	f6bf af7c 	bge.w	b51e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b52ee:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b52f2:	2b00      	cmp	r3, #0
   b52f4:	f6bf af77 	bge.w	b51e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b52f8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b52fc:	2b00      	cmp	r3, #0
   b52fe:	f6bf af72 	bge.w	b51e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5302:	0136      	lsls	r6, r6, #4
   b5304:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5306:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5308:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b530a:	f001 f91d 	bl	b6548 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b530e:	2800      	cmp	r0, #0
   b5310:	f43f af78 	beq.w	b5204 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b5314:	88ab      	ldrh	r3, [r5, #4]
   b5316:	2b00      	cmp	r3, #0
   b5318:	f000 80ed 	beq.w	b54f6 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b531c:	68ea      	ldr	r2, [r5, #12]
   b531e:	3b01      	subs	r3, #1
   b5320:	fa12 f783 	uxtah	r7, r2, r3
   b5324:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b5328:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b532a:	f248 0206 	movw	r2, #32774	; 0x8006
   b532e:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b5332:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5336:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b533a:	bf0c      	ite	eq
   b533c:	4693      	moveq	fp, r2
   b533e:	468b      	movne	fp, r1
   b5340:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b5344:	bf0c      	ite	eq
   b5346:	4616      	moveq	r6, r2
   b5348:	460e      	movne	r6, r1
   b534a:	f01c 0f20 	tst.w	ip, #32
   b534e:	bf0c      	ite	eq
   b5350:	4690      	moveq	r8, r2
   b5352:	4688      	movne	r8, r1
        pos++;
   b5354:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5358:	f8cd 8008 	str.w	r8, [sp, #8]
   b535c:	9601      	str	r6, [sp, #4]
        pos++;
   b535e:	f103 0802 	add.w	r8, r3, #2
   b5362:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5366:	9e01      	ldr	r6, [sp, #4]
   b5368:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b536c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5370:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b5374:	9e02      	ldr	r6, [sp, #8]
   b5376:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b537a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b537e:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b5382:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5386:	bf0c      	ite	eq
   b5388:	4693      	moveq	fp, r2
   b538a:	468b      	movne	fp, r1
   b538c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5390:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5394:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b5398:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b539c:	bf0c      	ite	eq
   b539e:	4693      	moveq	fp, r2
   b53a0:	468b      	movne	fp, r1
   b53a2:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b53a6:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b53aa:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b53ae:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b53b2:	bf0c      	ite	eq
   b53b4:	4693      	moveq	fp, r2
   b53b6:	468b      	movne	fp, r1
   b53b8:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b53bc:	f103 0a08 	add.w	sl, r3, #8
   b53c0:	f103 0806 	add.w	r8, r3, #6
   b53c4:	3307      	adds	r3, #7
   b53c6:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b53c8:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b53cc:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b53d0:	bf0c      	ite	eq
   b53d2:	4693      	moveq	fp, r2
   b53d4:	468b      	movne	fp, r1
        pos++;
   b53d6:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b53da:	f01c 0f01 	tst.w	ip, #1
   b53de:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b53e2:	bf15      	itete	ne
   b53e4:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b53e8:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b53ec:	fa1f f38a 	uxthne.w	r3, sl
   b53f0:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b53f4:	4577      	cmp	r7, lr
   b53f6:	d19c      	bne.n	b5332 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b53f8:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b53fa:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b53fc:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b53fe:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5400:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5402:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5404:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b5408:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b540a:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b540c:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b540e:	4b2e      	ldr	r3, [pc, #184]	; (b54c8 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5410:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5412:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5414:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5416:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5418:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b541c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5420:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b5424:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b5428:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b542c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5430:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b5434:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b5438:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b543c:	79eb      	ldrb	r3, [r5, #7]
   b543e:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b5442:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b5444:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5446:	5cfe      	ldrb	r6, [r7, r3]
   b5448:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b544c:	f003 031f 	and.w	r3, r3, #31
   b5450:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b5454:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b5458:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b545c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b5460:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b5462:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b5466:	2b00      	cmp	r3, #0
   b5468:	d0fb      	beq.n	b5462 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b546a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b546c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b5470:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b5474:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5478:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b547c:	f001 f86c 	bl	b6558 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5480:	f000 fe06 	bl	b6090 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b5484:	6128      	str	r0, [r5, #16]
}
   b5486:	b005      	add	sp, #20
   b5488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b548c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5490:	2b00      	cmp	r3, #0
   b5492:	f6bf aeb7 	bge.w	b5204 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5496:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b549a:	2b00      	cmp	r3, #0
   b549c:	f6bf aeb2 	bge.w	b5204 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b54a0:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b54a4:	2b00      	cmp	r3, #0
   b54a6:	f6bf aead 	bge.w	b5204 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b54aa:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b54ae:	2b00      	cmp	r3, #0
   b54b0:	f6bf aea8 	bge.w	b5204 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b54b4:	e725      	b.n	b5302 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b54b6:	bf00      	nop
   b54b8:	000be440 	.word	0x000be440
   b54bc:	4001c000 	.word	0x4001c000
   b54c0:	40021000 	.word	0x40021000
   b54c4:	40022000 	.word	0x40022000
   b54c8:	2003e6b4 	.word	0x2003e6b4
   b54cc:	e0001000 	.word	0xe0001000
   b54d0:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b54d4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b54d8:	2b00      	cmp	r3, #0
   b54da:	f6bf ae8d 	bge.w	b51f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b54de:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b54e2:	2b00      	cmp	r3, #0
   b54e4:	f6bf ae88 	bge.w	b51f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b54e8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b54ec:	2b00      	cmp	r3, #0
   b54ee:	f6bf ae83 	bge.w	b51f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b54f2:	e706      	b.n	b5302 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b54f4:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b54f6:	2304      	movs	r3, #4
   b54f8:	2102      	movs	r1, #2
   b54fa:	e783      	b.n	b5404 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b54fc <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b54fc:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b54fe:	f000 fddf 	bl	b60c0 <HAL_Pin_Map>
   b5502:	4b01      	ldr	r3, [pc, #4]	; (b5508 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b5504:	6018      	str	r0, [r3, #0]
}
   b5506:	bd08      	pop	{r3, pc}
   b5508:	2003e6b4 	.word	0x2003e6b4

000b550c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5510:	b085      	sub	sp, #20
   b5512:	461f      	mov	r7, r3
   b5514:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5518:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b551c:	eba8 0902 	sub.w	r9, r8, r2
   b5520:	eba7 0a01 	sub.w	sl, r7, r1
   b5524:	f1b9 0f00 	cmp.w	r9, #0
   b5528:	bfb8      	it	lt
   b552a:	f1c9 0900 	rsblt	r9, r9, #0
   b552e:	f1ba 0f00 	cmp.w	sl, #0
   b5532:	bfb8      	it	lt
   b5534:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b5538:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b553a:	4683      	mov	fp, r0
   b553c:	460c      	mov	r4, r1
   b553e:	4615      	mov	r5, r2
  if (steep) {
   b5540:	dd04      	ble.n	b554c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b5542:	463a      	mov	r2, r7
    swap(x0, y0);
   b5544:	462c      	mov	r4, r5
    swap(x1, y1);
   b5546:	4647      	mov	r7, r8
    swap(x0, y0);
   b5548:	460d      	mov	r5, r1
    swap(x1, y1);
   b554a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b554c:	42bc      	cmp	r4, r7
   b554e:	dd05      	ble.n	b555c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5550:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b5552:	4645      	mov	r5, r8
   b5554:	4690      	mov	r8, r2
  if (x0 > x1) {
   b5556:	4622      	mov	r2, r4
   b5558:	463c      	mov	r4, r7
   b555a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b555c:	1b3e      	subs	r6, r7, r4
   b555e:	b2b2      	uxth	r2, r6
   b5560:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b5562:	eba8 0205 	sub.w	r2, r8, r5
   b5566:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b556a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b556e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5572:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b5576:	4545      	cmp	r5, r8
   b5578:	bfb4      	ite	lt
   b557a:	2201      	movlt	r2, #1
   b557c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b5580:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b5582:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b5584:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b5586:	42bc      	cmp	r4, r7
   b5588:	dc1c      	bgt.n	b55c4 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b558a:	f8db 2000 	ldr.w	r2, [fp]
   b558e:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5590:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b5592:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b5596:	bfc7      	ittee	gt
   b5598:	4629      	movgt	r1, r5
   b559a:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b559c:	462a      	movle	r2, r5
   b559e:	4621      	movle	r1, r4
   b55a0:	4658      	mov	r0, fp
   b55a2:	47c0      	blx	r8
    }
    err -= dy;
   b55a4:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b55a6:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b55a8:	1ab6      	subs	r6, r6, r2
   b55aa:	b2b1      	uxth	r1, r6
   b55ac:	b236      	sxth	r6, r6
    if (err < 0) {
   b55ae:	2e00      	cmp	r6, #0
   b55b0:	da05      	bge.n	b55be <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b55b2:	9a02      	ldr	r2, [sp, #8]
   b55b4:	4415      	add	r5, r2
      err += dx;
   b55b6:	9a00      	ldr	r2, [sp, #0]
   b55b8:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b55ba:	b22d      	sxth	r5, r5
      err += dx;
   b55bc:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b55be:	3401      	adds	r4, #1
   b55c0:	b224      	sxth	r4, r4
   b55c2:	e7e0      	b.n	b5586 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b55c4:	b005      	add	sp, #20
   b55c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b55ca <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b55ca:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b55ce:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b55d2:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b55d4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b55d8:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b55dc:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b55de:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b55e0:	4616      	mov	r6, r2
   b55e2:	468a      	mov	sl, r1
   b55e4:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b55e6:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b55e8:	6823      	ldr	r3, [r4, #0]
   b55ea:	f8cd 8000 	str.w	r8, [sp]
   b55ee:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b55f2:	4432      	add	r2, r6
   b55f4:	69df      	ldr	r7, [r3, #28]
   b55f6:	4651      	mov	r1, sl
   b55f8:	462b      	mov	r3, r5
   b55fa:	4620      	mov	r0, r4
   b55fc:	b212      	sxth	r2, r2
   b55fe:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b5600:	6823      	ldr	r3, [r4, #0]
   b5602:	f8cd 8000 	str.w	r8, [sp]
   b5606:	699f      	ldr	r7, [r3, #24]
   b5608:	4632      	mov	r2, r6
   b560a:	464b      	mov	r3, r9
   b560c:	4651      	mov	r1, sl
   b560e:	4620      	mov	r0, r4
   b5610:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b5612:	1e6b      	subs	r3, r5, #1
   b5614:	eb03 010a 	add.w	r1, r3, sl
   b5618:	6823      	ldr	r3, [r4, #0]
   b561a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b561e:	699d      	ldr	r5, [r3, #24]
   b5620:	4632      	mov	r2, r6
   b5622:	464b      	mov	r3, r9
   b5624:	b209      	sxth	r1, r1
   b5626:	4620      	mov	r0, r4
   b5628:	46ac      	mov	ip, r5
}
   b562a:	b002      	add	sp, #8
   b562c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5630:	4760      	bx	ip

000b5632 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b5632:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b5634:	3b01      	subs	r3, #1
   b5636:	4413      	add	r3, r2
   b5638:	6804      	ldr	r4, [r0, #0]
   b563a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b563e:	9501      	str	r5, [sp, #4]
   b5640:	b21b      	sxth	r3, r3
   b5642:	9300      	str	r3, [sp, #0]
   b5644:	6964      	ldr	r4, [r4, #20]
   b5646:	460b      	mov	r3, r1
   b5648:	47a0      	blx	r4
}
   b564a:	b003      	add	sp, #12
   b564c:	bd30      	pop	{r4, r5, pc}

000b564e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b564e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5650:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5654:	6804      	ldr	r4, [r0, #0]
   b5656:	e9cd 2500 	strd	r2, r5, [sp]
   b565a:	3b01      	subs	r3, #1
   b565c:	440b      	add	r3, r1
   b565e:	6964      	ldr	r4, [r4, #20]
   b5660:	b21b      	sxth	r3, r3
   b5662:	47a0      	blx	r4
}
   b5664:	b003      	add	sp, #12
   b5666:	bd30      	pop	{r4, r5, pc}

000b5668 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b5668:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b566c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5670:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5674:	4605      	mov	r5, r0
   b5676:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5678:	460c      	mov	r4, r1
   b567a:	18ce      	adds	r6, r1, r3
   b567c:	42b4      	cmp	r4, r6
   b567e:	da0b      	bge.n	b5698 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5680:	682b      	ldr	r3, [r5, #0]
   b5682:	f8cd 8000 	str.w	r8, [sp]
   b5686:	699f      	ldr	r7, [r3, #24]
   b5688:	4621      	mov	r1, r4
   b568a:	464b      	mov	r3, r9
   b568c:	4652      	mov	r2, sl
   b568e:	4628      	mov	r0, r5
   b5690:	3401      	adds	r4, #1
   b5692:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5694:	b224      	sxth	r4, r4
   b5696:	e7f1      	b.n	b567c <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5698:	b002      	add	sp, #8
   b569a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b569e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b569e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b56a0:	6802      	ldr	r2, [r0, #0]
   b56a2:	9101      	str	r1, [sp, #4]
   b56a4:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b56a8:	9100      	str	r1, [sp, #0]
   b56aa:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b56ac:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b56b0:	2200      	movs	r2, #0
   b56b2:	4611      	mov	r1, r2
   b56b4:	47a0      	blx	r4
}
   b56b6:	b002      	add	sp, #8
   b56b8:	bd10      	pop	{r4, pc}

000b56ba <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b56ba:	4770      	bx	lr

000b56bc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b56bc:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b56be:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b56c0:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b56c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b56c6:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b56c8:	4d05      	ldr	r5, [pc, #20]	; (b56e0 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b56ca:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b56cc:	2201      	movs	r2, #1
   b56ce:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b56d0:	6005      	str	r5, [r0, #0]
   b56d2:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b56d4:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b56d6:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b56d8:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b56da:	7682      	strb	r2, [r0, #26]
}
   b56dc:	bd30      	pop	{r4, r5, pc}
   b56de:	bf00      	nop
   b56e0:	000be958 	.word	0x000be958

000b56e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
			      uint16_t color) {
   b56e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56e8:	b089      	sub	sp, #36	; 0x24
   b56ea:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b56ee:	f9bd 7048 	ldrsh.w	r7, [sp, #72]	; 0x48
   b56f2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
   b56f6:	9305      	str	r3, [sp, #20]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b56f8:	1dfa      	adds	r2, r7, #7
			      uint16_t color) {
   b56fa:	e9cd 0101 	strd	r0, r1, [sp, #4]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b56fe:	bf48      	it	mi
   b5700:	f107 020e 	addmi.w	r2, r7, #14
   b5704:	2400      	movs	r4, #0
			      uint16_t color) {
   b5706:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  int16_t i, j, byteWidth = (w + 7) / 8;
   b570a:	ea4f 0be2 	mov.w	fp, r2, asr #3
   b570e:	4625      	mov	r5, r4
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b5710:	f04f 0980 	mov.w	r9, #128	; 0x80
  for(j=0; j<h; j++) {
   b5714:	9905      	ldr	r1, [sp, #20]
   b5716:	b22a      	sxth	r2, r5
   b5718:	4291      	cmp	r1, r2
   b571a:	dd2a      	ble.n	b5772 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b571c:	9a04      	ldr	r2, [sp, #16]
   b571e:	eb02 0a04 	add.w	sl, r2, r4
	drawPixel(x+i, y+j, color);
   b5722:	9a03      	ldr	r2, [sp, #12]
   b5724:	442a      	add	r2, r5
   b5726:	f04f 0800 	mov.w	r8, #0
   b572a:	b212      	sxth	r2, r2
   b572c:	fa0f f088 	sxth.w	r0, r8
    for(i=0; i<w; i++ ) {
   b5730:	4287      	cmp	r7, r0
   b5732:	fa1f f188 	uxth.w	r1, r8
   b5736:	dd19      	ble.n	b576c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b5738:	10c0      	asrs	r0, r0, #3
   b573a:	f81a c000 	ldrb.w	ip, [sl, r0]
   b573e:	f001 0007 	and.w	r0, r1, #7
   b5742:	fa49 f000 	asr.w	r0, r9, r0
   b5746:	ea1c 0f00 	tst.w	ip, r0
   b574a:	d00c      	beq.n	b5766 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x82>
	drawPixel(x+i, y+j, color);
   b574c:	9802      	ldr	r0, [sp, #8]
   b574e:	4401      	add	r1, r0
   b5750:	9801      	ldr	r0, [sp, #4]
   b5752:	6800      	ldr	r0, [r0, #0]
   b5754:	6900      	ldr	r0, [r0, #16]
   b5756:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b575a:	4606      	mov	r6, r0
   b575c:	b209      	sxth	r1, r1
   b575e:	9801      	ldr	r0, [sp, #4]
   b5760:	47b0      	blx	r6
   b5762:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    for(i=0; i<w; i++ ) {
   b5766:	f108 0801 	add.w	r8, r8, #1
   b576a:	e7df      	b.n	b572c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x48>
  for(j=0; j<h; j++) {
   b576c:	3501      	adds	r5, #1
   b576e:	445c      	add	r4, fp
   b5770:	e7d0      	b.n	b5714 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x30>
}
   b5772:	b009      	add	sp, #36	; 0x24
   b5774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5778 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b577c:	ed2d 8b02 	vpush	{d8}
   b5780:	b08d      	sub	sp, #52	; 0x34
   b5782:	4607      	mov	r7, r0
   b5784:	9104      	str	r1, [sp, #16]
   b5786:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b578a:	9105      	str	r1, [sp, #20]
   b578c:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5790:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b5792:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b5796:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5798:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b579c:	4281      	cmp	r1, r0
   b579e:	dd52      	ble.n	b5846 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b57a0:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b57a4:	4291      	cmp	r1, r2
   b57a6:	dd4e      	ble.n	b5846 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b57a8:	2106      	movs	r1, #6
   b57aa:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b57ae:	2c00      	cmp	r4, #0
   b57b0:	dd49      	ble.n	b5846 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b57b2:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b57b6:	2c00      	cmp	r4, #0
   b57b8:	dd45      	ble.n	b5846 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b57ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b57be:	930b      	str	r3, [sp, #44]	; 0x2c
   b57c0:	b293      	uxth	r3, r2
   b57c2:	9307      	str	r3, [sp, #28]
   b57c4:	3308      	adds	r3, #8
   b57c6:	b29b      	uxth	r3, r3
   b57c8:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b57ca:	2400      	movs	r4, #0
   b57cc:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b57ce:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b57d0:	bf1c      	itt	ne
   b57d2:	4b2c      	ldrne	r3, [pc, #176]	; (b5884 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b57d4:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b57d6:	9e07      	ldr	r6, [sp, #28]
   b57d8:	bf16      	itet	ne
   b57da:	191b      	addne	r3, r3, r4
      line = 0x0;
   b57dc:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b57de:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b57e0:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b57e2:	9a04      	ldr	r2, [sp, #16]
   b57e4:	b2ab      	uxth	r3, r5
   b57e6:	930a      	str	r3, [sp, #40]	; 0x28
   b57e8:	fb04 f305 	mul.w	r3, r4, r5
   b57ec:	fa13 f382 	uxtah	r3, r3, r2
   b57f0:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b57f2:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b57f6:	ee08 3a10 	vmov	s16, r3
   b57fa:	46b0      	mov	r8, r6
   b57fc:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5800:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5804:	9b03      	ldr	r3, [sp, #12]
   b5806:	07db      	lsls	r3, r3, #31
   b5808:	d52f      	bpl.n	b586a <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b580a:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b580c:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b580e:	d11f      	bne.n	b5850 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5810:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5814:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b5816:	b232      	sxth	r2, r6
   b5818:	4651      	mov	r1, sl
   b581a:	4638      	mov	r0, r7
   b581c:	47d8      	blx	fp
      line >>= 1;
   b581e:	9b03      	ldr	r3, [sp, #12]
   b5820:	085b      	lsrs	r3, r3, #1
   b5822:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5826:	3601      	adds	r6, #1
   b5828:	4498      	add	r8, r3
   b582a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b582c:	b2b6      	uxth	r6, r6
   b582e:	42b3      	cmp	r3, r6
   b5830:	fa1f f888 	uxth.w	r8, r8
   b5834:	d1e6      	bne.n	b5804 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5836:	9b08      	ldr	r3, [sp, #32]
   b5838:	3b01      	subs	r3, #1
   b583a:	3401      	adds	r4, #1
   b583c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5840:	b264      	sxtb	r4, r4
   b5842:	9308      	str	r3, [sp, #32]
   b5844:	d1c3      	bne.n	b57ce <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5846:	b00d      	add	sp, #52	; 0x34
   b5848:	ecbd 8b02 	vpop	{d8}
   b584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5850:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5852:	e9cd 9200 	strd	r9, r2, [sp]
   b5856:	ee18 1a10 	vmov	r1, s16
   b585a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b585e:	fa0f f288 	sxth.w	r2, r8
   b5862:	464b      	mov	r3, r9
   b5864:	4638      	mov	r0, r7
   b5866:	47d8      	blx	fp
   b5868:	e7d9      	b.n	b581e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b586a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b586e:	4293      	cmp	r3, r2
   b5870:	d0d5      	beq.n	b581e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5872:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5874:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5876:	d103      	bne.n	b5880 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5878:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b587c:	9b06      	ldr	r3, [sp, #24]
   b587e:	e7ca      	b.n	b5816 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5880:	9a06      	ldr	r2, [sp, #24]
   b5882:	e7e6      	b.n	b5852 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5884:	000be454 	.word	0x000be454

000b5888 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5888:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b588a:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b588c:	b085      	sub	sp, #20
   b588e:	4604      	mov	r4, r0
  if (c == '\n') {
   b5890:	d107      	bne.n	b58a2 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b5892:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5894:	8a63      	ldrh	r3, [r4, #18]
   b5896:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b589a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b589c:	2300      	movs	r3, #0
   b589e:	8223      	strh	r3, [r4, #16]
   b58a0:	e021      	b.n	b58e6 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b58a2:	290d      	cmp	r1, #13
   b58a4:	d01f      	beq.n	b58e6 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b58a6:	7e03      	ldrb	r3, [r0, #24]
   b58a8:	9302      	str	r3, [sp, #8]
   b58aa:	8ac3      	ldrh	r3, [r0, #22]
   b58ac:	9301      	str	r3, [sp, #4]
   b58ae:	8a83      	ldrh	r3, [r0, #20]
   b58b0:	9300      	str	r3, [sp, #0]
   b58b2:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b58b6:	460b      	mov	r3, r1
   b58b8:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b58bc:	f7ff ff5c 	bl	b5778 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b58c0:	7e20      	ldrb	r0, [r4, #24]
   b58c2:	8a23      	ldrh	r3, [r4, #16]
   b58c4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b58c8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b58cc:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b58ce:	b21b      	sxth	r3, r3
   b58d0:	4602      	mov	r2, r0
   b58d2:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b58d4:	b139      	cbz	r1, b58e6 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b58d6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b58da:	f06f 0505 	mvn.w	r5, #5
   b58de:	fb05 1100 	mla	r1, r5, r0, r1
   b58e2:	428b      	cmp	r3, r1
   b58e4:	dcd6      	bgt.n	b5894 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b58e6:	2001      	movs	r0, #1
   b58e8:	b005      	add	sp, #20
   b58ea:	bd30      	pop	{r4, r5, pc}

000b58ec <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b58ec:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b58ee:	8242      	strh	r2, [r0, #18]
}
   b58f0:	4770      	bx	lr

000b58f2 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b58f2:	2901      	cmp	r1, #1
   b58f4:	bf38      	it	cc
   b58f6:	2101      	movcc	r1, #1
   b58f8:	7601      	strb	r1, [r0, #24]
}
   b58fa:	4770      	bx	lr

000b58fc <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b58fc:	82c1      	strh	r1, [r0, #22]
   b58fe:	8281      	strh	r1, [r0, #20]
}
   b5900:	4770      	bx	lr

000b5902 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5902:	7e40      	ldrb	r0, [r0, #25]
   b5904:	4770      	bx	lr

000b5906 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b5906:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b590a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b590e:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b5910:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b5912:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5916:	bf59      	ittee	pl
   b5918:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b591a:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b591c:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b591e:	81c3      	strhmi	r3, [r0, #14]
}
   b5920:	4770      	bx	lr

000b5922 <_ZN12Adafruit_GFX5widthEv>:
}
   b5922:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5926:	4770      	bx	lr

000b5928 <_ZN12Adafruit_GFX6heightEv>:
}
   b5928:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b592c:	4770      	bx	lr
	...

000b5930 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5930:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b5932:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5934:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5938:	2d02      	cmp	r5, #2
   b593a:	d069      	beq.n	b5a10 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b593c:	2d03      	cmp	r5, #3
   b593e:	f000 8099 	beq.w	b5a74 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b5942:	2d01      	cmp	r5, #1
   b5944:	d16c      	bne.n	b5a20 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b5946:	8905      	ldrh	r5, [r0, #8]
   b5948:	43d2      	mvns	r2, r2
   b594a:	442a      	add	r2, r5
   b594c:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b594e:	2a00      	cmp	r2, #0
   b5950:	db5d      	blt.n	b5a0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5952:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5956:	4295      	cmp	r5, r2
   b5958:	dd59      	ble.n	b5a0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b595a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b595c:	bfbe      	ittt	lt
   b595e:	185b      	addlt	r3, r3, r1
   b5960:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5962:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b5964:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5968:	18cd      	adds	r5, r1, r3
   b596a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b596c:	bfc4      	itt	gt
   b596e:	1a43      	subgt	r3, r0, r1
   b5970:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b5972:	2b00      	cmp	r3, #0
   b5974:	dd4b      	ble.n	b5a0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b5976:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b597a:	f8df c120 	ldr.w	ip, [pc, #288]	; b5a9c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b597e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b5982:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b5986:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5988:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b598c:	d01a      	beq.n	b59c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b598e:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b5992:	4e40      	ldr	r6, [pc, #256]	; (b5a94 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b5994:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b5996:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5998:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b599a:	bf3f      	itttt	cc
   b599c:	eba5 0e03 	subcc.w	lr, r5, r3
   b59a0:	26ff      	movcc	r6, #255	; 0xff
   b59a2:	fa46 f60e 	asrcc.w	r6, r6, lr
   b59a6:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b59a8:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b59ac:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b59ae:	bf0c      	ite	eq
   b59b0:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b59b2:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b59b4:	42ab      	cmp	r3, r5
   b59b6:	f80c 6002 	strb.w	r6, [ip, r2]
   b59ba:	d328      	bcc.n	b5a0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b59bc:	3908      	subs	r1, #8
   b59be:	440b      	add	r3, r1
   b59c0:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b59c2:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b59c4:	2b07      	cmp	r3, #7
   b59c6:	d919      	bls.n	b59fc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b59c8:	2c01      	cmp	r4, #1
   b59ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b59ce:	bf18      	it	ne
   b59d0:	2500      	movne	r5, #0
   b59d2:	b2ed      	uxtb	r5, r5
   b59d4:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b59d8:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b59da:	3a08      	subs	r2, #8
   b59dc:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b59de:	2a07      	cmp	r2, #7
      *pBuf = val;
   b59e0:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b59e4:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b59e8:	d8f7      	bhi.n	b59da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b59ea:	f1a3 0208 	sub.w	r2, r3, #8
   b59ee:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b59f2:	3201      	adds	r2, #1
   b59f4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b59f8:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b59fc:	b13b      	cbz	r3, b5a0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b59fe:	4a26      	ldr	r2, [pc, #152]	; (b5a98 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b5a00:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b5a02:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5a04:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5a06:	bf0c      	ite	eq
   b5a08:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b5a0a:	4393      	bicne	r3, r2
   b5a0c:	7003      	strb	r3, [r0, #0]
}
   b5a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5a10:	8945      	ldrh	r5, [r0, #10]
   b5a12:	43d2      	mvns	r2, r2
   b5a14:	442a      	add	r2, r5
      x -= (w-1);
   b5a16:	18cd      	adds	r5, r1, r3
   b5a18:	8901      	ldrh	r1, [r0, #8]
   b5a1a:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b5a1c:	b212      	sxth	r2, r2
      x -= (w-1);
   b5a1e:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b5a20:	2a00      	cmp	r2, #0
   b5a22:	dbf4      	blt.n	b5a0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5a24:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5a28:	4295      	cmp	r5, r2
   b5a2a:	ddf0      	ble.n	b5a0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b5a2c:	2900      	cmp	r1, #0
    w += x;
   b5a2e:	bfbe      	ittt	lt
   b5a30:	185b      	addlt	r3, r3, r1
   b5a32:	b21b      	sxthlt	r3, r3
    x = 0;
   b5a34:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b5a36:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5a3a:	18ce      	adds	r6, r1, r3
   b5a3c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5a3e:	bfc4      	itt	gt
   b5a40:	1a6b      	subgt	r3, r5, r1
   b5a42:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5a44:	2b00      	cmp	r3, #0
   b5a46:	dde2      	ble.n	b5a0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5a48:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b5a4a:	2580      	movs	r5, #128	; 0x80
   b5a4c:	fb10 1105 	smlabb	r1, r0, r5, r1
   b5a50:	4812      	ldr	r0, [pc, #72]	; (b5a9c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b5a52:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b5a54:	f002 0007 	and.w	r0, r2, #7
   b5a58:	2201      	movs	r2, #1
   b5a5a:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b5a5c:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5a5e:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b5a60:	440b      	add	r3, r1
   b5a62:	d10c      	bne.n	b5a7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b5a64:	428b      	cmp	r3, r1
   b5a66:	d0d2      	beq.n	b5a0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5a68:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5a6c:	4310      	orrs	r0, r2
   b5a6e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5a72:	e7f7      	b.n	b5a64 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5a74:	18cd      	adds	r5, r1, r3
   b5a76:	8941      	ldrh	r1, [r0, #10]
   b5a78:	1b49      	subs	r1, r1, r5
   b5a7a:	b209      	sxth	r1, r1
      break;
   b5a7c:	e767      	b.n	b594e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b5a7e:	43d2      	mvns	r2, r2
   b5a80:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b5a82:	428b      	cmp	r3, r1
   b5a84:	d0c3      	beq.n	b5a0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5a86:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5a8a:	4010      	ands	r0, r2
   b5a8c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5a90:	e7f7      	b.n	b5a82 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b5a92:	bf00      	nop
   b5a94:	2003e178 	.word	0x2003e178
   b5a98:	2003e170 	.word	0x2003e170
   b5a9c:	2003e180 	.word	0x2003e180

000b5aa0 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b5aa2:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5aa4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5aa8:	2d02      	cmp	r5, #2
   b5aaa:	d034      	beq.n	b5b16 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b5aac:	2d03      	cmp	r5, #3
   b5aae:	f000 809b 	beq.w	b5be8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b5ab2:	2d01      	cmp	r5, #1
   b5ab4:	d137      	bne.n	b5b26 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b5ab6:	18d5      	adds	r5, r2, r3
   b5ab8:	8902      	ldrh	r2, [r0, #8]
   b5aba:	1b52      	subs	r2, r2, r5
   b5abc:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b5abe:	2900      	cmp	r1, #0
   b5ac0:	f2c0 8091 	blt.w	b5be6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5ac4:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5ac8:	428d      	cmp	r5, r1
   b5aca:	f340 808c 	ble.w	b5be6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b5ace:	2a00      	cmp	r2, #0
    w += x;
   b5ad0:	bfbe      	ittt	lt
   b5ad2:	189b      	addlt	r3, r3, r2
   b5ad4:	b21b      	sxthlt	r3, r3
    x = 0;
   b5ad6:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b5ad8:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5adc:	18d6      	adds	r6, r2, r3
   b5ade:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5ae0:	bfc4      	itt	gt
   b5ae2:	1aab      	subgt	r3, r5, r2
   b5ae4:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5ae6:	2b00      	cmp	r3, #0
   b5ae8:	dd7d      	ble.n	b5be6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5aea:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b5aec:	2580      	movs	r5, #128	; 0x80
   b5aee:	fb10 2205 	smlabb	r2, r0, r5, r2
   b5af2:	4845      	ldr	r0, [pc, #276]	; (b5c08 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b5af4:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b5af6:	f001 0007 	and.w	r0, r1, #7
   b5afa:	2101      	movs	r1, #1
   b5afc:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b5afe:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5b00:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b5b02:	4413      	add	r3, r2
   b5b04:	d175      	bne.n	b5bf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b5b06:	429a      	cmp	r2, r3
   b5b08:	d06d      	beq.n	b5be6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5b0a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5b0e:	4308      	orrs	r0, r1
   b5b10:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5b14:	e7f7      	b.n	b5b06 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b5b16:	8905      	ldrh	r5, [r0, #8]
   b5b18:	43c9      	mvns	r1, r1
   b5b1a:	4429      	add	r1, r5
      y -= (h-1);
   b5b1c:	18d5      	adds	r5, r2, r3
   b5b1e:	8942      	ldrh	r2, [r0, #10]
   b5b20:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b5b22:	b209      	sxth	r1, r1
      y -= (h-1);
   b5b24:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b5b26:	2900      	cmp	r1, #0
   b5b28:	db5d      	blt.n	b5be6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5b2a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5b2e:	428d      	cmp	r5, r1
   b5b30:	dd59      	ble.n	b5be6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b5b32:	2a00      	cmp	r2, #0
    __h += __y;
   b5b34:	bfbe      	ittt	lt
   b5b36:	189b      	addlt	r3, r3, r2
   b5b38:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5b3a:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5b3c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5b40:	18d5      	adds	r5, r2, r3
   b5b42:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5b44:	bfc4      	itt	gt
   b5b46:	1a83      	subgt	r3, r0, r2
   b5b48:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b5b4a:	2b00      	cmp	r3, #0
   b5b4c:	dd4b      	ble.n	b5be6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b5b4e:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b5b52:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5c08 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b5b56:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b5b5a:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b5b5e:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5b60:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5b64:	d01a      	beq.n	b5b9c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b5b66:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5b6a:	4e28      	ldr	r6, [pc, #160]	; (b5c0c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5b6c:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b5b6e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5b70:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5b72:	bf3f      	itttt	cc
   b5b74:	eba5 0e03 	subcc.w	lr, r5, r3
   b5b78:	26ff      	movcc	r6, #255	; 0xff
   b5b7a:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5b7e:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b5b80:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5b84:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5b86:	bf0c      	ite	eq
   b5b88:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5b8a:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5b8c:	42ab      	cmp	r3, r5
   b5b8e:	f80c 6001 	strb.w	r6, [ip, r1]
   b5b92:	d328      	bcc.n	b5be6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5b94:	3a08      	subs	r2, #8
   b5b96:	4413      	add	r3, r2
   b5b98:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5b9a:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5b9c:	2b07      	cmp	r3, #7
   b5b9e:	d919      	bls.n	b5bd4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5ba0:	2c01      	cmp	r4, #1
   b5ba2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b5ba6:	bf18      	it	ne
   b5ba8:	2500      	movne	r5, #0
   b5baa:	b2ed      	uxtb	r5, r5
   b5bac:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5bb0:	461a      	mov	r2, r3
      h -= 8;
   b5bb2:	3a08      	subs	r2, #8
   b5bb4:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5bb6:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5bb8:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5bbc:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5bc0:	d8f7      	bhi.n	b5bb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b5bc2:	f1a3 0208 	sub.w	r2, r3, #8
   b5bc6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5bca:	3201      	adds	r2, #1
   b5bcc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5bd0:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b5bd4:	b13b      	cbz	r3, b5be6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b5bd6:	4a0e      	ldr	r2, [pc, #56]	; (b5c10 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5bd8:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b5bda:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5bdc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5bde:	bf0c      	ite	eq
   b5be0:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b5be2:	4393      	bicne	r3, r2
   b5be4:	7003      	strb	r3, [r0, #0]
}
   b5be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5be8:	8945      	ldrh	r5, [r0, #10]
   b5bea:	43c9      	mvns	r1, r1
   b5bec:	4429      	add	r1, r5
   b5bee:	b209      	sxth	r1, r1
      break;
   b5bf0:	e765      	b.n	b5abe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b5bf2:	43c9      	mvns	r1, r1
   b5bf4:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b5bf6:	429a      	cmp	r2, r3
   b5bf8:	d0f5      	beq.n	b5be6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5bfa:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5bfe:	4008      	ands	r0, r1
   b5c00:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5c04:	e7f7      	b.n	b5bf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b5c06:	bf00      	nop
   b5c08:	2003e180 	.word	0x2003e180
   b5c0c:	2003e178 	.word	0x2003e178
   b5c10:	2003e170 	.word	0x2003e170

000b5c14 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b5c14:	4770      	bx	lr
	...

000b5c18 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5c1a:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5c1c:	4606      	mov	r6, r0
   b5c1e:	4614      	mov	r4, r2
   b5c20:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5c22:	db2d      	blt.n	b5c80 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5c24:	f7ff fe7d 	bl	b5922 <_ZN12Adafruit_GFX5widthEv>
   b5c28:	42a8      	cmp	r0, r5
   b5c2a:	dd29      	ble.n	b5c80 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5c2c:	2c00      	cmp	r4, #0
   b5c2e:	db27      	blt.n	b5c80 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5c30:	4630      	mov	r0, r6
   b5c32:	f7ff fe79 	bl	b5928 <_ZN12Adafruit_GFX6heightEv>
   b5c36:	42a0      	cmp	r0, r4
   b5c38:	dd22      	ble.n	b5c80 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5c3a:	4630      	mov	r0, r6
   b5c3c:	f7ff fe61 	bl	b5902 <_ZN12Adafruit_GFX11getRotationEv>
   b5c40:	2802      	cmp	r0, #2
   b5c42:	d01e      	beq.n	b5c82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b5c44:	2803      	cmp	r0, #3
   b5c46:	d025      	beq.n	b5c94 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5c48:	2801      	cmp	r0, #1
   b5c4a:	d104      	bne.n	b5c56 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5c4c:	8933      	ldrh	r3, [r6, #8]
   b5c4e:	43e2      	mvns	r2, r4
   b5c50:	441a      	add	r2, r3
    break;
   b5c52:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b5c54:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5c56:	2c00      	cmp	r4, #0
   b5c58:	4622      	mov	r2, r4
   b5c5a:	bfb8      	it	lt
   b5c5c:	1de2      	addlt	r2, r4, #7
   b5c5e:	10d2      	asrs	r2, r2, #3
   b5c60:	2180      	movs	r1, #128	; 0x80
   b5c62:	fb12 5501 	smlabb	r5, r2, r1, r5
   b5c66:	490e      	ldr	r1, [pc, #56]	; (b5ca0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5c68:	2201      	movs	r2, #1
   b5c6a:	f004 0407 	and.w	r4, r4, #7
   b5c6e:	574b      	ldrsb	r3, [r1, r5]
   b5c70:	fa02 f404 	lsl.w	r4, r2, r4
   b5c74:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b5c76:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5c78:	bf0c      	ite	eq
   b5c7a:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5c7c:	43a3      	bicne	r3, r4
   b5c7e:	554b      	strb	r3, [r1, r5]
}
   b5c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b5c82:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5c84:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b5c86:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5c88:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5c8a:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5c8c:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b5c8e:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b5c90:	b224      	sxth	r4, r4
    break;
   b5c92:	e7e0      	b.n	b5c56 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5c94:	8973      	ldrh	r3, [r6, #10]
   b5c96:	3b01      	subs	r3, #1
   b5c98:	1b5b      	subs	r3, r3, r5
    break;
   b5c9a:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5c9c:	b21c      	sxth	r4, r3
    break;
   b5c9e:	e7da      	b.n	b5c56 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b5ca0:	2003e180 	.word	0x2003e180

000b5ca4 <_ZN16Adafruit_SSD1306D0Ev>:
   b5ca4:	b510      	push	{r4, lr}
   b5ca6:	2124      	movs	r1, #36	; 0x24
   b5ca8:	4604      	mov	r4, r0
   b5caa:	f7fe f9f6 	bl	b409a <_ZdlPvj>
   b5cae:	4620      	mov	r0, r4
   b5cb0:	bd10      	pop	{r4, pc}
	...

000b5cb4 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5cb4:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5cb6:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5cb8:	4604      	mov	r4, r0
   b5cba:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5cbc:	2180      	movs	r1, #128	; 0x80
   b5cbe:	f7ff fcfd 	bl	b56bc <_ZN12Adafruit_GFXC1Ess>
   b5cc2:	4b06      	ldr	r3, [pc, #24]	; (b5cdc <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b5cc4:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b5cc6:	23ff      	movs	r3, #255	; 0xff
   b5cc8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b5ccc:	7763      	strb	r3, [r4, #29]
   b5cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5cd2:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b5cd4:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5cd8:	4620      	mov	r0, r4
   b5cda:	bd38      	pop	{r3, r4, r5, pc}
   b5cdc:	000be990 	.word	0x000be990

000b5ce0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b5ce0:	4802      	ldr	r0, [pc, #8]	; (b5cec <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b5ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5ce6:	2100      	movs	r1, #0
   b5ce8:	f001 bff4 	b.w	b7cd4 <memset>
   b5cec:	2003e180 	.word	0x2003e180

000b5cf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5cf0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5cf2:	4c0b      	ldr	r4, [pc, #44]	; (b5d20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5cf4:	7821      	ldrb	r1, [r4, #0]
   b5cf6:	f3bf 8f5b 	dmb	ish
   b5cfa:	f011 0101 	ands.w	r1, r1, #1
   b5cfe:	d10b      	bne.n	b5d18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5d00:	4620      	mov	r0, r4
   b5d02:	9101      	str	r1, [sp, #4]
   b5d04:	f7fe f9d8 	bl	b40b8 <__cxa_guard_acquire>
   b5d08:	9901      	ldr	r1, [sp, #4]
   b5d0a:	b128      	cbz	r0, b5d18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5d0c:	4805      	ldr	r0, [pc, #20]	; (b5d24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5d0e:	f000 feef 	bl	b6af0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5d12:	4620      	mov	r0, r4
   b5d14:	f7fe f9d5 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b5d18:	4802      	ldr	r0, [pc, #8]	; (b5d24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5d1a:	b002      	add	sp, #8
   b5d1c:	bd10      	pop	{r4, pc}
   b5d1e:	bf00      	nop
   b5d20:	2003e6b8 	.word	0x2003e6b8
   b5d24:	2003e6bc 	.word	0x2003e6bc

000b5d28 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5d28:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b5d2a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b5d2e:	b143      	cbz	r3, b5d42 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5d30:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b5d32:	f7ff ffdd 	bl	b5cf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5d36:	9901      	ldr	r1, [sp, #4]
}
   b5d38:	b003      	add	sp, #12
   b5d3a:	f85d eb04 	ldr.w	lr, [sp], #4
   b5d3e:	f000 bf8b 	b.w	b6c58 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5d42:	460b      	mov	r3, r1
   b5d44:	7f81      	ldrb	r1, [r0, #30]
   b5d46:	7f40      	ldrb	r0, [r0, #29]
   b5d48:	2201      	movs	r2, #1
}
   b5d4a:	b003      	add	sp, #12
   b5d4c:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5d50:	f001 bdf6 	b.w	b7940 <shiftOut>

000b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5d54:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b5d56:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5d5a:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5d5c:	4604      	mov	r4, r0
   b5d5e:	460d      	mov	r5, r1
  if (sid != -1)
   b5d60:	d01d      	beq.n	b5d9e <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b5d62:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b5d66:	2101      	movs	r1, #1
   b5d68:	b280      	uxth	r0, r0
   b5d6a:	f001 fdd0 	bl	b790e <digitalWrite>
    digitalWrite(dc, LOW);
   b5d6e:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5d72:	2100      	movs	r1, #0
   b5d74:	b280      	uxth	r0, r0
   b5d76:	f001 fdca 	bl	b790e <digitalWrite>
    digitalWrite(cs, LOW);
   b5d7a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5d7e:	2100      	movs	r1, #0
   b5d80:	b280      	uxth	r0, r0
   b5d82:	f001 fdc4 	bl	b790e <digitalWrite>
    fastSPIwrite(c);
   b5d86:	4629      	mov	r1, r5
   b5d88:	4620      	mov	r0, r4
   b5d8a:	f7ff ffcd 	bl	b5d28 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b5d8e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5d92:	2101      	movs	r1, #1
}
   b5d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5d98:	b280      	uxth	r0, r0
   b5d9a:	f001 bdb8 	b.w	b790e <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b5d9e:	f001 fe0d 	bl	b79bc <_Z19__fetch_global_Wirev>
   b5da2:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5da6:	f000 fca5 	bl	b66f4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b5daa:	f001 fe07 	bl	b79bc <_Z19__fetch_global_Wirev>
   b5dae:	6803      	ldr	r3, [r0, #0]
   b5db0:	2100      	movs	r1, #0
   b5db2:	689b      	ldr	r3, [r3, #8]
   b5db4:	4798      	blx	r3
    Wire.write(c);
   b5db6:	f001 fe01 	bl	b79bc <_Z19__fetch_global_Wirev>
   b5dba:	6803      	ldr	r3, [r0, #0]
   b5dbc:	4629      	mov	r1, r5
   b5dbe:	689b      	ldr	r3, [r3, #8]
   b5dc0:	4798      	blx	r3
    Wire.endTransmission();
   b5dc2:	f001 fdfb 	bl	b79bc <_Z19__fetch_global_Wirev>
}
   b5dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b5dca:	f000 bc9a 	b.w	b6702 <_ZN7TwoWire15endTransmissionEv>
	...

000b5dd0 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b5dd2:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5dd4:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b5dd6:	f7ff ffbd 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b5dda:	2100      	movs	r1, #0
   b5ddc:	4620      	mov	r0, r4
   b5dde:	f7ff ffb9 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b5de2:	217f      	movs	r1, #127	; 0x7f
   b5de4:	4620      	mov	r0, r4
   b5de6:	f7ff ffb5 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b5dea:	2122      	movs	r1, #34	; 0x22
   b5dec:	4620      	mov	r0, r4
   b5dee:	f7ff ffb1 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b5df2:	2100      	movs	r1, #0
   b5df4:	4620      	mov	r0, r4
   b5df6:	f7ff ffad 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b5dfa:	2107      	movs	r1, #7
   b5dfc:	4620      	mov	r0, r4
   b5dfe:	f7ff ffa9 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5e02:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5e06:	4f29      	ldr	r7, [pc, #164]	; (b5eac <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5e08:	3301      	adds	r3, #1
   b5e0a:	d02a      	beq.n	b5e62 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5e0c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5e10:	2101      	movs	r1, #1
   b5e12:	b280      	uxth	r0, r0
   b5e14:	f001 fd7b 	bl	b790e <digitalWrite>
    digitalWrite(dc, HIGH);
   b5e18:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5e1c:	2101      	movs	r1, #1
   b5e1e:	b280      	uxth	r0, r0
   b5e20:	f001 fd75 	bl	b790e <digitalWrite>
    digitalWrite(cs, LOW);
   b5e24:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5e28:	2100      	movs	r1, #0
   b5e2a:	b280      	uxth	r0, r0
   b5e2c:	f001 fd6f 	bl	b790e <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5e30:	2001      	movs	r0, #1
   b5e32:	f000 f925 	bl	b6080 <HAL_Delay_Microseconds>
   b5e36:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5e3a:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5e3c:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5e40:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5e42:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5e44:	f7ff ff70 	bl	b5d28 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5e48:	2d00      	cmp	r5, #0
   b5e4a:	d1f6      	bne.n	b5e3a <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5e4c:	2001      	movs	r0, #1
   b5e4e:	f000 f917 	bl	b6080 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b5e52:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5e56:	2101      	movs	r1, #1
}
   b5e58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5e5c:	b280      	uxth	r0, r0
   b5e5e:	f001 bd56 	b.w	b790e <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5e62:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b5e64:	f001 fdaa 	bl	b79bc <_Z19__fetch_global_Wirev>
   b5e68:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5e6c:	f000 fc42 	bl	b66f4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b5e70:	f001 fda4 	bl	b79bc <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5e74:	6803      	ldr	r3, [r0, #0]
   b5e76:	2140      	movs	r1, #64	; 0x40
   b5e78:	689b      	ldr	r3, [r3, #8]
   b5e7a:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5e7c:	f105 0610 	add.w	r6, r5, #16
   b5e80:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b5e82:	f001 fd9b 	bl	b79bc <_Z19__fetch_global_Wirev>
   b5e86:	6803      	ldr	r3, [r0, #0]
   b5e88:	5d79      	ldrb	r1, [r7, r5]
   b5e8a:	689b      	ldr	r3, [r3, #8]
   b5e8c:	4798      	blx	r3
		i++;
   b5e8e:	1c6b      	adds	r3, r5, #1
   b5e90:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b5e92:	42ae      	cmp	r6, r5
   b5e94:	d1f5      	bne.n	b5e82 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b5e96:	f001 fd91 	bl	b79bc <_Z19__fetch_global_Wirev>
   b5e9a:	f000 fc32 	bl	b6702 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5e9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5ea2:	d100      	bne.n	b5ea6 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5ea6:	4635      	mov	r5, r6
   b5ea8:	e7dc      	b.n	b5e64 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b5eaa:	bf00      	nop
   b5eac:	2003e180 	.word	0x2003e180

000b5eb0 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5eb0:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b5eb2:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b5eb6:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5eb8:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5eba:	4604      	mov	r4, r0
   b5ebc:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b5ebe:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5ec0:	f000 80c9 	beq.w	b6056 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5ec4:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5ec8:	2101      	movs	r1, #1
   b5eca:	b280      	uxth	r0, r0
   b5ecc:	f001 fd0e 	bl	b78ec <pinMode>
    pinMode(cs, OUTPUT);
   b5ed0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5ed4:	2101      	movs	r1, #1
   b5ed6:	b280      	uxth	r0, r0
   b5ed8:	f001 fd08 	bl	b78ec <pinMode>
    if (!hwSPI){
   b5edc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5ee0:	2b00      	cmp	r3, #0
   b5ee2:	f000 80a6 	beq.w	b6032 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5ee6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5eea:	2101      	movs	r1, #1
   b5eec:	b280      	uxth	r0, r0
   b5eee:	f001 fd0e 	bl	b790e <digitalWrite>
        instance().setBitOrder(order);
   b5ef2:	f7ff fefd 	bl	b5cf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5ef6:	2101      	movs	r1, #1
   b5ef8:	f000 fe18 	bl	b6b2c <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5efc:	f7ff fef8 	bl	b5cf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5f00:	2110      	movs	r1, #16
   b5f02:	f000 fe83 	bl	b6c0c <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5f06:	f7ff fef3 	bl	b5cf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5f0a:	2100      	movs	r1, #0
   b5f0c:	f000 fe22 	bl	b6b54 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5f10:	f7ff feee 	bl	b5cf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5f14:	f000 fdf6 	bl	b6b04 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5f18:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5f1c:	2101      	movs	r1, #1
   b5f1e:	b280      	uxth	r0, r0
   b5f20:	f001 fce4 	bl	b78ec <pinMode>
  digitalWrite(rst, HIGH);
   b5f24:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5f28:	2101      	movs	r1, #1
   b5f2a:	b280      	uxth	r0, r0
   b5f2c:	f001 fcef 	bl	b790e <digitalWrite>
  delay(1);
   b5f30:	2001      	movs	r0, #1
   b5f32:	f000 fb41 	bl	b65b8 <delay>
  digitalWrite(rst, LOW);
   b5f36:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5f3a:	2100      	movs	r1, #0
   b5f3c:	b280      	uxth	r0, r0
   b5f3e:	f001 fce6 	bl	b790e <digitalWrite>
  delay(10);
   b5f42:	200a      	movs	r0, #10
   b5f44:	f000 fb38 	bl	b65b8 <delay>
  digitalWrite(rst, HIGH);
   b5f48:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5f4c:	2101      	movs	r1, #1
   b5f4e:	b280      	uxth	r0, r0
   b5f50:	f001 fcdd 	bl	b790e <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b5f54:	4620      	mov	r0, r4
   b5f56:	21ae      	movs	r1, #174	; 0xae
   b5f58:	f7ff fefc 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5f5c:	4620      	mov	r0, r4
   b5f5e:	21d5      	movs	r1, #213	; 0xd5
   b5f60:	f7ff fef8 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b5f64:	4620      	mov	r0, r4
   b5f66:	2180      	movs	r1, #128	; 0x80
   b5f68:	f7ff fef4 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5f6c:	4620      	mov	r0, r4
   b5f6e:	21a8      	movs	r1, #168	; 0xa8
   b5f70:	f7ff fef0 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b5f74:	4620      	mov	r0, r4
   b5f76:	213f      	movs	r1, #63	; 0x3f
   b5f78:	f7ff feec 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5f7c:	4620      	mov	r0, r4
   b5f7e:	21d3      	movs	r1, #211	; 0xd3
   b5f80:	f7ff fee8 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b5f84:	4620      	mov	r0, r4
   b5f86:	2100      	movs	r1, #0
   b5f88:	f7ff fee4 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5f8c:	4620      	mov	r0, r4
   b5f8e:	2140      	movs	r1, #64	; 0x40
   b5f90:	f7ff fee0 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5f94:	218d      	movs	r1, #141	; 0x8d
   b5f96:	4620      	mov	r0, r4
   b5f98:	f7ff fedc 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5f9c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5f9e:	bf0c      	ite	eq
   b5fa0:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b5fa2:	2114      	movne	r1, #20
   b5fa4:	4620      	mov	r0, r4
   b5fa6:	f7ff fed5 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b5faa:	4620      	mov	r0, r4
   b5fac:	2120      	movs	r1, #32
   b5fae:	f7ff fed1 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b5fb2:	4620      	mov	r0, r4
   b5fb4:	2100      	movs	r1, #0
   b5fb6:	f7ff fecd 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b5fba:	4620      	mov	r0, r4
   b5fbc:	21a1      	movs	r1, #161	; 0xa1
   b5fbe:	f7ff fec9 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b5fc2:	4620      	mov	r0, r4
   b5fc4:	21c8      	movs	r1, #200	; 0xc8
   b5fc6:	f7ff fec5 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b5fca:	4620      	mov	r0, r4
   b5fcc:	21da      	movs	r1, #218	; 0xda
   b5fce:	f7ff fec1 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b5fd2:	4620      	mov	r0, r4
   b5fd4:	2112      	movs	r1, #18
   b5fd6:	f7ff febd 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b5fda:	2181      	movs	r1, #129	; 0x81
   b5fdc:	4620      	mov	r0, r4
   b5fde:	f7ff feb9 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5fe2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5fe4:	bf0c      	ite	eq
   b5fe6:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5fe8:	21cf      	movne	r1, #207	; 0xcf
   b5fea:	4620      	mov	r0, r4
   b5fec:	f7ff feb2 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5ff0:	21d9      	movs	r1, #217	; 0xd9
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	f7ff feae 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5ff8:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b5ffa:	bf0c      	ite	eq
   b5ffc:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b5ffe:	21f1      	movne	r1, #241	; 0xf1
   b6000:	4620      	mov	r0, r4
   b6002:	f7ff fea7 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b6006:	4620      	mov	r0, r4
   b6008:	21db      	movs	r1, #219	; 0xdb
   b600a:	f7ff fea3 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b600e:	4620      	mov	r0, r4
   b6010:	2140      	movs	r1, #64	; 0x40
   b6012:	f7ff fe9f 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b6016:	4620      	mov	r0, r4
   b6018:	21a4      	movs	r1, #164	; 0xa4
   b601a:	f7ff fe9b 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b601e:	4620      	mov	r0, r4
   b6020:	21a6      	movs	r1, #166	; 0xa6
   b6022:	f7ff fe97 	bl	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b6026:	4620      	mov	r0, r4
   b6028:	21af      	movs	r1, #175	; 0xaf
}
   b602a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b602e:	f7ff be91 	b.w	b5d54 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b6032:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b6036:	2101      	movs	r1, #1
   b6038:	b280      	uxth	r0, r0
   b603a:	f001 fc57 	bl	b78ec <pinMode>
    	pinMode(sclk, OUTPUT);
   b603e:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b6042:	2101      	movs	r1, #1
   b6044:	b280      	uxth	r0, r0
   b6046:	f001 fc51 	bl	b78ec <pinMode>
    if (hwSPI){
   b604a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b604e:	2b00      	cmp	r3, #0
   b6050:	f43f af62 	beq.w	b5f18 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b6054:	e747      	b.n	b5ee6 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b6056:	f001 fcb1 	bl	b79bc <_Z19__fetch_global_Wirev>
   b605a:	f000 fb41 	bl	b66e0 <_ZN7TwoWire5beginEv>
   b605e:	e75b      	b.n	b5f18 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b6060 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <os_mutex_recursive_create+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	00030248 	.word	0x00030248

000b6070 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <HAL_RNG_GetRandomNumber+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	685b      	ldr	r3, [r3, #4]
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	00030218 	.word	0x00030218

000b6080 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <HAL_Delay_Microseconds+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	68db      	ldr	r3, [r3, #12]
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	00030218 	.word	0x00030218

000b6090 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <HAL_Timer_Get_Micro_Seconds+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	691b      	ldr	r3, [r3, #16]
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	00030218 	.word	0x00030218

000b60a0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	695b      	ldr	r3, [r3, #20]
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	00030218 	.word	0x00030218

000b60b0 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <hal_timer_millis+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	00030218 	.word	0x00030218

000b60c0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <HAL_Pin_Map+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	681b      	ldr	r3, [r3, #0]
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	0003022c 	.word	0x0003022c

000b60d0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <HAL_Pin_Mode+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	689b      	ldr	r3, [r3, #8]
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	0003022c 	.word	0x0003022c

000b60e0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <HAL_Get_Pin_Mode+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	68db      	ldr	r3, [r3, #12]
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	0003022c 	.word	0x0003022c

000b60f0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <HAL_GPIO_Write+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	691b      	ldr	r3, [r3, #16]
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	0003022c 	.word	0x0003022c

000b6100 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b02      	ldr	r3, [pc, #8]	; (b610c <hal_i2c_begin+0xc>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	68db      	ldr	r3, [r3, #12]
   b6108:	9301      	str	r3, [sp, #4]
   b610a:	bd08      	pop	{r3, pc}
   b610c:	00030228 	.word	0x00030228

000b6110 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6110:	b508      	push	{r3, lr}
   b6112:	4b02      	ldr	r3, [pc, #8]	; (b611c <hal_i2c_begin_transmission+0xc>)
   b6114:	681b      	ldr	r3, [r3, #0]
   b6116:	699b      	ldr	r3, [r3, #24]
   b6118:	9301      	str	r3, [sp, #4]
   b611a:	bd08      	pop	{r3, pc}
   b611c:	00030228 	.word	0x00030228

000b6120 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <hal_i2c_end_transmission+0xc>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	69db      	ldr	r3, [r3, #28]
   b6128:	9301      	str	r3, [sp, #4]
   b612a:	bd08      	pop	{r3, pc}
   b612c:	00030228 	.word	0x00030228

000b6130 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <hal_i2c_write+0xc>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	6a1b      	ldr	r3, [r3, #32]
   b6138:	9301      	str	r3, [sp, #4]
   b613a:	bd08      	pop	{r3, pc}
   b613c:	00030228 	.word	0x00030228

000b6140 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b02      	ldr	r3, [pc, #8]	; (b614c <hal_i2c_available+0xc>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6148:	9301      	str	r3, [sp, #4]
   b614a:	bd08      	pop	{r3, pc}
   b614c:	00030228 	.word	0x00030228

000b6150 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b02      	ldr	r3, [pc, #8]	; (b615c <hal_i2c_read+0xc>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6158:	9301      	str	r3, [sp, #4]
   b615a:	bd08      	pop	{r3, pc}
   b615c:	00030228 	.word	0x00030228

000b6160 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6160:	b508      	push	{r3, lr}
   b6162:	4b02      	ldr	r3, [pc, #8]	; (b616c <hal_i2c_peek+0xc>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	bd08      	pop	{r3, pc}
   b616c:	00030228 	.word	0x00030228

000b6170 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6170:	b508      	push	{r3, lr}
   b6172:	4b02      	ldr	r3, [pc, #8]	; (b617c <hal_i2c_flush+0xc>)
   b6174:	681b      	ldr	r3, [r3, #0]
   b6176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6178:	9301      	str	r3, [sp, #4]
   b617a:	bd08      	pop	{r3, pc}
   b617c:	00030228 	.word	0x00030228

000b6180 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b02      	ldr	r3, [pc, #8]	; (b618c <hal_i2c_is_enabled+0xc>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6188:	9301      	str	r3, [sp, #4]
   b618a:	bd08      	pop	{r3, pc}
   b618c:	00030228 	.word	0x00030228

000b6190 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <hal_i2c_init+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	00030228 	.word	0x00030228

000b61a0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <if_index_to_name+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	695b      	ldr	r3, [r3, #20]
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	0003026c 	.word	0x0003026c

000b61b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <inet_inet_ntop+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	695b      	ldr	r3, [r3, #20]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	00030264 	.word	0x00030264

000b61c0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <inet_htonl+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	6a1b      	ldr	r3, [r3, #32]
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	00030264 	.word	0x00030264

000b61d0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b02      	ldr	r3, [pc, #8]	; (b61dc <inet_htons+0xc>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b61d8:	9301      	str	r3, [sp, #4]
   b61da:	bd08      	pop	{r3, pc}
   b61dc:	00030264 	.word	0x00030264

000b61e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b02      	ldr	r3, [pc, #8]	; (b61ec <netdb_freeaddrinfo+0xc>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	689b      	ldr	r3, [r3, #8]
   b61e8:	9301      	str	r3, [sp, #4]
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	00030268 	.word	0x00030268

000b61f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <netdb_getaddrinfo+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	68db      	ldr	r3, [r3, #12]
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	00030268 	.word	0x00030268

000b6200 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <sock_setsockopt+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	699b      	ldr	r3, [r3, #24]
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	00030238 	.word	0x00030238

000b6210 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <sock_close+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	69db      	ldr	r3, [r3, #28]
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	00030238 	.word	0x00030238

000b6220 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <sock_connect+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	6a1b      	ldr	r3, [r3, #32]
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	00030238 	.word	0x00030238

000b6230 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <sock_recv+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	00030238 	.word	0x00030238

000b6240 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <sock_send+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	00030238 	.word	0x00030238

000b6250 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <sock_socket+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	00030238 	.word	0x00030238

000b6260 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <hal_spi_begin+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	681b      	ldr	r3, [r3, #0]
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	00030230 	.word	0x00030230

000b6270 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <hal_spi_set_bit_order+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	689b      	ldr	r3, [r3, #8]
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	00030230 	.word	0x00030230

000b6280 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <hal_spi_set_data_mode+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	68db      	ldr	r3, [r3, #12]
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	00030230 	.word	0x00030230

000b6290 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <hal_spi_set_clock_divider+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	691b      	ldr	r3, [r3, #16]
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	00030230 	.word	0x00030230

000b62a0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <hal_spi_transfer+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	695b      	ldr	r3, [r3, #20]
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	00030230 	.word	0x00030230

000b62b0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <hal_spi_init+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	69db      	ldr	r3, [r3, #28]
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	00030230 	.word	0x00030230

000b62c0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <hal_spi_is_enabled+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6a1b      	ldr	r3, [r3, #32]
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	00030230 	.word	0x00030230

000b62d0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <hal_spi_info+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	00030230 	.word	0x00030230

000b62e0 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b62e0:	b508      	push	{r3, lr}
   b62e2:	4b02      	ldr	r3, [pc, #8]	; (b62ec <hal_spi_acquire+0xc>)
   b62e4:	681b      	ldr	r3, [r3, #0]
   b62e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	bd08      	pop	{r3, pc}
   b62ec:	00030230 	.word	0x00030230

000b62f0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b62f0:	b508      	push	{r3, lr}
   b62f2:	4b02      	ldr	r3, [pc, #8]	; (b62fc <hal_spi_release+0xc>)
   b62f4:	681b      	ldr	r3, [r3, #0]
   b62f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62f8:	9301      	str	r3, [sp, #4]
   b62fa:	bd08      	pop	{r3, pc}
   b62fc:	00030230 	.word	0x00030230

000b6300 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b02      	ldr	r3, [pc, #8]	; (b630c <hal_usart_write+0xc>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	68db      	ldr	r3, [r3, #12]
   b6308:	9301      	str	r3, [sp, #4]
   b630a:	bd08      	pop	{r3, pc}
   b630c:	0003023c 	.word	0x0003023c

000b6310 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6310:	b508      	push	{r3, lr}
   b6312:	4b02      	ldr	r3, [pc, #8]	; (b631c <hal_usart_available+0xc>)
   b6314:	681b      	ldr	r3, [r3, #0]
   b6316:	691b      	ldr	r3, [r3, #16]
   b6318:	9301      	str	r3, [sp, #4]
   b631a:	bd08      	pop	{r3, pc}
   b631c:	0003023c 	.word	0x0003023c

000b6320 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6320:	b508      	push	{r3, lr}
   b6322:	4b02      	ldr	r3, [pc, #8]	; (b632c <hal_usart_read+0xc>)
   b6324:	681b      	ldr	r3, [r3, #0]
   b6326:	695b      	ldr	r3, [r3, #20]
   b6328:	9301      	str	r3, [sp, #4]
   b632a:	bd08      	pop	{r3, pc}
   b632c:	0003023c 	.word	0x0003023c

000b6330 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6330:	b508      	push	{r3, lr}
   b6332:	4b02      	ldr	r3, [pc, #8]	; (b633c <hal_usart_peek+0xc>)
   b6334:	681b      	ldr	r3, [r3, #0]
   b6336:	699b      	ldr	r3, [r3, #24]
   b6338:	9301      	str	r3, [sp, #4]
   b633a:	bd08      	pop	{r3, pc}
   b633c:	0003023c 	.word	0x0003023c

000b6340 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6340:	b508      	push	{r3, lr}
   b6342:	4b02      	ldr	r3, [pc, #8]	; (b634c <hal_usart_flush+0xc>)
   b6344:	681b      	ldr	r3, [r3, #0]
   b6346:	69db      	ldr	r3, [r3, #28]
   b6348:	9301      	str	r3, [sp, #4]
   b634a:	bd08      	pop	{r3, pc}
   b634c:	0003023c 	.word	0x0003023c

000b6350 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6350:	b508      	push	{r3, lr}
   b6352:	4b02      	ldr	r3, [pc, #8]	; (b635c <hal_usart_is_enabled+0xc>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	6a1b      	ldr	r3, [r3, #32]
   b6358:	9301      	str	r3, [sp, #4]
   b635a:	bd08      	pop	{r3, pc}
   b635c:	0003023c 	.word	0x0003023c

000b6360 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6360:	b508      	push	{r3, lr}
   b6362:	4b02      	ldr	r3, [pc, #8]	; (b636c <hal_usart_available_data_for_write+0xc>)
   b6364:	681b      	ldr	r3, [r3, #0]
   b6366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6368:	9301      	str	r3, [sp, #4]
   b636a:	bd08      	pop	{r3, pc}
   b636c:	0003023c 	.word	0x0003023c

000b6370 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6370:	b508      	push	{r3, lr}
   b6372:	4b02      	ldr	r3, [pc, #8]	; (b637c <hal_usart_init_ex+0xc>)
   b6374:	681b      	ldr	r3, [r3, #0]
   b6376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6378:	9301      	str	r3, [sp, #4]
   b637a:	bd08      	pop	{r3, pc}
   b637c:	0003023c 	.word	0x0003023c

000b6380 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6380:	b508      	push	{r3, lr}
   b6382:	4b02      	ldr	r3, [pc, #8]	; (b638c <HAL_USB_USART_Init+0xc>)
   b6384:	681b      	ldr	r3, [r3, #0]
   b6386:	681b      	ldr	r3, [r3, #0]
   b6388:	9301      	str	r3, [sp, #4]
   b638a:	bd08      	pop	{r3, pc}
   b638c:	0003024c 	.word	0x0003024c

000b6390 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6390:	b508      	push	{r3, lr}
   b6392:	4b02      	ldr	r3, [pc, #8]	; (b639c <HAL_USB_USART_Begin+0xc>)
   b6394:	681b      	ldr	r3, [r3, #0]
   b6396:	685b      	ldr	r3, [r3, #4]
   b6398:	9301      	str	r3, [sp, #4]
   b639a:	bd08      	pop	{r3, pc}
   b639c:	0003024c 	.word	0x0003024c

000b63a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b63a0:	b508      	push	{r3, lr}
   b63a2:	4b02      	ldr	r3, [pc, #8]	; (b63ac <HAL_USB_USART_Available_Data+0xc>)
   b63a4:	681b      	ldr	r3, [r3, #0]
   b63a6:	691b      	ldr	r3, [r3, #16]
   b63a8:	9301      	str	r3, [sp, #4]
   b63aa:	bd08      	pop	{r3, pc}
   b63ac:	0003024c 	.word	0x0003024c

000b63b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b63b0:	b508      	push	{r3, lr}
   b63b2:	4b02      	ldr	r3, [pc, #8]	; (b63bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b63b4:	681b      	ldr	r3, [r3, #0]
   b63b6:	695b      	ldr	r3, [r3, #20]
   b63b8:	9301      	str	r3, [sp, #4]
   b63ba:	bd08      	pop	{r3, pc}
   b63bc:	0003024c 	.word	0x0003024c

000b63c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b63c0:	b508      	push	{r3, lr}
   b63c2:	4b02      	ldr	r3, [pc, #8]	; (b63cc <HAL_USB_USART_Receive_Data+0xc>)
   b63c4:	681b      	ldr	r3, [r3, #0]
   b63c6:	699b      	ldr	r3, [r3, #24]
   b63c8:	9301      	str	r3, [sp, #4]
   b63ca:	bd08      	pop	{r3, pc}
   b63cc:	0003024c 	.word	0x0003024c

000b63d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b63d0:	b508      	push	{r3, lr}
   b63d2:	4b02      	ldr	r3, [pc, #8]	; (b63dc <HAL_USB_USART_Send_Data+0xc>)
   b63d4:	681b      	ldr	r3, [r3, #0]
   b63d6:	69db      	ldr	r3, [r3, #28]
   b63d8:	9301      	str	r3, [sp, #4]
   b63da:	bd08      	pop	{r3, pc}
   b63dc:	0003024c 	.word	0x0003024c

000b63e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b63e0:	b508      	push	{r3, lr}
   b63e2:	4b02      	ldr	r3, [pc, #8]	; (b63ec <HAL_USB_USART_Flush_Data+0xc>)
   b63e4:	681b      	ldr	r3, [r3, #0]
   b63e6:	6a1b      	ldr	r3, [r3, #32]
   b63e8:	9301      	str	r3, [sp, #4]
   b63ea:	bd08      	pop	{r3, pc}
   b63ec:	0003024c 	.word	0x0003024c

000b63f0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b63f0:	b508      	push	{r3, lr}
   b63f2:	4b02      	ldr	r3, [pc, #8]	; (b63fc <HAL_USB_USART_Is_Connected+0xc>)
   b63f4:	681b      	ldr	r3, [r3, #0]
   b63f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b63f8:	9301      	str	r3, [sp, #4]
   b63fa:	bd08      	pop	{r3, pc}
   b63fc:	0003024c 	.word	0x0003024c

000b6400 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6400:	b508      	push	{r3, lr}
   b6402:	4b02      	ldr	r3, [pc, #8]	; (b640c <panic_+0xc>)
   b6404:	681b      	ldr	r3, [r3, #0]
   b6406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6408:	9301      	str	r3, [sp, #4]
   b640a:	bd08      	pop	{r3, pc}
   b640c:	00030260 	.word	0x00030260

000b6410 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6410:	b508      	push	{r3, lr}
   b6412:	4b02      	ldr	r3, [pc, #8]	; (b641c <log_message+0xc>)
   b6414:	681b      	ldr	r3, [r3, #0]
   b6416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6418:	9301      	str	r3, [sp, #4]
   b641a:	bd08      	pop	{r3, pc}
   b641c:	00030260 	.word	0x00030260

000b6420 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6420:	b508      	push	{r3, lr}
   b6422:	4b02      	ldr	r3, [pc, #8]	; (b642c <set_system_mode+0xc>)
   b6424:	681b      	ldr	r3, [r3, #0]
   b6426:	685b      	ldr	r3, [r3, #4]
   b6428:	9301      	str	r3, [sp, #4]
   b642a:	bd08      	pop	{r3, pc}
   b642c:	00030220 	.word	0x00030220

000b6430 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6430:	b508      	push	{r3, lr}
   b6432:	4b02      	ldr	r3, [pc, #8]	; (b643c <system_delay_ms+0xc>)
   b6434:	681b      	ldr	r3, [r3, #0]
   b6436:	695b      	ldr	r3, [r3, #20]
   b6438:	9301      	str	r3, [sp, #4]
   b643a:	bd08      	pop	{r3, pc}
   b643c:	00030220 	.word	0x00030220

000b6440 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6440:	b508      	push	{r3, lr}
   b6442:	4b03      	ldr	r3, [pc, #12]	; (b6450 <system_ctrl_set_app_request_handler+0x10>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b644a:	9301      	str	r3, [sp, #4]
   b644c:	bd08      	pop	{r3, pc}
   b644e:	0000      	.short	0x0000
   b6450:	00030220 	.word	0x00030220

000b6454 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6454:	b508      	push	{r3, lr}
   b6456:	4b03      	ldr	r3, [pc, #12]	; (b6464 <system_ctrl_set_result+0x10>)
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b645e:	9301      	str	r3, [sp, #4]
   b6460:	bd08      	pop	{r3, pc}
   b6462:	0000      	.short	0x0000
   b6464:	00030220 	.word	0x00030220

000b6468 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6468:	b508      	push	{r3, lr}
   b646a:	4b02      	ldr	r3, [pc, #8]	; (b6474 <spark_process+0xc>)
   b646c:	681b      	ldr	r3, [r3, #0]
   b646e:	689b      	ldr	r3, [r3, #8]
   b6470:	9301      	str	r3, [sp, #4]
   b6472:	bd08      	pop	{r3, pc}
   b6474:	00030244 	.word	0x00030244

000b6478 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6478:	b508      	push	{r3, lr}
   b647a:	4b02      	ldr	r3, [pc, #8]	; (b6484 <spark_set_random_seed_from_cloud_handler+0xc>)
   b647c:	681b      	ldr	r3, [r3, #0]
   b647e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6480:	9301      	str	r3, [sp, #4]
   b6482:	bd08      	pop	{r3, pc}
   b6484:	00030244 	.word	0x00030244

000b6488 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6488:	b508      	push	{r3, lr}
   b648a:	4b02      	ldr	r3, [pc, #8]	; (b6494 <network_connect+0xc>)
   b648c:	681b      	ldr	r3, [r3, #0]
   b648e:	685b      	ldr	r3, [r3, #4]
   b6490:	9301      	str	r3, [sp, #4]
   b6492:	bd08      	pop	{r3, pc}
   b6494:	00030240 	.word	0x00030240

000b6498 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6498:	b508      	push	{r3, lr}
   b649a:	4b02      	ldr	r3, [pc, #8]	; (b64a4 <network_connecting+0xc>)
   b649c:	681b      	ldr	r3, [r3, #0]
   b649e:	689b      	ldr	r3, [r3, #8]
   b64a0:	9301      	str	r3, [sp, #4]
   b64a2:	bd08      	pop	{r3, pc}
   b64a4:	00030240 	.word	0x00030240

000b64a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b64a8:	b508      	push	{r3, lr}
   b64aa:	4b02      	ldr	r3, [pc, #8]	; (b64b4 <network_disconnect+0xc>)
   b64ac:	681b      	ldr	r3, [r3, #0]
   b64ae:	68db      	ldr	r3, [r3, #12]
   b64b0:	9301      	str	r3, [sp, #4]
   b64b2:	bd08      	pop	{r3, pc}
   b64b4:	00030240 	.word	0x00030240

000b64b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b64b8:	b508      	push	{r3, lr}
   b64ba:	4b02      	ldr	r3, [pc, #8]	; (b64c4 <network_ready+0xc>)
   b64bc:	681b      	ldr	r3, [r3, #0]
   b64be:	691b      	ldr	r3, [r3, #16]
   b64c0:	9301      	str	r3, [sp, #4]
   b64c2:	bd08      	pop	{r3, pc}
   b64c4:	00030240 	.word	0x00030240

000b64c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b64c8:	b508      	push	{r3, lr}
   b64ca:	4b02      	ldr	r3, [pc, #8]	; (b64d4 <network_on+0xc>)
   b64cc:	681b      	ldr	r3, [r3, #0]
   b64ce:	695b      	ldr	r3, [r3, #20]
   b64d0:	9301      	str	r3, [sp, #4]
   b64d2:	bd08      	pop	{r3, pc}
   b64d4:	00030240 	.word	0x00030240

000b64d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b64d8:	b508      	push	{r3, lr}
   b64da:	4b02      	ldr	r3, [pc, #8]	; (b64e4 <network_off+0xc>)
   b64dc:	681b      	ldr	r3, [r3, #0]
   b64de:	699b      	ldr	r3, [r3, #24]
   b64e0:	9301      	str	r3, [sp, #4]
   b64e2:	bd08      	pop	{r3, pc}
   b64e4:	00030240 	.word	0x00030240

000b64e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b64e8:	b508      	push	{r3, lr}
   b64ea:	4b02      	ldr	r3, [pc, #8]	; (b64f4 <network_listen+0xc>)
   b64ec:	681b      	ldr	r3, [r3, #0]
   b64ee:	69db      	ldr	r3, [r3, #28]
   b64f0:	9301      	str	r3, [sp, #4]
   b64f2:	bd08      	pop	{r3, pc}
   b64f4:	00030240 	.word	0x00030240

000b64f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b64f8:	b508      	push	{r3, lr}
   b64fa:	4b02      	ldr	r3, [pc, #8]	; (b6504 <network_listening+0xc>)
   b64fc:	681b      	ldr	r3, [r3, #0]
   b64fe:	6a1b      	ldr	r3, [r3, #32]
   b6500:	9301      	str	r3, [sp, #4]
   b6502:	bd08      	pop	{r3, pc}
   b6504:	00030240 	.word	0x00030240

000b6508 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6508:	b508      	push	{r3, lr}
   b650a:	4b02      	ldr	r3, [pc, #8]	; (b6514 <network_set_listen_timeout+0xc>)
   b650c:	681b      	ldr	r3, [r3, #0]
   b650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6510:	9301      	str	r3, [sp, #4]
   b6512:	bd08      	pop	{r3, pc}
   b6514:	00030240 	.word	0x00030240

000b6518 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6518:	b508      	push	{r3, lr}
   b651a:	4b02      	ldr	r3, [pc, #8]	; (b6524 <network_get_listen_timeout+0xc>)
   b651c:	681b      	ldr	r3, [r3, #0]
   b651e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6520:	9301      	str	r3, [sp, #4]
   b6522:	bd08      	pop	{r3, pc}
   b6524:	00030240 	.word	0x00030240

000b6528 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6528:	b508      	push	{r3, lr}
   b652a:	4b02      	ldr	r3, [pc, #8]	; (b6534 <network_is_on+0xc>)
   b652c:	681b      	ldr	r3, [r3, #0]
   b652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6530:	9301      	str	r3, [sp, #4]
   b6532:	bd08      	pop	{r3, pc}
   b6534:	00030240 	.word	0x00030240

000b6538 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6538:	b508      	push	{r3, lr}
   b653a:	4b02      	ldr	r3, [pc, #8]	; (b6544 <network_is_off+0xc>)
   b653c:	681b      	ldr	r3, [r3, #0]
   b653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6540:	9301      	str	r3, [sp, #4]
   b6542:	bd08      	pop	{r3, pc}
   b6544:	00030240 	.word	0x00030240

000b6548 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6548:	b508      	push	{r3, lr}
   b654a:	4b02      	ldr	r3, [pc, #8]	; (b6554 <malloc+0xc>)
   b654c:	681b      	ldr	r3, [r3, #0]
   b654e:	681b      	ldr	r3, [r3, #0]
   b6550:	9301      	str	r3, [sp, #4]
   b6552:	bd08      	pop	{r3, pc}
   b6554:	0003021c 	.word	0x0003021c

000b6558 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6558:	b508      	push	{r3, lr}
   b655a:	4b02      	ldr	r3, [pc, #8]	; (b6564 <free+0xc>)
   b655c:	681b      	ldr	r3, [r3, #0]
   b655e:	685b      	ldr	r3, [r3, #4]
   b6560:	9301      	str	r3, [sp, #4]
   b6562:	bd08      	pop	{r3, pc}
   b6564:	0003021c 	.word	0x0003021c

000b6568 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6568:	b508      	push	{r3, lr}
   b656a:	4b02      	ldr	r3, [pc, #8]	; (b6574 <realloc+0xc>)
   b656c:	681b      	ldr	r3, [r3, #0]
   b656e:	689b      	ldr	r3, [r3, #8]
   b6570:	9301      	str	r3, [sp, #4]
   b6572:	bd08      	pop	{r3, pc}
   b6574:	0003021c 	.word	0x0003021c

000b6578 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6578:	b508      	push	{r3, lr}
   b657a:	4b02      	ldr	r3, [pc, #8]	; (b6584 <vsnprintf+0xc>)
   b657c:	681b      	ldr	r3, [r3, #0]
   b657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6580:	9301      	str	r3, [sp, #4]
   b6582:	bd08      	pop	{r3, pc}
   b6584:	0003021c 	.word	0x0003021c

000b6588 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6588:	b508      	push	{r3, lr}
   b658a:	4b02      	ldr	r3, [pc, #8]	; (b6594 <__errno+0xc>)
   b658c:	681b      	ldr	r3, [r3, #0]
   b658e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6590:	9301      	str	r3, [sp, #4]
   b6592:	bd08      	pop	{r3, pc}
   b6594:	0003021c 	.word	0x0003021c

000b6598 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6598:	b508      	push	{r3, lr}
   b659a:	4b02      	ldr	r3, [pc, #8]	; (b65a4 <__assert_func+0xc>)
   b659c:	681b      	ldr	r3, [r3, #0]
   b659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65a0:	9301      	str	r3, [sp, #4]
   b65a2:	bd08      	pop	{r3, pc}
   b65a4:	0003021c 	.word	0x0003021c

000b65a8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b65a8:	b508      	push	{r3, lr}
   b65aa:	4b02      	ldr	r3, [pc, #8]	; (b65b4 <newlib_impure_ptr_callback+0xc>)
   b65ac:	681b      	ldr	r3, [r3, #0]
   b65ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b65b0:	9301      	str	r3, [sp, #4]
   b65b2:	bd08      	pop	{r3, pc}
   b65b4:	0003021c 	.word	0x0003021c

000b65b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b65b8:	2100      	movs	r1, #0
   b65ba:	f7ff bf39 	b.w	b6430 <system_delay_ms>
	...

000b65c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b65c0:	4802      	ldr	r0, [pc, #8]	; (b65cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b65c2:	2300      	movs	r3, #0
   b65c4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b65c6:	f7ff bd4b 	b.w	b6060 <os_mutex_recursive_create>
   b65ca:	bf00      	nop
   b65cc:	2003e6c4 	.word	0x2003e6c4

000b65d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b65d0:	2200      	movs	r2, #0
   b65d2:	6840      	ldr	r0, [r0, #4]
   b65d4:	4611      	mov	r1, r2
   b65d6:	f7ff bf8f 	b.w	b64f8 <network_listening>

000b65da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b65da:	2200      	movs	r2, #0
   b65dc:	6840      	ldr	r0, [r0, #4]
   b65de:	4611      	mov	r1, r2
   b65e0:	f7ff bf9a 	b.w	b6518 <network_get_listen_timeout>

000b65e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b65e4:	6840      	ldr	r0, [r0, #4]
   b65e6:	2200      	movs	r2, #0
   b65e8:	f7ff bf8e 	b.w	b6508 <network_set_listen_timeout>

000b65ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b65ec:	6840      	ldr	r0, [r0, #4]
   b65ee:	2200      	movs	r2, #0
   b65f0:	f081 0101 	eor.w	r1, r1, #1
   b65f4:	f7ff bf78 	b.w	b64e8 <network_listen>

000b65f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b65f8:	2300      	movs	r3, #0
   b65fa:	6840      	ldr	r0, [r0, #4]
   b65fc:	461a      	mov	r2, r3
   b65fe:	4619      	mov	r1, r3
   b6600:	f7ff bf6a 	b.w	b64d8 <network_off>

000b6604 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6604:	2300      	movs	r3, #0
   b6606:	6840      	ldr	r0, [r0, #4]
   b6608:	461a      	mov	r2, r3
   b660a:	4619      	mov	r1, r3
   b660c:	f7ff bf5c 	b.w	b64c8 <network_on>

000b6610 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6610:	2200      	movs	r2, #0
   b6612:	6840      	ldr	r0, [r0, #4]
   b6614:	4611      	mov	r1, r2
   b6616:	f7ff bf4f 	b.w	b64b8 <network_ready>

000b661a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b661a:	2200      	movs	r2, #0
   b661c:	6840      	ldr	r0, [r0, #4]
   b661e:	4611      	mov	r1, r2
   b6620:	f7ff bf3a 	b.w	b6498 <network_connecting>

000b6624 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6624:	6840      	ldr	r0, [r0, #4]
   b6626:	2200      	movs	r2, #0
   b6628:	2102      	movs	r1, #2
   b662a:	f7ff bf3d 	b.w	b64a8 <network_disconnect>

000b662e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b662e:	2300      	movs	r3, #0
   b6630:	6840      	ldr	r0, [r0, #4]
   b6632:	461a      	mov	r2, r3
   b6634:	f7ff bf28 	b.w	b6488 <network_connect>

000b6638 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6638:	4b02      	ldr	r3, [pc, #8]	; (b6644 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b663a:	2203      	movs	r2, #3
   b663c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b663e:	4a02      	ldr	r2, [pc, #8]	; (b6648 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6640:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6642:	4770      	bx	lr
   b6644:	2003e6c8 	.word	0x2003e6c8
   b6648:	000be9d0 	.word	0x000be9d0

000b664c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b664c:	4770      	bx	lr

000b664e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b664e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6650:	4606      	mov	r6, r0
   b6652:	4615      	mov	r5, r2
   b6654:	460c      	mov	r4, r1
   b6656:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6658:	42bc      	cmp	r4, r7
   b665a:	d006      	beq.n	b666a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b665c:	6833      	ldr	r3, [r6, #0]
   b665e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6662:	689b      	ldr	r3, [r3, #8]
   b6664:	4630      	mov	r0, r6
   b6666:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6668:	e7f6      	b.n	b6658 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b666a:	4628      	mov	r0, r5
   b666c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b666e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b666e:	7c00      	ldrb	r0, [r0, #16]
   b6670:	2200      	movs	r2, #0
   b6672:	f7ff bd5d 	b.w	b6130 <hal_i2c_write>

000b6676 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6676:	7c00      	ldrb	r0, [r0, #16]
   b6678:	2100      	movs	r1, #0
   b667a:	f7ff bd61 	b.w	b6140 <hal_i2c_available>

000b667e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b667e:	7c00      	ldrb	r0, [r0, #16]
   b6680:	2100      	movs	r1, #0
   b6682:	f7ff bd65 	b.w	b6150 <hal_i2c_read>

000b6686 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6686:	7c00      	ldrb	r0, [r0, #16]
   b6688:	2100      	movs	r1, #0
   b668a:	f7ff bd69 	b.w	b6160 <hal_i2c_peek>

000b668e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b668e:	7c00      	ldrb	r0, [r0, #16]
   b6690:	2100      	movs	r1, #0
   b6692:	f7ff bd6d 	b.w	b6170 <hal_i2c_flush>

000b6696 <_ZN7TwoWireD0Ev>:
   b6696:	b510      	push	{r4, lr}
   b6698:	2114      	movs	r1, #20
   b669a:	4604      	mov	r4, r0
   b669c:	f7fd fcfd 	bl	b409a <_ZdlPvj>
   b66a0:	4620      	mov	r0, r4
   b66a2:	bd10      	pop	{r4, pc}

000b66a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b66a4:	b538      	push	{r3, r4, r5, lr}
   b66a6:	4604      	mov	r4, r0
   b66a8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b66aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b66ae:	2200      	movs	r2, #0
   b66b0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b66b4:	4b09      	ldr	r3, [pc, #36]	; (b66dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b66b6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b66b8:	4608      	mov	r0, r1
   b66ba:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b66bc:	4629      	mov	r1, r5
   b66be:	f7ff fd67 	bl	b6190 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b66c2:	30bf      	adds	r0, #191	; 0xbf
   b66c4:	d108      	bne.n	b66d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b66c6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b66c8:	07db      	lsls	r3, r3, #31
   b66ca:	d505      	bpl.n	b66d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b66cc:	6868      	ldr	r0, [r5, #4]
   b66ce:	f7ff ff43 	bl	b6558 <free>
    free(conf.tx_buffer);
   b66d2:	68e8      	ldr	r0, [r5, #12]
   b66d4:	f7ff ff40 	bl	b6558 <free>
}
   b66d8:	4620      	mov	r0, r4
   b66da:	bd38      	pop	{r3, r4, r5, pc}
   b66dc:	000bea0c 	.word	0x000bea0c

000b66e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b66e0:	2300      	movs	r3, #0
   b66e2:	7c00      	ldrb	r0, [r0, #16]
   b66e4:	461a      	mov	r2, r3
   b66e6:	4619      	mov	r1, r3
   b66e8:	f7ff bd0a 	b.w	b6100 <hal_i2c_begin>

000b66ec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b66ec:	7c00      	ldrb	r0, [r0, #16]
   b66ee:	2200      	movs	r2, #0
   b66f0:	f7ff bd0e 	b.w	b6110 <hal_i2c_begin_transmission>

000b66f4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b66f4:	b2c9      	uxtb	r1, r1
   b66f6:	f7ff bff9 	b.w	b66ec <_ZN7TwoWire17beginTransmissionEh>

000b66fa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b66fa:	7c00      	ldrb	r0, [r0, #16]
   b66fc:	2200      	movs	r2, #0
   b66fe:	f7ff bd0f 	b.w	b6120 <hal_i2c_end_transmission>

000b6702 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6702:	2101      	movs	r1, #1
   b6704:	f7ff bff9 	b.w	b66fa <_ZN7TwoWire15endTransmissionEh>

000b6708 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6708:	4770      	bx	lr

000b670a <_ZN9IPAddressD0Ev>:
   b670a:	b510      	push	{r4, lr}
   b670c:	2118      	movs	r1, #24
   b670e:	4604      	mov	r4, r0
   b6710:	f7fd fcc3 	bl	b409a <_ZdlPvj>
   b6714:	4620      	mov	r0, r4
   b6716:	bd10      	pop	{r4, pc}

000b6718 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6718:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b671a:	7d03      	ldrb	r3, [r0, #20]
   b671c:	2b06      	cmp	r3, #6
{
   b671e:	b08d      	sub	sp, #52	; 0x34
   b6720:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6722:	f100 0704 	add.w	r7, r0, #4
   b6726:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b672a:	d012      	beq.n	b6752 <_ZNK9IPAddress7printToER5Print+0x3a>
   b672c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6730:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6734:	220a      	movs	r2, #10
   b6736:	4630      	mov	r0, r6
   b6738:	f000 f973 	bl	b6a22 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b673c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b673e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6740:	d019      	beq.n	b6776 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6742:	2c00      	cmp	r4, #0
   b6744:	d0f4      	beq.n	b6730 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6746:	212e      	movs	r1, #46	; 0x2e
   b6748:	4630      	mov	r0, r6
   b674a:	f000 f951 	bl	b69f0 <_ZN5Print5printEc>
   b674e:	4404      	add	r4, r0
   b6750:	e7ee      	b.n	b6730 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6752:	232f      	movs	r3, #47	; 0x2f
   b6754:	466a      	mov	r2, sp
   b6756:	4639      	mov	r1, r7
   b6758:	200a      	movs	r0, #10
		buf[0] = 0;
   b675a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b675e:	f7ff fd27 	bl	b61b0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6762:	4668      	mov	r0, sp
   b6764:	f001 fb3c 	bl	b7de0 <strlen>
   b6768:	6833      	ldr	r3, [r6, #0]
   b676a:	4602      	mov	r2, r0
   b676c:	68db      	ldr	r3, [r3, #12]
   b676e:	4669      	mov	r1, sp
   b6770:	4630      	mov	r0, r6
   b6772:	4798      	blx	r3
   b6774:	4604      	mov	r4, r0
    }
    return n;
}
   b6776:	4620      	mov	r0, r4
   b6778:	b00d      	add	sp, #52	; 0x34
   b677a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b677c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b677c:	b510      	push	{r4, lr}
   b677e:	4b05      	ldr	r3, [pc, #20]	; (b6794 <_ZN9IPAddressC1Ev+0x18>)
   b6780:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6782:	2211      	movs	r2, #17
   b6784:	f840 3b04 	str.w	r3, [r0], #4
   b6788:	2100      	movs	r1, #0
   b678a:	f001 faa3 	bl	b7cd4 <memset>
}
   b678e:	4620      	mov	r0, r4
   b6790:	bd10      	pop	{r4, pc}
   b6792:	bf00      	nop
   b6794:	000bea34 	.word	0x000bea34

000b6798 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6798:	4603      	mov	r3, r0
   b679a:	4a07      	ldr	r2, [pc, #28]	; (b67b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b679c:	b510      	push	{r4, lr}
   b679e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b67a2:	f101 0210 	add.w	r2, r1, #16
   b67a6:	f851 4b04 	ldr.w	r4, [r1], #4
   b67aa:	f843 4b04 	str.w	r4, [r3], #4
   b67ae:	4291      	cmp	r1, r2
   b67b0:	d1f9      	bne.n	b67a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b67b2:	780a      	ldrb	r2, [r1, #0]
   b67b4:	701a      	strb	r2, [r3, #0]
}
   b67b6:	bd10      	pop	{r4, pc}
   b67b8:	000bea34 	.word	0x000bea34

000b67bc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b67bc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b67be:	2b04      	cmp	r3, #4
   b67c0:	d104      	bne.n	b67cc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b67c2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b67c4:	3800      	subs	r0, #0
   b67c6:	bf18      	it	ne
   b67c8:	2001      	movne	r0, #1
   b67ca:	4770      	bx	lr
    } else if (version() == 6) {
   b67cc:	2b06      	cmp	r3, #6
   b67ce:	d107      	bne.n	b67e0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b67d0:	6843      	ldr	r3, [r0, #4]
   b67d2:	b93b      	cbnz	r3, b67e4 <_ZNK9IPAddresscvbEv+0x28>
   b67d4:	6883      	ldr	r3, [r0, #8]
   b67d6:	b92b      	cbnz	r3, b67e4 <_ZNK9IPAddresscvbEv+0x28>
   b67d8:	68c3      	ldr	r3, [r0, #12]
   b67da:	b91b      	cbnz	r3, b67e4 <_ZNK9IPAddresscvbEv+0x28>
   b67dc:	6900      	ldr	r0, [r0, #16]
   b67de:	e7f1      	b.n	b67c4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b67e0:	2000      	movs	r0, #0
   b67e2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b67e4:	2001      	movs	r0, #1
}
   b67e6:	4770      	bx	lr

000b67e8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b67e8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b67ea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b67ee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b67f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b67f6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b67fa:	2304      	movs	r3, #4
   b67fc:	6041      	str	r1, [r0, #4]
   b67fe:	7503      	strb	r3, [r0, #20]
}
   b6800:	bd10      	pop	{r4, pc}
	...

000b6804 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6804:	b507      	push	{r0, r1, r2, lr}
   b6806:	4b06      	ldr	r3, [pc, #24]	; (b6820 <_ZN9IPAddressC1EPKh+0x1c>)
   b6808:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b680a:	78cb      	ldrb	r3, [r1, #3]
   b680c:	9300      	str	r3, [sp, #0]
   b680e:	788b      	ldrb	r3, [r1, #2]
   b6810:	784a      	ldrb	r2, [r1, #1]
   b6812:	7809      	ldrb	r1, [r1, #0]
   b6814:	f7ff ffe8 	bl	b67e8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6818:	b003      	add	sp, #12
   b681a:	f85d fb04 	ldr.w	pc, [sp], #4
   b681e:	bf00      	nop
   b6820:	000bea34 	.word	0x000bea34

000b6824 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6824:	4b01      	ldr	r3, [pc, #4]	; (b682c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6826:	4a02      	ldr	r2, [pc, #8]	; (b6830 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6828:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b682a:	4770      	bx	lr
   b682c:	2003e6d0 	.word	0x2003e6d0
   b6830:	000bea40 	.word	0x000bea40

000b6834 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6834:	2300      	movs	r3, #0
   b6836:	6840      	ldr	r0, [r0, #4]
   b6838:	461a      	mov	r2, r3
   b683a:	f7ff be25 	b.w	b6488 <network_connect>

000b683e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b683e:	6840      	ldr	r0, [r0, #4]
   b6840:	2200      	movs	r2, #0
   b6842:	2102      	movs	r1, #2
   b6844:	f7ff be30 	b.w	b64a8 <network_disconnect>

000b6848 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6848:	2200      	movs	r2, #0
   b684a:	6840      	ldr	r0, [r0, #4]
   b684c:	4611      	mov	r1, r2
   b684e:	f7ff be23 	b.w	b6498 <network_connecting>

000b6852 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6852:	2200      	movs	r2, #0
   b6854:	6840      	ldr	r0, [r0, #4]
   b6856:	4611      	mov	r1, r2
   b6858:	f7ff be2e 	b.w	b64b8 <network_ready>

000b685c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b685c:	2300      	movs	r3, #0
   b685e:	6840      	ldr	r0, [r0, #4]
   b6860:	461a      	mov	r2, r3
   b6862:	4619      	mov	r1, r3
   b6864:	f7ff be30 	b.w	b64c8 <network_on>

000b6868 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6868:	2300      	movs	r3, #0
   b686a:	6840      	ldr	r0, [r0, #4]
   b686c:	461a      	mov	r2, r3
   b686e:	4619      	mov	r1, r3
   b6870:	f7ff be32 	b.w	b64d8 <network_off>

000b6874 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6874:	6840      	ldr	r0, [r0, #4]
   b6876:	2100      	movs	r1, #0
   b6878:	f7ff be56 	b.w	b6528 <network_is_on>

000b687c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b687c:	6840      	ldr	r0, [r0, #4]
   b687e:	2100      	movs	r1, #0
   b6880:	f7ff be5a 	b.w	b6538 <network_is_off>

000b6884 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6884:	6840      	ldr	r0, [r0, #4]
   b6886:	2200      	movs	r2, #0
   b6888:	f081 0101 	eor.w	r1, r1, #1
   b688c:	f7ff be2c 	b.w	b64e8 <network_listen>

000b6890 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6890:	6840      	ldr	r0, [r0, #4]
   b6892:	2200      	movs	r2, #0
   b6894:	f7ff be38 	b.w	b6508 <network_set_listen_timeout>

000b6898 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6898:	2200      	movs	r2, #0
   b689a:	6840      	ldr	r0, [r0, #4]
   b689c:	4611      	mov	r1, r2
   b689e:	f7ff be3b 	b.w	b6518 <network_get_listen_timeout>

000b68a2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b68a2:	2200      	movs	r2, #0
   b68a4:	6840      	ldr	r0, [r0, #4]
   b68a6:	4611      	mov	r1, r2
   b68a8:	f7ff be26 	b.w	b64f8 <network_listening>

000b68ac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b68ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b68b0:	b095      	sub	sp, #84	; 0x54
   b68b2:	4614      	mov	r4, r2
   b68b4:	460d      	mov	r5, r1
   b68b6:	4607      	mov	r7, r0
    IPAddress addr;
   b68b8:	f7ff ff60 	bl	b677c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b68bc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b68be:	221c      	movs	r2, #28
   b68c0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b68c2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b68c4:	f001 fa06 	bl	b7cd4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b68c8:	2340      	movs	r3, #64	; 0x40
   b68ca:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b68cc:	4620      	mov	r0, r4
   b68ce:	466b      	mov	r3, sp
   b68d0:	aa0c      	add	r2, sp, #48	; 0x30
   b68d2:	2100      	movs	r1, #0
   b68d4:	f7ff fc8c 	bl	b61f0 <netdb_getaddrinfo>
    if (!r) {
   b68d8:	4604      	mov	r4, r0
   b68da:	2800      	cmp	r0, #0
   b68dc:	d14b      	bne.n	b6976 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b68de:	4602      	mov	r2, r0
   b68e0:	2101      	movs	r1, #1
   b68e2:	6868      	ldr	r0, [r5, #4]
   b68e4:	f7ff fde8 	bl	b64b8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b68e8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b68ea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b68ec:	4622      	mov	r2, r4
   b68ee:	6868      	ldr	r0, [r5, #4]
   b68f0:	f7ff fde2 	bl	b64b8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b68f4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b68f6:	4681      	mov	r9, r0
        bool ok = false;
   b68f8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b68fa:	2e00      	cmp	r6, #0
   b68fc:	d03b      	beq.n	b6976 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b68fe:	2900      	cmp	r1, #0
   b6900:	d139      	bne.n	b6976 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6902:	6873      	ldr	r3, [r6, #4]
   b6904:	2b02      	cmp	r3, #2
   b6906:	d003      	beq.n	b6910 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6908:	2b0a      	cmp	r3, #10
   b690a:	d011      	beq.n	b6930 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b690c:	69f6      	ldr	r6, [r6, #28]
   b690e:	e7f4      	b.n	b68fa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6910:	f1b8 0f00 	cmp.w	r8, #0
   b6914:	d0fa      	beq.n	b690c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6916:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6918:	a806      	add	r0, sp, #24
   b691a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b691c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b691e:	f7ff ff71 	bl	b6804 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6924:	1d3c      	adds	r4, r7, #4
   b6926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6928:	682b      	ldr	r3, [r5, #0]
   b692a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b692c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b692e:	e7ed      	b.n	b690c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6930:	f1b9 0f00 	cmp.w	r9, #0
   b6934:	d0ea      	beq.n	b690c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6936:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6938:	2210      	movs	r2, #16
   b693a:	a801      	add	r0, sp, #4
   b693c:	f001 f9ca 	bl	b7cd4 <memset>
                    a.v = 6;
   b6940:	2306      	movs	r3, #6
   b6942:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6946:	ad01      	add	r5, sp, #4
   b6948:	f104 0308 	add.w	r3, r4, #8
   b694c:	3418      	adds	r4, #24
   b694e:	6818      	ldr	r0, [r3, #0]
   b6950:	6859      	ldr	r1, [r3, #4]
   b6952:	462a      	mov	r2, r5
   b6954:	c203      	stmia	r2!, {r0, r1}
   b6956:	3308      	adds	r3, #8
   b6958:	42a3      	cmp	r3, r4
   b695a:	4615      	mov	r5, r2
   b695c:	d1f7      	bne.n	b694e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b695e:	a901      	add	r1, sp, #4
   b6960:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6962:	ad07      	add	r5, sp, #28
   b6964:	f7ff ff18 	bl	b6798 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b696a:	1d3c      	adds	r4, r7, #4
   b696c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b696e:	682b      	ldr	r3, [r5, #0]
   b6970:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6972:	4649      	mov	r1, r9
   b6974:	e7ca      	b.n	b690c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6976:	9800      	ldr	r0, [sp, #0]
   b6978:	f7ff fc32 	bl	b61e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b697c:	4638      	mov	r0, r7
   b697e:	b015      	add	sp, #84	; 0x54
   b6980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6984 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6984:	4b02      	ldr	r3, [pc, #8]	; (b6990 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6986:	4a03      	ldr	r2, [pc, #12]	; (b6994 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6988:	601a      	str	r2, [r3, #0]
   b698a:	2200      	movs	r2, #0
   b698c:	605a      	str	r2, [r3, #4]

} // spark
   b698e:	4770      	bx	lr
   b6990:	2003e6d4 	.word	0x2003e6d4
   b6994:	000bea4c 	.word	0x000bea4c

000b6998 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b699a:	4606      	mov	r6, r0
   b699c:	460d      	mov	r5, r1
  size_t n = 0;
   b699e:	188f      	adds	r7, r1, r2
   b69a0:	2400      	movs	r4, #0
  while (size--) {
   b69a2:	42bd      	cmp	r5, r7
   b69a4:	d00c      	beq.n	b69c0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b69a6:	6833      	ldr	r3, [r6, #0]
   b69a8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b69ac:	689b      	ldr	r3, [r3, #8]
   b69ae:	4630      	mov	r0, r6
   b69b0:	4798      	blx	r3
     if (chunk>=0)
   b69b2:	1e03      	subs	r3, r0, #0
   b69b4:	db01      	blt.n	b69ba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b69b6:	441c      	add	r4, r3
  while (size--) {
   b69b8:	e7f3      	b.n	b69a2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b69ba:	2c00      	cmp	r4, #0
   b69bc:	bf08      	it	eq
   b69be:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b69c0:	4620      	mov	r0, r4
   b69c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b69c4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b69c4:	b513      	push	{r0, r1, r4, lr}
   b69c6:	4604      	mov	r4, r0
    }
   b69c8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b69ca:	b159      	cbz	r1, b69e4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b69cc:	9101      	str	r1, [sp, #4]
   b69ce:	f001 fa07 	bl	b7de0 <strlen>
   b69d2:	6823      	ldr	r3, [r4, #0]
   b69d4:	9901      	ldr	r1, [sp, #4]
   b69d6:	68db      	ldr	r3, [r3, #12]
   b69d8:	4602      	mov	r2, r0
   b69da:	4620      	mov	r0, r4
    }
   b69dc:	b002      	add	sp, #8
   b69de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b69e2:	4718      	bx	r3
    }
   b69e4:	b002      	add	sp, #8
   b69e6:	bd10      	pop	{r4, pc}

000b69e8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b69e8:	b508      	push	{r3, lr}
  return write(str);
   b69ea:	f7ff ffeb 	bl	b69c4 <_ZN5Print5writeEPKc>
}
   b69ee:	bd08      	pop	{r3, pc}

000b69f0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b69f0:	6803      	ldr	r3, [r0, #0]
   b69f2:	689b      	ldr	r3, [r3, #8]
   b69f4:	4718      	bx	r3

000b69f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b69f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b69f8:	210d      	movs	r1, #13
{
   b69fa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b69fc:	f7ff fff8 	bl	b69f0 <_ZN5Print5printEc>
  n += print('\n');
   b6a00:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6a02:	4604      	mov	r4, r0
  n += print('\n');
   b6a04:	4628      	mov	r0, r5
   b6a06:	f7ff fff3 	bl	b69f0 <_ZN5Print5printEc>
  return n;
}
   b6a0a:	4420      	add	r0, r4
   b6a0c:	bd38      	pop	{r3, r4, r5, pc}

000b6a0e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6a0e:	b538      	push	{r3, r4, r5, lr}
   b6a10:	4605      	mov	r5, r0
  return write(str);
   b6a12:	f7ff ffd7 	bl	b69c4 <_ZN5Print5writeEPKc>
   b6a16:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6a18:	4628      	mov	r0, r5
   b6a1a:	f7ff ffec 	bl	b69f6 <_ZN5Print7printlnEv>
  return n;
}
   b6a1e:	4420      	add	r0, r4
   b6a20:	bd38      	pop	{r3, r4, r5, pc}

000b6a22 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6a22:	b530      	push	{r4, r5, lr}
   b6a24:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6a26:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6a28:	2a01      	cmp	r2, #1
  *str = '\0';
   b6a2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6a2e:	bf98      	it	ls
   b6a30:	220a      	movls	r2, #10
   b6a32:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6a34:	460d      	mov	r5, r1
   b6a36:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6a3a:	fb01 5312 	mls	r3, r1, r2, r5
   b6a3e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6a42:	2b09      	cmp	r3, #9
   b6a44:	bf94      	ite	ls
   b6a46:	3330      	addls	r3, #48	; 0x30
   b6a48:	3337      	addhi	r3, #55	; 0x37
   b6a4a:	b2db      	uxtb	r3, r3
  } while(n);
   b6a4c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6a4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6a52:	d9ef      	bls.n	b6a34 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6a54:	4621      	mov	r1, r4
   b6a56:	f7ff ffb5 	bl	b69c4 <_ZN5Print5writeEPKc>
}
   b6a5a:	b00b      	add	sp, #44	; 0x2c
   b6a5c:	bd30      	pop	{r4, r5, pc}

000b6a5e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a62:	b086      	sub	sp, #24
   b6a64:	af00      	add	r7, sp, #0
   b6a66:	4605      	mov	r5, r0
   b6a68:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6a6a:	1d38      	adds	r0, r7, #4
   b6a6c:	2114      	movs	r1, #20
{
   b6a6e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6a70:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6a72:	f7ff fd81 	bl	b6578 <vsnprintf>

    if (n<bufsize)
   b6a76:	2813      	cmp	r0, #19
   b6a78:	d80e      	bhi.n	b6a98 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6a7a:	1d39      	adds	r1, r7, #4
   b6a7c:	4628      	mov	r0, r5
   b6a7e:	f7ff ffa1 	bl	b69c4 <_ZN5Print5writeEPKc>
   b6a82:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6a84:	b11e      	cbz	r6, b6a8e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6a86:	4628      	mov	r0, r5
   b6a88:	f7ff ffb5 	bl	b69f6 <_ZN5Print7printlnEv>
   b6a8c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6a8e:	4620      	mov	r0, r4
   b6a90:	3718      	adds	r7, #24
   b6a92:	46bd      	mov	sp, r7
   b6a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6a98:	f100 0308 	add.w	r3, r0, #8
   b6a9c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6aa0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6aa2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6aa6:	4622      	mov	r2, r4
   b6aa8:	1c41      	adds	r1, r0, #1
   b6aaa:	683b      	ldr	r3, [r7, #0]
   b6aac:	4668      	mov	r0, sp
   b6aae:	f7ff fd63 	bl	b6578 <vsnprintf>
  return write(str);
   b6ab2:	4669      	mov	r1, sp
   b6ab4:	4628      	mov	r0, r5
   b6ab6:	f7ff ff85 	bl	b69c4 <_ZN5Print5writeEPKc>
   b6aba:	4604      	mov	r4, r0
   b6abc:	46c5      	mov	sp, r8
   b6abe:	e7e1      	b.n	b6a84 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6ac0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   b6ac0:	b510      	push	{r4, lr}
  if (0 == max) {
   b6ac2:	4604      	mov	r4, r0
   b6ac4:	b128      	cbz	r0, b6ad2 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   b6ac6:	f001 f93b 	bl	b7d40 <rand>
   b6aca:	fb90 f3f4 	sdiv	r3, r0, r4
   b6ace:	fb03 0414 	mls	r4, r3, r4, r0
}
   b6ad2:	4620      	mov	r0, r4
   b6ad4:	bd10      	pop	{r4, pc}
	...

000b6ad8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6ad8:	4b01      	ldr	r3, [pc, #4]	; (b6ae0 <_GLOBAL__sub_I_RGB+0x8>)
   b6ada:	2200      	movs	r2, #0
   b6adc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6ade:	4770      	bx	lr
   b6ae0:	2003e6dc 	.word	0x2003e6dc

000b6ae4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6ae4:	2100      	movs	r1, #0
   b6ae6:	f7ff bc03 	b.w	b62f0 <hal_spi_release>

000b6aea <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6aea:	2100      	movs	r1, #0
   b6aec:	f7ff bbf8 	b.w	b62e0 <hal_spi_acquire>

000b6af0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6af0:	b510      	push	{r4, lr}
   b6af2:	4604      	mov	r4, r0
   b6af4:	4608      	mov	r0, r1
{
    _spi = spi;
   b6af6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6af8:	f7ff fbda 	bl	b62b0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6afc:	2300      	movs	r3, #0
   b6afe:	6063      	str	r3, [r4, #4]
}
   b6b00:	4620      	mov	r0, r4
   b6b02:	bd10      	pop	{r4, pc}

000b6b04 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6b04:	b513      	push	{r0, r1, r4, lr}
   b6b06:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6b08:	7800      	ldrb	r0, [r0, #0]
   b6b0a:	f7ff ffee 	bl	b6aea <_ZN8SPIClass4lockEv.isra.0>
   b6b0e:	b958      	cbnz	r0, b6b28 <_ZN8SPIClass5beginEv+0x24>
   b6b10:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6b12:	9001      	str	r0, [sp, #4]
   b6b14:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6b18:	f7ff fba2 	bl	b6260 <hal_spi_begin>
        unlock();
   b6b1c:	9801      	ldr	r0, [sp, #4]
    }
}
   b6b1e:	b002      	add	sp, #8
   b6b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6b24:	f7ff bfde 	b.w	b6ae4 <_ZN8SPIClass6unlockEv.isra.0>
   b6b28:	b002      	add	sp, #8
   b6b2a:	bd10      	pop	{r4, pc}

000b6b2c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b6b2c:	b513      	push	{r0, r1, r4, lr}
   b6b2e:	4604      	mov	r4, r0
    if (!lock())
   b6b30:	7800      	ldrb	r0, [r0, #0]
{
   b6b32:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6b34:	f7ff ffd9 	bl	b6aea <_ZN8SPIClass4lockEv.isra.0>
   b6b38:	9901      	ldr	r1, [sp, #4]
   b6b3a:	b948      	cbnz	r0, b6b50 <_ZN8SPIClass11setBitOrderEh+0x24>
   b6b3c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b6b3e:	9001      	str	r0, [sp, #4]
   b6b40:	f7ff fb96 	bl	b6270 <hal_spi_set_bit_order>
        unlock();
   b6b44:	9801      	ldr	r0, [sp, #4]
    }
}
   b6b46:	b002      	add	sp, #8
   b6b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6b4c:	f7ff bfca 	b.w	b6ae4 <_ZN8SPIClass6unlockEv.isra.0>
   b6b50:	b002      	add	sp, #8
   b6b52:	bd10      	pop	{r4, pc}

000b6b54 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6b54:	b513      	push	{r0, r1, r4, lr}
   b6b56:	4604      	mov	r4, r0
    if (!lock())
   b6b58:	7800      	ldrb	r0, [r0, #0]
{
   b6b5a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6b5c:	f7ff ffc5 	bl	b6aea <_ZN8SPIClass4lockEv.isra.0>
   b6b60:	9901      	ldr	r1, [sp, #4]
   b6b62:	b948      	cbnz	r0, b6b78 <_ZN8SPIClass11setDataModeEh+0x24>
   b6b64:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b6b66:	9001      	str	r0, [sp, #4]
   b6b68:	f7ff fb8a 	bl	b6280 <hal_spi_set_data_mode>
        unlock();
   b6b6c:	9801      	ldr	r0, [sp, #4]
    }
}
   b6b6e:	b002      	add	sp, #8
   b6b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6b74:	f7ff bfb6 	b.w	b6ae4 <_ZN8SPIClass6unlockEv.isra.0>
   b6b78:	b002      	add	sp, #8
   b6b7a:	bd10      	pop	{r4, pc}

000b6b7c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6b7c:	0840      	lsrs	r0, r0, #1
{
   b6b7e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6b80:	6018      	str	r0, [r3, #0]
   b6b82:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6b84:	6818      	ldr	r0, [r3, #0]
   b6b86:	4288      	cmp	r0, r1
   b6b88:	b2e5      	uxtb	r5, r4
   b6b8a:	d906      	bls.n	b6b9a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6b8c:	3401      	adds	r4, #1
   b6b8e:	2c08      	cmp	r4, #8
   b6b90:	d002      	beq.n	b6b98 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6b92:	0840      	lsrs	r0, r0, #1
   b6b94:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6b96:	e7f5      	b.n	b6b84 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6b98:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6b9a:	4b02      	ldr	r3, [pc, #8]	; (b6ba4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6b9c:	5d5b      	ldrb	r3, [r3, r5]
   b6b9e:	7013      	strb	r3, [r2, #0]
}
   b6ba0:	bd30      	pop	{r4, r5, pc}
   b6ba2:	bf00      	nop
   b6ba4:	000bea80 	.word	0x000bea80

000b6ba8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6bac:	b088      	sub	sp, #32
    unsigned clock = 0;
   b6bae:	2300      	movs	r3, #0
{
   b6bb0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6bb2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6bb4:	9302      	str	r3, [sp, #8]
{
   b6bb6:	460e      	mov	r6, r1
   b6bb8:	4617      	mov	r7, r2
    if (!lock())
   b6bba:	f7ff ff96 	bl	b6aea <_ZN8SPIClass4lockEv.isra.0>
   b6bbe:	4605      	mov	r5, r0
   b6bc0:	bb00      	cbnz	r0, b6c04 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6bc2:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6bc6:	4601      	mov	r1, r0
   b6bc8:	2214      	movs	r2, #20
   b6bca:	a803      	add	r0, sp, #12
   b6bcc:	f001 f882 	bl	b7cd4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6bd0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6bd2:	462a      	mov	r2, r5
   b6bd4:	a903      	add	r1, sp, #12
   b6bd6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b6bd8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b6bdc:	f7ff fb78 	bl	b62d0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6be0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b6be2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6be6:	ab02      	add	r3, sp, #8
   b6be8:	f10d 0207 	add.w	r2, sp, #7
   b6bec:	fb07 f106 	mul.w	r1, r7, r6
   b6bf0:	f7ff ffc4 	bl	b6b7c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6bf4:	7820      	ldrb	r0, [r4, #0]
   b6bf6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6bfa:	f7ff fb49 	bl	b6290 <hal_spi_set_clock_divider>
        unlock();
   b6bfe:	7820      	ldrb	r0, [r4, #0]
   b6c00:	f7ff ff70 	bl	b6ae4 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6c04:	9802      	ldr	r0, [sp, #8]
   b6c06:	b008      	add	sp, #32
   b6c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6c0c <_ZN8SPIClass15setClockDividerEh>:
{
   b6c0c:	b538      	push	{r3, r4, r5, lr}
   b6c0e:	4604      	mov	r4, r0
    if (!lock())
   b6c10:	7800      	ldrb	r0, [r0, #0]
{
   b6c12:	460d      	mov	r5, r1
    if (!lock())
   b6c14:	f7ff ff69 	bl	b6aea <_ZN8SPIClass4lockEv.isra.0>
   b6c18:	4603      	mov	r3, r0
   b6c1a:	b9d0      	cbnz	r0, b6c52 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6c1c:	6861      	ldr	r1, [r4, #4]
   b6c1e:	b199      	cbz	r1, b6c48 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6c20:	4a0c      	ldr	r2, [pc, #48]	; (b6c54 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6c22:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6c26:	4285      	cmp	r5, r0
   b6c28:	d002      	beq.n	b6c30 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b6c2a:	3301      	adds	r3, #1
   b6c2c:	2b08      	cmp	r3, #8
   b6c2e:	d1f8      	bne.n	b6c22 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6c30:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b6c32:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6c34:	2201      	movs	r2, #1
   b6c36:	40d9      	lsrs	r1, r3
   b6c38:	4620      	mov	r0, r4
   b6c3a:	f7ff ffb5 	bl	b6ba8 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b6c3e:	7820      	ldrb	r0, [r4, #0]
}
   b6c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6c44:	f7ff bf4e 	b.w	b6ae4 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6c48:	7820      	ldrb	r0, [r4, #0]
   b6c4a:	4629      	mov	r1, r5
   b6c4c:	f7ff fb20 	bl	b6290 <hal_spi_set_clock_divider>
   b6c50:	e7f5      	b.n	b6c3e <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b6c52:	bd38      	pop	{r3, r4, r5, pc}
   b6c54:	000bea80 	.word	0x000bea80

000b6c58 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6c58:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6c5a:	7800      	ldrb	r0, [r0, #0]
   b6c5c:	f7ff fb20 	bl	b62a0 <hal_spi_transfer>
}
   b6c60:	b2c0      	uxtb	r0, r0
   b6c62:	bd08      	pop	{r3, pc}

000b6c64 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6c64:	b510      	push	{r4, lr}
   b6c66:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6c68:	f7ff fa1a 	bl	b60a0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6c6c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6c6e:	6823      	ldr	r3, [r4, #0]
   b6c70:	4620      	mov	r0, r4
   b6c72:	695b      	ldr	r3, [r3, #20]
   b6c74:	4798      	blx	r3
    if (c >= 0) return c;
   b6c76:	2800      	cmp	r0, #0
   b6c78:	da08      	bge.n	b6c8c <_ZN6Stream9timedReadEv+0x28>
   b6c7a:	f7ff fa11 	bl	b60a0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6c7e:	68e3      	ldr	r3, [r4, #12]
   b6c80:	1ac0      	subs	r0, r0, r3
   b6c82:	68a3      	ldr	r3, [r4, #8]
   b6c84:	4298      	cmp	r0, r3
   b6c86:	d3f2      	bcc.n	b6c6e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6c8c:	bd10      	pop	{r4, pc}
	...

000b6c90 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b6c90:	b538      	push	{r3, r4, r5, lr}
   b6c92:	460d      	mov	r5, r1
  String ret;
   b6c94:	4907      	ldr	r1, [pc, #28]	; (b6cb4 <_ZN6Stream10readStringEv+0x24>)
{
   b6c96:	4604      	mov	r4, r0
  String ret;
   b6c98:	f000 f859 	bl	b6d4e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6c9c:	4628      	mov	r0, r5
   b6c9e:	f7ff ffe1 	bl	b6c64 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b6ca2:	2800      	cmp	r0, #0
   b6ca4:	db04      	blt.n	b6cb0 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b6ca6:	b2c1      	uxtb	r1, r0
   b6ca8:	4620      	mov	r0, r4
   b6caa:	f000 f8cb 	bl	b6e44 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b6cae:	e7f5      	b.n	b6c9c <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b6cb0:	4620      	mov	r0, r4
   b6cb2:	bd38      	pop	{r3, r4, r5, pc}
   b6cb4:	000b819c 	.word	0x000b819c

000b6cb8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6cb8:	b510      	push	{r4, lr}
   b6cba:	4604      	mov	r4, r0
{
	free(buffer);
   b6cbc:	6800      	ldr	r0, [r0, #0]
   b6cbe:	f7ff fc4b 	bl	b6558 <free>
}
   b6cc2:	4620      	mov	r0, r4
   b6cc4:	bd10      	pop	{r4, pc}

000b6cc6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6cc6:	b510      	push	{r4, lr}
   b6cc8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6cca:	6800      	ldr	r0, [r0, #0]
   b6ccc:	b108      	cbz	r0, b6cd2 <_ZN6String10invalidateEv+0xc>
   b6cce:	f7ff fc43 	bl	b6558 <free>
	buffer = NULL;
   b6cd2:	2300      	movs	r3, #0
	capacity = len = 0;
   b6cd4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6cd8:	6023      	str	r3, [r4, #0]
}
   b6cda:	bd10      	pop	{r4, pc}

000b6cdc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6cdc:	b538      	push	{r3, r4, r5, lr}
   b6cde:	4604      	mov	r4, r0
   b6ce0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6ce2:	6800      	ldr	r0, [r0, #0]
   b6ce4:	3101      	adds	r1, #1
   b6ce6:	f7ff fc3f 	bl	b6568 <realloc>
	if (newbuffer) {
   b6cea:	b110      	cbz	r0, b6cf2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6cec:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6cf0:	2001      	movs	r0, #1
	}
	return 0;
}
   b6cf2:	bd38      	pop	{r3, r4, r5, pc}

000b6cf4 <_ZN6String7reserveEj>:
{
   b6cf4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6cf6:	6803      	ldr	r3, [r0, #0]
{
   b6cf8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6cfa:	b123      	cbz	r3, b6d06 <_ZN6String7reserveEj+0x12>
   b6cfc:	6843      	ldr	r3, [r0, #4]
   b6cfe:	428b      	cmp	r3, r1
   b6d00:	d301      	bcc.n	b6d06 <_ZN6String7reserveEj+0x12>
   b6d02:	2001      	movs	r0, #1
}
   b6d04:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6d06:	4620      	mov	r0, r4
   b6d08:	f7ff ffe8 	bl	b6cdc <_ZN6String12changeBufferEj>
   b6d0c:	2800      	cmp	r0, #0
   b6d0e:	d0f9      	beq.n	b6d04 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6d10:	68a3      	ldr	r3, [r4, #8]
   b6d12:	2b00      	cmp	r3, #0
   b6d14:	d1f5      	bne.n	b6d02 <_ZN6String7reserveEj+0xe>
   b6d16:	6822      	ldr	r2, [r4, #0]
   b6d18:	7013      	strb	r3, [r2, #0]
   b6d1a:	e7f2      	b.n	b6d02 <_ZN6String7reserveEj+0xe>

000b6d1c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d1e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6d20:	4611      	mov	r1, r2
   b6d22:	9201      	str	r2, [sp, #4]
{
   b6d24:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6d26:	f7ff ffe5 	bl	b6cf4 <_ZN6String7reserveEj>
   b6d2a:	9a01      	ldr	r2, [sp, #4]
   b6d2c:	b928      	cbnz	r0, b6d3a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6d2e:	4620      	mov	r0, r4
   b6d30:	f7ff ffc9 	bl	b6cc6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6d34:	4620      	mov	r0, r4
   b6d36:	b003      	add	sp, #12
   b6d38:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6d3a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6d3c:	4629      	mov	r1, r5
   b6d3e:	6820      	ldr	r0, [r4, #0]
   b6d40:	f000 ffba 	bl	b7cb8 <memcpy>
	buffer[len] = 0;
   b6d44:	6822      	ldr	r2, [r4, #0]
   b6d46:	68a3      	ldr	r3, [r4, #8]
   b6d48:	2100      	movs	r1, #0
   b6d4a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6d4c:	e7f2      	b.n	b6d34 <_ZN6String4copyEPKcj+0x18>

000b6d4e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6d4e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6d50:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6d52:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6d56:	4604      	mov	r4, r0
	len = 0;
   b6d58:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6d5a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6d5c:	b141      	cbz	r1, b6d70 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6d5e:	4608      	mov	r0, r1
   b6d60:	9101      	str	r1, [sp, #4]
   b6d62:	f001 f83d 	bl	b7de0 <strlen>
   b6d66:	9901      	ldr	r1, [sp, #4]
   b6d68:	4602      	mov	r2, r0
   b6d6a:	4620      	mov	r0, r4
   b6d6c:	f7ff ffd6 	bl	b6d1c <_ZN6String4copyEPKcj>
}
   b6d70:	4620      	mov	r0, r4
   b6d72:	b002      	add	sp, #8
   b6d74:	bd10      	pop	{r4, pc}

000b6d76 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6d76:	4288      	cmp	r0, r1
{
   b6d78:	b510      	push	{r4, lr}
   b6d7a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6d7c:	d005      	beq.n	b6d8a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6d7e:	680b      	ldr	r3, [r1, #0]
   b6d80:	b12b      	cbz	r3, b6d8e <_ZN6StringaSERKS_+0x18>
   b6d82:	688a      	ldr	r2, [r1, #8]
   b6d84:	4619      	mov	r1, r3
   b6d86:	f7ff ffc9 	bl	b6d1c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6d8a:	4620      	mov	r0, r4
   b6d8c:	bd10      	pop	{r4, pc}
	else invalidate();
   b6d8e:	f7ff ff9a 	bl	b6cc6 <_ZN6String10invalidateEv>
   b6d92:	e7fa      	b.n	b6d8a <_ZN6StringaSERKS_+0x14>

000b6d94 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6d94:	b510      	push	{r4, lr}
	buffer = NULL;
   b6d96:	2300      	movs	r3, #0
String::String(const String &value)
   b6d98:	4604      	mov	r4, r0
	capacity = 0;
   b6d9a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6d9e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6da0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6da2:	f7ff ffe8 	bl	b6d76 <_ZN6StringaSERKS_>
}
   b6da6:	4620      	mov	r0, r4
   b6da8:	bd10      	pop	{r4, pc}

000b6daa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6daa:	b513      	push	{r0, r1, r4, lr}
   b6dac:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6dae:	b159      	cbz	r1, b6dc8 <_ZN6StringaSEPKc+0x1e>
   b6db0:	4608      	mov	r0, r1
   b6db2:	9101      	str	r1, [sp, #4]
   b6db4:	f001 f814 	bl	b7de0 <strlen>
   b6db8:	9901      	ldr	r1, [sp, #4]
   b6dba:	4602      	mov	r2, r0
   b6dbc:	4620      	mov	r0, r4
   b6dbe:	f7ff ffad 	bl	b6d1c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6dc2:	4620      	mov	r0, r4
   b6dc4:	b002      	add	sp, #8
   b6dc6:	bd10      	pop	{r4, pc}
	else invalidate();
   b6dc8:	f7ff ff7d 	bl	b6cc6 <_ZN6String10invalidateEv>
   b6dcc:	e7f9      	b.n	b6dc2 <_ZN6StringaSEPKc+0x18>

000b6dce <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6dce:	b510      	push	{r4, lr}
   b6dd0:	4604      	mov	r4, r0
   b6dd2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6dd4:	2300      	movs	r3, #0
	capacity = 0;
   b6dd6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6dda:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6ddc:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6dde:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b6de0:	a901      	add	r1, sp, #4
   b6de2:	f000 fc93 	bl	b770c <itoa>
	*this = buf;
   b6de6:	a901      	add	r1, sp, #4
   b6de8:	4620      	mov	r0, r4
   b6dea:	f7ff ffde 	bl	b6daa <_ZN6StringaSEPKc>
}
   b6dee:	4620      	mov	r0, r4
   b6df0:	b00a      	add	sp, #40	; 0x28
   b6df2:	bd10      	pop	{r4, pc}

000b6df4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6df4:	b570      	push	{r4, r5, r6, lr}
   b6df6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6df8:	460e      	mov	r6, r1
   b6dfa:	b909      	cbnz	r1, b6e00 <_ZN6String6concatEPKcj+0xc>
   b6dfc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6dfe:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6e00:	b16a      	cbz	r2, b6e1e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6e02:	6884      	ldr	r4, [r0, #8]
   b6e04:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6e06:	4621      	mov	r1, r4
   b6e08:	f7ff ff74 	bl	b6cf4 <_ZN6String7reserveEj>
   b6e0c:	2800      	cmp	r0, #0
   b6e0e:	d0f5      	beq.n	b6dfc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6e10:	6828      	ldr	r0, [r5, #0]
   b6e12:	68ab      	ldr	r3, [r5, #8]
   b6e14:	4631      	mov	r1, r6
   b6e16:	4418      	add	r0, r3
   b6e18:	f000 ffda 	bl	b7dd0 <strcpy>
	len = newlen;
   b6e1c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6e1e:	2001      	movs	r0, #1
   b6e20:	e7ed      	b.n	b6dfe <_ZN6String6concatEPKcj+0xa>

000b6e22 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b6e22:	b513      	push	{r0, r1, r4, lr}
   b6e24:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b6e26:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b6e28:	b151      	cbz	r1, b6e40 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b6e2a:	9101      	str	r1, [sp, #4]
   b6e2c:	f000 ffd8 	bl	b7de0 <strlen>
   b6e30:	9901      	ldr	r1, [sp, #4]
   b6e32:	4602      	mov	r2, r0
   b6e34:	4620      	mov	r0, r4
}
   b6e36:	b002      	add	sp, #8
   b6e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b6e3c:	f7ff bfda 	b.w	b6df4 <_ZN6String6concatEPKcj>
}
   b6e40:	b002      	add	sp, #8
   b6e42:	bd10      	pop	{r4, pc}

000b6e44 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b6e44:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b6e46:	2300      	movs	r3, #0
	buf[0] = c;
   b6e48:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b6e4c:	2201      	movs	r2, #1
   b6e4e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b6e50:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b6e54:	f7ff ffce 	bl	b6df4 <_ZN6String6concatEPKcj>
}
   b6e58:	b003      	add	sp, #12
   b6e5a:	f85d fb04 	ldr.w	pc, [sp], #4

000b6e5e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6e5e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6e60:	688a      	ldr	r2, [r1, #8]
   b6e62:	6809      	ldr	r1, [r1, #0]
{
   b6e64:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6e66:	f7ff ffc5 	bl	b6df4 <_ZN6String6concatEPKcj>
   b6e6a:	b910      	cbnz	r0, b6e72 <_ZplRK15StringSumHelperRK6String+0x14>
   b6e6c:	4620      	mov	r0, r4
   b6e6e:	f7ff ff2a 	bl	b6cc6 <_ZN6String10invalidateEv>
	return a;
}
   b6e72:	4620      	mov	r0, r4
   b6e74:	bd10      	pop	{r4, pc}

000b6e76 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b6e76:	b513      	push	{r0, r1, r4, lr}
   b6e78:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6e7a:	b929      	cbnz	r1, b6e88 <_ZplRK15StringSumHelperPKc+0x12>
   b6e7c:	4620      	mov	r0, r4
   b6e7e:	f7ff ff22 	bl	b6cc6 <_ZN6String10invalidateEv>
	return a;
}
   b6e82:	4620      	mov	r0, r4
   b6e84:	b002      	add	sp, #8
   b6e86:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6e88:	4608      	mov	r0, r1
   b6e8a:	9101      	str	r1, [sp, #4]
   b6e8c:	f000 ffa8 	bl	b7de0 <strlen>
   b6e90:	9901      	ldr	r1, [sp, #4]
   b6e92:	4602      	mov	r2, r0
   b6e94:	4620      	mov	r0, r4
   b6e96:	f7ff ffad 	bl	b6df4 <_ZN6String6concatEPKcj>
   b6e9a:	2800      	cmp	r0, #0
   b6e9c:	d0ee      	beq.n	b6e7c <_ZplRK15StringSumHelperPKc+0x6>
   b6e9e:	e7f0      	b.n	b6e82 <_ZplRK15StringSumHelperPKc+0xc>

000b6ea0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6ea0:	4b05      	ldr	r3, [pc, #20]	; (b6eb8 <_GLOBAL__sub_I_System+0x18>)
   b6ea2:	2202      	movs	r2, #2
   b6ea4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6ea6:	4b05      	ldr	r3, [pc, #20]	; (b6ebc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6ea8:	4a05      	ldr	r2, [pc, #20]	; (b6ec0 <_GLOBAL__sub_I_System+0x20>)
   b6eaa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6eac:	2000      	movs	r0, #0
   b6eae:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6eb2:	f7ff bab5 	b.w	b6420 <set_system_mode>
   b6eb6:	bf00      	nop
   b6eb8:	2003e6f8 	.word	0x2003e6f8
   b6ebc:	2003e6ec 	.word	0x2003e6ec
   b6ec0:	ffff0000 	.word	0xffff0000

000b6ec4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6ec4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6ec6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6ec8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6ecc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6ece:	2201      	movs	r2, #1
   b6ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6ed4:	f10d 0107 	add.w	r1, sp, #7
   b6ed8:	47a0      	blx	r4
}
   b6eda:	b002      	add	sp, #8
   b6edc:	bd10      	pop	{r4, pc}

000b6ede <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6ede:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6ee0:	6803      	ldr	r3, [r0, #0]
   b6ee2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6ee8:	46a4      	mov	ip, r4
}
   b6eea:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6eee:	4760      	bx	ip

000b6ef0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6ef0:	b513      	push	{r0, r1, r4, lr}
   b6ef2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6ef4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6ef6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6efa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6efc:	f10d 0107 	add.w	r1, sp, #7
   b6f00:	2201      	movs	r2, #1
   b6f02:	47a0      	blx	r4
}
   b6f04:	b002      	add	sp, #8
   b6f06:	bd10      	pop	{r4, pc}

000b6f08 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6f08:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6f0a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6f0c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f10:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f14:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6f16:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6f18:	d008      	beq.n	b6f2c <_ZN9TCPClient4readEv+0x24>
   b6f1a:	6963      	ldr	r3, [r4, #20]
   b6f1c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6f20:	1c51      	adds	r1, r2, #1
   b6f22:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6f26:	4413      	add	r3, r2
   b6f28:	7918      	ldrb	r0, [r3, #4]
}
   b6f2a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6f2c:	6803      	ldr	r3, [r0, #0]
   b6f2e:	691b      	ldr	r3, [r3, #16]
   b6f30:	4798      	blx	r3
   b6f32:	2800      	cmp	r0, #0
   b6f34:	d1f1      	bne.n	b6f1a <_ZN9TCPClient4readEv+0x12>
   b6f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6f3a:	e7f6      	b.n	b6f2a <_ZN9TCPClient4readEv+0x22>

000b6f3c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6f3c:	4770      	bx	lr

000b6f3e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6f3e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6f40:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6f42:	43c0      	mvns	r0, r0
   b6f44:	0fc0      	lsrs	r0, r0, #31
   b6f46:	4770      	bx	lr

000b6f48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f48:	4770      	bx	lr
	...

000b6f4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6f4c:	4b06      	ldr	r3, [pc, #24]	; (b6f68 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6f4e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6f50:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6f52:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6f56:	d005      	beq.n	b6f64 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6f58:	4608      	mov	r0, r1
   b6f5a:	f000 fd95 	bl	b7a88 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6f5e:	2800      	cmp	r0, #0
   b6f60:	bf08      	it	eq
   b6f62:	2400      	moveq	r4, #0
      }
   b6f64:	4620      	mov	r0, r4
   b6f66:	bd10      	pop	{r4, pc}
   b6f68:	000be9c0 	.word	0x000be9c0

000b6f6c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f6c:	b510      	push	{r4, lr}
   b6f6e:	21ac      	movs	r1, #172	; 0xac
   b6f70:	4604      	mov	r4, r0
   b6f72:	f7fd f892 	bl	b409a <_ZdlPvj>
   b6f76:	4620      	mov	r0, r4
   b6f78:	bd10      	pop	{r4, pc}

000b6f7a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6f7a:	21ac      	movs	r1, #172	; 0xac
   b6f7c:	f7fd b88d 	b.w	b409a <_ZdlPvj>

000b6f80 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6f84:	f04f 0800 	mov.w	r8, #0
   b6f88:	b086      	sub	sp, #24
   b6f8a:	461c      	mov	r4, r3
   b6f8c:	f8c0 8004 	str.w	r8, [r0, #4]
   b6f90:	4605      	mov	r5, r0
   b6f92:	460e      	mov	r6, r1
   b6f94:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6f96:	4641      	mov	r1, r8
   b6f98:	2210      	movs	r2, #16
   b6f9a:	a802      	add	r0, sp, #8
   b6f9c:	f000 fe9a 	bl	b7cd4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6fa0:	1c63      	adds	r3, r4, #1
   b6fa2:	d009      	beq.n	b6fb8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6fa8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6fac:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6fb0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6fb4:	435c      	muls	r4, r3
   b6fb6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6fb8:	6968      	ldr	r0, [r5, #20]
   b6fba:	2310      	movs	r3, #16
   b6fbc:	9300      	str	r3, [sp, #0]
   b6fbe:	6800      	ldr	r0, [r0, #0]
   b6fc0:	ab02      	add	r3, sp, #8
   b6fc2:	f241 0205 	movw	r2, #4101	; 0x1005
   b6fc6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6fca:	f7ff f919 	bl	b6200 <sock_setsockopt>
    if (ret < 0) {
   b6fce:	2800      	cmp	r0, #0
   b6fd0:	da07      	bge.n	b6fe2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6fd2:	f7ff fad9 	bl	b6588 <__errno>
   b6fd6:	6803      	ldr	r3, [r0, #0]
   b6fd8:	606b      	str	r3, [r5, #4]
        return 0;
   b6fda:	2000      	movs	r0, #0
}
   b6fdc:	b006      	add	sp, #24
   b6fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6fe2:	6968      	ldr	r0, [r5, #20]
   b6fe4:	2300      	movs	r3, #0
   b6fe6:	6800      	ldr	r0, [r0, #0]
   b6fe8:	463a      	mov	r2, r7
   b6fea:	4631      	mov	r1, r6
   b6fec:	f7ff f928 	bl	b6240 <sock_send>
    if (ret < 0) {
   b6ff0:	1e03      	subs	r3, r0, #0
   b6ff2:	dbee      	blt.n	b6fd2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6ff4:	4618      	mov	r0, r3
   b6ff6:	e7f1      	b.n	b6fdc <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6ff8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6ff8:	b530      	push	{r4, r5, lr}
   b6ffa:	b087      	sub	sp, #28
   b6ffc:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6ffe:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7000:	4668      	mov	r0, sp
   b7002:	f7ff fbff 	bl	b6804 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7008:	3404      	adds	r4, #4
   b700a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b700c:	682b      	ldr	r3, [r5, #0]
   b700e:	7023      	strb	r3, [r4, #0]
    }
   b7010:	b007      	add	sp, #28
   b7012:	bd30      	pop	{r4, r5, pc}

000b7014 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7014:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7016:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7018:	4b05      	ldr	r3, [pc, #20]	; (b7030 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b701a:	4604      	mov	r4, r0
   b701c:	358c      	adds	r5, #140	; 0x8c
   b701e:	f844 3b04 	str.w	r3, [r4], #4
   b7022:	4606      	mov	r6, r0
   b7024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7028:	682b      	ldr	r3, [r5, #0]
   b702a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b702c:	4630      	mov	r0, r6
   b702e:	bd70      	pop	{r4, r5, r6, pc}
   b7030:	000bea34 	.word	0x000bea34

000b7034 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7038:	4698      	mov	r8, r3
    stop();
   b703a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b703c:	b093      	sub	sp, #76	; 0x4c
   b703e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7040:	2400      	movs	r4, #0
    stop();
   b7042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7044:	4606      	mov	r6, r0
   b7046:	4617      	mov	r7, r2
    stop();
   b7048:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b704a:	4628      	mov	r0, r5
   b704c:	466b      	mov	r3, sp
   b704e:	4622      	mov	r2, r4
   b7050:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7052:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7054:	f7ff f8cc 	bl	b61f0 <netdb_getaddrinfo>
   b7058:	4605      	mov	r5, r0
   b705a:	2800      	cmp	r0, #0
   b705c:	d163      	bne.n	b7126 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b705e:	9b00      	ldr	r3, [sp, #0]
   b7060:	2b00      	cmp	r3, #0
   b7062:	d04b      	beq.n	b70fc <_ZN9TCPClient7connectEPKctm+0xc8>
   b7064:	695b      	ldr	r3, [r3, #20]
   b7066:	2b00      	cmp	r3, #0
   b7068:	d048      	beq.n	b70fc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b706a:	a806      	add	r0, sp, #24
   b706c:	f7ff fb86 	bl	b677c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7070:	9b00      	ldr	r3, [sp, #0]
   b7072:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7074:	7863      	ldrb	r3, [r4, #1]
   b7076:	2b02      	cmp	r3, #2
   b7078:	d104      	bne.n	b7084 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b707a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b707c:	a806      	add	r0, sp, #24
   b707e:	f7ff ffbb 	bl	b6ff8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7082:	e026      	b.n	b70d2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7084:	2b0a      	cmp	r3, #10
   b7086:	d124      	bne.n	b70d2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7088:	2211      	movs	r2, #17
   b708a:	4629      	mov	r1, r5
   b708c:	a801      	add	r0, sp, #4
   b708e:	f000 fe21 	bl	b7cd4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7092:	68a3      	ldr	r3, [r4, #8]
   b7094:	2b00      	cmp	r3, #0
   b7096:	d038      	beq.n	b710a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7098:	f104 0308 	add.w	r3, r4, #8
   b709c:	f10d 0c04 	add.w	ip, sp, #4
   b70a0:	3418      	adds	r4, #24
   b70a2:	6818      	ldr	r0, [r3, #0]
   b70a4:	6859      	ldr	r1, [r3, #4]
   b70a6:	4662      	mov	r2, ip
   b70a8:	c203      	stmia	r2!, {r0, r1}
   b70aa:	3308      	adds	r3, #8
   b70ac:	42a3      	cmp	r3, r4
   b70ae:	4694      	mov	ip, r2
   b70b0:	d1f7      	bne.n	b70a2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b70b2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b70b4:	a901      	add	r1, sp, #4
   b70b6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b70b8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b70bc:	f7ff fb6c 	bl	b6798 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b70c0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b70c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b70c8:	ac07      	add	r4, sp, #28
   b70ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70cc:	f8dc 3000 	ldr.w	r3, [ip]
   b70d0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b70d2:	a806      	add	r0, sp, #24
   b70d4:	f7ff fb72 	bl	b67bc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b70d8:	b180      	cbz	r0, b70fc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b70da:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b70dc:	ad07      	add	r5, sp, #28
   b70de:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b70e2:	4b12      	ldr	r3, [pc, #72]	; (b712c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b70e4:	930c      	str	r3, [sp, #48]	; 0x30
   b70e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b70e8:	ac0d      	add	r4, sp, #52	; 0x34
   b70ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70ec:	682b      	ldr	r3, [r5, #0]
   b70ee:	7023      	strb	r3, [r4, #0]
   b70f0:	463a      	mov	r2, r7
   b70f2:	4643      	mov	r3, r8
   b70f4:	a90c      	add	r1, sp, #48	; 0x30
   b70f6:	4630      	mov	r0, r6
   b70f8:	47c8      	blx	r9
   b70fa:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b70fc:	9800      	ldr	r0, [sp, #0]
   b70fe:	f7ff f86f 	bl	b61e0 <netdb_freeaddrinfo>
}
   b7102:	4628      	mov	r0, r5
   b7104:	b013      	add	sp, #76	; 0x4c
   b7106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b710a:	68e3      	ldr	r3, [r4, #12]
   b710c:	2b00      	cmp	r3, #0
   b710e:	d1c3      	bne.n	b7098 <_ZN9TCPClient7connectEPKctm+0x64>
   b7110:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7114:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7118:	f7ff f852 	bl	b61c0 <inet_htonl>
   b711c:	4581      	cmp	r9, r0
   b711e:	d1bb      	bne.n	b7098 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7120:	f104 0114 	add.w	r1, r4, #20
   b7124:	e7aa      	b.n	b707c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7126:	4625      	mov	r5, r4
   b7128:	e7e8      	b.n	b70fc <_ZN9TCPClient7connectEPKctm+0xc8>
   b712a:	bf00      	nop
   b712c:	000bea34 	.word	0x000bea34

000b7130 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7130:	b538      	push	{r3, r4, r5, lr}
   b7132:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7134:	681a      	ldr	r2, [r3, #0]
   b7136:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7138:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b713a:	da10      	bge.n	b715e <_ZN9TCPClient9connectedEv+0x2e>
   b713c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7140:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7144:	429a      	cmp	r2, r3
   b7146:	d10a      	bne.n	b715e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7148:	6803      	ldr	r3, [r0, #0]
   b714a:	691b      	ldr	r3, [r3, #16]
   b714c:	4798      	blx	r3
        if (!rv) {
   b714e:	4604      	mov	r4, r0
   b7150:	b928      	cbnz	r0, b715e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7152:	682b      	ldr	r3, [r5, #0]
   b7154:	4628      	mov	r0, r5
   b7156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7158:	4798      	blx	r3
        rv = available();
   b715a:	4620      	mov	r0, r4
}
   b715c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b715e:	2001      	movs	r0, #1
   b7160:	e7fc      	b.n	b715c <_ZN9TCPClient9connectedEv+0x2c>

000b7162 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7162:	b510      	push	{r4, lr}
   b7164:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7166:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b716a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b716e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7170:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7172:	d005      	beq.n	b7180 <_ZN9TCPClient4peekEv+0x1e>
   b7174:	6963      	ldr	r3, [r4, #20]
   b7176:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b717a:	4413      	add	r3, r2
   b717c:	7918      	ldrb	r0, [r3, #4]
}
   b717e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7180:	6803      	ldr	r3, [r0, #0]
   b7182:	691b      	ldr	r3, [r3, #16]
   b7184:	4798      	blx	r3
   b7186:	2800      	cmp	r0, #0
   b7188:	d1f4      	bne.n	b7174 <_ZN9TCPClient4peekEv+0x12>
   b718a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b718e:	e7f6      	b.n	b717e <_ZN9TCPClient4peekEv+0x1c>

000b7190 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7192:	6943      	ldr	r3, [r0, #20]
   b7194:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7196:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b719a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b719e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b71a0:	4605      	mov	r5, r0
   b71a2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b71a4:	d016      	beq.n	b71d4 <_ZN9TCPClient4readEPhj+0x44>
   b71a6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b71a8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b71ac:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b71b0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b71b2:	42bc      	cmp	r4, r7
   b71b4:	bf28      	it	cs
   b71b6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b71b8:	3304      	adds	r3, #4
   b71ba:	4622      	mov	r2, r4
   b71bc:	4419      	add	r1, r3
   b71be:	4630      	mov	r0, r6
   b71c0:	f000 fd7a 	bl	b7cb8 <memcpy>
   b71c4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b71c6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b71ca:	4423      	add	r3, r4
   b71cc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b71d0:	4620      	mov	r0, r4
   b71d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b71d4:	6803      	ldr	r3, [r0, #0]
   b71d6:	691b      	ldr	r3, [r3, #16]
   b71d8:	4798      	blx	r3
   b71da:	2800      	cmp	r0, #0
   b71dc:	d1e3      	bne.n	b71a6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b71de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b71e2:	e7f5      	b.n	b71d0 <_ZN9TCPClient4readEPhj+0x40>

000b71e4 <_ZN9TCPClient12flush_bufferEv>:
   b71e4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b71e6:	2300      	movs	r3, #0
   b71e8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b71ec:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b71ee:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b71f2:	4770      	bx	lr

000b71f4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b71f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b71f8:	461f      	mov	r7, r3
    stop();
   b71fa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b71fc:	460c      	mov	r4, r1
    stop();
   b71fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7200:	b08a      	sub	sp, #40	; 0x28
   b7202:	4605      	mov	r5, r0
   b7204:	4616      	mov	r6, r2
    stop();
   b7206:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7208:	7d23      	ldrb	r3, [r4, #20]
   b720a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b720e:	2b04      	cmp	r3, #4
   b7210:	bf0c      	ite	eq
   b7212:	2002      	moveq	r0, #2
   b7214:	200a      	movne	r0, #10
   b7216:	2206      	movs	r2, #6
   b7218:	2101      	movs	r1, #1
   b721a:	f7ff f819 	bl	b6250 <sock_socket>
   b721e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7222:	696b      	ldr	r3, [r5, #20]
   b7224:	681b      	ldr	r3, [r3, #0]
   b7226:	2b00      	cmp	r3, #0
   b7228:	da08      	bge.n	b723c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b722a:	682b      	ldr	r3, [r5, #0]
   b722c:	4628      	mov	r0, r5
   b722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7230:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7232:	4798      	blx	r3
}
   b7234:	4620      	mov	r0, r4
   b7236:	b00a      	add	sp, #40	; 0x28
   b7238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b723c:	4628      	mov	r0, r5
   b723e:	f7ff ffd1 	bl	b71e4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7242:	b1b7      	cbz	r7, b7272 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7244:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7246:	a903      	add	r1, sp, #12
   b7248:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b724a:	9303      	str	r3, [sp, #12]
   b724c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7250:	f7fe ffa6 	bl	b61a0 <if_index_to_name>
   b7254:	2800      	cmp	r0, #0
   b7256:	d1e8      	bne.n	b722a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7258:	6968      	ldr	r0, [r5, #20]
   b725a:	2306      	movs	r3, #6
   b725c:	9300      	str	r3, [sp, #0]
   b725e:	6800      	ldr	r0, [r0, #0]
   b7260:	ab03      	add	r3, sp, #12
   b7262:	f241 020b 	movw	r2, #4107	; 0x100b
   b7266:	f640 71ff 	movw	r1, #4095	; 0xfff
   b726a:	f7fe ffc9 	bl	b6200 <sock_setsockopt>
   b726e:	2800      	cmp	r0, #0
   b7270:	d1db      	bne.n	b722a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7272:	221c      	movs	r2, #28
   b7274:	2100      	movs	r1, #0
   b7276:	a803      	add	r0, sp, #12
   b7278:	f000 fd2c 	bl	b7cd4 <memset>
    if (ip.version() == 4) {
   b727c:	7d23      	ldrb	r3, [r4, #20]
   b727e:	2b04      	cmp	r3, #4
   b7280:	d11d      	bne.n	b72be <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7282:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7286:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7288:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b728c:	f7fe ffa0 	bl	b61d0 <inet_htons>
   b7290:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7294:	6860      	ldr	r0, [r4, #4]
   b7296:	f7fe ff93 	bl	b61c0 <inet_htonl>
   b729a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b729c:	696b      	ldr	r3, [r5, #20]
   b729e:	221c      	movs	r2, #28
   b72a0:	6818      	ldr	r0, [r3, #0]
   b72a2:	a903      	add	r1, sp, #12
   b72a4:	f7fe ffbc 	bl	b6220 <sock_connect>
   b72a8:	2800      	cmp	r0, #0
   b72aa:	d1be      	bne.n	b722a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b72ac:	3404      	adds	r4, #4
   b72ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b72b0:	696d      	ldr	r5, [r5, #20]
   b72b2:	358c      	adds	r5, #140	; 0x8c
   b72b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b72b6:	6823      	ldr	r3, [r4, #0]
   b72b8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b72ba:	2401      	movs	r4, #1
   b72bc:	e7ba      	b.n	b7234 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b72be:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b72c2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b72c4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b72c8:	f7fe ff82 	bl	b61d0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b72cc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b72ce:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b72d2:	1d23      	adds	r3, r4, #4
   b72d4:	f104 0714 	add.w	r7, r4, #20
   b72d8:	6818      	ldr	r0, [r3, #0]
   b72da:	6859      	ldr	r1, [r3, #4]
   b72dc:	4632      	mov	r2, r6
   b72de:	c203      	stmia	r2!, {r0, r1}
   b72e0:	3308      	adds	r3, #8
   b72e2:	42bb      	cmp	r3, r7
   b72e4:	4616      	mov	r6, r2
   b72e6:	d1f7      	bne.n	b72d8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b72e8:	e7d8      	b.n	b729c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b72ec <_ZN9TCPClient9availableEv>:
{
   b72ec:	b530      	push	{r4, r5, lr}
   b72ee:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b72f0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b72f4:	b08b      	sub	sp, #44	; 0x2c
   b72f6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b72f8:	b12b      	cbz	r3, b7306 <_ZN9TCPClient9availableEv+0x1a>
   b72fa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b72fe:	429a      	cmp	r2, r3
   b7300:	d101      	bne.n	b7306 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7302:	f7ff ff6f 	bl	b71e4 <_ZN9TCPClient12flush_bufferEv>
   b7306:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7308:	6808      	ldr	r0, [r1, #0]
   b730a:	2800      	cmp	r0, #0
   b730c:	db18      	blt.n	b7340 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b730e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7312:	2d7f      	cmp	r5, #127	; 0x7f
   b7314:	d814      	bhi.n	b7340 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7316:	3104      	adds	r1, #4
   b7318:	2308      	movs	r3, #8
   b731a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b731e:	4429      	add	r1, r5
   b7320:	f7fe ff86 	bl	b6230 <sock_recv>
            if (ret > 0) {
   b7324:	2800      	cmp	r0, #0
   b7326:	dd13      	ble.n	b7350 <_ZN9TCPClient9availableEv+0x64>
   b7328:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b732a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b732e:	b90a      	cbnz	r2, b7334 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7330:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7334:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7336:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b733a:	4410      	add	r0, r2
   b733c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7340:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7342:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7346:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b734a:	1ac0      	subs	r0, r0, r3
   b734c:	b00b      	add	sp, #44	; 0x2c
   b734e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7350:	f7ff f91a 	bl	b6588 <__errno>
   b7354:	6803      	ldr	r3, [r0, #0]
   b7356:	2b0b      	cmp	r3, #11
   b7358:	d0f2      	beq.n	b7340 <_ZN9TCPClient9availableEv+0x54>
   b735a:	f7ff f915 	bl	b6588 <__errno>
   b735e:	6803      	ldr	r3, [r0, #0]
   b7360:	2b0b      	cmp	r3, #11
   b7362:	d0ed      	beq.n	b7340 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7364:	2320      	movs	r3, #32
   b7366:	2500      	movs	r5, #0
   b7368:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b736c:	f7ff f90c 	bl	b6588 <__errno>
   b7370:	6803      	ldr	r3, [r0, #0]
   b7372:	9301      	str	r3, [sp, #4]
   b7374:	4b08      	ldr	r3, [pc, #32]	; (b7398 <_ZN9TCPClient9availableEv+0xac>)
   b7376:	4909      	ldr	r1, [pc, #36]	; (b739c <_ZN9TCPClient9availableEv+0xb0>)
   b7378:	9300      	str	r3, [sp, #0]
   b737a:	aa02      	add	r2, sp, #8
   b737c:	462b      	mov	r3, r5
   b737e:	2032      	movs	r0, #50	; 0x32
   b7380:	f7ff f846 	bl	b6410 <log_message>
                    sock_close(d_->sock);
   b7384:	6963      	ldr	r3, [r4, #20]
   b7386:	6818      	ldr	r0, [r3, #0]
   b7388:	f7fe ff42 	bl	b6210 <sock_close>
   b738c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b738e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7392:	601a      	str	r2, [r3, #0]
   b7394:	e7d4      	b.n	b7340 <_ZN9TCPClient9availableEv+0x54>
   b7396:	bf00      	nop
   b7398:	000bea8f 	.word	0x000bea8f
   b739c:	000bea88 	.word	0x000bea88

000b73a0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b73a0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b73a2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b73a4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b73a6:	6818      	ldr	r0, [r3, #0]
   b73a8:	2800      	cmp	r0, #0
   b73aa:	db01      	blt.n	b73b0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b73ac:	f7fe ff30 	bl	b6210 <sock_close>
   b73b0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b73b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b73b6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b73b8:	6960      	ldr	r0, [r4, #20]
   b73ba:	2211      	movs	r2, #17
   b73bc:	2100      	movs	r1, #0
   b73be:	308c      	adds	r0, #140	; 0x8c
   b73c0:	f000 fc88 	bl	b7cd4 <memset>
    flush_buffer();
   b73c4:	4620      	mov	r0, r4
}
   b73c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b73ca:	f7ff bf0b 	b.w	b71e4 <_ZN9TCPClient12flush_bufferEv>

000b73ce <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b73ce:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b73d0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b73d2:	4604      	mov	r4, r0
          total(0) {
   b73d4:	6001      	str	r1, [r0, #0]
   b73d6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b73da:	3088      	adds	r0, #136	; 0x88
   b73dc:	f7ff f9ce 	bl	b677c <_ZN9IPAddressC1Ev>
}
   b73e0:	4620      	mov	r0, r4
   b73e2:	bd10      	pop	{r4, pc}

000b73e4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b73e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b73e6:	2300      	movs	r3, #0
   b73e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b73ec:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b73f0:	4a0e      	ldr	r2, [pc, #56]	; (b742c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b73f2:	6103      	str	r3, [r0, #16]
   b73f4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b73f6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b73f8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b73fa:	20ac      	movs	r0, #172	; 0xac
   b73fc:	9101      	str	r1, [sp, #4]
   b73fe:	f7fc fe48 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7402:	1e05      	subs	r5, r0, #0
   b7404:	f105 060c 	add.w	r6, r5, #12
   b7408:	d008      	beq.n	b741c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b740a:	2301      	movs	r3, #1
   b740c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7410:	4b07      	ldr	r3, [pc, #28]	; (b7430 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7412:	9901      	ldr	r1, [sp, #4]
   b7414:	602b      	str	r3, [r5, #0]
   b7416:	4630      	mov	r0, r6
   b7418:	f7ff ffd9 	bl	b73ce <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b741c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b741e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7422:	f7ff fedf 	bl	b71e4 <_ZN9TCPClient12flush_bufferEv>
}
   b7426:	b002      	add	sp, #8
   b7428:	bd70      	pop	{r4, r5, r6, pc}
   b742a:	bf00      	nop
   b742c:	000beac4 	.word	0x000beac4
   b7430:	000beaa8 	.word	0x000beaa8

000b7434 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7434:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7436:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b743a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b743c:	f7ff ffd2 	bl	b73e4 <_ZN9TCPClientC1Ei>
}
   b7440:	4620      	mov	r0, r4
   b7442:	bd10      	pop	{r4, pc}

000b7444 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7444:	b510      	push	{r4, lr}
   b7446:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7448:	6800      	ldr	r0, [r0, #0]
   b744a:	2800      	cmp	r0, #0
   b744c:	db01      	blt.n	b7452 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b744e:	f7fe fedf 	bl	b6210 <sock_close>
    }
}
   b7452:	4620      	mov	r0, r4
   b7454:	bd10      	pop	{r4, pc}

000b7456 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7456:	300c      	adds	r0, #12
   b7458:	f7ff bff4 	b.w	b7444 <_ZN9TCPClient4DataD1Ev>

000b745c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b745c:	4b02      	ldr	r3, [pc, #8]	; (b7468 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b745e:	681a      	ldr	r2, [r3, #0]
   b7460:	4b02      	ldr	r3, [pc, #8]	; (b746c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7462:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7464:	4770      	bx	lr
   b7466:	bf00      	nop
   b7468:	2003e580 	.word	0x2003e580
   b746c:	2003e6fc 	.word	0x2003e6fc

000b7470 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7470:	4770      	bx	lr

000b7472 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7472:	7441      	strb	r1, [r0, #17]
}
   b7474:	4770      	bx	lr

000b7476 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7476:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7478:	7c00      	ldrb	r0, [r0, #16]
   b747a:	f7fe ff71 	bl	b6360 <hal_usart_available_data_for_write>
}
   b747e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7482:	bd08      	pop	{r3, pc}

000b7484 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7484:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7486:	7c00      	ldrb	r0, [r0, #16]
   b7488:	f7fe ff42 	bl	b6310 <hal_usart_available>
}
   b748c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7490:	bd08      	pop	{r3, pc}

000b7492 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7492:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7494:	7c00      	ldrb	r0, [r0, #16]
   b7496:	f7fe ff4b 	bl	b6330 <hal_usart_peek>
}
   b749a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b749e:	bd08      	pop	{r3, pc}

000b74a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b74a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b74a2:	7c00      	ldrb	r0, [r0, #16]
   b74a4:	f7fe ff3c 	bl	b6320 <hal_usart_read>
}
   b74a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b74ac:	bd08      	pop	{r3, pc}

000b74ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b74ae:	7c00      	ldrb	r0, [r0, #16]
   b74b0:	f7fe bf46 	b.w	b6340 <hal_usart_flush>

000b74b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b74b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b74b6:	7c45      	ldrb	r5, [r0, #17]
{
   b74b8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b74ba:	b12d      	cbz	r5, b74c8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b74bc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b74be:	b003      	add	sp, #12
   b74c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b74c4:	f7fe bf1c 	b.w	b6300 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b74c8:	7c00      	ldrb	r0, [r0, #16]
   b74ca:	9101      	str	r1, [sp, #4]
   b74cc:	f7fe ff48 	bl	b6360 <hal_usart_available_data_for_write>
   b74d0:	2800      	cmp	r0, #0
   b74d2:	9901      	ldr	r1, [sp, #4]
   b74d4:	dcf2      	bgt.n	b74bc <_ZN11USARTSerial5writeEh+0x8>
}
   b74d6:	4628      	mov	r0, r5
   b74d8:	b003      	add	sp, #12
   b74da:	bd30      	pop	{r4, r5, pc}

000b74dc <_ZN11USARTSerialD0Ev>:
   b74dc:	b510      	push	{r4, lr}
   b74de:	2114      	movs	r1, #20
   b74e0:	4604      	mov	r4, r0
   b74e2:	f7fc fdda 	bl	b409a <_ZdlPvj>
   b74e6:	4620      	mov	r0, r4
   b74e8:	bd10      	pop	{r4, pc}
	...

000b74ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b74ec:	b510      	push	{r4, lr}
   b74ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b74f2:	4604      	mov	r4, r0
   b74f4:	4608      	mov	r0, r1
   b74f6:	4611      	mov	r1, r2
   b74f8:	2200      	movs	r2, #0
   b74fa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b74fe:	4b04      	ldr	r3, [pc, #16]	; (b7510 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7500:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7502:	2301      	movs	r3, #1
  _serial = serial;
   b7504:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7506:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7508:	f7fe ff32 	bl	b6370 <hal_usart_init_ex>
}
   b750c:	4620      	mov	r0, r4
   b750e:	bd10      	pop	{r4, pc}
   b7510:	000beb2c 	.word	0x000beb2c

000b7514 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7514:	7441      	strb	r1, [r0, #17]
}
   b7516:	4770      	bx	lr

000b7518 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7518:	4770      	bx	lr

000b751a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b751a:	4770      	bx	lr

000b751c <_ZN9USBSerial4readEv>:
{
   b751c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b751e:	2100      	movs	r1, #0
   b7520:	7c00      	ldrb	r0, [r0, #16]
   b7522:	f7fe ff4d 	bl	b63c0 <HAL_USB_USART_Receive_Data>
}
   b7526:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b752a:	bd08      	pop	{r3, pc}

000b752c <_ZN9USBSerial4peekEv>:
{
   b752c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b752e:	2101      	movs	r1, #1
   b7530:	7c00      	ldrb	r0, [r0, #16]
   b7532:	f7fe ff45 	bl	b63c0 <HAL_USB_USART_Receive_Data>
}
   b7536:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b753a:	bd08      	pop	{r3, pc}

000b753c <_ZN9USBSerial17availableForWriteEv>:
{
   b753c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b753e:	7c00      	ldrb	r0, [r0, #16]
   b7540:	f7fe ff36 	bl	b63b0 <HAL_USB_USART_Available_Data_For_Write>
}
   b7544:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7548:	bd08      	pop	{r3, pc}

000b754a <_ZN9USBSerial9availableEv>:
{
   b754a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b754c:	7c00      	ldrb	r0, [r0, #16]
   b754e:	f7fe ff27 	bl	b63a0 <HAL_USB_USART_Available_Data>
}
   b7552:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7556:	bd08      	pop	{r3, pc}

000b7558 <_ZN9USBSerial5writeEh>:
{
   b7558:	b513      	push	{r0, r1, r4, lr}
   b755a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b755c:	7c00      	ldrb	r0, [r0, #16]
{
   b755e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7560:	f7fe ff26 	bl	b63b0 <HAL_USB_USART_Available_Data_For_Write>
   b7564:	2800      	cmp	r0, #0
   b7566:	9901      	ldr	r1, [sp, #4]
   b7568:	dc01      	bgt.n	b756e <_ZN9USBSerial5writeEh+0x16>
   b756a:	7c60      	ldrb	r0, [r4, #17]
   b756c:	b120      	cbz	r0, b7578 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b756e:	7c20      	ldrb	r0, [r4, #16]
   b7570:	f7fe ff2e 	bl	b63d0 <HAL_USB_USART_Send_Data>
   b7574:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7578:	b002      	add	sp, #8
   b757a:	bd10      	pop	{r4, pc}

000b757c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b757c:	7c00      	ldrb	r0, [r0, #16]
   b757e:	f7fe bf2f 	b.w	b63e0 <HAL_USB_USART_Flush_Data>

000b7582 <_ZN9USBSerialD0Ev>:
   b7582:	b510      	push	{r4, lr}
   b7584:	2114      	movs	r1, #20
   b7586:	4604      	mov	r4, r0
   b7588:	f7fc fd87 	bl	b409a <_ZdlPvj>
   b758c:	4620      	mov	r0, r4
   b758e:	bd10      	pop	{r4, pc}

000b7590 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7590:	b510      	push	{r4, lr}
   b7592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7596:	4604      	mov	r4, r0
   b7598:	4608      	mov	r0, r1
   b759a:	2100      	movs	r1, #0
   b759c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b75a0:	4b04      	ldr	r3, [pc, #16]	; (b75b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b75a2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b75a4:	2301      	movs	r3, #1
  _serial = serial;
   b75a6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b75a8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b75aa:	4611      	mov	r1, r2
   b75ac:	f7fe fee8 	bl	b6380 <HAL_USB_USART_Init>
}
   b75b0:	4620      	mov	r0, r4
   b75b2:	bd10      	pop	{r4, pc}
   b75b4:	000beb5c 	.word	0x000beb5c

000b75b8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b75b8:	7c00      	ldrb	r0, [r0, #16]
   b75ba:	2200      	movs	r2, #0
   b75bc:	f7fe bee8 	b.w	b6390 <HAL_USB_USART_Begin>

000b75c0 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b75c0:	7c00      	ldrb	r0, [r0, #16]
   b75c2:	f7fe bf15 	b.w	b63f0 <HAL_USB_USART_Is_Connected>

000b75c6 <_Z19acquireSerialBufferv>:
{
   b75c6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b75c8:	2214      	movs	r2, #20
{
   b75ca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b75cc:	2100      	movs	r1, #0
   b75ce:	f000 fb81 	bl	b7cd4 <memset>
}
   b75d2:	4620      	mov	r0, r4
   b75d4:	bd10      	pop	{r4, pc}
	...

000b75d8 <_Z16_fetch_usbserialv>:
{
   b75d8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b75da:	4c0f      	ldr	r4, [pc, #60]	; (b7618 <_Z16_fetch_usbserialv+0x40>)
{
   b75dc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b75de:	a803      	add	r0, sp, #12
   b75e0:	f7ff fff1 	bl	b75c6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b75e4:	7821      	ldrb	r1, [r4, #0]
   b75e6:	f3bf 8f5b 	dmb	ish
   b75ea:	f011 0101 	ands.w	r1, r1, #1
   b75ee:	d10f      	bne.n	b7610 <_Z16_fetch_usbserialv+0x38>
   b75f0:	4620      	mov	r0, r4
   b75f2:	9101      	str	r1, [sp, #4]
   b75f4:	f7fc fd60 	bl	b40b8 <__cxa_guard_acquire>
   b75f8:	9901      	ldr	r1, [sp, #4]
   b75fa:	b148      	cbz	r0, b7610 <_Z16_fetch_usbserialv+0x38>
   b75fc:	aa03      	add	r2, sp, #12
   b75fe:	4807      	ldr	r0, [pc, #28]	; (b761c <_Z16_fetch_usbserialv+0x44>)
   b7600:	f7ff ffc6 	bl	b7590 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7604:	4620      	mov	r0, r4
   b7606:	f7fc fd5c 	bl	b40c2 <__cxa_guard_release>
   b760a:	4805      	ldr	r0, [pc, #20]	; (b7620 <_Z16_fetch_usbserialv+0x48>)
   b760c:	f000 fb4e 	bl	b7cac <atexit>
	return _usbserial;
}
   b7610:	4802      	ldr	r0, [pc, #8]	; (b761c <_Z16_fetch_usbserialv+0x44>)
   b7612:	b008      	add	sp, #32
   b7614:	bd10      	pop	{r4, pc}
   b7616:	bf00      	nop
   b7618:	2003e700 	.word	0x2003e700
   b761c:	2003e704 	.word	0x2003e704
   b7620:	000b7519 	.word	0x000b7519

000b7624 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7624:	2200      	movs	r2, #0
   b7626:	6840      	ldr	r0, [r0, #4]
   b7628:	4611      	mov	r1, r2
   b762a:	f7fe bf45 	b.w	b64b8 <network_ready>

000b762e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b762e:	2200      	movs	r2, #0
   b7630:	6840      	ldr	r0, [r0, #4]
   b7632:	4611      	mov	r1, r2
   b7634:	f7fe bf60 	b.w	b64f8 <network_listening>

000b7638 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7638:	2200      	movs	r2, #0
   b763a:	6840      	ldr	r0, [r0, #4]
   b763c:	4611      	mov	r1, r2
   b763e:	f7fe bf6b 	b.w	b6518 <network_get_listen_timeout>

000b7642 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7642:	6840      	ldr	r0, [r0, #4]
   b7644:	2200      	movs	r2, #0
   b7646:	f7fe bf5f 	b.w	b6508 <network_set_listen_timeout>

000b764a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b764a:	6840      	ldr	r0, [r0, #4]
   b764c:	2200      	movs	r2, #0
   b764e:	f081 0101 	eor.w	r1, r1, #1
   b7652:	f7fe bf49 	b.w	b64e8 <network_listen>

000b7656 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7656:	2300      	movs	r3, #0
   b7658:	6840      	ldr	r0, [r0, #4]
   b765a:	461a      	mov	r2, r3
   b765c:	4619      	mov	r1, r3
   b765e:	f7fe bf3b 	b.w	b64d8 <network_off>

000b7662 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7662:	2300      	movs	r3, #0
   b7664:	6840      	ldr	r0, [r0, #4]
   b7666:	461a      	mov	r2, r3
   b7668:	4619      	mov	r1, r3
   b766a:	f7fe bf2d 	b.w	b64c8 <network_on>

000b766e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b766e:	2200      	movs	r2, #0
   b7670:	6840      	ldr	r0, [r0, #4]
   b7672:	4611      	mov	r1, r2
   b7674:	f7fe bf10 	b.w	b6498 <network_connecting>

000b7678 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7678:	6840      	ldr	r0, [r0, #4]
   b767a:	2200      	movs	r2, #0
   b767c:	2102      	movs	r1, #2
   b767e:	f7fe bf13 	b.w	b64a8 <network_disconnect>

000b7682 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7682:	2300      	movs	r3, #0
   b7684:	6840      	ldr	r0, [r0, #4]
   b7686:	461a      	mov	r2, r3
   b7688:	f7fe befe 	b.w	b6488 <network_connect>

000b768c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b768c:	4b02      	ldr	r3, [pc, #8]	; (b7698 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b768e:	2204      	movs	r2, #4
   b7690:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7692:	4a02      	ldr	r2, [pc, #8]	; (b769c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7694:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7696:	4770      	bx	lr
   b7698:	2003e718 	.word	0x2003e718
   b769c:	000beb8c 	.word	0x000beb8c

000b76a0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b76a0:	b510      	push	{r4, lr}
   b76a2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b76a4:	f000 fb9c 	bl	b7de0 <strlen>
   b76a8:	3801      	subs	r0, #1
   b76aa:	1823      	adds	r3, r4, r0
   b76ac:	4620      	mov	r0, r4
	while(i<j){
   b76ae:	4283      	cmp	r3, r0
   b76b0:	d906      	bls.n	b76c0 <_Z11str_reversePc+0x20>
		c = *i;
   b76b2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b76b4:	7819      	ldrb	r1, [r3, #0]
   b76b6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b76ba:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b76be:	e7f6      	b.n	b76ae <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b76c0:	bd10      	pop	{r4, pc}

000b76c2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b76c2:	b570      	push	{r4, r5, r6, lr}
   b76c4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b76c6:	1e91      	subs	r1, r2, #2
   b76c8:	2922      	cmp	r1, #34	; 0x22
   b76ca:	d81d      	bhi.n	b7708 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b76cc:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b76ce:	b930      	cbnz	r0, b76de <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b76d0:	4423      	add	r3, r4
            *ptr++ = '0';
   b76d2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b76d4:	429d      	cmp	r5, r3
   b76d6:	d210      	bcs.n	b76fa <ultoa+0x38>
            *ptr++ = '0';
   b76d8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b76dc:	e7fa      	b.n	b76d4 <ultoa+0x12>
            result.quot = a/radix;
   b76de:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b76e2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b76e6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b76e8:	2809      	cmp	r0, #9
                *ptr += '0';
   b76ea:	bf94      	ite	ls
   b76ec:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b76ee:	3157      	addhi	r1, #87	; 0x57
   b76f0:	b2c9      	uxtb	r1, r1
   b76f2:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b76f6:	4630      	mov	r0, r6
	while(a){
   b76f8:	e7e9      	b.n	b76ce <ultoa+0xc>

	*ptr = '\0';
   b76fa:	2300      	movs	r3, #0
	str_reverse(buffer);
   b76fc:	4620      	mov	r0, r4
	*ptr = '\0';
   b76fe:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7700:	f7ff ffce 	bl	b76a0 <_Z11str_reversePc>
	return buffer;
   b7704:	4620      	mov	r0, r4
}
   b7706:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7708:	2000      	movs	r0, #0
   b770a:	e7fc      	b.n	b7706 <ultoa+0x44>

000b770c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b770c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b770e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7710:	460c      	mov	r4, r1
   b7712:	4615      	mov	r5, r2
	if(a<0){
   b7714:	da0e      	bge.n	b7734 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b771a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b771e:	bf14      	ite	ne
   b7720:	4258      	negne	r0, r3
   b7722:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7724:	2301      	movs	r3, #1
		*buffer = '-';
   b7726:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7728:	462a      	mov	r2, r5
   b772a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b772c:	f7ff ffc9 	bl	b76c2 <ultoa>
	}
	return buffer;
}
   b7730:	4620      	mov	r0, r4
   b7732:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7734:	2301      	movs	r3, #1
   b7736:	e7f9      	b.n	b772c <itoa+0x20>

000b7738 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7738:	4b01      	ldr	r3, [pc, #4]	; (b7740 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b773a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b773c:	4770      	bx	lr
   b773e:	bf00      	nop
   b7740:	2003e584 	.word	0x2003e584

000b7744 <serialEventRun>:
{
   b7744:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7746:	4b0b      	ldr	r3, [pc, #44]	; (b7774 <serialEventRun+0x30>)
   b7748:	b143      	cbz	r3, b775c <serialEventRun+0x18>
   b774a:	f7ff ff45 	bl	b75d8 <_Z16_fetch_usbserialv>
   b774e:	6803      	ldr	r3, [r0, #0]
   b7750:	691b      	ldr	r3, [r3, #16]
   b7752:	4798      	blx	r3
   b7754:	2800      	cmp	r0, #0
   b7756:	dd01      	ble.n	b775c <serialEventRun+0x18>
        serialEvent();
   b7758:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b775c:	4b06      	ldr	r3, [pc, #24]	; (b7778 <serialEventRun+0x34>)
   b775e:	b143      	cbz	r3, b7772 <serialEventRun+0x2e>
   b7760:	f000 f96c 	bl	b7a3c <_Z22__fetch_global_Serial1v>
   b7764:	6803      	ldr	r3, [r0, #0]
   b7766:	691b      	ldr	r3, [r3, #16]
   b7768:	4798      	blx	r3
   b776a:	2800      	cmp	r0, #0
   b776c:	dd01      	ble.n	b7772 <serialEventRun+0x2e>
        serialEvent1();
   b776e:	f3af 8000 	nop.w
}
   b7772:	bd08      	pop	{r3, pc}
	...

000b777c <_post_loop>:
{
   b777c:	b508      	push	{r3, lr}
	serialEventRun();
   b777e:	f7ff ffe1 	bl	b7744 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7782:	f7fe fc8d 	bl	b60a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7786:	4b01      	ldr	r3, [pc, #4]	; (b778c <_post_loop+0x10>)
   b7788:	6018      	str	r0, [r3, #0]
}
   b778a:	bd08      	pop	{r3, pc}
   b778c:	2003e728 	.word	0x2003e728

000b7790 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7790:	4805      	ldr	r0, [pc, #20]	; (b77a8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7792:	4a06      	ldr	r2, [pc, #24]	; (b77ac <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7794:	4906      	ldr	r1, [pc, #24]	; (b77b0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7796:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7798:	1a12      	subs	r2, r2, r0
   b779a:	f000 fa8d 	bl	b7cb8 <memcpy>
    __backup_sram_signature = signature;
   b779e:	4b05      	ldr	r3, [pc, #20]	; (b77b4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b77a0:	4a05      	ldr	r2, [pc, #20]	; (b77b8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b77a2:	601a      	str	r2, [r3, #0]
}
   b77a4:	bd08      	pop	{r3, pc}
   b77a6:	bf00      	nop
   b77a8:	2003f400 	.word	0x2003f400
   b77ac:	2003f404 	.word	0x2003f404
   b77b0:	000bed74 	.word	0x000bed74
   b77b4:	2003f400 	.word	0x2003f400
   b77b8:	9a271c1e 	.word	0x9a271c1e

000b77bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b77bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b77be:	2300      	movs	r3, #0
   b77c0:	9300      	str	r3, [sp, #0]
   b77c2:	461a      	mov	r2, r3
   b77c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b77c8:	f7fe fe44 	bl	b6454 <system_ctrl_set_result>
}
   b77cc:	b003      	add	sp, #12
   b77ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b77d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b77d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b77d6:	8843      	ldrh	r3, [r0, #2]
   b77d8:	2b0a      	cmp	r3, #10
   b77da:	d008      	beq.n	b77ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b77dc:	2b50      	cmp	r3, #80	; 0x50
   b77de:	d10b      	bne.n	b77f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b77e0:	4b09      	ldr	r3, [pc, #36]	; (b7808 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b77e2:	681b      	ldr	r3, [r3, #0]
   b77e4:	b14b      	cbz	r3, b77fa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b77e6:	b003      	add	sp, #12
   b77e8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b77ec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b77ee:	f7ff ffe5 	bl	b77bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b77f2:	b003      	add	sp, #12
   b77f4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b77f8:	2300      	movs	r3, #0
   b77fa:	9300      	str	r3, [sp, #0]
   b77fc:	461a      	mov	r2, r3
   b77fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7802:	f7fe fe27 	bl	b6454 <system_ctrl_set_result>
}
   b7806:	e7f4      	b.n	b77f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7808:	2003e724 	.word	0x2003e724

000b780c <module_user_init_hook>:
{
   b780c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b780e:	4812      	ldr	r0, [pc, #72]	; (b7858 <module_user_init_hook+0x4c>)
   b7810:	2100      	movs	r1, #0
   b7812:	f7fe fec9 	bl	b65a8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7816:	4b11      	ldr	r3, [pc, #68]	; (b785c <module_user_init_hook+0x50>)
   b7818:	681a      	ldr	r2, [r3, #0]
   b781a:	4b11      	ldr	r3, [pc, #68]	; (b7860 <module_user_init_hook+0x54>)
   b781c:	429a      	cmp	r2, r3
   b781e:	4b11      	ldr	r3, [pc, #68]	; (b7864 <module_user_init_hook+0x58>)
   b7820:	bf0c      	ite	eq
   b7822:	2201      	moveq	r2, #1
   b7824:	2200      	movne	r2, #0
   b7826:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7828:	d001      	beq.n	b782e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b782a:	f7ff ffb1 	bl	b7790 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b782e:	f7fe fc1f 	bl	b6070 <HAL_RNG_GetRandomNumber>
   b7832:	4604      	mov	r4, r0
    srand(seed);
   b7834:	f000 fa56 	bl	b7ce4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7838:	4b0b      	ldr	r3, [pc, #44]	; (b7868 <module_user_init_hook+0x5c>)
   b783a:	b113      	cbz	r3, b7842 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b783c:	4620      	mov	r0, r4
   b783e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7842:	2100      	movs	r1, #0
   b7844:	4808      	ldr	r0, [pc, #32]	; (b7868 <module_user_init_hook+0x5c>)
   b7846:	f7fe fe17 	bl	b6478 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b784a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b784e:	4807      	ldr	r0, [pc, #28]	; (b786c <module_user_init_hook+0x60>)
   b7850:	2100      	movs	r1, #0
   b7852:	f7fe bdf5 	b.w	b6440 <system_ctrl_set_app_request_handler>
   b7856:	bf00      	nop
   b7858:	000b7739 	.word	0x000b7739
   b785c:	2003f400 	.word	0x2003f400
   b7860:	9a271c1e 	.word	0x9a271c1e
   b7864:	2003e720 	.word	0x2003e720
   b7868:	00000000 	.word	0x00000000
   b786c:	000b77d5 	.word	0x000b77d5

000b7870 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7870:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7872:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7874:	d902      	bls.n	b787c <pinAvailable+0xc>
    return false;
   b7876:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7878:	b002      	add	sp, #8
   b787a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b787c:	f1a0 030b 	sub.w	r3, r0, #11
   b7880:	2b02      	cmp	r3, #2
   b7882:	d81a      	bhi.n	b78ba <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7884:	4c17      	ldr	r4, [pc, #92]	; (b78e4 <pinAvailable+0x74>)
   b7886:	7821      	ldrb	r1, [r4, #0]
   b7888:	f3bf 8f5b 	dmb	ish
   b788c:	f011 0101 	ands.w	r1, r1, #1
   b7890:	d10b      	bne.n	b78aa <pinAvailable+0x3a>
   b7892:	4620      	mov	r0, r4
   b7894:	9101      	str	r1, [sp, #4]
   b7896:	f7fc fc0f 	bl	b40b8 <__cxa_guard_acquire>
   b789a:	9901      	ldr	r1, [sp, #4]
   b789c:	b128      	cbz	r0, b78aa <pinAvailable+0x3a>
   b789e:	4812      	ldr	r0, [pc, #72]	; (b78e8 <pinAvailable+0x78>)
   b78a0:	f7ff f926 	bl	b6af0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b78a4:	4620      	mov	r0, r4
   b78a6:	f7fc fc0c 	bl	b40c2 <__cxa_guard_release>
   b78aa:	4b0f      	ldr	r3, [pc, #60]	; (b78e8 <pinAvailable+0x78>)
   b78ac:	7818      	ldrb	r0, [r3, #0]
   b78ae:	f7fe fd07 	bl	b62c0 <hal_spi_is_enabled>
   b78b2:	2800      	cmp	r0, #0
   b78b4:	d1df      	bne.n	b7876 <pinAvailable+0x6>
  return true; // 'pin' is available
   b78b6:	2001      	movs	r0, #1
   b78b8:	e7de      	b.n	b7878 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b78ba:	2801      	cmp	r0, #1
   b78bc:	d809      	bhi.n	b78d2 <pinAvailable+0x62>
   b78be:	f000 f87d 	bl	b79bc <_Z19__fetch_global_Wirev>
   b78c2:	2100      	movs	r1, #0
   b78c4:	7c00      	ldrb	r0, [r0, #16]
   b78c6:	f7fe fc5b 	bl	b6180 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b78ca:	f080 0001 	eor.w	r0, r0, #1
   b78ce:	b2c0      	uxtb	r0, r0
   b78d0:	e7d2      	b.n	b7878 <pinAvailable+0x8>
   b78d2:	3809      	subs	r0, #9
   b78d4:	2801      	cmp	r0, #1
   b78d6:	d8ee      	bhi.n	b78b6 <pinAvailable+0x46>
   b78d8:	f000 f8b0 	bl	b7a3c <_Z22__fetch_global_Serial1v>
   b78dc:	7c00      	ldrb	r0, [r0, #16]
   b78de:	f7fe fd37 	bl	b6350 <hal_usart_is_enabled>
   b78e2:	e7f2      	b.n	b78ca <pinAvailable+0x5a>
   b78e4:	2003e6b8 	.word	0x2003e6b8
   b78e8:	2003e6bc 	.word	0x2003e6bc

000b78ec <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b78ec:	2823      	cmp	r0, #35	; 0x23
{
   b78ee:	b538      	push	{r3, r4, r5, lr}
   b78f0:	4604      	mov	r4, r0
   b78f2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b78f4:	d80a      	bhi.n	b790c <pinMode+0x20>
   b78f6:	29ff      	cmp	r1, #255	; 0xff
   b78f8:	d008      	beq.n	b790c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b78fa:	f7ff ffb9 	bl	b7870 <pinAvailable>
   b78fe:	b128      	cbz	r0, b790c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7900:	4629      	mov	r1, r5
   b7902:	4620      	mov	r0, r4
}
   b7904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7908:	f7fe bbe2 	b.w	b60d0 <HAL_Pin_Mode>
}
   b790c:	bd38      	pop	{r3, r4, r5, pc}

000b790e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b790e:	b538      	push	{r3, r4, r5, lr}
   b7910:	4604      	mov	r4, r0
   b7912:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7914:	f7fe fbe4 	bl	b60e0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7918:	28ff      	cmp	r0, #255	; 0xff
   b791a:	d010      	beq.n	b793e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b791c:	2806      	cmp	r0, #6
   b791e:	d804      	bhi.n	b792a <digitalWrite+0x1c>
   b7920:	234d      	movs	r3, #77	; 0x4d
   b7922:	fa23 f000 	lsr.w	r0, r3, r0
   b7926:	07c3      	lsls	r3, r0, #31
   b7928:	d409      	bmi.n	b793e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b792a:	4620      	mov	r0, r4
   b792c:	f7ff ffa0 	bl	b7870 <pinAvailable>
   b7930:	b128      	cbz	r0, b793e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7932:	4629      	mov	r1, r5
   b7934:	4620      	mov	r0, r4
}
   b7936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b793a:	f7fe bbd9 	b.w	b60f0 <HAL_GPIO_Write>
}
   b793e:	bd38      	pop	{r3, r4, r5, pc}

000b7940 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b7940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7944:	4690      	mov	r8, r2
   b7946:	461f      	mov	r7, r3
   b7948:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b794a:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b794c:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b794e:	f1c4 0107 	rsb	r1, r4, #7
   b7952:	f1b8 0f00 	cmp.w	r8, #0
   b7956:	d112      	bne.n	b797e <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7958:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b795c:	f001 0101 	and.w	r1, r1, #1
   b7960:	4630      	mov	r0, r6
   b7962:	f7ff ffd4 	bl	b790e <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b7966:	2101      	movs	r1, #1
   b7968:	4628      	mov	r0, r5
   b796a:	f7ff ffd0 	bl	b790e <digitalWrite>
    digitalWrite(clockPin, LOW);
   b796e:	2100      	movs	r1, #0
   b7970:	4628      	mov	r0, r5
   b7972:	f7ff ffcc 	bl	b790e <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b7976:	3c01      	subs	r4, #1
   b7978:	d2e9      	bcs.n	b794e <shiftOut+0xe>
  }
}
   b797a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b797e:	fa47 f104 	asr.w	r1, r7, r4
   b7982:	e7eb      	b.n	b795c <shiftOut+0x1c>

000b7984 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7984:	4770      	bx	lr
	...

000b7988 <_Z17acquireWireBufferv>:
{
   b7988:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b798a:	4b0a      	ldr	r3, [pc, #40]	; (b79b4 <_Z17acquireWireBufferv+0x2c>)
   b798c:	6003      	str	r3, [r0, #0]
   b798e:	2301      	movs	r3, #1
{
   b7990:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7992:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7994:	4908      	ldr	r1, [pc, #32]	; (b79b8 <_Z17acquireWireBufferv+0x30>)
   b7996:	2020      	movs	r0, #32
   b7998:	f000 f874 	bl	b7a84 <_ZnajRKSt9nothrow_t>
	};
   b799c:	2520      	movs	r5, #32
   b799e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b79a0:	4905      	ldr	r1, [pc, #20]	; (b79b8 <_Z17acquireWireBufferv+0x30>)
	};
   b79a2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b79a4:	4628      	mov	r0, r5
   b79a6:	f000 f86d 	bl	b7a84 <_ZnajRKSt9nothrow_t>
	};
   b79aa:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b79ae:	4620      	mov	r0, r4
   b79b0:	bd38      	pop	{r3, r4, r5, pc}
   b79b2:	bf00      	nop
   b79b4:	00010018 	.word	0x00010018
   b79b8:	000bebc0 	.word	0x000bebc0

000b79bc <_Z19__fetch_global_Wirev>:
{
   b79bc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b79be:	4d0e      	ldr	r5, [pc, #56]	; (b79f8 <_Z19__fetch_global_Wirev+0x3c>)
   b79c0:	7829      	ldrb	r1, [r5, #0]
   b79c2:	f3bf 8f5b 	dmb	ish
   b79c6:	f011 0401 	ands.w	r4, r1, #1
{
   b79ca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b79cc:	d111      	bne.n	b79f2 <_Z19__fetch_global_Wirev+0x36>
   b79ce:	4628      	mov	r0, r5
   b79d0:	f7fc fb72 	bl	b40b8 <__cxa_guard_acquire>
   b79d4:	b168      	cbz	r0, b79f2 <_Z19__fetch_global_Wirev+0x36>
   b79d6:	4668      	mov	r0, sp
   b79d8:	f7ff ffd6 	bl	b7988 <_Z17acquireWireBufferv>
   b79dc:	466a      	mov	r2, sp
   b79de:	4621      	mov	r1, r4
   b79e0:	4806      	ldr	r0, [pc, #24]	; (b79fc <_Z19__fetch_global_Wirev+0x40>)
   b79e2:	f7fe fe5f 	bl	b66a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b79e6:	4628      	mov	r0, r5
   b79e8:	f7fc fb6b 	bl	b40c2 <__cxa_guard_release>
   b79ec:	4804      	ldr	r0, [pc, #16]	; (b7a00 <_Z19__fetch_global_Wirev+0x44>)
   b79ee:	f000 f95d 	bl	b7cac <atexit>
	return wire;
}
   b79f2:	4802      	ldr	r0, [pc, #8]	; (b79fc <_Z19__fetch_global_Wirev+0x40>)
   b79f4:	b007      	add	sp, #28
   b79f6:	bd30      	pop	{r4, r5, pc}
   b79f8:	2003e72c 	.word	0x2003e72c
   b79fc:	2003e730 	.word	0x2003e730
   b7a00:	000b7985 	.word	0x000b7985

000b7a04 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a04:	4770      	bx	lr
	...

000b7a08 <_Z20acquireSerial1Bufferv>:
{
   b7a08:	b538      	push	{r3, r4, r5, lr}
   b7a0a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7a0c:	2514      	movs	r5, #20
   b7a0e:	462a      	mov	r2, r5
   b7a10:	2100      	movs	r1, #0
   b7a12:	f000 f95f 	bl	b7cd4 <memset>
   b7a16:	8025      	strh	r5, [r4, #0]
   b7a18:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a1a:	4907      	ldr	r1, [pc, #28]	; (b7a38 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7a1c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a1e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7a20:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a22:	f000 f82f 	bl	b7a84 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a26:	4904      	ldr	r1, [pc, #16]	; (b7a38 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7a28:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a2a:	4628      	mov	r0, r5
   b7a2c:	f000 f82a 	bl	b7a84 <_ZnajRKSt9nothrow_t>
    };
   b7a30:	60e0      	str	r0, [r4, #12]
}
   b7a32:	4620      	mov	r0, r4
   b7a34:	bd38      	pop	{r3, r4, r5, pc}
   b7a36:	bf00      	nop
   b7a38:	000bebc0 	.word	0x000bebc0

000b7a3c <_Z22__fetch_global_Serial1v>:
{
   b7a3c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a3e:	4d0e      	ldr	r5, [pc, #56]	; (b7a78 <_Z22__fetch_global_Serial1v+0x3c>)
   b7a40:	7829      	ldrb	r1, [r5, #0]
   b7a42:	f3bf 8f5b 	dmb	ish
   b7a46:	f011 0401 	ands.w	r4, r1, #1
{
   b7a4a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a4c:	d111      	bne.n	b7a72 <_Z22__fetch_global_Serial1v+0x36>
   b7a4e:	4628      	mov	r0, r5
   b7a50:	f7fc fb32 	bl	b40b8 <__cxa_guard_acquire>
   b7a54:	b168      	cbz	r0, b7a72 <_Z22__fetch_global_Serial1v+0x36>
   b7a56:	a801      	add	r0, sp, #4
   b7a58:	f7ff ffd6 	bl	b7a08 <_Z20acquireSerial1Bufferv>
   b7a5c:	aa01      	add	r2, sp, #4
   b7a5e:	4621      	mov	r1, r4
   b7a60:	4806      	ldr	r0, [pc, #24]	; (b7a7c <_Z22__fetch_global_Serial1v+0x40>)
   b7a62:	f7ff fd43 	bl	b74ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7a66:	4628      	mov	r0, r5
   b7a68:	f7fc fb2b 	bl	b40c2 <__cxa_guard_release>
   b7a6c:	4804      	ldr	r0, [pc, #16]	; (b7a80 <_Z22__fetch_global_Serial1v+0x44>)
   b7a6e:	f000 f91d 	bl	b7cac <atexit>
    return serial1;
}
   b7a72:	4802      	ldr	r0, [pc, #8]	; (b7a7c <_Z22__fetch_global_Serial1v+0x40>)
   b7a74:	b007      	add	sp, #28
   b7a76:	bd30      	pop	{r4, r5, pc}
   b7a78:	2003e744 	.word	0x2003e744
   b7a7c:	2003e748 	.word	0x2003e748
   b7a80:	000b7a05 	.word	0x000b7a05

000b7a84 <_ZnajRKSt9nothrow_t>:
   b7a84:	f7fc bb07 	b.w	b4096 <_Znaj>

000b7a88 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7a88:	4901      	ldr	r1, [pc, #4]	; (b7a90 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7a8a:	f000 b8f9 	b.w	b7c80 <_ZNKSt9type_infoeqERKS_>
   b7a8e:	bf00      	nop
   b7a90:	000bebdc 	.word	0x000bebdc

000b7a94 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7a94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7a96:	2400      	movs	r4, #0
   b7a98:	2310      	movs	r3, #16
   b7a9a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7a9e:	6803      	ldr	r3, [r0, #0]
   b7aa0:	4615      	mov	r5, r2
   b7aa2:	699e      	ldr	r6, [r3, #24]
   b7aa4:	6812      	ldr	r2, [r2, #0]
   b7aa6:	466b      	mov	r3, sp
   b7aa8:	e9cd 4400 	strd	r4, r4, [sp]
   b7aac:	47b0      	blx	r6
   b7aae:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7ab2:	f003 0306 	and.w	r3, r3, #6
   b7ab6:	2b06      	cmp	r3, #6
   b7ab8:	bf03      	ittte	eq
   b7aba:	9b00      	ldreq	r3, [sp, #0]
   b7abc:	602b      	streq	r3, [r5, #0]
   b7abe:	2001      	moveq	r0, #1
   b7ac0:	4620      	movne	r0, r4
   b7ac2:	b004      	add	sp, #16
   b7ac4:	bd70      	pop	{r4, r5, r6, pc}

000b7ac6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7ac6:	9800      	ldr	r0, [sp, #0]
   b7ac8:	4290      	cmp	r0, r2
   b7aca:	bf14      	ite	ne
   b7acc:	2001      	movne	r0, #1
   b7ace:	2006      	moveq	r0, #6
   b7ad0:	4770      	bx	lr
	...

000b7ad4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7ad4:	b510      	push	{r4, lr}
   b7ad6:	4b03      	ldr	r3, [pc, #12]	; (b7ae4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7ad8:	6003      	str	r3, [r0, #0]
   b7ada:	4604      	mov	r4, r0
   b7adc:	f000 f8cd 	bl	b7c7a <_ZNSt9type_infoD1Ev>
   b7ae0:	4620      	mov	r0, r4
   b7ae2:	bd10      	pop	{r4, pc}
   b7ae4:	000bec1c 	.word	0x000bec1c

000b7ae8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7ae8:	b510      	push	{r4, lr}
   b7aea:	4604      	mov	r4, r0
   b7aec:	f7ff fff2 	bl	b7ad4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7af0:	4620      	mov	r0, r4
   b7af2:	2108      	movs	r1, #8
   b7af4:	f7fc fad1 	bl	b409a <_ZdlPvj>
   b7af8:	4620      	mov	r0, r4
   b7afa:	bd10      	pop	{r4, pc}

000b7afc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b00:	461f      	mov	r7, r3
   b7b02:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7b06:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7b0a:	4598      	cmp	r8, r3
   b7b0c:	4606      	mov	r6, r0
   b7b0e:	4615      	mov	r5, r2
   b7b10:	d107      	bne.n	b7b22 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7b12:	9907      	ldr	r1, [sp, #28]
   b7b14:	f000 f8b4 	bl	b7c80 <_ZNKSt9type_infoeqERKS_>
   b7b18:	b118      	cbz	r0, b7b22 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7b1a:	7165      	strb	r5, [r4, #5]
   b7b1c:	2000      	movs	r0, #0
   b7b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7b22:	4639      	mov	r1, r7
   b7b24:	4630      	mov	r0, r6
   b7b26:	f000 f8ab 	bl	b7c80 <_ZNKSt9type_infoeqERKS_>
   b7b2a:	2800      	cmp	r0, #0
   b7b2c:	d0f6      	beq.n	b7b1c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7b2e:	2301      	movs	r3, #1
   b7b30:	f8c4 8000 	str.w	r8, [r4]
   b7b34:	7125      	strb	r5, [r4, #4]
   b7b36:	71a3      	strb	r3, [r4, #6]
   b7b38:	e7f0      	b.n	b7b1c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7b3a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7b3a:	b538      	push	{r3, r4, r5, lr}
   b7b3c:	4615      	mov	r5, r2
   b7b3e:	461c      	mov	r4, r3
   b7b40:	f000 f89e 	bl	b7c80 <_ZNKSt9type_infoeqERKS_>
   b7b44:	b120      	cbz	r0, b7b50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7b46:	2308      	movs	r3, #8
   b7b48:	60e3      	str	r3, [r4, #12]
   b7b4a:	2306      	movs	r3, #6
   b7b4c:	6025      	str	r5, [r4, #0]
   b7b4e:	7123      	strb	r3, [r4, #4]
   b7b50:	bd38      	pop	{r3, r4, r5, pc}

000b7b52 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7b54:	4605      	mov	r5, r0
   b7b56:	460c      	mov	r4, r1
   b7b58:	9201      	str	r2, [sp, #4]
   b7b5a:	461e      	mov	r6, r3
   b7b5c:	f000 f890 	bl	b7c80 <_ZNKSt9type_infoeqERKS_>
   b7b60:	b950      	cbnz	r0, b7b78 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7b62:	2e03      	cmp	r6, #3
   b7b64:	d808      	bhi.n	b7b78 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7b66:	6823      	ldr	r3, [r4, #0]
   b7b68:	9a01      	ldr	r2, [sp, #4]
   b7b6a:	695b      	ldr	r3, [r3, #20]
   b7b6c:	4629      	mov	r1, r5
   b7b6e:	4620      	mov	r0, r4
   b7b70:	b002      	add	sp, #8
   b7b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7b76:	4718      	bx	r3
   b7b78:	b002      	add	sp, #8
   b7b7a:	bd70      	pop	{r4, r5, r6, pc}

000b7b7c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7b7c:	b510      	push	{r4, lr}
   b7b7e:	4b03      	ldr	r3, [pc, #12]	; (b7b8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7b80:	6003      	str	r3, [r0, #0]
   b7b82:	4604      	mov	r4, r0
   b7b84:	f7ff ffa6 	bl	b7ad4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7b88:	4620      	mov	r0, r4
   b7b8a:	bd10      	pop	{r4, pc}
   b7b8c:	000bec7c 	.word	0x000bec7c

000b7b90 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7b90:	b510      	push	{r4, lr}
   b7b92:	4604      	mov	r4, r0
   b7b94:	f7ff fff2 	bl	b7b7c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7b98:	4620      	mov	r0, r4
   b7b9a:	210c      	movs	r1, #12
   b7b9c:	f7fc fa7d 	bl	b409a <_ZdlPvj>
   b7ba0:	4620      	mov	r0, r4
   b7ba2:	bd10      	pop	{r4, pc}

000b7ba4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7ba6:	9f08      	ldr	r7, [sp, #32]
   b7ba8:	4297      	cmp	r7, r2
   b7baa:	4605      	mov	r5, r0
   b7bac:	460e      	mov	r6, r1
   b7bae:	4614      	mov	r4, r2
   b7bb0:	d00a      	beq.n	b7bc8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7bb2:	68a8      	ldr	r0, [r5, #8]
   b7bb4:	6802      	ldr	r2, [r0, #0]
   b7bb6:	9708      	str	r7, [sp, #32]
   b7bb8:	6a15      	ldr	r5, [r2, #32]
   b7bba:	4631      	mov	r1, r6
   b7bbc:	4622      	mov	r2, r4
   b7bbe:	46ac      	mov	ip, r5
   b7bc0:	b003      	add	sp, #12
   b7bc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7bc6:	4760      	bx	ip
   b7bc8:	4619      	mov	r1, r3
   b7bca:	9301      	str	r3, [sp, #4]
   b7bcc:	f000 f858 	bl	b7c80 <_ZNKSt9type_infoeqERKS_>
   b7bd0:	9b01      	ldr	r3, [sp, #4]
   b7bd2:	2800      	cmp	r0, #0
   b7bd4:	d0ed      	beq.n	b7bb2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7bd6:	2006      	movs	r0, #6
   b7bd8:	b003      	add	sp, #12
   b7bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7bdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7bdc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7be0:	460d      	mov	r5, r1
   b7be2:	4619      	mov	r1, r3
   b7be4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7be8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7bec:	4681      	mov	r9, r0
   b7bee:	4617      	mov	r7, r2
   b7bf0:	4698      	mov	r8, r3
   b7bf2:	f000 f845 	bl	b7c80 <_ZNKSt9type_infoeqERKS_>
   b7bf6:	b190      	cbz	r0, b7c1e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7bf8:	2d00      	cmp	r5, #0
   b7bfa:	6034      	str	r4, [r6, #0]
   b7bfc:	7137      	strb	r7, [r6, #4]
   b7bfe:	db09      	blt.n	b7c14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7c00:	1961      	adds	r1, r4, r5
   b7c02:	458a      	cmp	sl, r1
   b7c04:	bf0c      	ite	eq
   b7c06:	2106      	moveq	r1, #6
   b7c08:	2101      	movne	r1, #1
   b7c0a:	71b1      	strb	r1, [r6, #6]
   b7c0c:	2000      	movs	r0, #0
   b7c0e:	b001      	add	sp, #4
   b7c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7c14:	3502      	adds	r5, #2
   b7c16:	d1f9      	bne.n	b7c0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7c18:	2301      	movs	r3, #1
   b7c1a:	71b3      	strb	r3, [r6, #6]
   b7c1c:	e7f6      	b.n	b7c0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7c1e:	4554      	cmp	r4, sl
   b7c20:	d106      	bne.n	b7c30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7c22:	4659      	mov	r1, fp
   b7c24:	4648      	mov	r0, r9
   b7c26:	f000 f82b 	bl	b7c80 <_ZNKSt9type_infoeqERKS_>
   b7c2a:	b108      	cbz	r0, b7c30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7c2c:	7177      	strb	r7, [r6, #5]
   b7c2e:	e7ed      	b.n	b7c0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7c30:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7c34:	6803      	ldr	r3, [r0, #0]
   b7c36:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7c3a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7c3e:	69dc      	ldr	r4, [r3, #28]
   b7c40:	463a      	mov	r2, r7
   b7c42:	4643      	mov	r3, r8
   b7c44:	4629      	mov	r1, r5
   b7c46:	46a4      	mov	ip, r4
   b7c48:	b001      	add	sp, #4
   b7c4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c4e:	4760      	bx	ip

000b7c50 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7c54:	4607      	mov	r7, r0
   b7c56:	460c      	mov	r4, r1
   b7c58:	4615      	mov	r5, r2
   b7c5a:	461e      	mov	r6, r3
   b7c5c:	f7ff ff6d 	bl	b7b3a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7c60:	b948      	cbnz	r0, b7c76 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7c62:	68b8      	ldr	r0, [r7, #8]
   b7c64:	6803      	ldr	r3, [r0, #0]
   b7c66:	699f      	ldr	r7, [r3, #24]
   b7c68:	462a      	mov	r2, r5
   b7c6a:	4633      	mov	r3, r6
   b7c6c:	4621      	mov	r1, r4
   b7c6e:	46bc      	mov	ip, r7
   b7c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7c74:	4760      	bx	ip
   b7c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7c7a <_ZNSt9type_infoD1Ev>:
   b7c7a:	4770      	bx	lr

000b7c7c <_ZNKSt9type_info14__is_pointer_pEv>:
   b7c7c:	2000      	movs	r0, #0
   b7c7e:	4770      	bx	lr

000b7c80 <_ZNKSt9type_infoeqERKS_>:
   b7c80:	4281      	cmp	r1, r0
   b7c82:	b508      	push	{r3, lr}
   b7c84:	d00e      	beq.n	b7ca4 <_ZNKSt9type_infoeqERKS_+0x24>
   b7c86:	6840      	ldr	r0, [r0, #4]
   b7c88:	7803      	ldrb	r3, [r0, #0]
   b7c8a:	2b2a      	cmp	r3, #42	; 0x2a
   b7c8c:	d00c      	beq.n	b7ca8 <_ZNKSt9type_infoeqERKS_+0x28>
   b7c8e:	6849      	ldr	r1, [r1, #4]
   b7c90:	780b      	ldrb	r3, [r1, #0]
   b7c92:	2b2a      	cmp	r3, #42	; 0x2a
   b7c94:	bf08      	it	eq
   b7c96:	3101      	addeq	r1, #1
   b7c98:	f000 f890 	bl	b7dbc <strcmp>
   b7c9c:	fab0 f080 	clz	r0, r0
   b7ca0:	0940      	lsrs	r0, r0, #5
   b7ca2:	bd08      	pop	{r3, pc}
   b7ca4:	2001      	movs	r0, #1
   b7ca6:	e7fc      	b.n	b7ca2 <_ZNKSt9type_infoeqERKS_+0x22>
   b7ca8:	2000      	movs	r0, #0
   b7caa:	e7fa      	b.n	b7ca2 <_ZNKSt9type_infoeqERKS_+0x22>

000b7cac <atexit>:
   b7cac:	2300      	movs	r3, #0
   b7cae:	4601      	mov	r1, r0
   b7cb0:	461a      	mov	r2, r3
   b7cb2:	4618      	mov	r0, r3
   b7cb4:	f000 b89c 	b.w	b7df0 <__register_exitproc>

000b7cb8 <memcpy>:
   b7cb8:	440a      	add	r2, r1
   b7cba:	4291      	cmp	r1, r2
   b7cbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7cc0:	d100      	bne.n	b7cc4 <memcpy+0xc>
   b7cc2:	4770      	bx	lr
   b7cc4:	b510      	push	{r4, lr}
   b7cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7cca:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7cce:	4291      	cmp	r1, r2
   b7cd0:	d1f9      	bne.n	b7cc6 <memcpy+0xe>
   b7cd2:	bd10      	pop	{r4, pc}

000b7cd4 <memset>:
   b7cd4:	4402      	add	r2, r0
   b7cd6:	4603      	mov	r3, r0
   b7cd8:	4293      	cmp	r3, r2
   b7cda:	d100      	bne.n	b7cde <memset+0xa>
   b7cdc:	4770      	bx	lr
   b7cde:	f803 1b01 	strb.w	r1, [r3], #1
   b7ce2:	e7f9      	b.n	b7cd8 <memset+0x4>

000b7ce4 <srand>:
   b7ce4:	b538      	push	{r3, r4, r5, lr}
   b7ce6:	4b10      	ldr	r3, [pc, #64]	; (b7d28 <srand+0x44>)
   b7ce8:	681d      	ldr	r5, [r3, #0]
   b7cea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7cec:	4604      	mov	r4, r0
   b7cee:	b9b3      	cbnz	r3, b7d1e <srand+0x3a>
   b7cf0:	2018      	movs	r0, #24
   b7cf2:	f7fe fc29 	bl	b6548 <malloc>
   b7cf6:	4602      	mov	r2, r0
   b7cf8:	63a8      	str	r0, [r5, #56]	; 0x38
   b7cfa:	b920      	cbnz	r0, b7d06 <srand+0x22>
   b7cfc:	4b0b      	ldr	r3, [pc, #44]	; (b7d2c <srand+0x48>)
   b7cfe:	480c      	ldr	r0, [pc, #48]	; (b7d30 <srand+0x4c>)
   b7d00:	2142      	movs	r1, #66	; 0x42
   b7d02:	f7fe fc49 	bl	b6598 <__assert_func>
   b7d06:	490b      	ldr	r1, [pc, #44]	; (b7d34 <srand+0x50>)
   b7d08:	4b0b      	ldr	r3, [pc, #44]	; (b7d38 <srand+0x54>)
   b7d0a:	e9c0 1300 	strd	r1, r3, [r0]
   b7d0e:	4b0b      	ldr	r3, [pc, #44]	; (b7d3c <srand+0x58>)
   b7d10:	6083      	str	r3, [r0, #8]
   b7d12:	230b      	movs	r3, #11
   b7d14:	8183      	strh	r3, [r0, #12]
   b7d16:	2100      	movs	r1, #0
   b7d18:	2001      	movs	r0, #1
   b7d1a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7d1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7d20:	2200      	movs	r2, #0
   b7d22:	611c      	str	r4, [r3, #16]
   b7d24:	615a      	str	r2, [r3, #20]
   b7d26:	bd38      	pop	{r3, r4, r5, pc}
   b7d28:	2003e584 	.word	0x2003e584
   b7d2c:	000becb5 	.word	0x000becb5
   b7d30:	000beccc 	.word	0x000beccc
   b7d34:	abcd330e 	.word	0xabcd330e
   b7d38:	e66d1234 	.word	0xe66d1234
   b7d3c:	0005deec 	.word	0x0005deec

000b7d40 <rand>:
   b7d40:	4b16      	ldr	r3, [pc, #88]	; (b7d9c <rand+0x5c>)
   b7d42:	b510      	push	{r4, lr}
   b7d44:	681c      	ldr	r4, [r3, #0]
   b7d46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b7d48:	b9b3      	cbnz	r3, b7d78 <rand+0x38>
   b7d4a:	2018      	movs	r0, #24
   b7d4c:	f7fe fbfc 	bl	b6548 <malloc>
   b7d50:	63a0      	str	r0, [r4, #56]	; 0x38
   b7d52:	b928      	cbnz	r0, b7d60 <rand+0x20>
   b7d54:	4602      	mov	r2, r0
   b7d56:	4b12      	ldr	r3, [pc, #72]	; (b7da0 <rand+0x60>)
   b7d58:	4812      	ldr	r0, [pc, #72]	; (b7da4 <rand+0x64>)
   b7d5a:	214e      	movs	r1, #78	; 0x4e
   b7d5c:	f7fe fc1c 	bl	b6598 <__assert_func>
   b7d60:	4a11      	ldr	r2, [pc, #68]	; (b7da8 <rand+0x68>)
   b7d62:	4b12      	ldr	r3, [pc, #72]	; (b7dac <rand+0x6c>)
   b7d64:	e9c0 2300 	strd	r2, r3, [r0]
   b7d68:	4b11      	ldr	r3, [pc, #68]	; (b7db0 <rand+0x70>)
   b7d6a:	6083      	str	r3, [r0, #8]
   b7d6c:	230b      	movs	r3, #11
   b7d6e:	8183      	strh	r3, [r0, #12]
   b7d70:	2201      	movs	r2, #1
   b7d72:	2300      	movs	r3, #0
   b7d74:	e9c0 2304 	strd	r2, r3, [r0, #16]
   b7d78:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b7d7a:	4a0e      	ldr	r2, [pc, #56]	; (b7db4 <rand+0x74>)
   b7d7c:	6920      	ldr	r0, [r4, #16]
   b7d7e:	6963      	ldr	r3, [r4, #20]
   b7d80:	490d      	ldr	r1, [pc, #52]	; (b7db8 <rand+0x78>)
   b7d82:	4342      	muls	r2, r0
   b7d84:	fb01 2203 	mla	r2, r1, r3, r2
   b7d88:	fba0 0101 	umull	r0, r1, r0, r1
   b7d8c:	1c43      	adds	r3, r0, #1
   b7d8e:	eb42 0001 	adc.w	r0, r2, r1
   b7d92:	e9c4 3004 	strd	r3, r0, [r4, #16]
   b7d96:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   b7d9a:	bd10      	pop	{r4, pc}
   b7d9c:	2003e584 	.word	0x2003e584
   b7da0:	000becb5 	.word	0x000becb5
   b7da4:	000beccc 	.word	0x000beccc
   b7da8:	abcd330e 	.word	0xabcd330e
   b7dac:	e66d1234 	.word	0xe66d1234
   b7db0:	0005deec 	.word	0x0005deec
   b7db4:	5851f42d 	.word	0x5851f42d
   b7db8:	4c957f2d 	.word	0x4c957f2d

000b7dbc <strcmp>:
   b7dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7dc4:	2a01      	cmp	r2, #1
   b7dc6:	bf28      	it	cs
   b7dc8:	429a      	cmpcs	r2, r3
   b7dca:	d0f7      	beq.n	b7dbc <strcmp>
   b7dcc:	1ad0      	subs	r0, r2, r3
   b7dce:	4770      	bx	lr

000b7dd0 <strcpy>:
   b7dd0:	4603      	mov	r3, r0
   b7dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7dd6:	f803 2b01 	strb.w	r2, [r3], #1
   b7dda:	2a00      	cmp	r2, #0
   b7ddc:	d1f9      	bne.n	b7dd2 <strcpy+0x2>
   b7dde:	4770      	bx	lr

000b7de0 <strlen>:
   b7de0:	4603      	mov	r3, r0
   b7de2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7de6:	2a00      	cmp	r2, #0
   b7de8:	d1fb      	bne.n	b7de2 <strlen+0x2>
   b7dea:	1a18      	subs	r0, r3, r0
   b7dec:	3801      	subs	r0, #1
   b7dee:	4770      	bx	lr

000b7df0 <__register_exitproc>:
   b7df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7df4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7eb0 <__register_exitproc+0xc0>
   b7df8:	4606      	mov	r6, r0
   b7dfa:	f8d8 0000 	ldr.w	r0, [r8]
   b7dfe:	461f      	mov	r7, r3
   b7e00:	460d      	mov	r5, r1
   b7e02:	4691      	mov	r9, r2
   b7e04:	f000 f856 	bl	b7eb4 <__retarget_lock_acquire_recursive>
   b7e08:	4b25      	ldr	r3, [pc, #148]	; (b7ea0 <__register_exitproc+0xb0>)
   b7e0a:	681c      	ldr	r4, [r3, #0]
   b7e0c:	b934      	cbnz	r4, b7e1c <__register_exitproc+0x2c>
   b7e0e:	4c25      	ldr	r4, [pc, #148]	; (b7ea4 <__register_exitproc+0xb4>)
   b7e10:	601c      	str	r4, [r3, #0]
   b7e12:	4b25      	ldr	r3, [pc, #148]	; (b7ea8 <__register_exitproc+0xb8>)
   b7e14:	b113      	cbz	r3, b7e1c <__register_exitproc+0x2c>
   b7e16:	681b      	ldr	r3, [r3, #0]
   b7e18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7e1c:	6863      	ldr	r3, [r4, #4]
   b7e1e:	2b1f      	cmp	r3, #31
   b7e20:	dd07      	ble.n	b7e32 <__register_exitproc+0x42>
   b7e22:	f8d8 0000 	ldr.w	r0, [r8]
   b7e26:	f000 f847 	bl	b7eb8 <__retarget_lock_release_recursive>
   b7e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7e32:	b34e      	cbz	r6, b7e88 <__register_exitproc+0x98>
   b7e34:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7e38:	b988      	cbnz	r0, b7e5e <__register_exitproc+0x6e>
   b7e3a:	4b1c      	ldr	r3, [pc, #112]	; (b7eac <__register_exitproc+0xbc>)
   b7e3c:	b923      	cbnz	r3, b7e48 <__register_exitproc+0x58>
   b7e3e:	f8d8 0000 	ldr.w	r0, [r8]
   b7e42:	f000 f838 	bl	b7eb6 <__retarget_lock_release>
   b7e46:	e7f0      	b.n	b7e2a <__register_exitproc+0x3a>
   b7e48:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7e4c:	f7fe fb7c 	bl	b6548 <malloc>
   b7e50:	2800      	cmp	r0, #0
   b7e52:	d0f4      	beq.n	b7e3e <__register_exitproc+0x4e>
   b7e54:	2300      	movs	r3, #0
   b7e56:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7e5a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7e5e:	6863      	ldr	r3, [r4, #4]
   b7e60:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7e64:	2201      	movs	r2, #1
   b7e66:	409a      	lsls	r2, r3
   b7e68:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7e6c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7e70:	4313      	orrs	r3, r2
   b7e72:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7e76:	2e02      	cmp	r6, #2
   b7e78:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7e7c:	bf02      	ittt	eq
   b7e7e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7e82:	4313      	orreq	r3, r2
   b7e84:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7e88:	6863      	ldr	r3, [r4, #4]
   b7e8a:	f8d8 0000 	ldr.w	r0, [r8]
   b7e8e:	1c5a      	adds	r2, r3, #1
   b7e90:	3302      	adds	r3, #2
   b7e92:	6062      	str	r2, [r4, #4]
   b7e94:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7e98:	f000 f80e 	bl	b7eb8 <__retarget_lock_release_recursive>
   b7e9c:	2000      	movs	r0, #0
   b7e9e:	e7c6      	b.n	b7e2e <__register_exitproc+0x3e>
   b7ea0:	2003e7e8 	.word	0x2003e7e8
   b7ea4:	2003e75c 	.word	0x2003e75c
   b7ea8:	00000000 	.word	0x00000000
   b7eac:	000b6549 	.word	0x000b6549
   b7eb0:	2003e5e8 	.word	0x2003e5e8

000b7eb4 <__retarget_lock_acquire_recursive>:
   b7eb4:	4770      	bx	lr

000b7eb6 <__retarget_lock_release>:
   b7eb6:	4770      	bx	lr

000b7eb8 <__retarget_lock_release_recursive>:
   b7eb8:	4770      	bx	lr

000b7eba <link_code_end>:
	...

000b7ebc <dynalib_user>:
   b7ebc:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7ecc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7edc:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   b7eec:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   b7efc:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   b7f0c:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   b7f1c:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   b7f2c:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   b7f3c:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   b7f4c:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   b7f5c:	6174 6574 4820 5454 2f50 2e31 0031 6f48     tate HTTP/1.1.Ho
   b7f6c:	7473 203a 4300 6e6f 6574 746e 4c2d 6e65     st: .Content-Len
   b7f7c:	7467 3a68 0020 6f43 746e 6e65 2d74 7954     gth: .Content-Ty
   b7f8c:	6570 203a 6574 7478 702f 616c 6e69 633b     pe: text/plain;c
   b7f9c:	6168 7372 7465 553d 4654 382d 4600 6f72     harset=UTF-8.Fro
   b7fac:	206d 7548 0065 7753 7469 6863 4e4f 2520     m Hue.SwitchON %
   b7fbc:	2069 000a 3f3c 6d78 206c 6576 7372 6f69     i ..<?xml versio
   b7fcc:	3d6e 3122 302e 2022 6e65 6f63 6964 676e     n="1.0" encoding
   b7fdc:	223d 7475 2d66 2238 3e3f 733c 453a 766e     ="utf-8"?><s:Env
   b7fec:	6c65 706f 2065 6d78 6e6c 3a73 3d73 6822     elope xmlns:s="h
   b7ffc:	7474 3a70 2f2f 6373 6568 616d 2e73 6d78     ttp://schemas.xm
   b800c:	736c 616f 2e70 726f 2f67 6f73 7061 652f     lsoap.org/soap/e
   b801c:	766e 6c65 706f 2f65 2022 3a73 6e65 6f63     nvelope/" s:enco
   b802c:	6964 676e 7453 6c79 3d65 6822 7474 3a70     dingStyle="http:
   b803c:	2f2f 6373 6568 616d 2e73 6d78 736c 616f     //schemas.xmlsoa
   b804c:	2e70 726f 2f67 6f73 7061 652f 636e 646f     p.org/soap/encod
   b805c:	6e69 2f67 3e22 733c 423a 646f 3e79 753c     ing/"><s:Body><u
   b806c:	533a 7465 6942 616e 7972 7453 7461 2065     :SetBinaryState 
   b807c:	6d78 6e6c 3a73 3d75 7522 6e72 423a 6c65     xmlns:u="urn:Bel
   b808c:	696b 3a6e 6573 7672 6369 3a65 6162 6973     kin:service:basi
   b809c:	6563 6576 746e 313a 3e22 423c 6e69 7261     cevent:1"><Binar
   b80ac:	5379 6174 6574 313e 2f3c 6942 616e 7972     yState>1</Binary
   b80bc:	7453 7461 3e65 2f3c 3a75 6553 4274 6e69     State></u:SetBin
   b80cc:	7261 5379 6174 6574 3c3e 732f 423a 646f     aryState></s:Bod
   b80dc:	3e79 2f3c 3a73 6e45 6576 6f6c 6570 003e     y></s:Envelope>.
   b80ec:	4f50 5453 2f20 7075 706e 632f 6e6f 7274     POST /upnp/contr
   b80fc:	6c6f 622f 7361 6369 7665 6e65 3174 4820     ol/basicevent1 H
   b810c:	5454 2f50 2e31 0031 6f43 746e 6e65 2d74     TTP/1.1.Content-
   b811c:	7954 6570 203a 6574 7478 782f 6c6d 203b     Type: text/xml; 
   b812c:	6863 7261 6573 3d74 7475 2d66 0038 4f53     charset=utf-8.SO
   b813c:	5041 4341 4954 4e4f 203a 7522 6e72 423a     APACTION: "urn:B
   b814c:	6c65 696b 3a6e 6573 7672 6369 3a65 6162     elkin:service:ba
   b815c:	6973 6563 6576 746e 313a 5323 7465 6942     sicevent:1#SetBi
   b816c:	616e 7972 7453 7461 2265 4300 6e6f 656e     naryState".Conne
   b817c:	7463 6f69 3a6e 6b20 6565 2d70 6c61 7669     ction: keep-aliv
   b818c:	0065 7773 7469 6863 464f 2046 6925 0a20     e.switchOFF %i .
   b819c:	3c00 783f 6c6d 7620 7265 6973 6e6f 223d     .<?xml version="
   b81ac:	2e31 2230 6520 636e 646f 6e69 3d67 7522     1.0" encoding="u
   b81bc:	6674 382d 3f22 3c3e 3a73 6e45 6576 6f6c     tf-8"?><s:Envelo
   b81cc:	6570 7820 6c6d 736e 733a 223d 7468 7074     pe xmlns:s="http
   b81dc:	2f3a 732f 6863 6d65 7361 782e 6c6d 6f73     ://schemas.xmlso
   b81ec:	7061 6f2e 6772 732f 616f 2f70 6e65 6576     ap.org/soap/enve
   b81fc:	6f6c 6570 222f 7320 653a 636e 646f 6e69     lope/" s:encodin
   b820c:	5367 7974 656c 223d 7468 7074 2f3a 732f     gStyle="http://s
   b821c:	6863 6d65 7361 782e 6c6d 6f73 7061 6f2e     chemas.xmlsoap.o
   b822c:	6772 732f 616f 2f70 6e65 6f63 6964 676e     rg/soap/encoding
   b823c:	222f 3c3e 3a73 6f42 7964 3c3e 3a75 6553     /"><s:Body><u:Se
   b824c:	4274 6e69 7261 5379 6174 6574 7820 6c6d     tBinaryState xml
   b825c:	736e 753a 223d 7275 3a6e 6542 6b6c 6e69     ns:u="urn:Belkin
   b826c:	733a 7265 6976 6563 623a 7361 6369 7665     :service:basicev
   b827c:	6e65 3a74 2231 3c3e 6942 616e 7972 7453     ent:1"><BinarySt
   b828c:	7461 3e65 3c30 422f 6e69 7261 5379 6174     ate>0</BinarySta
   b829c:	6574 3c3e 752f 533a 7465 6942 616e 7972     te></u:SetBinary
   b82ac:	7453 7461 3e65 2f3c 3a73 6f42 7964 3c3e     State></s:Body><
   b82bc:	732f 453a 766e 6c65 706f 3e65 4900 0a73     /s:Envelope>.Is.
   b82cc:	6554 7473 6e69 0a67 6f59 2e75 000a 7554     Testing.You...Tu
   b82dc:	6e72 6969 676e 6f20 206e 524d 4557 4f4d     rniing on MRWEMO
   b82ec:	2320 6925 000a 7554 6e72 6969 676e 6f20      #%i..Turniing o
   b82fc:	6666 4d20 5752 4d45 204f 2523 0a69 7400     ff MRWEMO #%i..t
   b830c:	7275 696e 676e 6f20 206e 6874 2065 696c     urning on the li
   b831c:	6867 0a74 7400 7275 696e 676e 6f20 6666     ght..turning off
   b832c:	7420 6568 6c20 6769 7468 5400 7275 696e      the light.Turni
   b833c:	6e69 2067 6e6f 4d20 5753 4d45 204f 2523     ing on MSWEMO #%
   b834c:	0a69 5400 7275 696e 6e69 2067 666f 2066     i..Turniing off 
   b835c:	534d 4557 4f4d 2320 6925 000a 696c 6867     MSWEMO #%i..ligh
   b836c:	2074 2c31 7220 203d 6925 000a 696c 6867     t 1, r= %i..ligh
   b837c:	2074 2c32 7220 203d 6925 000a 696c 6867     t 2, r= %i..ligh
   b838c:	2074 2c33 7220 203d 6925 000a 696c 6867     t 3, r= %i..ligh
   b839c:	2074 2c34 7220 203d 6925 000a 696c 6867     t 4, r= %i..ligh
   b83ac:	2074 2c35 7220 203d 6925 000a 696c 6867     t 5, r= %i..ligh
   b83bc:	2074 2c36 7220 203d 6925 000a 3931 2e32     t 6, r= %i..192.
   b83cc:	3631 2e38 2e31 3033 3100 3239 312e 3836     168.1.30.192.168
   b83dc:	312e 332e 0031 3931 2e32 3631 2e38 2e31     .1.31.192.168.1.
   b83ec:	3233 3100 3239 312e 3836 312e 332e 0033     32.192.168.1.33.
   b83fc:	3931 2e32 3631 2e38 2e31 3433                192.168.1.34.

000b8409 <_ZL11hueUsername>:
   b8409:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b8419:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b8429:	7438 334d 4637 5433                          8tM37F3T.

000b8432 <_ZL13maybeNextTime>:
	...
   b84fa:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   b850a:	3800 0000 0000 0000 0000 0000 0000 0000     .8..............
   b851a:	5800 0000 0000 0000 0000 0000 0000 0000     .X..............
   b852a:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   b853a:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   b854a:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   b855a:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   b856a:	1800 0000 0000 0000 0000 1f00 0378 3ce0     ............x..<
   b857a:	1f3c 3e80 0000 0000 0000 3b00 02dc 1cf0     <..>.......;....
   b858a:	1810 63c0 0000 0000 0000 1900 018c 0eb8     ...c............
   b859a:	1830 ff60 0000 0000 0000 1900 03ce 061c     0.`.............
   b85aa:	1820 c060 0000 0000 0000 1800 03c7 070e      .`.............
   b85ba:	1860 c060 0000 0000 0000 1800 03c3 038f     `.`.............
   b85ca:	7cc0 61c0 0080 0000 0000 3c00 c1f7 81f1     .|.a.......<....
   b85da:	3f80 3ec0 0000 0000 0000 0000 0000 0100     .?.>............
   b85ea:	0880 0000 0000 0000 0000 0000 0000 fb00     ................
	...
   b8606:	0000 1f01 0010 0000 0000 0000 0000 0000     ................
   b8616:	0000 0f01 00e0 0000 0000 0000 0000 0000     ................
   b8626:	0000 b000 0000 0000 0000 0000 0000 0000     ................
	...
   b86d6:	0000 0008 4000 0060 0000 0000 0000 0000     .....@`.........
   b86e6:	0000 0008 c000 0060 0000 0000 0000 0000     ......`.........
   b86f6:	0000 0018 c000 0010 0000 0000 3e00 7c00     .............>.|
   b8706:	1c07 007c e003 1f70 0078 00f8 7300 c300     ..|...p.x....s..
   b8716:	9807 0018 c000 3b30 01dc 0086 3300 ff01     ......0;.....3..
   b8726:	f001 0018 c000 1930 038c 00fe 3100 8081     ......0......1..
   b8736:	e000 0018 c000 1930 03ce 0000 3100 8181     ......0......1..
   b8746:	e000 0018 c000 1830 03c7 0002 3100 c3c0     ......0......1..
   b8756:	fc01 001b d000 1830 01c3 0086 7900 7ee0     ......0......y.~
   b8766:	3c07 001d d000 3c78 c0f7 00fc 0000 0000     .<....x<........
	...

000b8832 <_ZL13youNeededThat>:
	...
   b88c6:	0300 0fcf 6087 0000 0000 0000 0000 0000     .....`..........
   b88d6:	0100 1ec6 e08e 0000 0000 0000 0000 0000     ................
   b88e6:	0000 39cc 6086 0000 0000 0000 0000 0000     ...9.`..........
   b88f6:	0000 33ec 6086 0000 0000 0000 0000 0000     ...3.`..........
   b8906:	0000 3f78 7807 0000 0000 0000 0000 0000     ..x?.x..........
   b8916:	0000 1e38 f003 0000 0000 0000 0000 0000     ..8.............
   b8926:	0000 0030 0000 0000 0000 0000 0000 0000     ..0.............
   b8936:	0f00 00e4 0000 0000 0000 0000 0000 0000     ................
   b8946:	0800 00fc 0000 0000 0000 0000 0000 0000     ................
   b8956:	0f00 0080 0000 0000 0000 0000 0000 0000     ................
	...
   b89aa:	0018 7000 0000 0000 0000 0000 0000 0000     ...p............
   b89ba:	0078 f000 0000 0000 0000 0000 0000 0000     x...............
   b89ca:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   b89da:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   b89ea:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   b89fa:	0018 3000 0000 0000 0000 0300 7ec0 810f     ...0.........~..
   b8a0a:	1ff8 f003 0000 0000 0000 0700 e7e0 c31c     ................
   b8a1a:	3998 7086 0000 0000 0000 0300 ff60 c31f     .9.p........`...
   b8a2a:	3f18 308c 0000 0000 0000 0300 c070 0318     .?.0........p...
   b8a3a:	3018 300c 0000 0000 0000 0300 e330 631c     .0.0........0..c
   b8a4a:	383e 78ce 0000 0000 0000 0700 7e3c c10f     >8.x........<~..
   b8a5a:	1ff8 f087 0000 0000 0000 0000 0000 0000     ................
	...
   b8ae6:	0000 0004 0000 0000 0000 0000 0000 0000     ................
   b8af6:	0000 000c 0000 0000 0000 0000 0000 0000     ................
   b8b06:	0000 001c 0000 0000 0000 0000 0000 0000     ................
   b8b16:	0000 000c 0000 0000 0000 0000 0000 0000     ................
   b8b26:	0400 000c 1800 0000 0000 0000 0000 0000     ................
   b8b36:	0c00 000c 1800 0000 0000 0000 0000 0000     ................
   b8b46:	1e00 830f 78c0 0000 0000 0000 0000 0000     .....x..........
   b8b56:	0c00 830f 18e0 0000 0000 0000 0000 0000     ................
   b8b66:	0c00 c10d 1830 0000 0000 0000 0000 0000     ....0...........
   b8b76:	0c00 c30c 1818 0000 0000 0000 0000 0000     ................
   b8b86:	0f00 e30c 1cdc 0000 0000 0000 0000 0000     ................
   b8b96:	0f00 f11e 1cf6 0000 0000 0000 0000 0000     ................
	...

000b8c32 <_ZL14fSocietyBitmap>:
   b8c32:	ffff ffff ffff ffff 0080 0000 0000 0100     ................
   b8c42:	ff9f ffff ffff f9ff ff9f ffff ffff f9ff     ................
   b8c52:	ff9f ffff ffff f9ff 0098 7f00 00fc 1900     ................
   b8c62:	0098 ff0f f0ff 1900 0098 ff7f feff 1900     ................
   b8c72:	0398 ffff ffff 19c0 0f98 ffff ffff 19f0     ................
   b8c82:	1f98 ffff ffff 19f8 7f98 ffff ffff 19fe     ................
   b8c92:	ff98 ffff ffff 19ff ff99 ffff ffff 99ff     ................
   b8ca2:	ff9b ffff ffff d9ff ff9f ffff ffff f9ff     ................
   b8cb2:	ff9f ffff ffff f9ff ff9f ffff ffff f9ff     ................
   b8cc2:	ff9f ffff ffff f9ff ff9f ffff ffff f9ff     ................
   b8cd2:	ff98 ffff ffff 19ff 7e98 ff00 80ff 193e     .........~....>.
   b8ce2:	7898 7f00 00fe 390e 619e 1ff0 0ff8 7986     .x.....9.a.....y
   b8cf2:	0798 07fc 3fe0 19e6 3f98 03fe 7fc0 19fe     .....?...?......
   b8d02:	3f9e 03ff ffc0 f9fc 7f9c c3ff ffc3 19fe     .?..............
   b8d12:	ff99 ffff ffff 99ff ef9f ffc0 83ff f9e7     ................
   b8d22:	ef9f 7f80 00fe f9f7 ef9f 3f00 00fc f9f7     ...........?....
   b8d32:	fe9f 3f00 00fc f97f fe9f 7f00 00de f97f     ...?............
   b8d42:	ff9f 7bfe 7fde f9ff ff9f fbff fffd f9ff     ...{............
   b8d52:	ff9f f7ff ffff f9ff ff9f efff fffb f9ff     ................
   b8d62:	ef9f dfff fffd f9f3 8f9f ffff fffd f9f1     ................
   b8d72:	0f9f ffff ffff f9f0 0f9f ffff fff9 79f0     ...............y
   b8d82:	0f9e 07fe 3fe0 79f0 079e 03f0 0fc0 79e0     .....?.y.......y
   b8d92:	009e 0000 0000 7900 009e 0000 0000 7900     .......y.......y
   b8da2:	009e 0000 0000 7900 009e 0000 0000 f900     .......y........
   b8db2:	009b 0000 0000 d900 0099 0000 0000 9901     ................
   b8dc2:	c098 0000 0000 1907 7f98 feff 1f1f 19fe     ................
   b8dd2:	7f98 03f8 1ff0 19fe 3f98 00fc 3f00 19fc     .........?...?..
   b8de2:	3f98 00fe 7f00 19fc 3f98 80ff ff01 19fc     .?.......?......
   b8df2:	1f98 f0ff ff07 19f8 1f98 ffff ffff 19f8     ................
   b8e02:	1f98 ffff ffff 19f8 0f98 ffff ffff 19f8     ................
   b8e12:	0f98 ffff ffff 19f8 0f98 ffff ffff 19f0     ................
   b8e22:	0798 ffff ffff 19e0 0398 ffff ffff 19e0     ................
   b8e32:	0198 ffff ffff 19c0 0098 ffff ffff 1980     ................
   b8e42:	0098 ff7f feff 1900 0098 ff1f fcff 1900     ................
   b8e52:	0098 ff0f f8ff 1900 0098 ff07 e0ff 1900     ................
   b8e62:	0098 ff03 e0ff 1900 ff9f ffff ffff f9ff     ................
   b8e72:	ff9f ffff ffff f9ff 009c 0000 0000 3900     ...............9
   b8e82:	0098 0000 0000 1900 f899 0000 0010 1900     ................
   b8e92:	f099 83c1 8211 1900 8199 87c3 c703 9919     ................
   b8ea2:	8399 5836 6fd6 99d9 f399 5824 6736 9919     ..6X.o....$X6g..
   b8eb2:	fb99 5804 6236 9919 8199 58c4 c237 9919     ...X6b.....X7...
   b8ec2:	8099 5834 0236 9919 8299 5834 2296 9919     ..4X6.....4X."..
   b8ed2:	8399 4836 63d6 9919 8199 87c3 c133 99cf     ..6H.c......3...
   b8ee2:	0099 0100 0000 9901 0098 0000 0000 9907     ................
   b8ef2:	0098 0000 0000 190f 0098 0000 0000 1900     ................
   b8f02:	009c 0000 0000 1900 ff9f ffff ffff f9ff     ................
   b8f12:	ff9f ffff ffff f9ff 0080 0000 0000 0100     ................
   b8f22:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f32:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f42:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f52:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f62:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f72:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f82:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f92:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8fa2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8fb2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8fc2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8fd2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8fe2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8ff2:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9002:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9012:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9022:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000b9032 <_ZL14niceKnowingYou>:
	...
   b9176:	0000 8001 0000 0000 0000 0000 381c 0000     .............8..
   b9186:	0000 8003 0000 0000 0000 0000 100e 0000     ................
   b9196:	0000 8001 0000 0000 0000 0000 100e 0000     ................
   b91a6:	0000 8001 0000 0000 0000 0000 100b 0020     .............. .
   b91b6:	0000 8001 0000 0000 0002 0000 900b 0060     ..............`.
   b91c6:	0000 8001 0000 0000 0003 1000 9009 3c30     ..............0<
   b91d6:	8007 f001 0378 fdc3 83c1 78c0 d008 6670     ....x......x..pf
   b91e6:	c018 c001 076c 9821 8783 e460 7008 c230     ....l.!...`..p0.
   b91f6:	c01f e001 0c66 d920 8301 c460 7008 c030     ....f. ...`..p0.
   b9206:	0018 a001 0c66 dd60 8301 8c30 3008 c630     ....f.`...0..00.
   b9216:	401c b001 0967 76c0 8301 dc30 101c 7c38     .@..g..v..0...8|
   b9226:	800f b803 8777 2680 8703 7838 0000 0000     ....w..&..8x....
	...
   b923e:	0000 3880 0000 0000 0000 0000 0000 0000     ...8............
   b924e:	0100 1000 0000 0000 0000 0000 0000 0000     ................
   b925e:	0000 e080 0000 0000 0000 0000 0000 0000     ................
   b926e:	0000 c07f 0000 0000 0000 0000 0000 0000     ................
   b927e:	0000 0008 0000 0000 0000 0000 0000 0000     ................
	...
   b92c6:	e301 0080 0000 0000 0000 0000 0000 0000     ................
   b92d6:	c300 0000 0000 0000 0000 0000 0000 0000     ................
   b92e6:	6600 0000 0000 0000 0000 0000 0000 0000     .f..............
   b92f6:	7400 0000 0000 0000 0000 0000 0000 0000     .t..............
   b9306:	3800 0000 0000 0000 0000 0000 0000 0000     .8..............
   b9316:	1800 020f 0030 0000 0000 0000 0000 0000     ....0...........
   b9326:	1800 861c 0070 0000 0000 0000 0000 0000     ....p...........
   b9336:	1800 8630 0030 0000 0000 0000 0000 0000     ..0.0...........
   b9346:	1800 8631 0030 0000 0000 0000 0000 0000     ..1.0...........
   b9356:	1800 0627 6038 80c1 0000 0000 0000 0000     ..'.8`..........
   b9366:	1e00 031e 60f0 80c1 0000 0000 0000 0000     .....`..........
	...

000b9432 <_ZL3rip>:
	...
   b9556:	0000 0700 00fc 0000 0000 0000 0000 0f00     ................
   b9566:	00f8 0300 00fc c0ff 0000 0000 0000 0f00     ................
   b9576:	80ff 0000 00f0 fcff 0000 0000 0000 0100     ................
   b9586:	e0ff 0000 00f0 3f1f 0000 0000 0000 0100     .......?........
   b9596:	f8e0 0000 00f0 071c 0080 0000 0000 0100     ................
   b95a6:	3ce0 0000 00f0 031c 00c0 0000 0000 0100     .<..............
   b95b6:	1ce0 0000 00f0 011c 00e0 0000 0000 0100     ................
   b95c6:	1ee0 0000 00f0 011c 00e0 0000 0000 0100     ................
   b95d6:	1ee0 0000 00f0 001c 00f0 0000 0000 0100     ................
   b95e6:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   b95f6:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   b9606:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   b9616:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   b9626:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   b9636:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   b9646:	1ff0 0000 00f0 011e 00f0 0000 0000 0100     ................
   b9656:	1ef8 0000 00f0 011f 00e0 0000 0000 0100     ................
   b9666:	3efc 0000 00f0 c31f 00e0 0000 0000 0100     .>..............
   b9676:	fcef 0000 00f0 e71c 00c0 0000 0000 0100     ................
   b9686:	f8e3 0000 00f0 7f1c 00c0 0000 0000 0100     ................
   b9696:	f0e1 0000 00f0 1f1c 0000 0000 0000 0100     ................
   b96a6:	f0e1 0000 00f0 001c 0000 0000 0000 0100     ................
   b96b6:	f0e0 0000 00f0 001c 0000 0000 0000 0100     ................
   b96c6:	78e0 0000 00f0 001c 0000 0000 0000 0100     .x..............
   b96d6:	3ce0 0000 00f0 001c 0000 0000 0000 0100     .<..............
   b96e6:	1fe0 00c0 00f0 001e 0000 0000 0000 0700     ................
   b96f6:	1ff8 03e0 00f8 807f 0000 0000 0000 0700     ................
   b9706:	07fc 07c0 00fc 807f 0000 0000 0000 0000     ................
   b9716:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

000b9832 <_ZL4lame>:
	...
   b99d6:	c003 8001 3838 807f 0000 0000 0000 0000     ....88..........
   b99e6:	8001 8001 701c 8030 0000 0000 0000 0000     .....p0.........
   b99f6:	8001 c001 701e 0032 0000 0000 0000 0000     .....p2.........
   b9a06:	8001 c003 b036 003e 0000 0000 0000 0000     ....6.>.........
   b9a16:	8001 c002 b033 0032 0000 0000 0000 0000     ....3.2.........
   b9a26:	8001 7c06 3033 0030 0000 0000 0000 0000     ...|300.........
   b9a36:	8001 e004 1821 0030 0000 0000 0000 0000     ....!.0.........
   b9a46:	8001 f00d 1820 0030 0000 0000 0000 0000     .... .0.........
   b9a56:	8001 300f 1820 0030 0000 0000 0000 0000     ...0 .0.........
   b9a66:	8c01 3818 1820 8030 0000 0000 0000 0000     ...8 .0.........
   b9a76:	f803 3c38 3c70 807f 0000 0000 0000 0000     ..8<p<..........
	...

000b9c32 <_ZL4pray>:
	...
   b9d06:	0000 0100 00f8 0000 0000 0000 0000 0000     ................
   b9d16:	0000 0f00 00f8 0000 0000 0000 0000 0000     ................
   b9d26:	0000 3e00 0078 0000 0000 0000 0000 0000     ...>x...........
   b9d36:	0000 f000 0030 0000 0000 0000 0000 0000     ....0...........
   b9d46:	0000 8003 0000 0000 0000 0000 0000 0000     ................
   b9d56:	0000 0006 0000 0000 0000 0000 0000 0060     ..............`.
   b9d66:	0000 009c 0000 0000 0000 0000 0100 f0e3     ................
   b9d76:	0300 00b8 007f 7f00 0ff0 00f0 0300 fcef     ................
   b9d86:	0f00 00f0 c0ff 3f00 07e0 00f0 0f00 3efc     .......?.......>
   b9d96:	1f00 00e0 e0e3 0f00 01c0 0080 1f00 0ff8     ................
   b9da6:	0300 00e0 f007 0700 03c0 0000 0000 0ff0     ................
   b9db6:	0380 00c0 f80e 0300 07e0 0000 0000 07e0     ................
   b9dc6:	0380 00c0 7c38 0100 06f0 0000 0000 07e0     ....8|..........
   b9dd6:	0380 00c0 3e38 0100 0ef0 0000 0000 07e0     ....8>..........
   b9de6:	0380 00c0 1f70 0000 0cf8 0000 0000 07e0     ....p...........
   b9df6:	0380 00c0 0f70 0080 1c7c 0000 0000 07e0     ....p...|.......
   b9e06:	0380 00c0 07f0 00c0 183e 0000 0000 0fe0     ........>.......
   b9e16:	0380 00c0 03f8 00c0 383e 0000 0000 0ff0     ........>8......
   b9e26:	0300 00c0 037c 00e0 701f 0000 0000 1ff0     ....|....p......
   b9e36:	0300 00c0 037e 00f0 e00f 0000 0000 3efc     ....~..........>
   b9e46:	0300 00c0 ff3f 00f8 e007 0000 0000 fcff     ....?...........
   b9e56:	0f00 00e0 fc3f 001c c007 0000 0000 f0ff     ....?...........
   b9e66:	1f00 00f0 f00f 0006 c003 0000 0000 00f0     ................
	...
   b9e7e:	8007 0000 0000 00f0 0000 0000 0000 0000     ................
   b9e8e:	8007 0000 0000 00f0 0000 0000 0000 fe00     ................
   b9e9e:	000f 0000 0000 00f0 0000 0000 0000 ff03     ................
   b9eae:	02ce 0000 0000 00f0 0000 0000 0000 0f07     ................
   b9ebe:	07dc 0000 0000 00f0 0000 0000 0000 030c     ................
   b9ece:	03b8 0000 0000 00f0 0000 0000 0000 0008     ................
   b9ede:	8277 0000 0000 00f0 0000 0000 0000 0008     w...............
   b9eee:	fcef 0000 0000 00f0 0000 0000 0000 030c     ................
   b9efe:	e0c3 0000 0000 00f0 0000 0000 0000 0f06     ................
   b9f0e:	0000 0000 0000 00f0 0000 0000 0000 f803     ................
   b9f1e:	0000 0000 0000 00f0 0000 0000 0000 0000     ................
   b9f2e:	0000 0000 0000 00f0 0000 0000 0000 0000     ................
   b9f3e:	0000 0000 0100 00f8 0000 0000 0000 0000     ................
   b9f4e:	0000 0000 0100 00f8 0000 0000 0000 0000     ................
   b9f5e:	0000 0000 0300 00e0 0000 0000 0000 0000     ................
   b9f6e:	0000 0000 0f00 0080 0000 0000 0000 0000     ................
   b9f7e:	0000 0000 1e00 0000 0000 0000 0000 0000     ................
   b9f8e:	0000 0000 1800 0000 0000 0000 0000 0000     ................
	...

000ba032 <_ZL4uhOh>:
	...
   ba1c2:	0000 3c00 041e 0000 0000 0010 0000 0000     ...<............
   ba1d2:	0000 3800 1c0c 0000 0000 0070 0000 0000     ...8......p.....
   ba1e2:	0000 1800 0c08 0000 0000 0030 0000 0000     ..........0.....
   ba1f2:	0000 1800 0c18 0000 0000 0030 0000 0000     ..........0.....
   ba202:	0000 1800 0c18 0000 0000 0030 0000 0000     ..........0.....
   ba212:	0000 1800 0c10 0000 0000 0030 0000 0000     ..........0.....
   ba222:	0000 1800 0c10 0000 0000 0030 0000 0000     ..........0.....
   ba232:	0000 1800 0f30 0080 f001 003e 0000 0000     ....0.....>.....
   ba242:	0000 0c00 0e30 00c0 8807 003b 0000 0000     ....0.....;.....
   ba252:	0000 0c00 0c20 00c0 180e 0033 0000 0000     .... .....3.....
   ba262:	0000 0c00 0c20 0060 180c 8031 0000 0000     .... .`...1.....
   ba272:	0000 0e00 0c60 0060 3008 8031 0000 0000     ....`.`..01.....
   ba282:	0000 0700 0cc0 0070 f009 c031 0000 0000     ......p...1.....
   ba292:	0000 0300 1e80 0078 c007 e079 0000 0000     ......x...y.....
	...

000ba432 <_ZL4welp>:
	...
   ba582:	0000 0080 0000 0000 0000 0c00 3c00 0000     .............<..
   ba592:	0100 0080 0000 0000 0000 0e00 ff00 0080     ................
   ba5a2:	0100 00c0 0000 0000 0000 1e00 8701 00e0     ................
   ba5b2:	0300 00c0 0000 0000 0000 0e00 c001 00e0     ................
   ba5c2:	0300 00c0 0000 0000 0000 0e00 c001 0070     ..............p.
   ba5d2:	0200 00e0 0000 0000 0000 0e00 8000 0070     ..............p.
   ba5e2:	0600 00e0 0020 0100 00c0 0c00 0000 00e0     .... ...........
   ba5f2:	0400 0070 0030 0100 0080 0c00 0300 00c0     ..p.0...........
   ba602:	0c00 807f 07f0 00c0 1f60 0c00 1f00 0000     ........`.......
   ba612:	0800 0178 06fc 01e0 7fe0 0c80 7000 0000     ..x..........p..
   ba622:	1800 0378 01c4 00f0 19e0 0cc0 7000 0000     ..x..........p..
   ba632:	1800 03f8 0386 0038 1860 0cc0 7e00 0000     ......8.`....~..
   ba642:	1300 03dc 060e 001c 1860 04e0 3e00 0000     ........`....>..
   ba652:	3f00 031c 070e 000e 1860 0460 1e00 0000     .?......`.`.....
   ba662:	2000 010e 073c 0007 1860 0070 0800 0000     . ..<...`.p.....
   ba672:	6000 010f 03f8 80ff 18e0 0e70 1c00 0000     .`........p.....
   ba682:	f001 801f 017c c1f0 7cf0 0efc 1c00 0000     ....|....|......
   ba692:	0000 0000 0078 0000 0000 0000 0000 0000     ....x...........
   ba6a2:	0000 0030 0018 0000 0000 0000 0000 0000     ..0.............
   ba6b2:	0000 0040 0030 0000 0000 0000 0000 0000     ..@.0...........
   ba6c2:	0000 0330 00e0 0000 0000 0000 0000 0000     ..0.............
   ba6d2:	0000 ff1f 0080 0000 0000 0000 0000 0000     ................
   ba6e2:	0000 fc07 0000 0000 0000 0000 0000 0000     ................
	...

000ba832 <_ZL5again>:
	...
   ba982:	0000 0080 0000 0000 0000 0c00 3c00 0000     .............<..
   ba992:	0100 0080 0000 0000 0000 0e00 ff00 0080     ................
   ba9a2:	0100 00c0 0000 0000 0000 1e00 8701 00e0     ................
   ba9b2:	0300 00c0 0000 0000 0000 0e00 c001 00e0     ................
   ba9c2:	0300 00c0 0000 0000 0000 0e00 c001 0070     ..............p.
   ba9d2:	0200 00e0 0000 0000 0000 0e00 8000 0070     ..............p.
   ba9e2:	0600 00e0 0020 0100 00c0 0c00 0000 00e0     .... ...........
   ba9f2:	0400 0070 0030 0100 0080 0c00 0300 00c0     ..p.0...........
   baa02:	0c00 807f 07f0 00c0 1f60 0c00 1f00 0000     ........`.......
   baa12:	0800 0178 06fc 01e0 7fe0 0c80 7000 0000     ..x..........p..
   baa22:	1800 0378 01c4 00f0 19e0 0cc0 7000 0000     ..x..........p..
   baa32:	1800 03f8 0386 0038 1860 0cc0 7e00 0000     ......8.`....~..
   baa42:	1300 03dc 060e 001c 1860 04e0 3e00 0000     ........`....>..
   baa52:	3f00 031c 070e 000e 1860 0460 1e00 0000     .?......`.`.....
   baa62:	2000 010e 073c 0007 1860 0070 0800 0000     . ..<...`.p.....
   baa72:	6000 010f 03f8 80ff 18e0 0e70 1c00 0000     .`........p.....
   baa82:	f001 801f 017c c1f0 7cf0 0efc 1c00 0000     ....|....|......
   baa92:	0000 0000 0078 0000 0000 0000 0000 0000     ....x...........
   baaa2:	0000 0030 0018 0000 0000 0000 0000 0000     ..0.............
   baab2:	0000 0040 0030 0000 0000 0000 0000 0000     ..@.0...........
   baac2:	0000 0330 00e0 0000 0000 0000 0000 0000     ..0.............
   baad2:	0000 ff1f 0080 0000 0000 0000 0000 0000     ................
   baae2:	0000 fc07 0000 0000 0000 0000 0000 0000     ................
	...

000bac32 <_ZL5fight>:
	...
   badb2:	0000 80ff 00fc 20ff 0000 3f00 01fc 0080     ....... ...?....
   badc2:	0100 c0ff 0178 f0ff 871f 7ff0 03fe 00c0     ....x...........
   badd2:	0000 c0f1 0370 f080 0107 61c0 03c7 00c0     ....p......a....
   bade2:	0000 c072 0670 7000 0107 41c0 03c3 00c0     ..r.p..p...A....
   badf2:	0000 0072 0e70 3000 ff07 01c0 03c0 00c0     ..r.p..0........
   bae02:	0000 007f 0c70 3000 ff07 01c0 03c0 0080     ....p..0........
   bae12:	0000 007f 0c70 0000 0107 01c0 01c0 0080     ....p...........
   bae22:	0000 0073 1c70 0000 0107 01c0 01c0 0080     ..s.p...........
   bae32:	0000 0072 1c70 fc01 0107 01c0 01c0 0080     ..r.p...........
   bae42:	0000 0070 1e70 7800 0107 01c0 01c0 0080     ..p.p..x........
   bae52:	0000 0070 0e70 3800 0107 01c0 01c0 0080     ..p.p..8........
   bae62:	0000 0070 0f70 3800 0107 01c0 01c0 0080     ..p.p..8........
   bae72:	0000 0070 0770 3800 0107 01c0 01c0 0080     ..p.p..8........
   bae82:	0000 0070 0770 7880 0107 01c0 01c0 0080     ..p.p..x........
   bae92:	0000 0070 0370 f8e1 0107 01c0 01c0 0000     ..p.p...........
   baea2:	0000 00f8 0178 c0ff 010f 03c0 03c0 0080     ....x...........
   baeb2:	0100 00fc 00fc 807f c71f 07f0 03e0 0080     ................
	...

000bb032 <_ZL5lucky>:
	...
   bb1d6:	1cf0 1f38 e341 8e87 0000 0000 0000 0000     ..8.A...........
   bb1e6:	0c60 3110 c6c0 0c03 0000 0000 0000 0000     `..1............
   bb1f6:	0c60 4030 d8c0 9801 0000 0000 0000 0000     `.0@............
   bb206:	0c60 c020 f040 d001 0000 0000 0000 0000     `. .@...........
   bb216:	0c60 c020 d840 e000 0000 0000 0000 0000     `. .@...........
   bb226:	0c60 c020 dc00 6000 0000 0000 0000 0000     `. ....`........
   bb236:	0c60 c060 cc00 6000 0000 0000 0000 0000     `.`....`........
   bb246:	0460 c040 ce00 6000 0000 0000 0000 0000     `.@....`........
   bb256:	0660 6040 c640 6000 0000 0000 0000 0000     `.@`@..`........
   bb266:	0763 39c0 c380 6000 0000 0000 0000 0000     c..9...`........
   bb276:	03fe 1f80 e701 7880 0000 0000 0000 0000     .......x........
	...

000bb432 <_ZL5ready>:
	...
   bb53a:	0000 e000 0000 0000 0000 0000 0000 0000     ................
   bb54a:	0000 e003 0000 0000 fe01 0000 0000 0000     ................
   bb55a:	0000 e00f 0000 0000 ff01 00c0 0000 0000     ................
   bb56a:	0000 e00c 0000 0000 7900 00f0 0000 0000     .........y......
   bb57a:	0000 e000 0000 0000 7000 0038 0000 0000     .........p8.....
   bb58a:	0000 e000 0000 0000 7000 003c 0000 0000     .........p<.....
   bb59a:	0000 e000 0000 0000 7000 001c 0000 0000     .........p......
   bb5aa:	0000 e000 0000 0000 7000 001e 0000 0000     .........p......
   bb5ba:	0000 e000 0000 0000 7000 000e 0000 0000     .........p......
   bb5ca:	0000 e000 0000 0000 7000 000e 0000 0000     .........p......
   bb5da:	0000 e000 0000 0000 7000 000e 0000 0000     .........p......
   bb5ea:	0000 e000 0000 0000 7000 001e c01f f003     .........p......
   bb5fa:	0000 e000 c031 00cc 7800 001e e03d fc07     ....1....x..=...
   bb60a:	0000 e0ff 801f 0078 7c00 001e 70f0 3e02     ......x..|...p.>
   bb61a:	0100 e0e3 8007 0030 7e00 003c 38e0 ef00     ......0..~<..8..
   bb62a:	0300 e081 8007 0060 7300 01f8 78e0 8701     ......`..s...x..
   bb63a:	0300 e080 c003 00c0 7100 01f0 f8ff 8303     .........q......
   bb64a:	0780 e000 e001 00c0 7000 01f0 00e0 8103     .........p......
   bb65a:	07c0 e000 e100 0080 7000 0170 00c0 8103     .........pp.....
   bb66a:	07e0 e000 f100 0080 7000 0178 0ce0 c003     .........px.....
   bb67a:	07f0 e401 7b00 0000 7000 003c 1cf0 e003     .....{...p<.....
   bb68a:	03f8 fc83 3f00 0000 fc00 801f 787c ff01     .....?......|x..
   bb69a:	03bc f0ff 3e00 0000 fe01 800f e01f fe00     .....>..........
   bb6aa:	0006 c0fc 1e00 0000 0000 0000 0000 0000     ................
   bb6ba:	0000 0000 1c00 0000 0000 0000 0000 0000     ................
   bb6ca:	0000 0000 1800 0000 0000 0000 0000 0000     ................
   bb6da:	0000 0000 38ff 0000 0000 0000 0000 0000     .....8..........
   bb6ea:	0000 0100 f08f 0060 0000 0000 0000 0000     ......`.........
   bb6fa:	0000 0200 fc01 0060 0000 0000 0000 0000     ......`.........
   bb70a:	0000 0200 bf01 00c0 0000 0000 0000 0000     ................
   bb71a:	0000 0300 0007 0000 0000 0000 0000 0000     ................
   bb72a:	0000 0000 00fc 0000 0000 0000 0000 0000     ................
	...

000bb832 <_ZL5skull>:
   bb832:	0000 0000 0000 6002 3100 0000 0000 0000     .......`.1......
   bb842:	0002 0000 8021 6002 1c00 001c 0000 0000     ....!..`........
   bb852:	0003 0000 c661 c002 df00 f03f 0000 0000     ....a.....?.....
   bb862:	801b 0000 cf01 eec6 7f00 f8ff 0000 0000     ................
   bb872:	e009 4000 fc01 ff7e 370c f0ff 0000 0000     ...@..~..7......
   bb882:	7800 0000 fd01 9f01 bfbf f0ff 8000 0006     .x..............
   bb892:	0800 4002 ff01 0fc0 febf f801 0000 0000     ...@............
   bb8a2:	2000 0000 f001 0f00 f83f 3800 4000 1820     . ......?..8.@ .
   bb8b2:	0000 0000 c001 0d00 f0ef 1800 8002 0e10     ................
   bb8c2:	0000 0000 0002 0100 e0e3 0c00 0000 0708     ................
   bb8d2:	0801 0000 0040 0100 e0ff 0400 0000 0f0c     ....@...........
   bb8e2:	1f02 0000 0040 0100 c0ff 0400 0000 0700     ....@...........
   bb8f2:	1700 0000 0040 0100 c0ff 0400 0000 0000     ....@...........
   bb902:	2910 0400 0060 0100 c0ff 0600 0100 ccc0     .)..`...........
   bb912:	1824 0600 00a0 0d00 c0ff 0e00 0000 e0bc     $...............
   bb922:	da24 61c0 0080 0f00 c0ff 0e00 0600 e0f7     $..a............
   bb932:	b124 e580 0080 0f00 e0ff 0e00 0100 8003     $...............
   bb942:	6109 0d10 0000 0f00 e0ff 0e00 0080 0001     .a..............
   bb952:	6709 8916 0010 0f00 c2ff 1e00 0080 0000     .g..............
   bb962:	4601 8a44 8013 0f00 c0ff 3f00 0400 0000     .FD........?....
   bb972:	4812 0843 b093 0f00 c0ff 7f00 8f00 00c0     .HC.............
   bb982:	c812 0201 f01b 0f00 e0ff fe00 8701 00c0     ................
   bb992:	ce12 0000 f803 0f00 f8ff fe00 0707 00e0     ................
   bb9a2:	cc12 0044 fc87 1f07 ffff feff 238e 00f0     ..D..........#..
   bb9b2:	d012 0cce ff07 3ffc ffff ffff 019f 00e3     .......?........
   bb9c2:	d012 00cf ff03 77ee ff83 fffe 83bf 00ff     .......w........
   bb9d2:	c112 a0cc ff03 efef ff01 ffff 87ff 20ff     ............... 
   bb9e2:	c332 920c ff03 faff ff00 ffff 2fff f8ff     2............/..
   bb9f2:	8626 3259 ff01 b0ff 7f00 ffff ffff f8ff     &.Y2............
   bba02:	9424 6012 ff01 d0ff 7b00 ffff ffff f8ff     $..`.....{......
   bba12:	2465 e014 bc00 886f 3b00 ffff ffff fcff     e$....o..;......
   bba22:	414c c035 0000 0003 3900 ffff ffff fcff     LA5......9......
   bba32:	c3c8 c07f 0000 4000 3f00 ff9f ffff fcff     .......@.?......
   bba42:	929e 80df 0000 4000 3f00 ffff ffff 7efc     .......@.?.....~
   bba52:	3086 00bd 0000 4800 3f00 ffff ffff 7eff     .0.....H.?.....~
   bba62:	3142 10fc 0000 7800 3f00 ffff ffff feff     B1.....x.?......
   bba72:	2179 00fc 0000 7c00 3f00 dfff ffff feff     y!.....|.?......
   bba82:	820c 20f8 0000 fc0d 7f00 fff7 ffff feff     ... ............
   bba92:	0201 00f0 6000 ff04 7f80 ffe7 ffff feff     .....`..........
   bbaa2:	0303 0070 2000 ff02 7fff 7fc6 ffff feff     ..p.. ..........
   bbab2:	8602 00e0 2000 ff00 ffff ffc7 ffff feff     ..... ..........
   bbac2:	0504 00c0 6000 ff02 ffff ff86 ffff feff     .....`..........
   bbad2:	0d08 00c0 1000 ff03 ffff ff86 ffff feff     ................
   bbae2:	0900 00c0 1000 ff01 ffff ff8d ffff feff     ................
   bbaf2:	1b12 0080 1000 ff01 ffdf ff8d ffff feff     ................
   bbb02:	1320 0080 5002 ff03 ffdf ff8d ffff fef7      ....P..........
   bbb12:	1300 0000 7000 ff01 ffff ff9f ffff fef7     .....p..........
   bbb22:	0310 0000 f004 ff01 ffff ff3f ffff fcf7     ..........?.....
   bbb32:	2700 0000 e10e ff81 ffff ffbf ffff fcff     .'..............
   bbb42:	2600 0000 e809 ffe4 ffff fffb feff f8ff     .&..............
   bbb52:	4600 0000 c811 1ff0 ffff ffff ffff f9ff     .F..............
   bbb62:	0600 0000 8831 43fe 6fff ffff ffff f1ff     ....1..C.o......
   bbb72:	0400 0000 a461 6cfe 7f43 ffff ffff f37f     ....a..lC.......
   bbb82:	0c00 0000 c843 6ef9 ffe7 ffff ffff e33f     ....C..n......?.
   bbb92:	0c00 0000 d087 8ef8 ffff ffff ffff e73f     ..............?.
   bbba2:	0800 0300 820f 0e7e 77ff ffff ffff ce3f     ......~..w....?.
   bbbb2:	0800 0400 001f 4e7e 77e6 ffff ffff cc7f     ......~N.w......
   bbbc2:	0880 0800 001e 1a3d ff64 ffff feff 9d7f     ......=.d.......
   bbbd2:	0002 1000 003c 1b0e ff3e ffff feff 9b7f     ....<...>.......
   bbbe2:	1004 2000 0038 2303 ff26 ffff feff 37ff     ... 8..#&......7
   bbbf2:	1008 4000 0038 1100 ff26 ffff feff 36ff     ...@8...&......6
   bbc02:	0000 8000 0070 0d00 ff93 ffff feff 6cfe     ....p..........l
   bbc12:	0000 0001 00f0 0000 ff94 ffff ffff dcfe     ................
   bbc22:	0000 0002 00e0 0000 ff00 ffff ffff d8fc     ................

000bbc32 <_ZL6cheers>:
	...
   bbdd2:	0000 7e00 cf83 f00f 0fff 1fc0 8081 0000     ...~............
   bbde2:	0000 e700 8681 3006 0763 3be0 c081 0000     .......0c..;....
   bbdf2:	0000 c101 fe81 5006 0665 3c70 c0c1 0000     .......Pe.p<....
   bbe02:	0000 8101 fe81 c007 067c 1f30 c0c1 0000     ........|.0.....
   bbe12:	0000 8001 86c1 4006 066c 1f30 c0c1 0000     .......@l.0.....
   bbe22:	0000 8001 8681 0006 0660 4130 80c1 0000     ........`.0A....
   bbe32:	0000 8001 8601 0006 0760 40f0 80e1 0000     ........`..@....
   bbe42:	0000 c001 8601 0006 0760 60e0 8060 0000     ........`..``...
   bbe52:	0000 e100 8681 1006 0661 60e0 80e0 0000     ........a..`....
   bbe62:	0000 ff00 8681 3807 0663 7b78 80c1 0000     .......8c.x{....
   bbe72:	0000 3f00 cf03 f00f 0fff 7f38 8081 0000     ...?......8.....
	...

000bc032 <_ZL6gentle>:
	...
   bc0d2:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bc0e2:	0e00 0000 0000 0000 0000 0000 000e 0000     ................
   bc0f2:	1600 0000 0000 0000 0000 0000 0006 0000     ................
   bc102:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bc112:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bc122:	0600 0000 0000 0000 0000 0800 0006 0000     ................
   bc132:	0600 0000 0000 0000 0000 1800 0006 0000     ................
   bc142:	0600 0000 0000 0002 0000 1800 0006 0000     ................
   bc152:	0700 0fe0 0080 000f 07f8 7cc0 0306 00e0     ...........|....
   bc162:	0600 1830 00c0 811f 0e86 18e0 0606 0018     ..0.............
   bc172:	0600 3f18 00c0 8338 06fe 1860 0f06 00f8     ...?..8...`.....
   bc182:	0600 3018 0000 8330 0600 1870 0c06 0000     ...0..0...p.....
   bc192:	0600 3018 0000 8321 0602 1830 0c06 0008     ...0..!...0.....
   bc1a2:	1f00 1838 0060 8117 0686 1e38 0606 0018     ..8.`.....8.....
   bc1b2:	0f00 0ff0 0080 000f 0efc 1a3c 030f 00f0     ..........<.....
   bc1c2:	0200 0000 0000 0007 0000 0000 0000 0000     ................
   bc1d2:	0000 0000 8000 0003 0000 0000 0000 0000     ................
   bc1e2:	0000 0000 0001 0006 0000 0000 0000 0000     ................
   bc1f2:	0000 0000 c000 003c 0000 0000 0000 0000     ......<.........
   bc202:	0000 0000 7f00 00f0 0000 0000 0000 0000     ................
   bc212:	0000 0000 0f00 0000 0000 0000 0000 0000     ................
	...
   bc276:	0000 2000 0000 0000 0000 0000 0000 0000     ... ............
   bc286:	0000 e000 0000 0000 0000 0000 0000 0000     ................
   bc296:	0000 6000 0000 0000 0000 0000 0000 0000     ...`............
   bc2a6:	0000 6000 0000 0000 0000 0000 0000 0000     ...`............
   bc2b6:	0003 6080 0000 0000 0000 0000 0000 0000     ...`............
   bc2c6:	0007 6080 0000 0000 0000 0000 0000 0000     ...`............
   bc2d6:	8100 6080 0000 0000 0000 0000 0000 f33d     ...`..........=.
   bc2e6:	8787 7cc0 0000 703e f801 0000 0000 e20c     ...|..>p........
   bc2f6:	8101 6e80 0000 b873 0c03 0000 0000 620c     ...n..s........b
   bc306:	8101 6680 0000 9c33 fc07 0000 0000 e406     ...f..3.........
   bc316:	8101 6780 0000 8c31 0006 0000 0000 b407     ...g..1.........
   bc326:	8101 6380 0000 8e31 0006 0000 0000 3803     ...c..1........8
   bc336:	8101 63a0 0080 c731 0603 0000 0000 1003     ...c..1.........
   bc346:	c103 e3e0 00c0 e779 f8c1 0000 0000 0000     ......y.........
	...

000bc432 <_ZL6inTime>:
	...
   bc586:	2000 0010 0000 0000 0000 0000 0000 0000     . ..............
   bc596:	7f00 00f8 0000 0000 0000 0000 0000 0000     ................
   bc5a6:	6300 0018 0000 0000 0000 0000 0000 0000     .c..............
   bc5b6:	4300 0008 0000 0000 0000 0000 0000 0000     .C..............
   bc5c6:	0300 0000 0000 0000 0000 0000 c000 0000     ................
   bc5d6:	0300 c000 0000 0000 0000 0000 c001 0000     ................
   bc5e6:	0300 c001 0000 0000 0000 0000 2000 0000     ............. ..
   bc5f6:	0300 2000 0000 0000 0000 0000 e000 003e     ... ..........>.
   bc606:	0300 e000 f03e f801 0000 0000 6000 0077     ....>........`w.
   bc616:	0300 6000 b8f7 1c03 0000 0000 6000 0033     ...`.........`3.
   bc626:	0300 6000 1833 fc07 0000 0000 6000 8033     ...`3........`3.
   bc636:	0300 6000 9c33 0006 0000 0000 6000 8031     ...`3........`1.
   bc646:	0300 6000 8e31 0406 0000 0000 6000 c031     ...`1........`1.
   bc656:	0300 6000 c731 0c03 060c 0003 f000 e079     ...`1.........y.
   bc666:	0700 f0c0 ef79 f881 060c 0003 0000 0000     ....y...........
	...

000bc832 <_ZL8dNdTitle>:
	...
   bc8f2:	6000 0000 0000 0060 0000 3000 0000 0000     .`....`....0....
   bc902:	7800 0000 0000 0078 f00f 3c00 0000 0000     .x....x....<....
   bc912:	7e00 0000 0000 007e f00f 3f00 0000 0000     .~....~....?....
   bc922:	7f00 0080 0000 807f f00f 3f00 00c0 0000     ...........?....
   bc932:	7f00 00e0 0000 e07f f00f 3f00 00f0 0000     ...........?....
   bc942:	7f00 00f0 0000 f07f f00f 3f00 00f8 0000     ...........?....
   bc952:	7f00 00f8 0000 f87f f00f 3f00 00fc 0000     ...........?....
   bc962:	7f00 00fe 0000 fe7f f00f 3f00 00ff 0000     ...........?....
   bc972:	7f00 00ff 0000 ff7f f00f 3f00 80ff 0000     ...........?....
   bc982:	7f00 80ff 0000 ff7f f08f 3f00 c0ff 0000     ...........?....
   bc992:	7f00 c0ff 0000 ff7f f0cf 3f00 e0ff 0000     ...........?....
   bc9a2:	7f00 e0ff 0000 ff7f f0cf 3f00 f0ff 0000     ...........?....
   bc9b2:	7f00 e0ff 0000 ff7f f0ef 3f00 f0ff 0000     ...........?....
   bc9c2:	7f00 f0ff 0000 ff7f f0ff 3f00 f8ff 0000     ...........?....
   bc9d2:	7f00 f89f 0000 bf7f f0ff 3f00 fccf 0000     ...........?....
   bc9e2:	7f00 fc8f 0000 9f7f f0ff 3f00 fec7 0000     ...........?....
   bc9f2:	7f00 fc8f 0000 8f7f f0ff 3f00 fec7 0000     ...........?....
   bca02:	7f00 fe87 0000 877f f0ff 3f00 ffc3 0000     ...........?....
   bca12:	7f00 fe83 0000 837f f0ff 3f00 ffc1 0000     ...........?....
   bca22:	7f00 ff81 0000 817f f0ff 3f00 ffc0 0080     ...........?....
   bca32:	7f00 ff80 0080 817f f0ff 3f00 7fc0 00c0     ...........?....
   bca42:	7f00 ff80 0080 807f f0ff 3f00 7fc0 00c0     ...........?....
   bca52:	7f00 7f80 0080 807f f0ff 3f00 3fc0 00c0     ...........?.?..
   bca62:	7f00 7f80 00c0 807f f07f 3f00 3fc0 00e0     ...........?.?..
   bca72:	7f00 3f80 00c0 807f f07f 3f00 1fc0 00e0     ...?.......?....
   bca82:	7f00 3f80 00e0 807f f03f 3f00 1fc0 00f0     ...?....?..?....
   bca92:	7f00 ffff 00e0 807f f03f 3f00 ffff 00f0     ........?..?....
   bcaa2:	7f00 ffff 00e0 807f f03f 3f00 ffff 00f0     ........?..?....
   bcab2:	7f00 ffff 00e0 807f f01f 3f00 ffff 00f0     ...........?....
   bcac2:	7f00 ffff 00f0 807f f01f 3f00 ffff 00f8     ...........?....
   bcad2:	7f00 ffff 00f0 807f f01f 3f00 ffff 00f8     ...........?....
   bcae2:	7f00 ffff 00f0 807f f00f 3f00 ffff 00f8     ...........?....
   bcaf2:	7f00 ffff 00f0 807f f00f 3f00 ffff 00f8     ...........?....
   bcb02:	7f00 ffff 00f0 807f f00f 3f00 ffff 00f8     ...........?....
	...

000bcc32 <_ZL8goodIdea>:
	...
   bccba:	0000 0700 0000 0000 0000 0000 0000 0000     ................
   bccca:	0000 1f00 0000 0000 0000 0000 0000 0000     ................
   bccda:	0000 1300 0000 0000 0000 0000 0000 0000     ................
   bccea:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bccfa:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcd0a:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcd1a:	0000 0300 0000 0000 0000 0000 0800 0000     ................
   bcd2a:	0000 0300 0000 0000 0000 0000 1800 0000     ................
   bcd3a:	0000 0300 0000 0000 0000 0000 3c00 3e00     .............<.>
   bcd4a:	7e00 ff00 0000 0000 0000 0000 fe00 fb00     .~..............
   bcd5a:	fb00 cf01 0000 0000 0000 0000 e300 e101     ................
   bcd6a:	e101 8703 0000 0000 0000 0000 c301 8301     ................
   bcd7a:	8303 0303 0000 0000 0000 0000 8301 0303     ................
   bcd8a:	0703 0307 0000 0000 0000 0000 8700 0703     ................
   bcd9a:	0e03 0303 0000 0000 0000 0000 8e00 1e02     ................
   bcdaa:	1e02 0703 00c0 0000 0000 0000 7e00 fc03     .............~..
   bcdba:	fc03 df03 0080 0000 0000 0000 1a00 f001     ................
   bcdca:	f001 f201 0000 0000 0000 0000 1e00 0000     ................
	...
   bcde2:	0000 1800 0400 0000 0000 0000 0000 0000     ................
   bcdf2:	0000 1000 1800 0000 0000 0000 0000 0000     ................
   bce02:	0000 0c00 f000 0000 0000 0000 0000 0000     ................
   bce12:	0000 0700 e0ff 0000 0000 0000 0000 0000     ................
   bce22:	0000 0100 00ff 0000 0000 0000 0000 0000     ................
	...
   bce86:	0000 0100 0000 0000 0000 0000 0000 0000     ................
   bce96:	0000 0700 0000 0000 0000 0000 0000 0000     ................
   bcea6:	0000 0f00 0000 0000 0000 0000 0000 0000     ................
   bceb6:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcec6:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bced6:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcee6:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcef6:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bcf06:	0e00 0300 0000 0000 0000 0000 0000 0000     ................
   bcf16:	0c00 0300 0000 0000 0000 0000 0000 0000     ................
   bcf26:	0300 7f00 1f00 7800 0000 0000 0000 0000     .......x........
   bcf36:	0f00 c700 7300 fe80 0000 0000 0000 0000     .....s..........
   bcf46:	0700 8301 e100 1fc0 0000 0000 0000 0000     ................
   bcf56:	0300 8303 c100 23c0 0000 0000 0000 0000     .......#........
   bcf66:	0300 8303 ff01 61c0 0080 0000 0000 0000     .......a........
   bcf76:	0300 8303 c001 6000 00c0 0000 0000 0000     .......`........
   bcf86:	0300 8703 c0e0 7040 00e0 0000 0000 0000     ......@p........
   bcf96:	0700 cf01 f0c0 7fc0 00f0 0000 0000 0000     ................
   bcfa6:	0f00 fb80 3f00 3f00 0018 0000 0000 0000     .....?.?........
	...

000bd032 <_ZL8goodLuck>:
	...
   bd186:	0000 3800 0100 0080 0000 0010 3f00 00a0     ...8.........?..
   bd196:	0000 7800 0300 0080 0000 0070 e000 00e0     ...x......p.....
   bd1a6:	0000 1800 0100 0080 0000 0030 8000 0060     ..........0...`.
   bd1b6:	0000 1800 0100 0080 0000 0030 8001 0030     ..........0...0.
   bd1c6:	0000 1800 0100 0080 0000 0030 0003 0010     ..........0.....
   bd1d6:	0000 1800 0100 0080 0000 0030 0003 0000     ..........0.....
   bd1e6:	0000 1800 0100 0080 0000 0030 0003 0000     ..........0.....
   bd1f6:	0000 1800 0100 0080 0000 0030 8003 0778     ..........0...x.
   bd206:	3ec0 f803 0100 8c80 f003 8037 8003 1f30     .>........7...0.
   bd216:	7920 3806 0100 9c83 1006 0036 8001 1830      y.8......6...0.
   bd226:	e120 180c 0100 8c81 080c 003e c001 3030      .........>...00
   bd236:	8361 180c 0100 8c81 000c 003b e000 2070     a.........;...p 
   bd246:	87c1 180c 0100 8c81 080c 8033 7900 23e0     ..........3..y.#
   bd256:	1ec1 3e0e 0100 8f81 1806 8031 3f00 1f80     ...>......1..?..
   bd266:	f800 d807 0300 fcc0 f003 c039 0000 0000     ..........9.....
	...

000bd432 <_ZL8heroTime>:
	...
   bd4c6:	0e00 0078 0000 fc03 0000 0000 0000 e107     ..x.............
   bd4d6:	1ff8 0ffc 00f0 ff0f 0000 0000 0000 8003     ................
   bd4e6:	0ef0 0f0e 00fc 831f 0080 0000 0000 8003     ................
   bd4f6:	0e70 0316 008f 013e 0080 0000 0000 ff03     p.....>.........
   bd506:	0ff0 03f0 0087 017c 00c0 0000 0000 ff03     ......|.........
   bd516:	0ff0 03f0 8083 0078 00c0 0000 0000 8003     ......x.........
   bd526:	0e70 0330 8083 00f0 00e0 0000 0000 8003     p.0.............
   bd536:	0e70 0330 8083 00e0 00e0 0000 0000 8003     p.0.............
   bd546:	0e70 0300 8083 01e0 00e0 0000 0000 8003     p...............
   bd556:	0e70 0300 8083 01e0 00c0 0000 0000 8003     p...............
   bd566:	0e70 0300 80e7 03e0 00c0 0000 0000 8003     p...............
   bd576:	0e70 0300 00ff 03e0 00c0 0000 0000 8003     p...............
   bd586:	0e70 0300 009e 07e0 0080 0000 0000 8003     p...............
   bd596:	0e70 0302 008e 1f60 0000 0000 0000 8003     p.....`.........
   bd5a6:	0e70 0306 008f 3e38 0000 0000 0000 c003     p.....8>........
   bd5b6:	1ff0 03fe e087 fc1f 0000 0000 0000 e107     ................
   bd5c6:	1ff8 07fc e0e3 f007 0000 0000 0000 0000     ................
	...
   bd6a2:	0000 3f00 07fe 7ce0 c003 e039 0000 0000     ...?...|..9.....
   bd6b2:	0000 3f00 03ff 7ec0 c007 f87f 0000 0000     ...?...~........
   bd6c2:	0000 6100 01c3 1ec0 8007 383c 0000 0000     ...a......<8....
   bd6d2:	0000 4100 01c1 1fc0 800f 581c 0000 0000     ...A.......X....
   bd6e2:	0000 0100 01c0 17c0 800b c01f 0000 0000     ................
   bd6f2:	0000 0100 01c0 17c0 809b c01f 0000 0000     ................
   bd702:	0000 0100 01c0 1bc0 80f3 c01c 0000 0000     ................
   bd712:	0000 0100 01c0 19c0 80f3 401c 0000 0000     ...........@....
   bd722:	0000 0100 01c0 19c0 80e3 001c 0000 0000     ................
   bd732:	0000 0100 01c0 18c0 80e3 001c 0000 0000     ................
   bd742:	0000 0100 01c0 18c0 80c3 001c 0000 0000     ................
   bd752:	0000 0100 01c0 10c0 8003 001c 0000 0000     ................
   bd762:	0000 0100 01c0 30c0 c001 001c 0000 0000     .......0........
   bd772:	0000 0100 01c0 30c0 c001 081c 0000 0000     .......0........
   bd782:	0000 0100 01c0 30c0 c001 1c1c 0000 0000     .......0........
   bd792:	0000 0100 03e0 30c0 e003 f87f 0000 0000     .......0........
   bd7a2:	0000 0300 07f0 78e0 f007 f87f 0000 0000     .......x........
	...

000bd832 <_ZL8hueHubIP>:
   bd832:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000bd83e <_ZL9killUmAll>:
	...
   bd9ce:	0000 0200 0002 0000 0000 0000 2000 0040     ............. @.
   bd9de:	0000 0600 000e 0000 0000 0000 e100 00c0     ................
   bd9ee:	f300 0ec0 001e 0000 0000 0600 e301 80c1     ................
   bd9fe:	6700 0600 0006 0000 0000 0600 6000 c0c1     .g...........`..
   bda0e:	6c00 0600 0006 0000 0000 0f00 6000 c0c1     .l...........`..
   bda1e:	7c00 0603 0006 0000 0000 0f00 6000 c0c1     .|...........`..
   bda2e:	6c00 0607 0006 0000 0000 0b00 6080 c0c1     .l...........`..
   bda3e:	6e00 8603 0006 c10e 00f7 1900 60f0 80c1     .n...........`..
   bda4e:	6600 8603 0006 c11d 80ff 1300 60c0 80c1     .f...........`..
   bda5e:	6700 8601 0006 c00c c0dd 3700 60c0 80c0     .g.........7.`..
   bda6e:	6300 8601 0006 c00c c0dc 3e00 60e0 80c0     .c.........>.`..
   bda7e:	6300 8681 0006 f00e e0cc 6000 60e0 80c1     .c.........`.`..
   bda8e:	fb00 8fe3 000f e107 f8ef f100 f1f0 80e1     ................
	...

000bdc3e <_ZL9messenger>:
	...
   bdd6e:	0000 0300 0080 0000 0001 0000 0000 0000     ................
   bdd7e:	0000 0100 0080 0006 0003 0000 0000 0000     ................
   bdd8e:	0000 0100 0080 0002 0003 0000 0000 0000     ................
   bdd9e:	0000 0100 0080 1004 0003 8000 0000 0000     ................
   bddae:	0000 0f00 8e87 3000 c303 8381 0080 0000     .......0........
   bddbe:	0000 1900 8f8c 3000 6303 86c1 00c0 0000     .......0.c......
   bddce:	0000 1900 8d89 3000 6203 8f61 00c0 0000     .......0.ba.....
   bddde:	0000 1900 8d8b 3880 2303 c471 0000 0000     .......8.#q.....
   bddee:	0000 0f00 1d8f 18c0 3303 c7d0 00c0 0000     .........3......
	...
   bde5e:	0000 0020 0000 0000 0000 0000 0000 0000     .. .............
   bde6e:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bde7e:	0000 0060 0000 0000 0000 0000 0000 0070     ..`...........p.
   bde8e:	0c00 0060 0000 0000 0000 0100 0100 0080     ..`.............
   bde9e:	1c00 1c78 7600 8007 c370 8387 8687 0000     ..x..v..p.......
   bdeae:	0c00 366c db00 800c 46d3 c6c6 864c 0000     ..l6.....F..L...
   bdebe:	0c00 7e6c 6900 c10f 0f83 c4c6 c64f 0000     ..l~.i......O...
   bdece:	0e00 2064 4d00 058c 0406 4506 06cc 0000     ..d .M.....E....
   bdede:	0e00 3e66 ef00 86c7 071c 63c7 8ec7 0000     ..f>.......c....
	...
   bdef6:	0000 0101 0080 0000 0000 0000 0000 0000     ................
   bdf06:	0000 0301 0000 0000 0000 0000 0000 0000     ................
   bdf16:	0000 fe00 0000 0000 0000 0000 0000 0000     ................
	...

000be03e <_ZL9mushrooms>:
   be03e:	0000 0000 0f00 80ff 0000 0000 0000 0000     ................
   be04e:	0000 0000 7f00 f8ff 0000 0000 0000 0000     ................
   be05e:	0000 0000 ff03 ffff 0000 0000 0000 0000     ................
   be06e:	0000 0000 ff0f ffff 00c0 0000 0000 0000     ................
   be07e:	0000 0000 ee3f ffff 00f0 0000 0000 0000     ....?...........
   be08e:	0000 0000 00f0 ff3f 00fc 0000 0000 0000     ......?.........
   be09e:	0000 0100 00e0 ff7f 00ff 0000 0000 0000     ................
   be0ae:	0000 0300 00c0 ff3f c0ff 0000 0000 0000     ......?.........
   be0be:	0000 0700 0000 ff07 f0ff 0000 0000 0000     ................
   be0ce:	0000 0e00 0000 ff0f f8ff 0000 0000 0000     ................
   be0de:	0000 1e00 0000 ff1f fcff 0000 0000 0000     ................
   be0ee:	0000 1c00 0000 ff8f feff 0000 0000 0000     ................
   be0fe:	0000 3c00 0000 ff9f ffff 0000 0000 0000     ...<............
   be10e:	0000 7e00 0100 ffff ffff 0080 0000 0000     ...~............
   be11e:	0000 7e00 ff00 ffff ffff fcff 0000 0000     ...~............
   be12e:	0000 ff00 ffff 00f8 0700 ffff 0000 0000     ................
   be13e:	0000 ff00 00fe 0000 0100 ffff 00c0 0000     ................
   be14e:	0000 ff01 0080 0000 0800 ffff 00e0 0000     ................
   be15e:	0000 f801 0000 0000 0300 3fff 00f0 0000     ...........?....
   be16e:	0000 e001 0f00 c0ff 1f00 0ffe 00f0 0000     ................
   be17e:	0000 b001 3f00 ffff ff04 8ffd 00f8 0000     .....?..........
   be18e:	0000 e201 fe01 ff5f ff83 07fc 00fc 0000     ......_.........
   be19e:	0000 f000 ed0b ff9f ffc3 ffff 00fc 0000     ................
   be1ae:	0000 3b00 e10f fba7 ff07 fbff 00fe 0000     ...;............
   be1be:	0000 0000 c227 e011 ff0f fbff 00ff 0000     ....'...........
   be1ce:	0000 0000 0000 f013 ff0f ffff 00ff 0000     ................
   be1de:	0000 0000 4400 f012 ff1f ffff 80ff 0000     .....D..........
   be1ee:	0000 0000 c000 7800 ff1f ffff 80ff 0000     .......x........
   be1fe:	0000 0000 0000 7802 ff1f 0fe0 80ff 0000     .......x........
   be20e:	0000 0000 0000 fc00 801f 0000 800f 0000     ................
   be21e:	0000 0000 0000 fc00 0018 8037 8009 0000     ..........7.....
   be22e:	0000 0000 0001 be00 0118 f0ef 8000 0000     ................
   be23e:	0000 0000 0002 5c00 070c fccd 8001 0000     .......\........
   be24e:	0000 0000 0000 0600 0703 ffc0 008f 0000     ................
   be25e:	0000 0000 0000 6700 e201 7b04 00e0 0000     .......g...{....
   be26e:	0000 0000 0006 6d00 0200 7c04 0000 0000     .......m...|....
   be27e:	0000 0000 0002 6502 0480 fe08 0000 0000     .......e........
   be28e:	0000 0000 0008 0700 0c00 1f00 0000 0000     ................
   be29e:	0000 0000 000c b700 1080 0f00 0080 0000     ................
   be2ae:	0000 0000 0008 9700 2080 2300 0080 0000     ......... .#....
   be2be:	0000 0000 0018 6f03 6080 3630 00c0 0000     .......o.`06....
   be2ce:	0000 0000 1818 3b00 40c0 2800 00c0 0000     .......;.@.(....
   be2de:	0000 0000 1c08 9100 80c0 4b00 0060 0000     ...........K`...
   be2ee:	0000 0000 1c00 2d41 8080 2700 00e0 0000     ......A-...'....
   be2fe:	0000 0000 300c 6dc0 00c1 0e00 00e0 0000     .....0.m........
   be30e:	0000 0000 3108 cf80 0041 b900 0020 0000     .....1..A... ...
   be31e:	0000 0000 3100 ff80 00c1 0100 00e0 0000     .....1..........
   be32e:	0000 0000 1900 fd81 0081 0400 00e0 0000     ................
   be33e:	0000 0000 0708 fff1 00c0 0600 0000 0000     ................
   be34e:	0000 0000 070e eff2 00c0 4300 00e0 0000     ...........C....
   be35e:	0000 0000 0f07 8fc1 4080 4d00 00c0 0000     .........@.M....
   be36e:	0000 0000 2e07 7f01 0080 8dc0 00c0 0000     ................
   be37e:	0000 0000 6c03 ff30 0cc1 8fc0 00c0 0000     .....l0.........
   be38e:	0000 0000 e7cb bff3 0de3 3f80 00c0 0000     ...........?....
   be39e:	0000 0100 e7ff ff0f 9ffb ff11 00c0 0000     ................
   be3ae:	0000 0100 e7ff 7f0f d3ff ff03 00c0 0000     ................
   be3be:	0000 0000 dfaf ff8f eff3 ff3f 00c0 0000     ..........?.....
   be3ce:	0000 0000 7399 ff3f 6fe1 ffdf 0080 0000     .....s?..o......
   be3de:	0000 0100 e7e2 ffbf f3c3 fcdf 0000 0000     ................
   be3ee:	0000 0000 de0e ff7f 2181 ecb7 0000 0000     .........!......
   be3fe:	0000 0000 9e0d f87f 0000 e000 0000 0000     ................
   be40e:	0000 0000 3d01 800d 0000 6002 0000 0000     .....=.....`....
   be41e:	0000 0000 fc00 0000 0000 0000 0000 0000     ................
   be42e:	0000 0000 ec00 0000 0000 0000 0000 0000     ................
	...

000be440 <CSWTCH.88>:
   be440:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   be450:	0050 0000                                   P...

000be454 <_ZL4font>:
   be454:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   be464:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   be474:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   be484:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   be494:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   be4a4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   be4b4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   be4c4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   be4d4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   be4e4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   be4f4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   be504:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   be514:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   be524:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   be534:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   be544:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   be554:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   be564:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   be574:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   be584:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   be594:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   be5a4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   be5b4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   be5c4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   be5d4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   be5e4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   be5f4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   be604:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   be614:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   be624:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   be634:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   be644:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   be654:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   be664:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   be674:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   be684:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   be694:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   be6a4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   be6b4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   be6c4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   be6d4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   be6e4:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   be6f4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   be704:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   be714:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   be724:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   be734:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   be744:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   be754:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   be764:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   be774:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   be784:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   be794:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   be7a4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   be7b4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   be7c4:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   be7d4:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   be7e4:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   be7f4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   be804:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   be814:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   be824:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   be834:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   be844:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   be854:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   be864:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   be874:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   be884:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   be894:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   be8a4:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   be8b4:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   be8c4:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   be8d4:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   be8e4:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   be8f4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   be904:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   be914:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   be924:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   be934:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   be944:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000be950 <_ZTV12Adafruit_GFX>:
	...
   be960:	5889 000b 6999 000b 40a1 000b 550d 000b     .X...i...@...U..
   be970:	5633 000b 564f 000b 55cb 000b 5669 000b     3V..OV...U..iV..
   be980:	569f 000b 56bb 000b                         .V...V..

000be988 <_ZTV16Adafruit_SSD1306>:
	...
   be990:	5c15 000b 5ca5 000b 5889 000b 6999 000b     .\...\...X...i..
   be9a0:	5c19 000b 550d 000b 5aa1 000b 5931 000b     .\...U...Z..1Y..
   be9b0:	55cb 000b 5669 000b 569f 000b 56bb 000b     .U..iV...V...V..

000be9c0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000be9c8 <_ZTVN5spark13EthernetClassE>:
	...
   be9d0:	662f 000b 6625 000b 661b 000b 6611 000b     /f..%f...f...f..
   be9e0:	6605 000b 65f9 000b 6875 000b 687d 000b     .f...e..uh..}h..
   be9f0:	65ed 000b 65e5 000b 65db 000b 65d1 000b     .e...e...e...e..
   bea00:	68ad 000b                                   .h..

000bea04 <_ZTV7TwoWire>:
	...
   bea0c:	664d 000b 6697 000b 666f 000b 664f 000b     Mf...f..of..Of..
   bea1c:	6677 000b 667f 000b 6687 000b 668f 000b     wf...f...f...f..

000bea2c <_ZTV9IPAddress>:
	...
   bea34:	6719 000b 6709 000b 670b 000b 7061 0070     .g...g...g..app.

000bea44 <_ZTVN5spark12NetworkClassE>:
	...
   bea4c:	6835 000b 683f 000b 6849 000b 6853 000b     5h..?h..Ih..Sh..
   bea5c:	685d 000b 6869 000b 6875 000b 687d 000b     ]h..ih..uh..}h..
   bea6c:	6885 000b 6891 000b 6899 000b 68a3 000b     .h...h...h...h..
   bea7c:	68ad 000b                                   .h..

000bea80 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bea80:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   bea90:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000beaa0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   beaa8:	6f49 000b 6f6d 000b 7457 000b 6f7b 000b     Io..mo..Wt..{o..
   beab8:	6f4d 000b                                   Mo..

000beabc <_ZTV9TCPClient>:
	...
   beac4:	410d 000b 4141 000b 6ec5 000b 6edf 000b     .A..AA...n...n..
   bead4:	72ed 000b 6f09 000b 7163 000b 6f3d 000b     .r...o..cq..=o..
   beae4:	71f5 000b 7035 000b 7191 000b 73a1 000b     .q..5p...q...s..
   beaf4:	7131 000b 6f3f 000b 6ef1 000b 6f81 000b     1q..?o...n...o..
   beb04:	7015 000b 5925 252d 2d6d 6425 2554 3a48     .p..%Y-%m-%dT%H:
   beb14:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000beb24 <_ZTV11USARTSerial>:
	...
   beb2c:	7471 000b 74dd 000b 74b5 000b 6999 000b     qt...t...t...i..
   beb3c:	7485 000b 74a1 000b 7493 000b 74af 000b     .t...t...t...t..
   beb4c:	7473 000b 7477 000b                         st..wt..

000beb54 <_ZTV9USBSerial>:
	...
   beb5c:	751b 000b 7583 000b 7559 000b 6999 000b     .u...u..Yu...i..
   beb6c:	754b 000b 751d 000b 752d 000b 757d 000b     Ku...u..-u..}u..
   beb7c:	753d 000b 7515 000b                         =u...u..

000beb84 <_ZTVN5spark9WiFiClassE>:
	...
   beb8c:	7683 000b 7679 000b 766f 000b 7625 000b     .v..yv..ov..%v..
   beb9c:	7663 000b 7657 000b 6875 000b 687d 000b     cv..Wv..uh..}h..
   bebac:	764b 000b 7643 000b 7639 000b 762f 000b     Kv..Cv..9v../v..
   bebbc:	68ad 000b                                   .h..

000bebc0 <_ZSt7nothrow>:
	...

000bebc1 <_ZTSSt19_Sp_make_shared_tag>:
   bebc1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bebd1:	6572 5f64 6174 0067 0000                     red_tag....

000bebdc <_ZTISt19_Sp_make_shared_tag>:
   bebdc:	ec1c 000b ebc1 000b                         ........

000bebe4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bebe4:	ec7c 000b ebf0 000b eca0 000b               |...........

000bebf0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bebf0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bec00:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bec10:	0045 0000                                   E...

000bec14 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bec14:	0000 0000 ebe4 000b 7ad5 000b 7ae9 000b     .........z...z..
   bec24:	7c7d 000b 7c7d 000b 7b53 000b 7a95 000b     }|..}|..S{...z..
   bec34:	7b3b 000b 7afd 000b 7ac7 000b               ;{...z...z..

000bec40 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bec40:	ec7c 000b ec4c 000b ebe4 000b               |...L.......

000bec4c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bec4c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bec5c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bec6c:	666e 456f 0000 0000                         nfoE....

000bec74 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bec74:	0000 0000 ec40 000b 7b7d 000b 7b91 000b     ....@...}{...{..
   bec84:	7c7d 000b 7c7d 000b 7b53 000b 7a95 000b     }|..}|..S{...z..
   bec94:	7c51 000b 7bdd 000b 7ba5 000b               Q|...{...{..

000beca0 <_ZTISt9type_info>:
   beca0:	ec1c 000b eca8 000b                         ........

000beca8 <_ZTSSt9type_info>:
   beca8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   becb8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   becc8:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   becd8:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bece8:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   becf8:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bed08:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bed18:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bed25 <link_const_variable_data_end>:
   bed25:	00          	.byte	0x00
	...

000bed28 <link_constructors_location>:
   bed28:	000b504d 	.word	0x000b504d
   bed2c:	000b54fd 	.word	0x000b54fd
   bed30:	000b65c1 	.word	0x000b65c1
   bed34:	000b6639 	.word	0x000b6639
   bed38:	000b6825 	.word	0x000b6825
   bed3c:	000b6985 	.word	0x000b6985
   bed40:	000b6ad9 	.word	0x000b6ad9
   bed44:	000b6ea1 	.word	0x000b6ea1
   bed48:	000b745d 	.word	0x000b745d
   bed4c:	000b768d 	.word	0x000b768d
