
/Users/kdneeley/Documents/IoT/Smart-Room-Controller/smart-room-controller-DnD-20-sided-die-KD-Neeley/target/4.0.2/argon/smart-room-controller-DnD-20-sided-die-KD-Neeley.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ce90  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c0eb0  000c0eb0  00010eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c0ed4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000498  2003e138  000c0ed8  0002e138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000220  2003e5d0  2003e5d0  0003e5d0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000c1370  000c1370  00031370  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c1398  000c1398  00031398  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012e1b4  00000000  00000000  0003139c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014dd6  00000000  00000000  0015f550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003eb1f  00000000  00000000  00174326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003118  00000000  00000000  001b2e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ac60  00000000  00000000  001b5f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cefc  00000000  00000000  001c0bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00048f29  00000000  00000000  001fdab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00137cdd  00000000  00000000  002469e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008f04  00000000  00000000  0037e6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 f885 	bl	bb140 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 f88d 	bl	bb15c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e138 	.word	0x2003e138
   b404c:	000c0ed8 	.word	0x000c0ed8
   b4050:	2003e5d0 	.word	0x2003e5d0
   b4054:	2003e5d0 	.word	0x2003e5d0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 f8d3 	bl	b920c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c0e88 	.word	0x000c0e88
   b4080:	000c0eb0 	.word	0x000c0eb0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba5a 	b.w	b453c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fad7 	bl	b463c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 b873 	b.w	b917c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bf3d 	b.w	b7f14 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bf3b 	b.w	b7f14 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 bf41 	b.w	b7f24 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f003 fe86 	bl	b7dbc <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b7a2d 	.word	0x000b7a2d
   b40b8:	000bb358 	.word	0x000bb358

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40cc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ce:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40d0:	4606      	mov	r6, r0
   b40d2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d4:	da0b      	bge.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d6:	2a0a      	cmp	r2, #10
   b40d8:	d109      	bne.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40da:	212d      	movs	r1, #45	; 0x2d
   b40dc:	f004 f998 	bl	b8410 <_ZN5Print5printEc>
            val = -n;
   b40e0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40e2:	b2ea      	uxtb	r2, r5
   b40e4:	4630      	mov	r0, r6
    }
}
   b40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40ea:	f004 b9aa 	b.w	b8442 <_ZN5Print11printNumberEmh>
            val = n;
   b40ee:	4621      	mov	r1, r4
   b40f0:	e7f7      	b.n	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40f2 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b40f2:	6803      	ldr	r3, [r0, #0]
   b40f4:	b2c9      	uxtb	r1, r1
   b40f6:	689b      	ldr	r3, [r3, #8]
   b40f8:	4718      	bx	r3

000b40fa <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40fa:	b40e      	push	{r1, r2, r3}
   b40fc:	b503      	push	{r0, r1, lr}
   b40fe:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4100:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4102:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4106:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4108:	f004 f9b9 	bl	b847e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b410c:	b002      	add	sp, #8
   b410e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4112:	b003      	add	sp, #12
   b4114:	4770      	bx	lr
	...

000b4118 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4118:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b411a:	6984      	ldr	r4, [r0, #24]
   b411c:	4b0a      	ldr	r3, [pc, #40]	; (b4148 <_ZN9TCPClientD1Ev+0x30>)
   b411e:	6003      	str	r3, [r0, #0]
   b4120:	4605      	mov	r5, r0
   b4122:	b17c      	cbz	r4, b4144 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4124:	6863      	ldr	r3, [r4, #4]
   b4126:	3b01      	subs	r3, #1
   b4128:	6063      	str	r3, [r4, #4]
   b412a:	b95b      	cbnz	r3, b4144 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b412c:	6823      	ldr	r3, [r4, #0]
   b412e:	4620      	mov	r0, r4
   b4130:	689b      	ldr	r3, [r3, #8]
   b4132:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4134:	68a3      	ldr	r3, [r4, #8]
   b4136:	3b01      	subs	r3, #1
   b4138:	60a3      	str	r3, [r4, #8]
   b413a:	b91b      	cbnz	r3, b4144 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b413c:	6823      	ldr	r3, [r4, #0]
   b413e:	4620      	mov	r0, r4
   b4140:	68db      	ldr	r3, [r3, #12]
   b4142:	4798      	blx	r3
   b4144:	4628      	mov	r0, r5
   b4146:	bd38      	pop	{r3, r4, r5, pc}
   b4148:	000c0c0c 	.word	0x000c0c0c

000b414c <_ZN9TCPClientD0Ev>:
   b414c:	b510      	push	{r4, lr}
   b414e:	4604      	mov	r4, r0
   b4150:	f7ff ffe2 	bl	b4118 <_ZN9TCPClientD1Ev>
   b4154:	4620      	mov	r0, r4
   b4156:	211c      	movs	r1, #28
   b4158:	f7ff ffa1 	bl	b409e <_ZdlPvj>
   b415c:	4620      	mov	r0, r4
   b415e:	bd10      	pop	{r4, pc}

000b4160 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4164:	b08c      	sub	sp, #48	; 0x30
   b4166:	4605      	mov	r5, r0
   b4168:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b416a:	4668      	mov	r0, sp
   b416c:	4977      	ldr	r1, [pc, #476]	; (b434c <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b416e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b4172:	4614      	mov	r4, r2
   b4174:	461e      	mov	r6, r3
  String command = "";  
   b4176:	f004 fafa 	bl	b876e <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b417a:	f8df e228 	ldr.w	lr, [pc, #552]	; b43a4 <_Z6setHueibiii+0x244>
   b417e:	4974      	ldr	r1, [pc, #464]	; (b4350 <_Z6setHueibiii+0x1f0>)
   b4180:	f8de 3000 	ldr.w	r3, [lr]
   b4184:	4873      	ldr	r0, [pc, #460]	; (b4354 <_Z6setHueibiii+0x1f4>)
   b4186:	4a74      	ldr	r2, [pc, #464]	; (b4358 <_Z6setHueibiii+0x1f8>)
   b4188:	f8df c21c 	ldr.w	ip, [pc, #540]	; b43a8 <_Z6setHueibiii+0x248>
   b418c:	42ab      	cmp	r3, r5
   b418e:	d119      	bne.n	b41c4 <_Z6setHueibiii+0x64>
   b4190:	680b      	ldr	r3, [r1, #0]
   b4192:	42bb      	cmp	r3, r7
   b4194:	d116      	bne.n	b41c4 <_Z6setHueibiii+0x64>
   b4196:	6803      	ldr	r3, [r0, #0]
   b4198:	42a3      	cmp	r3, r4
   b419a:	d113      	bne.n	b41c4 <_Z6setHueibiii+0x64>
   b419c:	6813      	ldr	r3, [r2, #0]
   b419e:	42b3      	cmp	r3, r6
   b41a0:	d110      	bne.n	b41c4 <_Z6setHueibiii+0x64>
   b41a2:	f8dc 3000 	ldr.w	r3, [ip]
   b41a6:	4543      	cmp	r3, r8
   b41a8:	d10c      	bne.n	b41c4 <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b41aa:	f004 ff15 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b41ae:	496b      	ldr	r1, [pc, #428]	; (b435c <_Z6setHueibiii+0x1fc>)
   b41b0:	f7ff ffa3 	bl	b40fa <_ZN5Print6printfEPKcz>
    return false;
   b41b4:	2400      	movs	r4, #0
  String command = "";  
   b41b6:	4668      	mov	r0, sp
   b41b8:	f004 fa8e 	bl	b86d8 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b41bc:	4620      	mov	r0, r4
   b41be:	b00c      	add	sp, #48	; 0x30
   b41c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b41c4:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41c8:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41ca:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41cc:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41ce:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41d2:	2f00      	cmp	r7, #0
   b41d4:	f000 80b5 	beq.w	b4342 <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41d8:	4961      	ldr	r1, [pc, #388]	; (b4360 <_Z6setHueibiii+0x200>)
   b41da:	4668      	mov	r0, sp
   b41dc:	f004 faf5 	bl	b87ca <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41e0:	4669      	mov	r1, sp
   b41e2:	a808      	add	r0, sp, #32
   b41e4:	f004 fae6 	bl	b87b4 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41e8:	220a      	movs	r2, #10
   b41ea:	4641      	mov	r1, r8
   b41ec:	a804      	add	r0, sp, #16
   b41ee:	f004 fafe 	bl	b87ee <_ZN6StringC1Eih>
   b41f2:	a904      	add	r1, sp, #16
   b41f4:	a808      	add	r0, sp, #32
   b41f6:	f004 fb31 	bl	b885c <_ZplRK15StringSumHelperRK6String>
   b41fa:	495a      	ldr	r1, [pc, #360]	; (b4364 <_Z6setHueibiii+0x204>)
   b41fc:	f004 fb3a 	bl	b8874 <_ZplRK15StringSumHelperPKc>
   b4200:	4601      	mov	r1, r0
   b4202:	4668      	mov	r0, sp
   b4204:	f004 fac7 	bl	b8796 <_ZN6StringaSERKS_>
   b4208:	a804      	add	r0, sp, #16
   b420a:	f004 fa65 	bl	b86d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b420e:	a808      	add	r0, sp, #32
   b4210:	f004 fa62 	bl	b86d8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4214:	4669      	mov	r1, sp
   b4216:	a808      	add	r0, sp, #32
   b4218:	f004 facc 	bl	b87b4 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b421c:	220a      	movs	r2, #10
   b421e:	4631      	mov	r1, r6
   b4220:	a804      	add	r0, sp, #16
   b4222:	f004 fae4 	bl	b87ee <_ZN6StringC1Eih>
   b4226:	a904      	add	r1, sp, #16
   b4228:	a808      	add	r0, sp, #32
   b422a:	f004 fb17 	bl	b885c <_ZplRK15StringSumHelperRK6String>
   b422e:	494e      	ldr	r1, [pc, #312]	; (b4368 <_Z6setHueibiii+0x208>)
   b4230:	f004 fb20 	bl	b8874 <_ZplRK15StringSumHelperPKc>
   b4234:	4601      	mov	r1, r0
   b4236:	4668      	mov	r0, sp
   b4238:	f004 faad 	bl	b8796 <_ZN6StringaSERKS_>
   b423c:	a804      	add	r0, sp, #16
   b423e:	f004 fa4b 	bl	b86d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4242:	a808      	add	r0, sp, #32
   b4244:	f004 fa48 	bl	b86d8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4248:	4669      	mov	r1, sp
   b424a:	a808      	add	r0, sp, #32
   b424c:	f004 fab2 	bl	b87b4 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4250:	220a      	movs	r2, #10
   b4252:	4621      	mov	r1, r4
   b4254:	a804      	add	r0, sp, #16
   b4256:	f004 faca 	bl	b87ee <_ZN6StringC1Eih>
   b425a:	a904      	add	r1, sp, #16
   b425c:	a808      	add	r0, sp, #32
   b425e:	f004 fafd 	bl	b885c <_ZplRK15StringSumHelperRK6String>
   b4262:	4942      	ldr	r1, [pc, #264]	; (b436c <_Z6setHueibiii+0x20c>)
   b4264:	f004 fb06 	bl	b8874 <_ZplRK15StringSumHelperPKc>
   b4268:	4601      	mov	r1, r0
   b426a:	4668      	mov	r0, sp
   b426c:	f004 fa93 	bl	b8796 <_ZN6StringaSERKS_>
   b4270:	a804      	add	r0, sp, #16
   b4272:	f004 fa31 	bl	b86d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4276:	a808      	add	r0, sp, #32
   b4278:	f004 fa2e 	bl	b86d8 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b427c:	493c      	ldr	r1, [pc, #240]	; (b4370 <_Z6setHueibiii+0x210>)
   b427e:	483d      	ldr	r0, [pc, #244]	; (b4374 <_Z6setHueibiii+0x214>)
   b4280:	2300      	movs	r3, #0
   b4282:	2250      	movs	r2, #80	; 0x50
   b4284:	f004 fbd6 	bl	b8a34 <_ZN9TCPClient7connectEPKctm>
   b4288:	4604      	mov	r4, r0
   b428a:	2800      	cmp	r0, #0
   b428c:	d093      	beq.n	b41b6 <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b428e:	f004 fea3 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4292:	4939      	ldr	r1, [pc, #228]	; (b4378 <_Z6setHueibiii+0x218>)
   b4294:	f004 f8cb 	bl	b842e <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4298:	f004 fe9e 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b429c:	9900      	ldr	r1, [sp, #0]
   b429e:	f004 f8c6 	bl	b842e <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b42a2:	4936      	ldr	r1, [pc, #216]	; (b437c <_Z6setHueibiii+0x21c>)
   b42a4:	4833      	ldr	r0, [pc, #204]	; (b4374 <_Z6setHueibiii+0x214>)
   b42a6:	f004 f8af 	bl	b8408 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b42aa:	4935      	ldr	r1, [pc, #212]	; (b4380 <_Z6setHueibiii+0x220>)
   b42ac:	4831      	ldr	r0, [pc, #196]	; (b4374 <_Z6setHueibiii+0x214>)
   b42ae:	f004 f8ab 	bl	b8408 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b42b2:	4934      	ldr	r1, [pc, #208]	; (b4384 <_Z6setHueibiii+0x224>)
   b42b4:	482f      	ldr	r0, [pc, #188]	; (b4374 <_Z6setHueibiii+0x214>)
   b42b6:	f004 f8a7 	bl	b8408 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b42ba:	220a      	movs	r2, #10
   b42bc:	482d      	ldr	r0, [pc, #180]	; (b4374 <_Z6setHueibiii+0x214>)
   b42be:	4629      	mov	r1, r5
   b42c0:	f7ff ff04 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b42c4:	4930      	ldr	r1, [pc, #192]	; (b4388 <_Z6setHueibiii+0x228>)
   b42c6:	482b      	ldr	r0, [pc, #172]	; (b4374 <_Z6setHueibiii+0x214>)
   b42c8:	f004 f8b1 	bl	b842e <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42cc:	492f      	ldr	r1, [pc, #188]	; (b438c <_Z6setHueibiii+0x22c>)
   b42ce:	4829      	ldr	r0, [pc, #164]	; (b4374 <_Z6setHueibiii+0x214>)
   b42d0:	f004 f8ad 	bl	b842e <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42d4:	492e      	ldr	r1, [pc, #184]	; (b4390 <_Z6setHueibiii+0x230>)
   b42d6:	4827      	ldr	r0, [pc, #156]	; (b4374 <_Z6setHueibiii+0x214>)
   b42d8:	f004 f896 	bl	b8408 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42dc:	4924      	ldr	r1, [pc, #144]	; (b4370 <_Z6setHueibiii+0x210>)
   b42de:	4825      	ldr	r0, [pc, #148]	; (b4374 <_Z6setHueibiii+0x214>)
   b42e0:	f004 f8a5 	bl	b842e <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42e4:	492b      	ldr	r1, [pc, #172]	; (b4394 <_Z6setHueibiii+0x234>)
   b42e6:	4823      	ldr	r0, [pc, #140]	; (b4374 <_Z6setHueibiii+0x214>)
   b42e8:	f004 f88e 	bl	b8408 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42ec:	220a      	movs	r2, #10
   b42ee:	9902      	ldr	r1, [sp, #8]
   b42f0:	4820      	ldr	r0, [pc, #128]	; (b4374 <_Z6setHueibiii+0x214>)
   b42f2:	f004 f8a6 	bl	b8442 <_ZN5Print11printNumberEmh>
        n += println();
   b42f6:	481f      	ldr	r0, [pc, #124]	; (b4374 <_Z6setHueibiii+0x214>)
   b42f8:	f004 f88d 	bl	b8416 <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42fc:	4926      	ldr	r1, [pc, #152]	; (b4398 <_Z6setHueibiii+0x238>)
   b42fe:	481d      	ldr	r0, [pc, #116]	; (b4374 <_Z6setHueibiii+0x214>)
   b4300:	f004 f895 	bl	b842e <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b4304:	481b      	ldr	r0, [pc, #108]	; (b4374 <_Z6setHueibiii+0x214>)
   b4306:	f004 f886 	bl	b8416 <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b430a:	9900      	ldr	r1, [sp, #0]
   b430c:	4819      	ldr	r0, [pc, #100]	; (b4374 <_Z6setHueibiii+0x214>)
   b430e:	f004 f88e 	bl	b842e <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b4312:	f004 fe61 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4316:	4921      	ldr	r1, [pc, #132]	; (b439c <_Z6setHueibiii+0x23c>)
   b4318:	f004 f889 	bl	b842e <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b431c:	f004 fe5c 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4320:	4914      	ldr	r1, [pc, #80]	; (b4374 <_Z6setHueibiii+0x214>)
   b4322:	4604      	mov	r4, r0
   b4324:	a808      	add	r0, sp, #32
   b4326:	f004 f9c3 	bl	b86b0 <_ZN6Stream10readStringEv>
   b432a:	9908      	ldr	r1, [sp, #32]
   b432c:	4620      	mov	r0, r4
   b432e:	f004 f87e 	bl	b842e <_ZN5Print7printlnEPKc>
   b4332:	a808      	add	r0, sp, #32
   b4334:	f004 f9d0 	bl	b86d8 <_ZN6StringD1Ev>
    HueClient.stop();
   b4338:	480e      	ldr	r0, [pc, #56]	; (b4374 <_Z6setHueibiii+0x214>)
   b433a:	f004 fd31 	bl	b8da0 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b433e:	2401      	movs	r4, #1
   b4340:	e739      	b.n	b41b6 <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b4342:	4917      	ldr	r1, [pc, #92]	; (b43a0 <_Z6setHueibiii+0x240>)
   b4344:	4668      	mov	r0, sp
   b4346:	f004 fa40 	bl	b87ca <_ZN6StringaSEPKc>
   b434a:	e797      	b.n	b427c <_Z6setHueibiii+0x11c>
   b434c:	000bb46e 	.word	0x000bb46e
   b4350:	2003e63c 	.word	0x2003e63c
   b4354:	2003e644 	.word	0x2003e644
   b4358:	2003e634 	.word	0x2003e634
   b435c:	000bb36d 	.word	0x000bb36d
   b4360:	000bb389 	.word	0x000bb389
   b4364:	000bb39b 	.word	0x000bb39b
   b4368:	000bb3a3 	.word	0x000bb3a3
   b436c:	000bb3b6 	.word	0x000bb3b6
   b4370:	000bf979 	.word	0x000bf979
   b4374:	2003e5d0 	.word	0x2003e5d0
   b4378:	000bb3b8 	.word	0x000bb3b8
   b437c:	000bb3cf 	.word	0x000bb3cf
   b4380:	000bb550 	.word	0x000bb550
   b4384:	000bb3d9 	.word	0x000bb3d9
   b4388:	000bb3e2 	.word	0x000bb3e2
   b438c:	000bb3f2 	.word	0x000bb3f2
   b4390:	000bb3fd 	.word	0x000bb3fd
   b4394:	000bb404 	.word	0x000bb404
   b4398:	000bb415 	.word	0x000bb415
   b439c:	000bb43c 	.word	0x000bb43c
   b43a0:	000bb3ab 	.word	0x000bb3ab
   b43a4:	2003e638 	.word	0x2003e638
   b43a8:	2003e640 	.word	0x2003e640
   b43ac:	00000000 	.word	0x00000000

000b43b0 <_Z5setFShh>:
  _scaleFactor = scaleFactor;
  return scaleFactor;
}

// Set Full Scale of MPU
float setFS(byte addr, byte fullscale) {
   b43b0:	b538      	push	{r3, r4, r5, lr}
   b43b2:	460c      	mov	r4, r1
   b43b4:	4605      	mov	r5, r0
  float scaling;

  Wire.begin();  
   b43b6:	f005 f801 	bl	b93bc <_Z19__fetch_global_Wirev>
   b43ba:	f003 fe77 	bl	b80ac <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(addr); 
   b43be:	f004 fffd 	bl	b93bc <_Z19__fetch_global_Wirev>
   b43c2:	4629      	mov	r1, r5
   b43c4:	f003 fea1 	bl	b810a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x1C);
   b43c8:	f004 fff8 	bl	b93bc <_Z19__fetch_global_Wirev>
   b43cc:	211c      	movs	r1, #28
   b43ce:	f7ff fe90 	bl	b40f2 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(fullscale << 3); 
   b43d2:	f004 fff3 	bl	b93bc <_Z19__fetch_global_Wirev>
   b43d6:	00e1      	lsls	r1, r4, #3
   b43d8:	f7ff fe8b 	bl	b40f2 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(true);
   b43dc:	f004 ffee 	bl	b93bc <_Z19__fetch_global_Wirev>
   b43e0:	2101      	movs	r1, #1
   b43e2:	f003 fe99 	bl	b8118 <_ZN7TwoWire15endTransmissionEh>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b43e6:	4620      	mov	r0, r4
   b43e8:	f006 fb2a 	bl	baa40 <__aeabi_ui2d>
   b43ec:	ed9f 0b12 	vldr	d0, [pc, #72]	; b4438 <_Z5setFShh+0x88>
   b43f0:	ec41 0b11 	vmov	d1, r0, r1
   b43f4:	f005 f95c 	bl	b96b0 <pow>

  scaling = 1 / (16384.0 / pow(2,fullscale));
   b43f8:	4911      	ldr	r1, [pc, #68]	; (b4440 <_Z5setFShh+0x90>)
   b43fa:	ec53 2b10 	vmov	r2, r3, d0
   b43fe:	2000      	movs	r0, #0
   b4400:	f006 fcc2 	bl	bad88 <__aeabi_ddiv>
   b4404:	4602      	mov	r2, r0
   b4406:	460b      	mov	r3, r1
   b4408:	2000      	movs	r0, #0
   b440a:	490e      	ldr	r1, [pc, #56]	; (b4444 <_Z5setFShh+0x94>)
   b440c:	f006 fcbc 	bl	bad88 <__aeabi_ddiv>
   b4410:	f006 fe40 	bl	bb094 <__aeabi_d2f>
   b4414:	4604      	mov	r4, r0
  Serial.printf("Scaling Factor is: %0.8f\n",scaling);
   b4416:	f004 fddf 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b441a:	4605      	mov	r5, r0
   b441c:	4620      	mov	r0, r4
   b441e:	f006 fb31 	bl	baa84 <__aeabi_f2d>
   b4422:	4602      	mov	r2, r0
   b4424:	460b      	mov	r3, r1
   b4426:	4628      	mov	r0, r5
   b4428:	4907      	ldr	r1, [pc, #28]	; (b4448 <_Z5setFShh+0x98>)
   b442a:	f7ff fe66 	bl	b40fa <_ZN5Print6printfEPKcz>
  return scaling;
}
   b442e:	ee00 4a10 	vmov	s0, r4
   b4432:	bd38      	pop	{r3, r4, r5, pc}
   b4434:	f3af 8000 	nop.w
   b4438:	00000000 	.word	0x00000000
   b443c:	40000000 	.word	0x40000000
   b4440:	40d00000 	.word	0x40d00000
   b4444:	3ff00000 	.word	0x3ff00000
   b4448:	000bb445 	.word	0x000bb445

000b444c <_Z8mpuBeginhh>:
float mpuBegin(byte addr, byte fullscale) {
   b444c:	b538      	push	{r3, r4, r5, lr}
   b444e:	460d      	mov	r5, r1
   b4450:	4604      	mov	r4, r0
  Wire.begin();  
   b4452:	f004 ffb3 	bl	b93bc <_Z19__fetch_global_Wirev>
   b4456:	f003 fe29 	bl	b80ac <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(addr); 
   b445a:	f004 ffaf 	bl	b93bc <_Z19__fetch_global_Wirev>
   b445e:	4621      	mov	r1, r4
   b4460:	f003 fe53 	bl	b810a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x6B);
   b4464:	f004 ffaa 	bl	b93bc <_Z19__fetch_global_Wirev>
   b4468:	216b      	movs	r1, #107	; 0x6b
   b446a:	f7ff fe42 	bl	b40f2 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(0x00); // set to 0 (wakes up MPU-6050)
   b446e:	f004 ffa5 	bl	b93bc <_Z19__fetch_global_Wirev>
   b4472:	2100      	movs	r1, #0
   b4474:	f7ff fe3d 	bl	b40f2 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(true);
   b4478:	f004 ffa0 	bl	b93bc <_Z19__fetch_global_Wirev>
   b447c:	2101      	movs	r1, #1
   b447e:	f003 fe4b 	bl	b8118 <_ZN7TwoWire15endTransmissionEh>
  scaleFactor = setFS(addr, fullscale);
   b4482:	4629      	mov	r1, r5
   b4484:	4620      	mov	r0, r4
   b4486:	f7ff ff93 	bl	b43b0 <_Z5setFShh>
  _scaleFactor = scaleFactor;
   b448a:	4b02      	ldr	r3, [pc, #8]	; (b4494 <_Z8mpuBeginhh+0x48>)
   b448c:	ed83 0a00 	vstr	s0, [r3]
}
   b4490:	bd38      	pop	{r3, r4, r5, pc}
   b4492:	bf00      	nop
   b4494:	2003e648 	.word	0x2003e648

000b4498 <_Z5get16hh>:


// Return signed 16 bit number from big endian registers
float get16(byte addr, byte reg) {
   b4498:	b538      	push	{r3, r4, r5, lr}
   b449a:	4604      	mov	r4, r0
   b449c:	460d      	mov	r5, r1
  byte msb, lsb;
  int16_t value16;

  Wire.beginTransmission(addr);
   b449e:	f004 ff8d 	bl	b93bc <_Z19__fetch_global_Wirev>
   b44a2:	4621      	mov	r1, r4
   b44a4:	f003 fe31 	bl	b810a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg); 
   b44a8:	f004 ff88 	bl	b93bc <_Z19__fetch_global_Wirev>
   b44ac:	6803      	ldr	r3, [r0, #0]
   b44ae:	4629      	mov	r1, r5
   b44b0:	689b      	ldr	r3, [r3, #8]
   b44b2:	4798      	blx	r3
  Wire.endTransmission(false); // keep active.
   b44b4:	f004 ff82 	bl	b93bc <_Z19__fetch_global_Wirev>
   b44b8:	2100      	movs	r1, #0
   b44ba:	f003 fe2d 	bl	b8118 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(addr, 2, true);
   b44be:	f004 ff7d 	bl	b93bc <_Z19__fetch_global_Wirev>
   b44c2:	4621      	mov	r1, r4
   b44c4:	2202      	movs	r2, #2
   b44c6:	2301      	movs	r3, #1
   b44c8:	f003 fe0d 	bl	b80e6 <_ZN7TwoWire11requestFromEhjh>
  msb = Wire.read(); 
   b44cc:	f004 ff76 	bl	b93bc <_Z19__fetch_global_Wirev>
   b44d0:	6803      	ldr	r3, [r0, #0]
   b44d2:	695b      	ldr	r3, [r3, #20]
   b44d4:	4798      	blx	r3
   b44d6:	4604      	mov	r4, r0
  lsb = Wire.read(); 
   b44d8:	f004 ff70 	bl	b93bc <_Z19__fetch_global_Wirev>
   b44dc:	6803      	ldr	r3, [r0, #0]
   b44de:	695b      	ldr	r3, [r3, #20]
   b44e0:	4798      	blx	r3

  value16 = msb << 8 | lsb;
   b44e2:	b2c3      	uxtb	r3, r0
   b44e4:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
  //Serial.printf("MSB = %02X, LSB = %02X, Value = %04X (%i)\n",msb, lsb, value16, value16);

  return value16;
   b44e8:	b203      	sxth	r3, r0
   b44ea:	ee00 3a10 	vmov	s0, r3

}
   b44ee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b44f2:	bd38      	pop	{r3, r4, r5, pc}

000b44f4 <_Z11getAccArrayhPf>:


void getAccArray(byte addr, float *accelArray) {
   b44f4:	b570      	push	{r4, r5, r6, lr}
   b44f6:	460c      	mov	r4, r1
    accelArray[0] = get16(addr,AX_ADDR)*_scaleFactor;
   b44f8:	4e0f      	ldr	r6, [pc, #60]	; (b4538 <_Z11getAccArrayhPf+0x44>)
   b44fa:	213b      	movs	r1, #59	; 0x3b
void getAccArray(byte addr, float *accelArray) {
   b44fc:	4605      	mov	r5, r0
    accelArray[0] = get16(addr,AX_ADDR)*_scaleFactor;
   b44fe:	f7ff ffcb 	bl	b4498 <_Z5get16hh>
   b4502:	edd6 7a00 	vldr	s15, [r6]
   b4506:	ee27 0a80 	vmul.f32	s0, s15, s0
    accelArray[1] = get16(addr,AY_ADDR)*_scaleFactor;
   b450a:	213d      	movs	r1, #61	; 0x3d
   b450c:	4628      	mov	r0, r5
    accelArray[0] = get16(addr,AX_ADDR)*_scaleFactor;
   b450e:	ed84 0a00 	vstr	s0, [r4]
    accelArray[1] = get16(addr,AY_ADDR)*_scaleFactor;
   b4512:	f7ff ffc1 	bl	b4498 <_Z5get16hh>
   b4516:	edd6 7a00 	vldr	s15, [r6]
   b451a:	ee27 0a80 	vmul.f32	s0, s15, s0
    accelArray[2] = get16(addr,AZ_ADDR)*_scaleFactor;
   b451e:	213f      	movs	r1, #63	; 0x3f
    accelArray[1] = get16(addr,AY_ADDR)*_scaleFactor;
   b4520:	ed84 0a01 	vstr	s0, [r4, #4]
    accelArray[2] = get16(addr,AZ_ADDR)*_scaleFactor;
   b4524:	4628      	mov	r0, r5
   b4526:	f7ff ffb7 	bl	b4498 <_Z5get16hh>
   b452a:	edd6 7a00 	vldr	s15, [r6]
   b452e:	ee27 0a80 	vmul.f32	s0, s15, s0
   b4532:	ed84 0a02 	vstr	s0, [r4, #8]
}
   b4536:	bd70      	pop	{r4, r5, r6, pc}
   b4538:	2003e648 	.word	0x2003e648

000b453c <setup>:

// SYSTEM_MODE(MANUAL);
SYSTEM_MODE(SEMI_AUTOMATIC);


void setup() {
   b453c:	b530      	push	{r4, r5, lr}
   b453e:	b095      	sub	sp, #84	; 0x54
    Serial.begin(9600);
   b4540:	f004 fd4a 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4544:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4548:	f004 fd36 	bl	b8fb8 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b454c:	2000      	movs	r0, #0
   b454e:	f003 fa85 	bl	b7a5c <hal_timer_millis>
        while (_while() && !_condition()) {
   b4552:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4556:	4604      	mov	r4, r0
   b4558:	2000      	movs	r0, #0
   b455a:	f003 fa7f 	bl	b7a5c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b455e:	1b00      	subs	r0, r0, r4
   b4560:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4564:	42a8      	cmp	r0, r5
   b4566:	f171 0300 	sbcs.w	r3, r1, #0
   b456a:	d207      	bcs.n	b457c <setup+0x40>
    waitFor(Serial.isConnected, 10000);
   b456c:	f004 fd34 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4570:	f004 fd26 	bl	b8fc0 <_ZN9USBSerial11isConnectedEv>
   b4574:	b910      	cbnz	r0, b457c <setup+0x40>
            spark_process();
   b4576:	f003 fc55 	bl	b7e24 <spark_process>
        while (_while() && !_condition()) {
   b457a:	e7ed      	b.n	b4558 <setup+0x1c>
   b457c:	f004 fd2c 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4580:	f004 fd1e 	bl	b8fc0 <_ZN9USBSerial11isConnectedEv>

//MPU6050 ACCELEROMETER
	scalingFactor = mpuBegin(MPUADDRESS, FS);
   b4584:	2100      	movs	r1, #0
   b4586:	2068      	movs	r0, #104	; 0x68
   b4588:	f7ff ff60 	bl	b444c <_Z8mpuBeginhh>
   b458c:	4b24      	ldr	r3, [pc, #144]	; (b4620 <setup+0xe4>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b458e:	4c25      	ldr	r4, [pc, #148]	; (b4624 <setup+0xe8>)
   b4590:	ed83 0a00 	vstr	s0, [r3]
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4594:	2300      	movs	r3, #0
   b4596:	461a      	mov	r2, r3
   b4598:	4619      	mov	r1, r3
   b459a:	6860      	ldr	r0, [r4, #4]
    WiFi.setCredentials("IoTNetwork");
    // WiFi.setCredentials("DRWIFI");

    WiFi.connect();
    while(WiFi.connecting()){
    Serial.printf(".");
   b459c:	4d22      	ldr	r5, [pc, #136]	; (b4628 <setup+0xec>)
   b459e:	f003 fc71 	bl	b7e84 <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b45a2:	2238      	movs	r2, #56	; 0x38
   b45a4:	2100      	movs	r1, #0
   b45a6:	a806      	add	r0, sp, #24
   b45a8:	f006 fdd8 	bl	bb15c <memset>
        creds.size = sizeof(creds);
   b45ac:	234c      	movs	r3, #76	; 0x4c
   b45ae:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
   b45b0:	4b1e      	ldr	r3, [pc, #120]	; (b462c <setup+0xf0>)
   b45b2:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b45b4:	220a      	movs	r2, #10
   b45b6:	2300      	movs	r3, #0
   b45b8:	e9cd 2303 	strd	r2, r3, [sp, #12]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b45bc:	4619      	mov	r1, r3
   b45be:	aa01      	add	r2, sp, #4
   b45c0:	6860      	ldr	r0, [r4, #4]
        creds.password_len = passwordLen;
   b45c2:	9305      	str	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b45c4:	f003 fc7e 	bl	b7ec4 <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b45c8:	2300      	movs	r3, #0
   b45ca:	6860      	ldr	r0, [r4, #4]
   b45cc:	461a      	mov	r2, r3
   b45ce:	4619      	mov	r1, r3
   b45d0:	f003 fc38 	bl	b7e44 <network_connect>
        return network_connecting(*this, 0, NULL);
   b45d4:	2200      	movs	r2, #0
   b45d6:	6860      	ldr	r0, [r4, #4]
   b45d8:	4611      	mov	r1, r2
   b45da:	f003 fc3b 	bl	b7e54 <network_connecting>
    while(WiFi.connecting()){
   b45de:	b128      	cbz	r0, b45ec <setup+0xb0>
    Serial.printf(".");
   b45e0:	f004 fcfa 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b45e4:	4629      	mov	r1, r5
   b45e6:	f7ff fd88 	bl	b40fa <_ZN5Print6printfEPKcz>
    while(WiFi.connecting()){
   b45ea:	e7f3      	b.n	b45d4 <setup+0x98>
    }
    delay(1000);
   b45ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b45f0:	f003 fcc8 	bl	b7f84 <delay>
    Serial.printf("\n\n");
   b45f4:	f004 fcf0 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b45f8:	490d      	ldr	r1, [pc, #52]	; (b4630 <setup+0xf4>)
   b45fa:	f7ff fd7e 	bl	b40fa <_ZN5Print6printfEPKcz>

//NEOPIXEL
    pixel.begin();
   b45fe:	480d      	ldr	r0, [pc, #52]	; (b4634 <setup+0xf8>)
   b4600:	f002 fa6d 	bl	b6ade <_ZN17Adafruit_NeoPixel5beginEv>
    pixel.show();
   b4604:	480b      	ldr	r0, [pc, #44]	; (b4634 <setup+0xf8>)
   b4606:	f002 faa3 	bl	b6b50 <_ZN17Adafruit_NeoPixel4showEv>

//OLED
    myDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b460a:	480b      	ldr	r0, [pc, #44]	; (b4638 <setup+0xfc>)
   b460c:	223c      	movs	r2, #60	; 0x3c
   b460e:	2102      	movs	r1, #2
   b4610:	f003 f924 	bl	b785c <_ZN16Adafruit_SSD13065beginEhh>
	myDisplay.clearDisplay();
   b4614:	4808      	ldr	r0, [pc, #32]	; (b4638 <setup+0xfc>)
}
   b4616:	b015      	add	sp, #84	; 0x54
   b4618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	myDisplay.clearDisplay();
   b461c:	f003 b836 	b.w	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
   b4620:	2003e6b0 	.word	0x2003e6b0
   b4624:	2003e718 	.word	0x2003e718
   b4628:	000bb46a 	.word	0x000bb46a
   b462c:	000bb45f 	.word	0x000bb45f
   b4630:	000bb46c 	.word	0x000bb46c
   b4634:	2003e698 	.word	0x2003e698
   b4638:	2003e670 	.word	0x2003e670

000b463c <loop>:



//////////BEGIN/////////

void loop() {
   b463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

//MPU6050 ACCELEROMETER
	now = millis();
	if (now - before > 2500) {
   b4640:	4fbe      	ldr	r7, [pc, #760]	; (b493c <loop+0x300>)
	now = millis();
   b4642:	4ebf      	ldr	r6, [pc, #764]	; (b4940 <loop+0x304>)
void loop() {
   b4644:	b087      	sub	sp, #28

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4646:	f003 fa01 	bl	b7a4c <HAL_Timer_Get_Milli_Seconds>
	if (now - before > 2500) {
   b464a:	683b      	ldr	r3, [r7, #0]
	now = millis();
   b464c:	6030      	str	r0, [r6, #0]
	if (now - before > 2500) {
   b464e:	1ac0      	subs	r0, r0, r3
   b4650:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b4654:	4298      	cmp	r0, r3
   b4656:	d94e      	bls.n	b46f6 <loop+0xba>
		getAccArray(MPUADDRESS, acceleration);
   b4658:	4cba      	ldr	r4, [pc, #744]	; (b4944 <loop+0x308>)
   b465a:	2068      	movs	r0, #104	; 0x68
   b465c:	4621      	mov	r1, r4
   b465e:	f7ff ff49 	bl	b44f4 <_Z11getAccArrayhPf>
		Serial.printf("Acceleration Data (in G's): x=%0.3f, y=%0.3f, z=%0.3f\n", acceleration[0], acceleration[1], acceleration[2]);
   b4662:	f004 fcb9 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4666:	4605      	mov	r5, r0
   b4668:	6820      	ldr	r0, [r4, #0]
   b466a:	f006 fa0b 	bl	baa84 <__aeabi_f2d>
   b466e:	4602      	mov	r2, r0
   b4670:	460b      	mov	r3, r1
   b4672:	68a0      	ldr	r0, [r4, #8]
   b4674:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b4678:	f006 fa04 	bl	baa84 <__aeabi_f2d>
   b467c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4680:	6860      	ldr	r0, [r4, #4]
   b4682:	f006 f9ff 	bl	baa84 <__aeabi_f2d>
   b4686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b468a:	e9cd 0100 	strd	r0, r1, [sp]
   b468e:	49ae      	ldr	r1, [pc, #696]	; (b4948 <loop+0x30c>)
   b4690:	4628      	mov	r0, r5
   b4692:	f7ff fd32 	bl	b40fa <_ZN5Print6printfEPKcz>
		myDisplay.setRotation(2); 
   b4696:	48ad      	ldr	r0, [pc, #692]	; (b494c <loop+0x310>)
   b4698:	2102      	movs	r1, #2
   b469a:	f002 fe0a 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
		myDisplay.setCursor(8,1);
   b469e:	2201      	movs	r2, #1
   b46a0:	48aa      	ldr	r0, [pc, #680]	; (b494c <loop+0x310>)
   b46a2:	2108      	movs	r1, #8
   b46a4:	f002 fdf8 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
		myDisplay.setTextSize(1);
   b46a8:	48a8      	ldr	r0, [pc, #672]	; (b494c <loop+0x310>)
   b46aa:	2101      	movs	r1, #1
   b46ac:	f002 fdf7 	bl	b729e <_ZN12Adafruit_GFX11setTextSizeEh>
		myDisplay.setTextColor(WHITE);
   b46b0:	48a6      	ldr	r0, [pc, #664]	; (b494c <loop+0x310>)
   b46b2:	2101      	movs	r1, #1
   b46b4:	f002 fdf8 	bl	b72a8 <_ZN12Adafruit_GFX12setTextColorEt>
		myDisplay.printf("X= %0.3f\n Y= %0.3f\n Z= %0.3f\n", acceleration[0], acceleration[1], acceleration[2]);
   b46b8:	6820      	ldr	r0, [r4, #0]
   b46ba:	f006 f9e3 	bl	baa84 <__aeabi_f2d>
   b46be:	4602      	mov	r2, r0
   b46c0:	460b      	mov	r3, r1
   b46c2:	68a0      	ldr	r0, [r4, #8]
   b46c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b46c8:	f006 f9dc 	bl	baa84 <__aeabi_f2d>
   b46cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b46d0:	6860      	ldr	r0, [r4, #4]
   b46d2:	f006 f9d7 	bl	baa84 <__aeabi_f2d>
   b46d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b46da:	e9cd 0100 	strd	r0, r1, [sp]
   b46de:	499c      	ldr	r1, [pc, #624]	; (b4950 <loop+0x314>)
   b46e0:	489a      	ldr	r0, [pc, #616]	; (b494c <loop+0x310>)
   b46e2:	f7ff fd0a 	bl	b40fa <_ZN5Print6printfEPKcz>
		myDisplay.display();
   b46e6:	4899      	ldr	r0, [pc, #612]	; (b494c <loop+0x310>)
   b46e8:	f003 f848 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
		// delay(16000);
		myDisplay.clearDisplay();
   b46ec:	4897      	ldr	r0, [pc, #604]	; (b494c <loop+0x310>)
   b46ee:	f002 ffcd 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
		now = before;
   b46f2:	683b      	ldr	r3, [r7, #0]
   b46f4:	6033      	str	r3, [r6, #0]





    if(roll==1) {
   b46f6:	4d97      	ldr	r5, [pc, #604]	; (b4954 <loop+0x318>)
   b46f8:	682c      	ldr	r4, [r5, #0]
   b46fa:	2c01      	cmp	r4, #1
   b46fc:	f042 8138 	bne.w	b6970 <loop+0x2334>

// 1 Red Flickering Lights, DOOM!
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4700:	4892      	ldr	r0, [pc, #584]	; (b494c <loop+0x310>)
        // switchOFF(MRWEMO);
        // delay(10000);

//HUE SETTINGS
// 1 Red Flickering Lights, DOOM!
        hueOnOff = true;
   b4702:	4e95      	ldr	r6, [pc, #596]	; (b4958 <loop+0x31c>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b4704:	f8df 9264 	ldr.w	r9, [pc, #612]	; b496c <loop+0x330>
        myDisplay.setRotation(2); //0-3
   b4708:	2102      	movs	r1, #2
   b470a:	f002 fdd2 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b470e:	2200      	movs	r2, #0
   b4710:	4611      	mov	r1, r2
   b4712:	488e      	ldr	r0, [pc, #568]	; (b494c <loop+0x310>)
   b4714:	f002 fdc0 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, rip, 128, 64, WHITE);
   b4718:	2380      	movs	r3, #128	; 0x80
   b471a:	2240      	movs	r2, #64	; 0x40
   b471c:	e9cd 3200 	strd	r3, r2, [sp]
   b4720:	2200      	movs	r2, #0
   b4722:	4b8e      	ldr	r3, [pc, #568]	; (b495c <loop+0x320>)
   b4724:	4889      	ldr	r0, [pc, #548]	; (b494c <loop+0x310>)
   b4726:	9402      	str	r4, [sp, #8]
   b4728:	4611      	mov	r1, r2
   b472a:	f002 fcb1 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b472e:	4887      	ldr	r0, [pc, #540]	; (b494c <loop+0x310>)
   b4730:	f003 f824 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4734:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4738:	f003 fc24 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b473c:	4883      	ldr	r0, [pc, #524]	; (b494c <loop+0x310>)
   b473e:	f002 ffa5 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        hueOnOff = true;
   b4742:	7034      	strb	r4, [r6, #0]
            setHue(1, hueOnOff, HueRed, i, 255);
   b4744:	4c86      	ldr	r4, [pc, #536]	; (b4960 <loop+0x324>)
        for(int i=255; i>=0; i=i-100) {
   b4746:	f04f 08ff 	mov.w	r8, #255	; 0xff
            setHue(1, hueOnOff, HueRed, i, 255);
   b474a:	27ff      	movs	r7, #255	; 0xff
            Serial.printf("turning on the light\n");
   b474c:	f004 fc44 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4750:	4649      	mov	r1, r9
   b4752:	f7ff fcd2 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b4756:	9700      	str	r7, [sp, #0]
   b4758:	4643      	mov	r3, r8
   b475a:	6822      	ldr	r2, [r4, #0]
   b475c:	7831      	ldrb	r1, [r6, #0]
   b475e:	2001      	movs	r0, #1
   b4760:	f7ff fcfe 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b4764:	9700      	str	r7, [sp, #0]
   b4766:	4643      	mov	r3, r8
   b4768:	6822      	ldr	r2, [r4, #0]
   b476a:	7831      	ldrb	r1, [r6, #0]
   b476c:	2002      	movs	r0, #2
   b476e:	f7ff fcf7 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b4772:	9700      	str	r7, [sp, #0]
   b4774:	4643      	mov	r3, r8
   b4776:	6822      	ldr	r2, [r4, #0]
   b4778:	7831      	ldrb	r1, [r6, #0]
   b477a:	2003      	movs	r0, #3
   b477c:	f7ff fcf0 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b4780:	9700      	str	r7, [sp, #0]
   b4782:	4643      	mov	r3, r8
   b4784:	6822      	ldr	r2, [r4, #0]
   b4786:	7831      	ldrb	r1, [r6, #0]
   b4788:	2004      	movs	r0, #4
   b478a:	f7ff fce9 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b478e:	9700      	str	r7, [sp, #0]
   b4790:	4643      	mov	r3, r8
   b4792:	6822      	ldr	r2, [r4, #0]
   b4794:	7831      	ldrb	r1, [r6, #0]
   b4796:	2005      	movs	r0, #5
   b4798:	f7ff fce2 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b479c:	9700      	str	r7, [sp, #0]
   b479e:	4643      	mov	r3, r8
   b47a0:	6822      	ldr	r2, [r4, #0]
   b47a2:	7831      	ldrb	r1, [r6, #0]
   b47a4:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b47a6:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b47aa:	f7ff fcd9 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b47ae:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b47b2:	d1ca      	bne.n	b474a <loop+0x10e>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b47b4:	f8df 91b4 	ldr.w	r9, [pc, #436]	; b496c <loop+0x330>
        for(int i=0; i<=255; i=i+100) {
   b47b8:	f04f 0800 	mov.w	r8, #0
            Serial.printf("turning on the light\n");
   b47bc:	f004 fc0c 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b47c0:	4649      	mov	r1, r9
   b47c2:	f7ff fc9a 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b47c6:	9700      	str	r7, [sp, #0]
   b47c8:	4643      	mov	r3, r8
   b47ca:	6822      	ldr	r2, [r4, #0]
   b47cc:	7831      	ldrb	r1, [r6, #0]
   b47ce:	2001      	movs	r0, #1
   b47d0:	f7ff fcc6 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b47d4:	9700      	str	r7, [sp, #0]
   b47d6:	4643      	mov	r3, r8
   b47d8:	6822      	ldr	r2, [r4, #0]
   b47da:	7831      	ldrb	r1, [r6, #0]
   b47dc:	2002      	movs	r0, #2
   b47de:	f7ff fcbf 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b47e2:	9700      	str	r7, [sp, #0]
   b47e4:	4643      	mov	r3, r8
   b47e6:	6822      	ldr	r2, [r4, #0]
   b47e8:	7831      	ldrb	r1, [r6, #0]
   b47ea:	2003      	movs	r0, #3
   b47ec:	f7ff fcb8 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b47f0:	9700      	str	r7, [sp, #0]
   b47f2:	4643      	mov	r3, r8
   b47f4:	6822      	ldr	r2, [r4, #0]
   b47f6:	7831      	ldrb	r1, [r6, #0]
   b47f8:	2004      	movs	r0, #4
   b47fa:	f7ff fcb1 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b47fe:	9700      	str	r7, [sp, #0]
   b4800:	4643      	mov	r3, r8
   b4802:	6822      	ldr	r2, [r4, #0]
   b4804:	7831      	ldrb	r1, [r6, #0]
   b4806:	2005      	movs	r0, #5
   b4808:	f7ff fcaa 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b480c:	9700      	str	r7, [sp, #0]
   b480e:	4643      	mov	r3, r8
   b4810:	6822      	ldr	r2, [r4, #0]
   b4812:	7831      	ldrb	r1, [r6, #0]
   b4814:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b4816:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b481a:	f7ff fca1 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b481e:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b4822:	d1cb      	bne.n	b47bc <loop+0x180>
        }

        hueOnOff = false;
   b4824:	2300      	movs	r3, #0
   b4826:	7033      	strb	r3, [r6, #0]
        Serial.printf("turning off the light");
   b4828:	f004 fbd6 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b482c:	494d      	ldr	r1, [pc, #308]	; (b4964 <loop+0x328>)
   b482e:	f7ff fc64 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b4832:	9700      	str	r7, [sp, #0]
   b4834:	6822      	ldr	r2, [r4, #0]
   b4836:	7831      	ldrb	r1, [r6, #0]
   b4838:	23ff      	movs	r3, #255	; 0xff
   b483a:	2001      	movs	r0, #1
   b483c:	f7ff fc90 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b4840:	9700      	str	r7, [sp, #0]
   b4842:	6822      	ldr	r2, [r4, #0]
   b4844:	7831      	ldrb	r1, [r6, #0]
   b4846:	23ff      	movs	r3, #255	; 0xff
   b4848:	2002      	movs	r0, #2
   b484a:	f7ff fc89 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b484e:	9700      	str	r7, [sp, #0]
   b4850:	6822      	ldr	r2, [r4, #0]
   b4852:	7831      	ldrb	r1, [r6, #0]
   b4854:	23ff      	movs	r3, #255	; 0xff
   b4856:	2003      	movs	r0, #3
   b4858:	f7ff fc82 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b485c:	9700      	str	r7, [sp, #0]
   b485e:	6822      	ldr	r2, [r4, #0]
   b4860:	7831      	ldrb	r1, [r6, #0]
   b4862:	23ff      	movs	r3, #255	; 0xff
   b4864:	2004      	movs	r0, #4
   b4866:	f7ff fc7b 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b486a:	9700      	str	r7, [sp, #0]
   b486c:	6822      	ldr	r2, [r4, #0]
   b486e:	7831      	ldrb	r1, [r6, #0]
   b4870:	23ff      	movs	r3, #255	; 0xff
   b4872:	2005      	movs	r0, #5
   b4874:	f7ff fc74 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b4878:	9700      	str	r7, [sp, #0]
   b487a:	23ff      	movs	r3, #255	; 0xff
   b487c:	6822      	ldr	r2, [r4, #0]
   b487e:	7831      	ldrb	r1, [r6, #0]
   b4880:	2006      	movs	r0, #6
   b4882:	f7ff fc6d 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b4886:	f242 7010 	movw	r0, #10000	; 0x2710
   b488a:	f003 fb7b 	bl	b7f84 <delay>


        roll=2;
   b488e:	2302      	movs	r3, #2
   b4890:	602b      	str	r3, [r5, #0]


    if(roll==2) {
//2 Red & Orange Flame Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4892:	482e      	ldr	r0, [pc, #184]	; (b494c <loop+0x310>)
// NEOPIXEL SETTINGS
//2 Red & Orange Flame Lights

//HUE SETTINGS
// 2 Red & Orange Flame Lights
		 hueOnOff = true;
   b4894:	4c30      	ldr	r4, [pc, #192]	; (b4958 <loop+0x31c>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b4896:	f8df a0d4 	ldr.w	sl, [pc, #212]	; b496c <loop+0x330>
            setHue(1, hueOnOff, HueRed, i, 255);
   b489a:	4f31      	ldr	r7, [pc, #196]	; (b4960 <loop+0x324>)
        myDisplay.setRotation(2); //0-3
   b489c:	2102      	movs	r1, #2
   b489e:	f002 fd08 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b48a2:	2200      	movs	r2, #0
   b48a4:	4611      	mov	r1, r2
   b48a6:	4829      	ldr	r0, [pc, #164]	; (b494c <loop+0x310>)
   b48a8:	f002 fcf6 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, uhOh, 128, 64, WHITE);
   b48ac:	2601      	movs	r6, #1
   b48ae:	2340      	movs	r3, #64	; 0x40
   b48b0:	2200      	movs	r2, #0
   b48b2:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b48b6:	2380      	movs	r3, #128	; 0x80
   b48b8:	4611      	mov	r1, r2
   b48ba:	4824      	ldr	r0, [pc, #144]	; (b494c <loop+0x310>)
   b48bc:	9300      	str	r3, [sp, #0]
   b48be:	4b2a      	ldr	r3, [pc, #168]	; (b4968 <loop+0x32c>)
   b48c0:	f002 fbe6 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b48c4:	4821      	ldr	r0, [pc, #132]	; (b494c <loop+0x310>)
   b48c6:	f002 ff59 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b48ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b48ce:	f003 fb59 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b48d2:	481e      	ldr	r0, [pc, #120]	; (b494c <loop+0x310>)
   b48d4:	f002 feda 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b48d8:	f04f 08ff 	mov.w	r8, #255	; 0xff
		 hueOnOff = true;
   b48dc:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueRed, i, 255);
   b48de:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b48e0:	f004 fb7a 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b48e4:	4651      	mov	r1, sl
   b48e6:	f7ff fc08 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b48ea:	9600      	str	r6, [sp, #0]
            setHue(2, hueOnOff, HueOrange, i, 255);
   b48ec:	f8df 9080 	ldr.w	r9, [pc, #128]	; b4970 <loop+0x334>
            setHue(1, hueOnOff, HueRed, i, 255);
   b48f0:	683a      	ldr	r2, [r7, #0]
   b48f2:	7821      	ldrb	r1, [r4, #0]
   b48f4:	4643      	mov	r3, r8
   b48f6:	2001      	movs	r0, #1
   b48f8:	f7ff fc32 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueOrange, i, 255);
   b48fc:	9600      	str	r6, [sp, #0]
   b48fe:	4643      	mov	r3, r8
   b4900:	f8d9 2000 	ldr.w	r2, [r9]
   b4904:	7821      	ldrb	r1, [r4, #0]
   b4906:	2002      	movs	r0, #2
   b4908:	f7ff fc2a 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b490c:	9600      	str	r6, [sp, #0]
   b490e:	4643      	mov	r3, r8
   b4910:	683a      	ldr	r2, [r7, #0]
   b4912:	7821      	ldrb	r1, [r4, #0]
   b4914:	2003      	movs	r0, #3
   b4916:	f7ff fc23 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueOrange, i, 255);
   b491a:	9600      	str	r6, [sp, #0]
   b491c:	4643      	mov	r3, r8
   b491e:	f8d9 2000 	ldr.w	r2, [r9]
   b4922:	7821      	ldrb	r1, [r4, #0]
   b4924:	2004      	movs	r0, #4
   b4926:	f7ff fc1b 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b492a:	9600      	str	r6, [sp, #0]
   b492c:	4643      	mov	r3, r8
   b492e:	683a      	ldr	r2, [r7, #0]
   b4930:	7821      	ldrb	r1, [r4, #0]
   b4932:	2005      	movs	r0, #5
   b4934:	f7ff fc14 	bl	b4160 <_Z6setHueibiii>
   b4938:	e01c      	b.n	b4974 <loop+0x338>
   b493a:	bf00      	nop
   b493c:	2003e658 	.word	0x2003e658
   b4940:	2003e694 	.word	0x2003e694
   b4944:	2003e64c 	.word	0x2003e64c
   b4948:	000bb46f 	.word	0x000bb46f
   b494c:	2003e670 	.word	0x2003e670
   b4950:	000bb4a6 	.word	0x000bb4a6
   b4954:	2003e6ac 	.word	0x2003e6ac
   b4958:	2003e66c 	.word	0x2003e66c
   b495c:	000bc179 	.word	0x000bc179
   b4960:	2003e608 	.word	0x2003e608
   b4964:	000bb4da 	.word	0x000bb4da
   b4968:	000bcd79 	.word	0x000bcd79
   b496c:	000bb4c4 	.word	0x000bb4c4
   b4970:	2003e144 	.word	0x2003e144
            setHue(6, hueOnOff, HueOrange, i, 255);
   b4974:	9600      	str	r6, [sp, #0]
   b4976:	4643      	mov	r3, r8
   b4978:	f8d9 2000 	ldr.w	r2, [r9]
   b497c:	7821      	ldrb	r1, [r4, #0]
   b497e:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b4980:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueOrange, i, 255);
   b4984:	f7ff fbec 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b4988:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b498c:	d1a7      	bne.n	b48de <loop+0x2a2>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b498e:	f8df a358 	ldr.w	sl, [pc, #856]	; b4ce8 <loop+0x6ac>
        for(int i=0; i<=255; i=i+100) {
   b4992:	f04f 0800 	mov.w	r8, #0
            Serial.printf("turning on the light\n");
   b4996:	f004 fb1f 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b499a:	4651      	mov	r1, sl
   b499c:	f7ff fbad 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b49a0:	9600      	str	r6, [sp, #0]
   b49a2:	4643      	mov	r3, r8
   b49a4:	f8d9 2000 	ldr.w	r2, [r9]
   b49a8:	7821      	ldrb	r1, [r4, #0]
   b49aa:	2001      	movs	r0, #1
   b49ac:	f7ff fbd8 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b49b0:	9600      	str	r6, [sp, #0]
   b49b2:	4643      	mov	r3, r8
   b49b4:	683a      	ldr	r2, [r7, #0]
   b49b6:	7821      	ldrb	r1, [r4, #0]
   b49b8:	2002      	movs	r0, #2
   b49ba:	f7ff fbd1 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueOrange, i, 255);
   b49be:	9600      	str	r6, [sp, #0]
   b49c0:	4643      	mov	r3, r8
   b49c2:	f8d9 2000 	ldr.w	r2, [r9]
   b49c6:	7821      	ldrb	r1, [r4, #0]
   b49c8:	2003      	movs	r0, #3
   b49ca:	f7ff fbc9 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b49ce:	9600      	str	r6, [sp, #0]
   b49d0:	4643      	mov	r3, r8
   b49d2:	683a      	ldr	r2, [r7, #0]
   b49d4:	7821      	ldrb	r1, [r4, #0]
   b49d6:	2004      	movs	r0, #4
   b49d8:	f7ff fbc2 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueOrange, i, 255);
   b49dc:	9600      	str	r6, [sp, #0]
   b49de:	4643      	mov	r3, r8
   b49e0:	f8d9 2000 	ldr.w	r2, [r9]
   b49e4:	7821      	ldrb	r1, [r4, #0]
   b49e6:	2005      	movs	r0, #5
   b49e8:	f7ff fbba 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b49ec:	9600      	str	r6, [sp, #0]
   b49ee:	4643      	mov	r3, r8
   b49f0:	683a      	ldr	r2, [r7, #0]
   b49f2:	7821      	ldrb	r1, [r4, #0]
   b49f4:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b49f6:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b49fa:	f7ff fbb1 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b49fe:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b4a02:	d1c8      	bne.n	b4996 <loop+0x35a>
        }

        hueOnOff = false;
   b4a04:	2300      	movs	r3, #0
   b4a06:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b4a08:	f004 fae6 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4a0c:	49af      	ldr	r1, [pc, #700]	; (b4ccc <loop+0x690>)
   b4a0e:	f7ff fb74 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b4a12:	9600      	str	r6, [sp, #0]
   b4a14:	683a      	ldr	r2, [r7, #0]
   b4a16:	7821      	ldrb	r1, [r4, #0]
   b4a18:	23ff      	movs	r3, #255	; 0xff
   b4a1a:	2001      	movs	r0, #1
   b4a1c:	f7ff fba0 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b4a20:	9600      	str	r6, [sp, #0]
   b4a22:	683a      	ldr	r2, [r7, #0]
   b4a24:	7821      	ldrb	r1, [r4, #0]
   b4a26:	23ff      	movs	r3, #255	; 0xff
   b4a28:	2002      	movs	r0, #2
   b4a2a:	f7ff fb99 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b4a2e:	9600      	str	r6, [sp, #0]
   b4a30:	683a      	ldr	r2, [r7, #0]
   b4a32:	7821      	ldrb	r1, [r4, #0]
   b4a34:	23ff      	movs	r3, #255	; 0xff
   b4a36:	2003      	movs	r0, #3
   b4a38:	f7ff fb92 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b4a3c:	9600      	str	r6, [sp, #0]
   b4a3e:	683a      	ldr	r2, [r7, #0]
   b4a40:	7821      	ldrb	r1, [r4, #0]
   b4a42:	23ff      	movs	r3, #255	; 0xff
   b4a44:	2004      	movs	r0, #4
   b4a46:	f7ff fb8b 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b4a4a:	9600      	str	r6, [sp, #0]
   b4a4c:	683a      	ldr	r2, [r7, #0]
   b4a4e:	7821      	ldrb	r1, [r4, #0]
   b4a50:	23ff      	movs	r3, #255	; 0xff
   b4a52:	2005      	movs	r0, #5
   b4a54:	f7ff fb84 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b4a58:	9600      	str	r6, [sp, #0]
   b4a5a:	23ff      	movs	r3, #255	; 0xff
   b4a5c:	683a      	ldr	r2, [r7, #0]
   b4a5e:	7821      	ldrb	r1, [r4, #0]
   b4a60:	2006      	movs	r0, #6
   b4a62:	f7ff fb7d 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b4a66:	f242 7010 	movw	r0, #10000	; 0x2710
   b4a6a:	f003 fa8b 	bl	b7f84 <delay>

        roll=3;
   b4a6e:	2303      	movs	r3, #3
   b4a70:	602b      	str	r3, [r5, #0]


    if(roll==3) {
//3 Yellow Flame Light
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4a72:	4897      	ldr	r0, [pc, #604]	; (b4cd0 <loop+0x694>)
// NEOPIXEL SETTINGS
//3 Yellow Flame Light

//HUE SETTINGS
// 3 Yellow Flame Light
 hueOnOff = true;
   b4a74:	4c97      	ldr	r4, [pc, #604]	; (b4cd4 <loop+0x698>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b4a76:	f8df 9270 	ldr.w	r9, [pc, #624]	; b4ce8 <loop+0x6ac>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4a7a:	4f97      	ldr	r7, [pc, #604]	; (b4cd8 <loop+0x69c>)
        myDisplay.setRotation(2); //0-3
   b4a7c:	2102      	movs	r1, #2
   b4a7e:	f002 fc18 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4a82:	2200      	movs	r2, #0
   b4a84:	4611      	mov	r1, r2
   b4a86:	4892      	ldr	r0, [pc, #584]	; (b4cd0 <loop+0x694>)
   b4a88:	f002 fc06 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, messenger, 128, 64, WHITE);
   b4a8c:	2601      	movs	r6, #1
   b4a8e:	2340      	movs	r3, #64	; 0x40
   b4a90:	2200      	movs	r2, #0
   b4a92:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b4a96:	2380      	movs	r3, #128	; 0x80
   b4a98:	4611      	mov	r1, r2
   b4a9a:	488d      	ldr	r0, [pc, #564]	; (b4cd0 <loop+0x694>)
   b4a9c:	9300      	str	r3, [sp, #0]
   b4a9e:	4b8f      	ldr	r3, [pc, #572]	; (b4cdc <loop+0x6a0>)
   b4aa0:	f002 faf6 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4aa4:	488a      	ldr	r0, [pc, #552]	; (b4cd0 <loop+0x694>)
   b4aa6:	f002 fe69 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4aaa:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4aae:	f003 fa69 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b4ab2:	4887      	ldr	r0, [pc, #540]	; (b4cd0 <loop+0x694>)
   b4ab4:	f002 fdea 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b4ab8:	f04f 08ff 	mov.w	r8, #255	; 0xff
 hueOnOff = true;
   b4abc:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4abe:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b4ac0:	f004 fa8a 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4ac4:	4649      	mov	r1, r9
   b4ac6:	f7ff fb18 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4aca:	9600      	str	r6, [sp, #0]
   b4acc:	4643      	mov	r3, r8
   b4ace:	683a      	ldr	r2, [r7, #0]
   b4ad0:	7821      	ldrb	r1, [r4, #0]
   b4ad2:	2001      	movs	r0, #1
   b4ad4:	f7ff fb44 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b4ad8:	9600      	str	r6, [sp, #0]
   b4ada:	4643      	mov	r3, r8
   b4adc:	683a      	ldr	r2, [r7, #0]
   b4ade:	7821      	ldrb	r1, [r4, #0]
   b4ae0:	2002      	movs	r0, #2
   b4ae2:	f7ff fb3d 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueYellow, i, 255);
   b4ae6:	9600      	str	r6, [sp, #0]
   b4ae8:	4643      	mov	r3, r8
   b4aea:	683a      	ldr	r2, [r7, #0]
   b4aec:	7821      	ldrb	r1, [r4, #0]
   b4aee:	2003      	movs	r0, #3
   b4af0:	f7ff fb36 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b4af4:	9600      	str	r6, [sp, #0]
   b4af6:	4643      	mov	r3, r8
   b4af8:	683a      	ldr	r2, [r7, #0]
   b4afa:	7821      	ldrb	r1, [r4, #0]
   b4afc:	2004      	movs	r0, #4
   b4afe:	f7ff fb2f 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueYellow, i, 255);
   b4b02:	9600      	str	r6, [sp, #0]
   b4b04:	4643      	mov	r3, r8
   b4b06:	683a      	ldr	r2, [r7, #0]
   b4b08:	7821      	ldrb	r1, [r4, #0]
   b4b0a:	2005      	movs	r0, #5
   b4b0c:	f7ff fb28 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4b10:	9600      	str	r6, [sp, #0]
   b4b12:	4643      	mov	r3, r8
   b4b14:	683a      	ldr	r2, [r7, #0]
   b4b16:	7821      	ldrb	r1, [r4, #0]
   b4b18:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b4b1a:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4b1e:	f7ff fb1f 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b4b22:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b4b26:	d1ca      	bne.n	b4abe <loop+0x482>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b4b28:	f8df 91bc 	ldr.w	r9, [pc, #444]	; b4ce8 <loop+0x6ac>
        for(int i=0; i<=255; i=i+100) {
   b4b2c:	f04f 0800 	mov.w	r8, #0
            Serial.printf("turning on the light\n");
   b4b30:	f004 fa52 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4b34:	4649      	mov	r1, r9
   b4b36:	f7ff fae0 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4b3a:	9600      	str	r6, [sp, #0]
   b4b3c:	4643      	mov	r3, r8
   b4b3e:	683a      	ldr	r2, [r7, #0]
   b4b40:	7821      	ldrb	r1, [r4, #0]
   b4b42:	2001      	movs	r0, #1
   b4b44:	f7ff fb0c 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b4b48:	9600      	str	r6, [sp, #0]
   b4b4a:	4643      	mov	r3, r8
   b4b4c:	683a      	ldr	r2, [r7, #0]
   b4b4e:	7821      	ldrb	r1, [r4, #0]
   b4b50:	2002      	movs	r0, #2
   b4b52:	f7ff fb05 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueYellow, i, 255);
   b4b56:	9600      	str	r6, [sp, #0]
   b4b58:	4643      	mov	r3, r8
   b4b5a:	683a      	ldr	r2, [r7, #0]
   b4b5c:	7821      	ldrb	r1, [r4, #0]
   b4b5e:	2003      	movs	r0, #3
   b4b60:	f7ff fafe 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b4b64:	9600      	str	r6, [sp, #0]
   b4b66:	4643      	mov	r3, r8
   b4b68:	683a      	ldr	r2, [r7, #0]
   b4b6a:	7821      	ldrb	r1, [r4, #0]
   b4b6c:	2004      	movs	r0, #4
   b4b6e:	f7ff faf7 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueYellow, i, 255);
   b4b72:	9600      	str	r6, [sp, #0]
   b4b74:	4643      	mov	r3, r8
   b4b76:	683a      	ldr	r2, [r7, #0]
   b4b78:	7821      	ldrb	r1, [r4, #0]
   b4b7a:	2005      	movs	r0, #5
   b4b7c:	f7ff faf0 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4b80:	9600      	str	r6, [sp, #0]
   b4b82:	4643      	mov	r3, r8
   b4b84:	683a      	ldr	r2, [r7, #0]
   b4b86:	7821      	ldrb	r1, [r4, #0]
   b4b88:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b4b8a:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4b8e:	f7ff fae7 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b4b92:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b4b96:	d1cb      	bne.n	b4b30 <loop+0x4f4>
        }

        hueOnOff = false;
   b4b98:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b4b9a:	4f51      	ldr	r7, [pc, #324]	; (b4ce0 <loop+0x6a4>)
        hueOnOff = false;
   b4b9c:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b4b9e:	f004 fa1b 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4ba2:	494a      	ldr	r1, [pc, #296]	; (b4ccc <loop+0x690>)
   b4ba4:	f7ff faa9 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b4ba8:	9600      	str	r6, [sp, #0]
   b4baa:	683a      	ldr	r2, [r7, #0]
   b4bac:	7821      	ldrb	r1, [r4, #0]
   b4bae:	23ff      	movs	r3, #255	; 0xff
   b4bb0:	2001      	movs	r0, #1
   b4bb2:	f7ff fad5 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b4bb6:	9600      	str	r6, [sp, #0]
   b4bb8:	683a      	ldr	r2, [r7, #0]
   b4bba:	7821      	ldrb	r1, [r4, #0]
   b4bbc:	23ff      	movs	r3, #255	; 0xff
   b4bbe:	2002      	movs	r0, #2
   b4bc0:	f7ff face 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b4bc4:	9600      	str	r6, [sp, #0]
   b4bc6:	683a      	ldr	r2, [r7, #0]
   b4bc8:	7821      	ldrb	r1, [r4, #0]
   b4bca:	23ff      	movs	r3, #255	; 0xff
   b4bcc:	2003      	movs	r0, #3
   b4bce:	f7ff fac7 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b4bd2:	9600      	str	r6, [sp, #0]
   b4bd4:	683a      	ldr	r2, [r7, #0]
   b4bd6:	7821      	ldrb	r1, [r4, #0]
   b4bd8:	23ff      	movs	r3, #255	; 0xff
   b4bda:	2004      	movs	r0, #4
   b4bdc:	f7ff fac0 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b4be0:	9600      	str	r6, [sp, #0]
   b4be2:	683a      	ldr	r2, [r7, #0]
   b4be4:	7821      	ldrb	r1, [r4, #0]
   b4be6:	23ff      	movs	r3, #255	; 0xff
   b4be8:	2005      	movs	r0, #5
   b4bea:	f7ff fab9 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b4bee:	9600      	str	r6, [sp, #0]
   b4bf0:	23ff      	movs	r3, #255	; 0xff
   b4bf2:	683a      	ldr	r2, [r7, #0]
   b4bf4:	7821      	ldrb	r1, [r4, #0]
   b4bf6:	2006      	movs	r0, #6
   b4bf8:	f7ff fab2 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b4bfc:	f242 7010 	movw	r0, #10000	; 0x2710
   b4c00:	f003 f9c0 	bl	b7f84 <delay>
        roll=4;
   b4c04:	2304      	movs	r3, #4
   b4c06:	602b      	str	r3, [r5, #0]


    if(roll==4) {
// 4 Red & Magenta Flickering Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4c08:	4831      	ldr	r0, [pc, #196]	; (b4cd0 <loop+0x694>)
// NEOPIXEL SETTINGS
//4 Red & Magenta Flickering Lights

//HUE SETTINGS
// 4 Red & Magenta Flickering Lights
 hueOnOff = true;
   b4c0a:	4c32      	ldr	r4, [pc, #200]	; (b4cd4 <loop+0x698>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
            setHue(1, hueOnOff, 31500, i, 255);
            setHue(2, hueOnOff, HueRed, i, 255);
   b4c0c:	4f34      	ldr	r7, [pc, #208]	; (b4ce0 <loop+0x6a4>)
        myDisplay.setRotation(2); //0-3
   b4c0e:	2102      	movs	r1, #2
   b4c10:	f002 fb4f 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4c14:	2200      	movs	r2, #0
   b4c16:	4611      	mov	r1, r2
   b4c18:	482d      	ldr	r0, [pc, #180]	; (b4cd0 <loop+0x694>)
   b4c1a:	f002 fb3d 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, niceKnowingYou, 128, 64, WHITE);
   b4c1e:	2601      	movs	r6, #1
   b4c20:	2340      	movs	r3, #64	; 0x40
   b4c22:	2200      	movs	r2, #0
   b4c24:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b4c28:	2380      	movs	r3, #128	; 0x80
   b4c2a:	4611      	mov	r1, r2
   b4c2c:	4828      	ldr	r0, [pc, #160]	; (b4cd0 <loop+0x694>)
   b4c2e:	9300      	str	r3, [sp, #0]
   b4c30:	4b2c      	ldr	r3, [pc, #176]	; (b4ce4 <loop+0x6a8>)
   b4c32:	f002 fa2d 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4c36:	4826      	ldr	r0, [pc, #152]	; (b4cd0 <loop+0x694>)
   b4c38:	f002 fda0 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4c3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4c40:	f003 f9a0 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b4c44:	4822      	ldr	r0, [pc, #136]	; (b4cd0 <loop+0x694>)
   b4c46:	f002 fd21 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b4c4a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 hueOnOff = true;
   b4c4e:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, 31500, i, 255);
   b4c50:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b4c52:	f004 f9c1 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4c56:	4924      	ldr	r1, [pc, #144]	; (b4ce8 <loop+0x6ac>)
   b4c58:	f7ff fa4f 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 31500, i, 255);
   b4c5c:	9600      	str	r6, [sp, #0]
   b4c5e:	4643      	mov	r3, r8
   b4c60:	7821      	ldrb	r1, [r4, #0]
   b4c62:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4c66:	2001      	movs	r0, #1
   b4c68:	f7ff fa7a 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b4c6c:	9600      	str	r6, [sp, #0]
   b4c6e:	4643      	mov	r3, r8
   b4c70:	683a      	ldr	r2, [r7, #0]
   b4c72:	7821      	ldrb	r1, [r4, #0]
   b4c74:	2002      	movs	r0, #2
   b4c76:	f7ff fa73 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 31500, i, 255);
   b4c7a:	9600      	str	r6, [sp, #0]
   b4c7c:	4643      	mov	r3, r8
   b4c7e:	7821      	ldrb	r1, [r4, #0]
   b4c80:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4c84:	2003      	movs	r0, #3
   b4c86:	f7ff fa6b 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b4c8a:	9600      	str	r6, [sp, #0]
   b4c8c:	4643      	mov	r3, r8
   b4c8e:	683a      	ldr	r2, [r7, #0]
   b4c90:	7821      	ldrb	r1, [r4, #0]
   b4c92:	2004      	movs	r0, #4
   b4c94:	f7ff fa64 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 31500, i, 255);
   b4c98:	9600      	str	r6, [sp, #0]
   b4c9a:	4643      	mov	r3, r8
   b4c9c:	7821      	ldrb	r1, [r4, #0]
   b4c9e:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4ca2:	2005      	movs	r0, #5
   b4ca4:	f7ff fa5c 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b4ca8:	9600      	str	r6, [sp, #0]
   b4caa:	4643      	mov	r3, r8
   b4cac:	683a      	ldr	r2, [r7, #0]
   b4cae:	7821      	ldrb	r1, [r4, #0]
   b4cb0:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b4cb2:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b4cb6:	f7ff fa53 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b4cba:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b4cbe:	d1c7      	bne.n	b4c50 <loop+0x614>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b4cc0:	f8df 9024 	ldr.w	r9, [pc, #36]	; b4ce8 <loop+0x6ac>
        for(int i=0; i<=255; i=i+100) {
   b4cc4:	f04f 0800 	mov.w	r8, #0
   b4cc8:	e010      	b.n	b4cec <loop+0x6b0>
   b4cca:	bf00      	nop
   b4ccc:	000bb4da 	.word	0x000bb4da
   b4cd0:	2003e670 	.word	0x2003e670
   b4cd4:	2003e66c 	.word	0x2003e66c
   b4cd8:	2003e14c 	.word	0x2003e14c
   b4cdc:	000bfd85 	.word	0x000bfd85
   b4ce0:	2003e608 	.word	0x2003e608
   b4ce4:	000bbd79 	.word	0x000bbd79
   b4ce8:	000bb4c4 	.word	0x000bb4c4
            Serial.printf("turning on the light\n");
   b4cec:	f004 f974 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4cf0:	4649      	mov	r1, r9
   b4cf2:	f7ff fa02 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b4cf6:	9600      	str	r6, [sp, #0]
   b4cf8:	4643      	mov	r3, r8
   b4cfa:	683a      	ldr	r2, [r7, #0]
   b4cfc:	7821      	ldrb	r1, [r4, #0]
   b4cfe:	2001      	movs	r0, #1
   b4d00:	f7ff fa2e 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 31500, i, 255);
   b4d04:	9600      	str	r6, [sp, #0]
   b4d06:	4643      	mov	r3, r8
   b4d08:	7821      	ldrb	r1, [r4, #0]
   b4d0a:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4d0e:	2002      	movs	r0, #2
   b4d10:	f7ff fa26 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b4d14:	9600      	str	r6, [sp, #0]
   b4d16:	4643      	mov	r3, r8
   b4d18:	683a      	ldr	r2, [r7, #0]
   b4d1a:	7821      	ldrb	r1, [r4, #0]
   b4d1c:	2003      	movs	r0, #3
   b4d1e:	f7ff fa1f 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 31500, i, 255);
   b4d22:	9600      	str	r6, [sp, #0]
   b4d24:	4643      	mov	r3, r8
   b4d26:	7821      	ldrb	r1, [r4, #0]
   b4d28:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4d2c:	2004      	movs	r0, #4
   b4d2e:	f7ff fa17 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b4d32:	9600      	str	r6, [sp, #0]
   b4d34:	4643      	mov	r3, r8
   b4d36:	683a      	ldr	r2, [r7, #0]
   b4d38:	7821      	ldrb	r1, [r4, #0]
   b4d3a:	2005      	movs	r0, #5
   b4d3c:	f7ff fa10 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 31500, i, 255);
   b4d40:	9600      	str	r6, [sp, #0]
   b4d42:	4643      	mov	r3, r8
   b4d44:	7821      	ldrb	r1, [r4, #0]
   b4d46:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4d4a:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b4d4c:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, 31500, i, 255);
   b4d50:	f7ff fa06 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b4d54:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b4d58:	d1c8      	bne.n	b4cec <loop+0x6b0>
        }

        hueOnOff = false;
   b4d5a:	2300      	movs	r3, #0
   b4d5c:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b4d5e:	f004 f93b 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4d62:	49b1      	ldr	r1, [pc, #708]	; (b5028 <loop+0x9ec>)
   b4d64:	f7ff f9c9 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b4d68:	9600      	str	r6, [sp, #0]
   b4d6a:	683a      	ldr	r2, [r7, #0]
   b4d6c:	7821      	ldrb	r1, [r4, #0]
   b4d6e:	23ff      	movs	r3, #255	; 0xff
   b4d70:	2001      	movs	r0, #1
   b4d72:	f7ff f9f5 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b4d76:	9600      	str	r6, [sp, #0]
   b4d78:	683a      	ldr	r2, [r7, #0]
   b4d7a:	7821      	ldrb	r1, [r4, #0]
   b4d7c:	23ff      	movs	r3, #255	; 0xff
   b4d7e:	2002      	movs	r0, #2
   b4d80:	f7ff f9ee 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b4d84:	9600      	str	r6, [sp, #0]
   b4d86:	683a      	ldr	r2, [r7, #0]
   b4d88:	7821      	ldrb	r1, [r4, #0]
   b4d8a:	23ff      	movs	r3, #255	; 0xff
   b4d8c:	2003      	movs	r0, #3
   b4d8e:	f7ff f9e7 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b4d92:	9600      	str	r6, [sp, #0]
   b4d94:	683a      	ldr	r2, [r7, #0]
   b4d96:	7821      	ldrb	r1, [r4, #0]
   b4d98:	23ff      	movs	r3, #255	; 0xff
   b4d9a:	2004      	movs	r0, #4
   b4d9c:	f7ff f9e0 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b4da0:	9600      	str	r6, [sp, #0]
   b4da2:	683a      	ldr	r2, [r7, #0]
   b4da4:	7821      	ldrb	r1, [r4, #0]
   b4da6:	23ff      	movs	r3, #255	; 0xff
   b4da8:	2005      	movs	r0, #5
   b4daa:	f7ff f9d9 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b4dae:	9600      	str	r6, [sp, #0]
   b4db0:	23ff      	movs	r3, #255	; 0xff
   b4db2:	683a      	ldr	r2, [r7, #0]
   b4db4:	7821      	ldrb	r1, [r4, #0]
   b4db6:	2006      	movs	r0, #6
   b4db8:	f7ff f9d2 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b4dbc:	f242 7010 	movw	r0, #10000	; 0x2710
   b4dc0:	f003 f8e0 	bl	b7f84 <delay>
        roll=5;
   b4dc4:	2305      	movs	r3, #5
   b4dc6:	602b      	str	r3, [r5, #0]


    if(roll==5) {
//5 Yellow & Red Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4dc8:	4898      	ldr	r0, [pc, #608]	; (b502c <loop+0x9f0>)
// NEOPIXEL SETTINGS
//5 Yellow & Red Lights

//HUE SETTINGS
// 5 Yellow & Red Lights
 hueOnOff = true;
   b4dca:	4c99      	ldr	r4, [pc, #612]	; (b5030 <loop+0x9f4>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b4dcc:	f8df a270 	ldr.w	sl, [pc, #624]	; b5040 <loop+0xa04>
            setHue(1, hueOnOff, HueYellow, i, 255);
            setHue(2, hueOnOff, HueRed, i, 255);
   b4dd0:	4f98      	ldr	r7, [pc, #608]	; (b5034 <loop+0x9f8>)
        myDisplay.setRotation(2); //0-3
   b4dd2:	2102      	movs	r1, #2
   b4dd4:	f002 fa6d 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4dd8:	2200      	movs	r2, #0
   b4dda:	4611      	mov	r1, r2
   b4ddc:	4893      	ldr	r0, [pc, #588]	; (b502c <loop+0x9f0>)
   b4dde:	f002 fa5b 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, maybeNextTime, 128, 64, WHITE);
   b4de2:	2601      	movs	r6, #1
   b4de4:	2340      	movs	r3, #64	; 0x40
   b4de6:	2200      	movs	r2, #0
   b4de8:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b4dec:	2380      	movs	r3, #128	; 0x80
   b4dee:	4611      	mov	r1, r2
   b4df0:	488e      	ldr	r0, [pc, #568]	; (b502c <loop+0x9f0>)
   b4df2:	9300      	str	r3, [sp, #0]
   b4df4:	4b90      	ldr	r3, [pc, #576]	; (b5038 <loop+0x9fc>)
   b4df6:	f002 f94b 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4dfa:	488c      	ldr	r0, [pc, #560]	; (b502c <loop+0x9f0>)
   b4dfc:	f002 fcbe 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4e00:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4e04:	f003 f8be 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b4e08:	4888      	ldr	r0, [pc, #544]	; (b502c <loop+0x9f0>)
   b4e0a:	f002 fc3f 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b4e0e:	f04f 08ff 	mov.w	r8, #255	; 0xff
 hueOnOff = true;
   b4e12:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4e14:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b4e16:	f004 f8df 	bl	b8fd8 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4e1a:	f8df 9228 	ldr.w	r9, [pc, #552]	; b5044 <loop+0xa08>
            Serial.printf("turning on the light\n");
   b4e1e:	4651      	mov	r1, sl
   b4e20:	f7ff f96b 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4e24:	9600      	str	r6, [sp, #0]
   b4e26:	4643      	mov	r3, r8
   b4e28:	f8d9 2000 	ldr.w	r2, [r9]
   b4e2c:	7821      	ldrb	r1, [r4, #0]
   b4e2e:	2001      	movs	r0, #1
   b4e30:	f7ff f996 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b4e34:	9600      	str	r6, [sp, #0]
   b4e36:	4643      	mov	r3, r8
   b4e38:	683a      	ldr	r2, [r7, #0]
   b4e3a:	7821      	ldrb	r1, [r4, #0]
   b4e3c:	2002      	movs	r0, #2
   b4e3e:	f7ff f98f 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueYellow, i, 255);
   b4e42:	9600      	str	r6, [sp, #0]
   b4e44:	4643      	mov	r3, r8
   b4e46:	f8d9 2000 	ldr.w	r2, [r9]
   b4e4a:	7821      	ldrb	r1, [r4, #0]
   b4e4c:	2003      	movs	r0, #3
   b4e4e:	f7ff f987 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b4e52:	9600      	str	r6, [sp, #0]
   b4e54:	4643      	mov	r3, r8
   b4e56:	683a      	ldr	r2, [r7, #0]
   b4e58:	7821      	ldrb	r1, [r4, #0]
   b4e5a:	2004      	movs	r0, #4
   b4e5c:	f7ff f980 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueYellow, i, 255);
   b4e60:	9600      	str	r6, [sp, #0]
   b4e62:	4643      	mov	r3, r8
   b4e64:	f8d9 2000 	ldr.w	r2, [r9]
   b4e68:	7821      	ldrb	r1, [r4, #0]
   b4e6a:	2005      	movs	r0, #5
   b4e6c:	f7ff f978 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b4e70:	9600      	str	r6, [sp, #0]
   b4e72:	4643      	mov	r3, r8
   b4e74:	683a      	ldr	r2, [r7, #0]
   b4e76:	7821      	ldrb	r1, [r4, #0]
   b4e78:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b4e7a:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b4e7e:	f7ff f96f 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b4e82:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b4e86:	d1c5      	bne.n	b4e14 <loop+0x7d8>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b4e88:	f8df a1b4 	ldr.w	sl, [pc, #436]	; b5040 <loop+0xa04>
        for(int i=0; i<=255; i=i+100) {
   b4e8c:	f04f 0800 	mov.w	r8, #0
            Serial.printf("turning on the light\n");
   b4e90:	f004 f8a2 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4e94:	4651      	mov	r1, sl
   b4e96:	f7ff f930 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b4e9a:	9600      	str	r6, [sp, #0]
   b4e9c:	4643      	mov	r3, r8
   b4e9e:	683a      	ldr	r2, [r7, #0]
   b4ea0:	7821      	ldrb	r1, [r4, #0]
   b4ea2:	2001      	movs	r0, #1
   b4ea4:	f7ff f95c 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b4ea8:	9600      	str	r6, [sp, #0]
   b4eaa:	4643      	mov	r3, r8
   b4eac:	f8d9 2000 	ldr.w	r2, [r9]
   b4eb0:	7821      	ldrb	r1, [r4, #0]
   b4eb2:	2002      	movs	r0, #2
   b4eb4:	f7ff f954 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b4eb8:	9600      	str	r6, [sp, #0]
   b4eba:	4643      	mov	r3, r8
   b4ebc:	683a      	ldr	r2, [r7, #0]
   b4ebe:	7821      	ldrb	r1, [r4, #0]
   b4ec0:	2003      	movs	r0, #3
   b4ec2:	f7ff f94d 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b4ec6:	9600      	str	r6, [sp, #0]
   b4ec8:	4643      	mov	r3, r8
   b4eca:	f8d9 2000 	ldr.w	r2, [r9]
   b4ece:	7821      	ldrb	r1, [r4, #0]
   b4ed0:	2004      	movs	r0, #4
   b4ed2:	f7ff f945 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b4ed6:	9600      	str	r6, [sp, #0]
   b4ed8:	4643      	mov	r3, r8
   b4eda:	683a      	ldr	r2, [r7, #0]
   b4edc:	7821      	ldrb	r1, [r4, #0]
   b4ede:	2005      	movs	r0, #5
   b4ee0:	f7ff f93e 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4ee4:	9600      	str	r6, [sp, #0]
   b4ee6:	4643      	mov	r3, r8
   b4ee8:	f8d9 2000 	ldr.w	r2, [r9]
   b4eec:	7821      	ldrb	r1, [r4, #0]
   b4eee:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b4ef0:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4ef4:	f7ff f934 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b4ef8:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b4efc:	d1c8      	bne.n	b4e90 <loop+0x854>
        }

        hueOnOff = false;
   b4efe:	2300      	movs	r3, #0
   b4f00:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b4f02:	f004 f869 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4f06:	4948      	ldr	r1, [pc, #288]	; (b5028 <loop+0x9ec>)
   b4f08:	f7ff f8f7 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b4f0c:	9600      	str	r6, [sp, #0]
   b4f0e:	683a      	ldr	r2, [r7, #0]
   b4f10:	7821      	ldrb	r1, [r4, #0]
   b4f12:	23ff      	movs	r3, #255	; 0xff
   b4f14:	2001      	movs	r0, #1
   b4f16:	f7ff f923 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b4f1a:	9600      	str	r6, [sp, #0]
   b4f1c:	683a      	ldr	r2, [r7, #0]
   b4f1e:	7821      	ldrb	r1, [r4, #0]
   b4f20:	23ff      	movs	r3, #255	; 0xff
   b4f22:	2002      	movs	r0, #2
   b4f24:	f7ff f91c 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b4f28:	9600      	str	r6, [sp, #0]
   b4f2a:	683a      	ldr	r2, [r7, #0]
   b4f2c:	7821      	ldrb	r1, [r4, #0]
   b4f2e:	23ff      	movs	r3, #255	; 0xff
   b4f30:	2003      	movs	r0, #3
   b4f32:	f7ff f915 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b4f36:	9600      	str	r6, [sp, #0]
   b4f38:	683a      	ldr	r2, [r7, #0]
   b4f3a:	7821      	ldrb	r1, [r4, #0]
   b4f3c:	23ff      	movs	r3, #255	; 0xff
   b4f3e:	2004      	movs	r0, #4
   b4f40:	f7ff f90e 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b4f44:	9600      	str	r6, [sp, #0]
   b4f46:	683a      	ldr	r2, [r7, #0]
   b4f48:	7821      	ldrb	r1, [r4, #0]
   b4f4a:	23ff      	movs	r3, #255	; 0xff
   b4f4c:	2005      	movs	r0, #5
   b4f4e:	f7ff f907 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b4f52:	9600      	str	r6, [sp, #0]
   b4f54:	23ff      	movs	r3, #255	; 0xff
   b4f56:	683a      	ldr	r2, [r7, #0]
   b4f58:	7821      	ldrb	r1, [r4, #0]
   b4f5a:	2006      	movs	r0, #6
   b4f5c:	f7ff f900 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b4f60:	f242 7010 	movw	r0, #10000	; 0x2710
   b4f64:	f003 f80e 	bl	b7f84 <delay>

        roll=6;
   b4f68:	2306      	movs	r3, #6
   b4f6a:	602b      	str	r3, [r5, #0]


    if(roll==6) {
//6 Red & Cyan Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b4f6c:	482f      	ldr	r0, [pc, #188]	; (b502c <loop+0x9f0>)
// NEOPIXEL SETTINGS
//6 Red & Cyan Lights

//HUE SETTINGS
// 6 Red & Cyan Lights
 hueOnOff = true;
   b4f6e:	4c30      	ldr	r4, [pc, #192]	; (b5030 <loop+0x9f4>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
            setHue(1, hueOnOff, 180, i, 255);
            setHue(2, hueOnOff, HueRed, i, 255);
   b4f70:	4f30      	ldr	r7, [pc, #192]	; (b5034 <loop+0x9f8>)
        myDisplay.setRotation(2); //0-3
   b4f72:	2102      	movs	r1, #2
   b4f74:	f002 f99d 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4f78:	2200      	movs	r2, #0
   b4f7a:	4611      	mov	r1, r2
   b4f7c:	482b      	ldr	r0, [pc, #172]	; (b502c <loop+0x9f0>)
   b4f7e:	f002 f98b 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, again, 128, 64, WHITE);
   b4f82:	2601      	movs	r6, #1
   b4f84:	2340      	movs	r3, #64	; 0x40
   b4f86:	2200      	movs	r2, #0
   b4f88:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b4f8c:	2380      	movs	r3, #128	; 0x80
   b4f8e:	4611      	mov	r1, r2
   b4f90:	4826      	ldr	r0, [pc, #152]	; (b502c <loop+0x9f0>)
   b4f92:	9300      	str	r3, [sp, #0]
   b4f94:	4b29      	ldr	r3, [pc, #164]	; (b503c <loop+0xa00>)
   b4f96:	f002 f87b 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4f9a:	4824      	ldr	r0, [pc, #144]	; (b502c <loop+0x9f0>)
   b4f9c:	f002 fbee 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4fa0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4fa4:	f002 ffee 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b4fa8:	4820      	ldr	r0, [pc, #128]	; (b502c <loop+0x9f0>)
   b4faa:	f002 fb6f 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b4fae:	f04f 08ff 	mov.w	r8, #255	; 0xff
 hueOnOff = true;
   b4fb2:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, 180, i, 255);
   b4fb4:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b4fb6:	f004 f80f 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b4fba:	4921      	ldr	r1, [pc, #132]	; (b5040 <loop+0xa04>)
   b4fbc:	f7ff f89d 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 180, i, 255);
   b4fc0:	9600      	str	r6, [sp, #0]
   b4fc2:	4643      	mov	r3, r8
   b4fc4:	7821      	ldrb	r1, [r4, #0]
   b4fc6:	22b4      	movs	r2, #180	; 0xb4
   b4fc8:	2001      	movs	r0, #1
   b4fca:	f7ff f8c9 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b4fce:	9600      	str	r6, [sp, #0]
   b4fd0:	4643      	mov	r3, r8
   b4fd2:	683a      	ldr	r2, [r7, #0]
   b4fd4:	7821      	ldrb	r1, [r4, #0]
   b4fd6:	2002      	movs	r0, #2
   b4fd8:	f7ff f8c2 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 180, i, 255);
   b4fdc:	9600      	str	r6, [sp, #0]
   b4fde:	4643      	mov	r3, r8
   b4fe0:	7821      	ldrb	r1, [r4, #0]
   b4fe2:	22b4      	movs	r2, #180	; 0xb4
   b4fe4:	2003      	movs	r0, #3
   b4fe6:	f7ff f8bb 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b4fea:	9600      	str	r6, [sp, #0]
   b4fec:	4643      	mov	r3, r8
   b4fee:	683a      	ldr	r2, [r7, #0]
   b4ff0:	7821      	ldrb	r1, [r4, #0]
   b4ff2:	2004      	movs	r0, #4
   b4ff4:	f7ff f8b4 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 180, i, 255);
   b4ff8:	9600      	str	r6, [sp, #0]
   b4ffa:	4643      	mov	r3, r8
   b4ffc:	7821      	ldrb	r1, [r4, #0]
   b4ffe:	22b4      	movs	r2, #180	; 0xb4
   b5000:	2005      	movs	r0, #5
   b5002:	f7ff f8ad 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b5006:	9600      	str	r6, [sp, #0]
   b5008:	4643      	mov	r3, r8
   b500a:	683a      	ldr	r2, [r7, #0]
   b500c:	7821      	ldrb	r1, [r4, #0]
   b500e:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5010:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b5014:	f7ff f8a4 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b5018:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b501c:	d1ca      	bne.n	b4fb4 <loop+0x978>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b501e:	f8df 9020 	ldr.w	r9, [pc, #32]	; b5040 <loop+0xa04>
        for(int i=0; i<=255; i=i+100) {
   b5022:	f04f 0800 	mov.w	r8, #0
   b5026:	e00f      	b.n	b5048 <loop+0xa0c>
   b5028:	000bb4da 	.word	0x000bb4da
   b502c:	2003e670 	.word	0x2003e670
   b5030:	2003e66c 	.word	0x2003e66c
   b5034:	2003e608 	.word	0x2003e608
   b5038:	000bb579 	.word	0x000bb579
   b503c:	000bd579 	.word	0x000bd579
   b5040:	000bb4c4 	.word	0x000bb4c4
   b5044:	2003e14c 	.word	0x2003e14c
            Serial.printf("turning on the light\n");
   b5048:	f003 ffc6 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b504c:	4649      	mov	r1, r9
   b504e:	f7ff f854 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b5052:	9600      	str	r6, [sp, #0]
   b5054:	4643      	mov	r3, r8
   b5056:	683a      	ldr	r2, [r7, #0]
   b5058:	7821      	ldrb	r1, [r4, #0]
   b505a:	2001      	movs	r0, #1
   b505c:	f7ff f880 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 180, i, 255);
   b5060:	9600      	str	r6, [sp, #0]
   b5062:	4643      	mov	r3, r8
   b5064:	7821      	ldrb	r1, [r4, #0]
   b5066:	22b4      	movs	r2, #180	; 0xb4
   b5068:	2002      	movs	r0, #2
   b506a:	f7ff f879 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b506e:	9600      	str	r6, [sp, #0]
   b5070:	4643      	mov	r3, r8
   b5072:	683a      	ldr	r2, [r7, #0]
   b5074:	7821      	ldrb	r1, [r4, #0]
   b5076:	2003      	movs	r0, #3
   b5078:	f7ff f872 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 180, i, 255);
   b507c:	9600      	str	r6, [sp, #0]
   b507e:	4643      	mov	r3, r8
   b5080:	7821      	ldrb	r1, [r4, #0]
   b5082:	22b4      	movs	r2, #180	; 0xb4
   b5084:	2004      	movs	r0, #4
   b5086:	f7ff f86b 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b508a:	9600      	str	r6, [sp, #0]
   b508c:	4643      	mov	r3, r8
   b508e:	683a      	ldr	r2, [r7, #0]
   b5090:	7821      	ldrb	r1, [r4, #0]
   b5092:	2005      	movs	r0, #5
   b5094:	f7ff f864 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 180, i, 255);
   b5098:	9600      	str	r6, [sp, #0]
   b509a:	4643      	mov	r3, r8
   b509c:	7821      	ldrb	r1, [r4, #0]
   b509e:	22b4      	movs	r2, #180	; 0xb4
   b50a0:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b50a2:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, 180, i, 255);
   b50a6:	f7ff f85b 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b50aa:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b50ae:	d1cb      	bne.n	b5048 <loop+0xa0c>
        }

        hueOnOff = false;
   b50b0:	2300      	movs	r3, #0
   b50b2:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b50b4:	f003 ff90 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b50b8:	49b7      	ldr	r1, [pc, #732]	; (b5398 <loop+0xd5c>)
   b50ba:	f7ff f81e 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b50be:	9600      	str	r6, [sp, #0]
   b50c0:	683a      	ldr	r2, [r7, #0]
   b50c2:	7821      	ldrb	r1, [r4, #0]
   b50c4:	23ff      	movs	r3, #255	; 0xff
   b50c6:	2001      	movs	r0, #1
   b50c8:	f7ff f84a 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b50cc:	9600      	str	r6, [sp, #0]
   b50ce:	683a      	ldr	r2, [r7, #0]
   b50d0:	7821      	ldrb	r1, [r4, #0]
   b50d2:	23ff      	movs	r3, #255	; 0xff
   b50d4:	2002      	movs	r0, #2
   b50d6:	f7ff f843 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b50da:	9600      	str	r6, [sp, #0]
   b50dc:	683a      	ldr	r2, [r7, #0]
   b50de:	7821      	ldrb	r1, [r4, #0]
   b50e0:	23ff      	movs	r3, #255	; 0xff
   b50e2:	2003      	movs	r0, #3
   b50e4:	f7ff f83c 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b50e8:	9600      	str	r6, [sp, #0]
   b50ea:	683a      	ldr	r2, [r7, #0]
   b50ec:	7821      	ldrb	r1, [r4, #0]
   b50ee:	23ff      	movs	r3, #255	; 0xff
   b50f0:	2004      	movs	r0, #4
   b50f2:	f7ff f835 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b50f6:	9600      	str	r6, [sp, #0]
   b50f8:	683a      	ldr	r2, [r7, #0]
   b50fa:	7821      	ldrb	r1, [r4, #0]
   b50fc:	23ff      	movs	r3, #255	; 0xff
   b50fe:	2005      	movs	r0, #5
   b5100:	f7ff f82e 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b5104:	9600      	str	r6, [sp, #0]
   b5106:	23ff      	movs	r3, #255	; 0xff
   b5108:	683a      	ldr	r2, [r7, #0]
   b510a:	7821      	ldrb	r1, [r4, #0]
   b510c:	2006      	movs	r0, #6
   b510e:	f7ff f827 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5112:	f242 7010 	movw	r0, #10000	; 0x2710
   b5116:	f002 ff35 	bl	b7f84 <delay>

        roll=7;
   b511a:	2307      	movs	r3, #7
   b511c:	602b      	str	r3, [r5, #0]


    if(roll==7) {
//7 Green & Yellow Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b511e:	489f      	ldr	r0, [pc, #636]	; (b539c <loop+0xd60>)
// NEOPIXEL SETTINGS
//7 Green & Yellow Lights

//HUE SETTINGS
// 7 Green & Yellow Lights
 hueOnOff = true;
   b5120:	4c9f      	ldr	r4, [pc, #636]	; (b53a0 <loop+0xd64>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b5122:	f8df a28c 	ldr.w	sl, [pc, #652]	; b53b0 <loop+0xd74>
            setHue(1, hueOnOff, HueGreen, i, 255);
            setHue(2, hueOnOff, HueYellow, i, 255);
   b5126:	f8df 828c 	ldr.w	r8, [pc, #652]	; b53b4 <loop+0xd78>
        myDisplay.setRotation(2); //0-3
   b512a:	2102      	movs	r1, #2
   b512c:	f002 f8c1 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b5130:	2200      	movs	r2, #0
   b5132:	4611      	mov	r1, r2
   b5134:	4899      	ldr	r0, [pc, #612]	; (b539c <loop+0xd60>)
   b5136:	f002 f8af 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, welp, 128, 64, WHITE);
   b513a:	2601      	movs	r6, #1
   b513c:	2340      	movs	r3, #64	; 0x40
   b513e:	2200      	movs	r2, #0
   b5140:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b5144:	2380      	movs	r3, #128	; 0x80
   b5146:	4611      	mov	r1, r2
   b5148:	4894      	ldr	r0, [pc, #592]	; (b539c <loop+0xd60>)
   b514a:	9300      	str	r3, [sp, #0]
   b514c:	4b95      	ldr	r3, [pc, #596]	; (b53a4 <loop+0xd68>)
   b514e:	f001 ff9f 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b5152:	4892      	ldr	r0, [pc, #584]	; (b539c <loop+0xd60>)
   b5154:	f002 fb12 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5158:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b515c:	f002 ff12 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b5160:	488e      	ldr	r0, [pc, #568]	; (b539c <loop+0xd60>)
   b5162:	f002 fa93 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b5166:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5168:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueGreen, i, 255);
   b516a:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b516c:	f003 ff34 	bl	b8fd8 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b5170:	f8df 9244 	ldr.w	r9, [pc, #580]	; b53b8 <loop+0xd7c>
            Serial.printf("turning on the light\n");
   b5174:	4651      	mov	r1, sl
   b5176:	f7fe ffc0 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b517a:	9600      	str	r6, [sp, #0]
   b517c:	463b      	mov	r3, r7
   b517e:	f8d9 2000 	ldr.w	r2, [r9]
   b5182:	7821      	ldrb	r1, [r4, #0]
   b5184:	2001      	movs	r0, #1
   b5186:	f7fe ffeb 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b518a:	9600      	str	r6, [sp, #0]
   b518c:	463b      	mov	r3, r7
   b518e:	f8d8 2000 	ldr.w	r2, [r8]
   b5192:	7821      	ldrb	r1, [r4, #0]
   b5194:	2002      	movs	r0, #2
   b5196:	f7fe ffe3 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b519a:	9600      	str	r6, [sp, #0]
   b519c:	463b      	mov	r3, r7
   b519e:	f8d9 2000 	ldr.w	r2, [r9]
   b51a2:	7821      	ldrb	r1, [r4, #0]
   b51a4:	2003      	movs	r0, #3
   b51a6:	f7fe ffdb 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b51aa:	9600      	str	r6, [sp, #0]
   b51ac:	463b      	mov	r3, r7
   b51ae:	f8d8 2000 	ldr.w	r2, [r8]
   b51b2:	7821      	ldrb	r1, [r4, #0]
   b51b4:	2004      	movs	r0, #4
   b51b6:	f7fe ffd3 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b51ba:	9600      	str	r6, [sp, #0]
   b51bc:	463b      	mov	r3, r7
   b51be:	f8d9 2000 	ldr.w	r2, [r9]
   b51c2:	7821      	ldrb	r1, [r4, #0]
   b51c4:	2005      	movs	r0, #5
   b51c6:	f7fe ffcb 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b51ca:	9600      	str	r6, [sp, #0]
   b51cc:	463b      	mov	r3, r7
   b51ce:	f8d8 2000 	ldr.w	r2, [r8]
   b51d2:	7821      	ldrb	r1, [r4, #0]
   b51d4:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b51d6:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b51d8:	f7fe ffc2 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b51dc:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b51e0:	d1c3      	bne.n	b516a <loop+0xb2e>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b51e2:	f8df a1cc 	ldr.w	sl, [pc, #460]	; b53b0 <loop+0xd74>
        for(int i=0; i<=255; i=i+100) {
   b51e6:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b51e8:	f003 fef6 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b51ec:	4651      	mov	r1, sl
   b51ee:	f7fe ff84 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b51f2:	9600      	str	r6, [sp, #0]
   b51f4:	463b      	mov	r3, r7
   b51f6:	f8d9 2000 	ldr.w	r2, [r9]
   b51fa:	7821      	ldrb	r1, [r4, #0]
   b51fc:	2001      	movs	r0, #1
   b51fe:	f7fe ffaf 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b5202:	9600      	str	r6, [sp, #0]
   b5204:	463b      	mov	r3, r7
   b5206:	f8d8 2000 	ldr.w	r2, [r8]
   b520a:	7821      	ldrb	r1, [r4, #0]
   b520c:	2002      	movs	r0, #2
   b520e:	f7fe ffa7 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b5212:	9600      	str	r6, [sp, #0]
   b5214:	463b      	mov	r3, r7
   b5216:	f8d9 2000 	ldr.w	r2, [r9]
   b521a:	7821      	ldrb	r1, [r4, #0]
   b521c:	2003      	movs	r0, #3
   b521e:	f7fe ff9f 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b5222:	9600      	str	r6, [sp, #0]
   b5224:	463b      	mov	r3, r7
   b5226:	f8d8 2000 	ldr.w	r2, [r8]
   b522a:	7821      	ldrb	r1, [r4, #0]
   b522c:	2004      	movs	r0, #4
   b522e:	f7fe ff97 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b5232:	9600      	str	r6, [sp, #0]
   b5234:	463b      	mov	r3, r7
   b5236:	f8d9 2000 	ldr.w	r2, [r9]
   b523a:	7821      	ldrb	r1, [r4, #0]
   b523c:	2005      	movs	r0, #5
   b523e:	f7fe ff8f 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b5242:	9600      	str	r6, [sp, #0]
   b5244:	463b      	mov	r3, r7
   b5246:	f8d8 2000 	ldr.w	r2, [r8]
   b524a:	7821      	ldrb	r1, [r4, #0]
   b524c:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b524e:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b5250:	f7fe ff86 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b5254:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b5258:	d1c6      	bne.n	b51e8 <loop+0xbac>
        }

        hueOnOff = false;
   b525a:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b525c:	4f52      	ldr	r7, [pc, #328]	; (b53a8 <loop+0xd6c>)
        hueOnOff = false;
   b525e:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b5260:	f003 feba 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5264:	494c      	ldr	r1, [pc, #304]	; (b5398 <loop+0xd5c>)
   b5266:	f7fe ff48 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b526a:	9600      	str	r6, [sp, #0]
   b526c:	683a      	ldr	r2, [r7, #0]
   b526e:	7821      	ldrb	r1, [r4, #0]
   b5270:	23ff      	movs	r3, #255	; 0xff
   b5272:	2001      	movs	r0, #1
   b5274:	f7fe ff74 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b5278:	9600      	str	r6, [sp, #0]
   b527a:	683a      	ldr	r2, [r7, #0]
   b527c:	7821      	ldrb	r1, [r4, #0]
   b527e:	23ff      	movs	r3, #255	; 0xff
   b5280:	2002      	movs	r0, #2
   b5282:	f7fe ff6d 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b5286:	9600      	str	r6, [sp, #0]
   b5288:	683a      	ldr	r2, [r7, #0]
   b528a:	7821      	ldrb	r1, [r4, #0]
   b528c:	23ff      	movs	r3, #255	; 0xff
   b528e:	2003      	movs	r0, #3
   b5290:	f7fe ff66 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b5294:	9600      	str	r6, [sp, #0]
   b5296:	683a      	ldr	r2, [r7, #0]
   b5298:	7821      	ldrb	r1, [r4, #0]
   b529a:	23ff      	movs	r3, #255	; 0xff
   b529c:	2004      	movs	r0, #4
   b529e:	f7fe ff5f 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b52a2:	9600      	str	r6, [sp, #0]
   b52a4:	683a      	ldr	r2, [r7, #0]
   b52a6:	7821      	ldrb	r1, [r4, #0]
   b52a8:	23ff      	movs	r3, #255	; 0xff
   b52aa:	2005      	movs	r0, #5
   b52ac:	f7fe ff58 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b52b0:	9600      	str	r6, [sp, #0]
   b52b2:	23ff      	movs	r3, #255	; 0xff
   b52b4:	683a      	ldr	r2, [r7, #0]
   b52b6:	7821      	ldrb	r1, [r4, #0]
   b52b8:	2006      	movs	r0, #6
   b52ba:	f7fe ff51 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b52be:	f242 7010 	movw	r0, #10000	; 0x2710
   b52c2:	f002 fe5f 	bl	b7f84 <delay>

        roll=8;
   b52c6:	2308      	movs	r3, #8
   b52c8:	602b      	str	r3, [r5, #0]


    if(roll==8) {
//8 Blue, Green & Yellow Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b52ca:	4834      	ldr	r0, [pc, #208]	; (b539c <loop+0xd60>)
// NEOPIXEL SETTINGS
//8 Blue, Green & Yellow Lights

//HUE SETTINGS
// 8 Blue, Green & Yellow Lights
 hueOnOff = true;
   b52cc:	4c34      	ldr	r4, [pc, #208]	; (b53a0 <loop+0xd64>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b52ce:	f8df a0e0 	ldr.w	sl, [pc, #224]	; b53b0 <loop+0xd74>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b52d2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; b53b4 <loop+0xd78>
        myDisplay.setRotation(2); //0-3
   b52d6:	2102      	movs	r1, #2
   b52d8:	f001 ffeb 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b52dc:	2200      	movs	r2, #0
   b52de:	4611      	mov	r1, r2
   b52e0:	482e      	ldr	r0, [pc, #184]	; (b539c <loop+0xd60>)
   b52e2:	f001 ffd9 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, lame, 128, 64, WHITE);
   b52e6:	2601      	movs	r6, #1
   b52e8:	2340      	movs	r3, #64	; 0x40
   b52ea:	2200      	movs	r2, #0
   b52ec:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b52f0:	2380      	movs	r3, #128	; 0x80
   b52f2:	4611      	mov	r1, r2
   b52f4:	4829      	ldr	r0, [pc, #164]	; (b539c <loop+0xd60>)
   b52f6:	9300      	str	r3, [sp, #0]
   b52f8:	4b2c      	ldr	r3, [pc, #176]	; (b53ac <loop+0xd70>)
   b52fa:	f001 fec9 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b52fe:	4827      	ldr	r0, [pc, #156]	; (b539c <loop+0xd60>)
   b5300:	f002 fa3c 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5304:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5308:	f002 fe3c 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b530c:	4823      	ldr	r0, [pc, #140]	; (b539c <loop+0xd60>)
   b530e:	f002 f9bd 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b5312:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5314:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueYellow, i, 255);
   b5316:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5318:	f003 fe5e 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b531c:	4651      	mov	r1, sl
   b531e:	f7fe feec 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b5322:	9600      	str	r6, [sp, #0]
            setHue(2, hueOnOff, HueGreen, i, 255);
   b5324:	f8df 9090 	ldr.w	r9, [pc, #144]	; b53b8 <loop+0xd7c>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b5328:	f8d8 2000 	ldr.w	r2, [r8]
   b532c:	7821      	ldrb	r1, [r4, #0]
   b532e:	463b      	mov	r3, r7
   b5330:	2001      	movs	r0, #1
   b5332:	f7fe ff15 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b5336:	9600      	str	r6, [sp, #0]
   b5338:	463b      	mov	r3, r7
   b533a:	f8d9 2000 	ldr.w	r2, [r9]
   b533e:	7821      	ldrb	r1, [r4, #0]
   b5340:	2002      	movs	r0, #2
   b5342:	f7fe ff0d 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueYellow, i, 255);
   b5346:	9600      	str	r6, [sp, #0]
   b5348:	463b      	mov	r3, r7
   b534a:	f8d8 2000 	ldr.w	r2, [r8]
   b534e:	7821      	ldrb	r1, [r4, #0]
   b5350:	2003      	movs	r0, #3
   b5352:	f7fe ff05 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b5356:	9600      	str	r6, [sp, #0]
   b5358:	463b      	mov	r3, r7
   b535a:	f8d9 2000 	ldr.w	r2, [r9]
   b535e:	7821      	ldrb	r1, [r4, #0]
   b5360:	2004      	movs	r0, #4
   b5362:	f7fe fefd 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueYellow, i, 255);
   b5366:	9600      	str	r6, [sp, #0]
   b5368:	463b      	mov	r3, r7
   b536a:	f8d8 2000 	ldr.w	r2, [r8]
   b536e:	7821      	ldrb	r1, [r4, #0]
   b5370:	2005      	movs	r0, #5
   b5372:	f7fe fef5 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b5376:	9600      	str	r6, [sp, #0]
   b5378:	463b      	mov	r3, r7
   b537a:	f8d9 2000 	ldr.w	r2, [r9]
   b537e:	7821      	ldrb	r1, [r4, #0]
   b5380:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5382:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b5384:	f7fe feec 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b5388:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b538c:	d1c3      	bne.n	b5316 <loop+0xcda>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b538e:	f8df a020 	ldr.w	sl, [pc, #32]	; b53b0 <loop+0xd74>
        for(int i=0; i<=255; i=i+100) {
   b5392:	2700      	movs	r7, #0
   b5394:	e012      	b.n	b53bc <loop+0xd80>
   b5396:	bf00      	nop
   b5398:	000bb4da 	.word	0x000bb4da
   b539c:	2003e670 	.word	0x2003e670
   b53a0:	2003e66c 	.word	0x2003e66c
   b53a4:	000bd179 	.word	0x000bd179
   b53a8:	2003e608 	.word	0x2003e608
   b53ac:	000bc579 	.word	0x000bc579
   b53b0:	000bb4c4 	.word	0x000bb4c4
   b53b4:	2003e14c 	.word	0x2003e14c
   b53b8:	2003e13c 	.word	0x2003e13c
            Serial.printf("turning on the light\n");
   b53bc:	f003 fe0c 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b53c0:	4651      	mov	r1, sl
   b53c2:	f7fe fe9a 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b53c6:	9600      	str	r6, [sp, #0]
   b53c8:	463b      	mov	r3, r7
   b53ca:	f8d9 2000 	ldr.w	r2, [r9]
   b53ce:	7821      	ldrb	r1, [r4, #0]
   b53d0:	2001      	movs	r0, #1
   b53d2:	f7fe fec5 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b53d6:	9600      	str	r6, [sp, #0]
   b53d8:	463b      	mov	r3, r7
   b53da:	f8d8 2000 	ldr.w	r2, [r8]
   b53de:	7821      	ldrb	r1, [r4, #0]
   b53e0:	2002      	movs	r0, #2
   b53e2:	f7fe febd 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b53e6:	9600      	str	r6, [sp, #0]
   b53e8:	463b      	mov	r3, r7
   b53ea:	f8d9 2000 	ldr.w	r2, [r9]
   b53ee:	7821      	ldrb	r1, [r4, #0]
   b53f0:	2003      	movs	r0, #3
   b53f2:	f7fe feb5 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b53f6:	9600      	str	r6, [sp, #0]
   b53f8:	463b      	mov	r3, r7
   b53fa:	f8d8 2000 	ldr.w	r2, [r8]
   b53fe:	7821      	ldrb	r1, [r4, #0]
   b5400:	2004      	movs	r0, #4
   b5402:	f7fe fead 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b5406:	9600      	str	r6, [sp, #0]
   b5408:	463b      	mov	r3, r7
   b540a:	f8d9 2000 	ldr.w	r2, [r9]
   b540e:	7821      	ldrb	r1, [r4, #0]
   b5410:	2005      	movs	r0, #5
   b5412:	f7fe fea5 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b5416:	9600      	str	r6, [sp, #0]
   b5418:	463b      	mov	r3, r7
   b541a:	f8d8 2000 	ldr.w	r2, [r8]
   b541e:	7821      	ldrb	r1, [r4, #0]
   b5420:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5422:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b5424:	f7fe fe9c 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b5428:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b542c:	d1c6      	bne.n	b53bc <loop+0xd80>
        }

        hueOnOff = false;
   b542e:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5430:	4fb5      	ldr	r7, [pc, #724]	; (b5708 <loop+0x10cc>)
        hueOnOff = false;
   b5432:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b5434:	f003 fdd0 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5438:	49b4      	ldr	r1, [pc, #720]	; (b570c <loop+0x10d0>)
   b543a:	f7fe fe5e 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b543e:	9600      	str	r6, [sp, #0]
   b5440:	683a      	ldr	r2, [r7, #0]
   b5442:	7821      	ldrb	r1, [r4, #0]
   b5444:	23ff      	movs	r3, #255	; 0xff
   b5446:	2001      	movs	r0, #1
   b5448:	f7fe fe8a 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b544c:	9600      	str	r6, [sp, #0]
   b544e:	683a      	ldr	r2, [r7, #0]
   b5450:	7821      	ldrb	r1, [r4, #0]
   b5452:	23ff      	movs	r3, #255	; 0xff
   b5454:	2002      	movs	r0, #2
   b5456:	f7fe fe83 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b545a:	9600      	str	r6, [sp, #0]
   b545c:	683a      	ldr	r2, [r7, #0]
   b545e:	7821      	ldrb	r1, [r4, #0]
   b5460:	23ff      	movs	r3, #255	; 0xff
   b5462:	2003      	movs	r0, #3
   b5464:	f7fe fe7c 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b5468:	9600      	str	r6, [sp, #0]
   b546a:	683a      	ldr	r2, [r7, #0]
   b546c:	7821      	ldrb	r1, [r4, #0]
   b546e:	23ff      	movs	r3, #255	; 0xff
   b5470:	2004      	movs	r0, #4
   b5472:	f7fe fe75 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b5476:	9600      	str	r6, [sp, #0]
   b5478:	683a      	ldr	r2, [r7, #0]
   b547a:	7821      	ldrb	r1, [r4, #0]
   b547c:	23ff      	movs	r3, #255	; 0xff
   b547e:	2005      	movs	r0, #5
   b5480:	f7fe fe6e 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b5484:	9600      	str	r6, [sp, #0]
   b5486:	23ff      	movs	r3, #255	; 0xff
   b5488:	683a      	ldr	r2, [r7, #0]
   b548a:	7821      	ldrb	r1, [r4, #0]
   b548c:	2006      	movs	r0, #6
   b548e:	f7fe fe67 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5492:	f242 7010 	movw	r0, #10000	; 0x2710
   b5496:	f002 fd75 	bl	b7f84 <delay>

        roll=9;
   b549a:	2309      	movs	r3, #9
   b549c:	602b      	str	r3, [r5, #0]


    if(roll==9) {
//9 Orange & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b549e:	489c      	ldr	r0, [pc, #624]	; (b5710 <loop+0x10d4>)
// NEOPIXEL SETTINGS
//9 Orange & Green Lights

//HUE SETTINGS
// 9 Orange & Green Lights
 hueOnOff = true;
   b54a0:	4c9c      	ldr	r4, [pc, #624]	; (b5714 <loop+0x10d8>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b54a2:	f8df a27c 	ldr.w	sl, [pc, #636]	; b5720 <loop+0x10e4>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b54a6:	f8df 927c 	ldr.w	r9, [pc, #636]	; b5724 <loop+0x10e8>
        myDisplay.setRotation(2); //0-3
   b54aa:	2102      	movs	r1, #2
   b54ac:	f001 ff01 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b54b0:	2200      	movs	r2, #0
   b54b2:	4611      	mov	r1, r2
   b54b4:	4896      	ldr	r0, [pc, #600]	; (b5710 <loop+0x10d4>)
   b54b6:	f001 feef 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, pray, 128, 64, WHITE);
   b54ba:	2601      	movs	r6, #1
   b54bc:	2340      	movs	r3, #64	; 0x40
   b54be:	2200      	movs	r2, #0
   b54c0:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b54c4:	2380      	movs	r3, #128	; 0x80
   b54c6:	4611      	mov	r1, r2
   b54c8:	4891      	ldr	r0, [pc, #580]	; (b5710 <loop+0x10d4>)
   b54ca:	9300      	str	r3, [sp, #0]
   b54cc:	4b92      	ldr	r3, [pc, #584]	; (b5718 <loop+0x10dc>)
   b54ce:	f001 fddf 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b54d2:	488f      	ldr	r0, [pc, #572]	; (b5710 <loop+0x10d4>)
   b54d4:	f002 f952 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b54d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b54dc:	f002 fd52 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b54e0:	488b      	ldr	r0, [pc, #556]	; (b5710 <loop+0x10d4>)
   b54e2:	f002 f8d3 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b54e6:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b54e8:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueOrange, i, 255);
   b54ea:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b54ec:	f003 fd74 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b54f0:	4651      	mov	r1, sl
   b54f2:	f7fe fe02 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b54f6:	9600      	str	r6, [sp, #0]
            setHue(2, hueOnOff, HueGreen, i, 255);
   b54f8:	f8df 822c 	ldr.w	r8, [pc, #556]	; b5728 <loop+0x10ec>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b54fc:	f8d9 2000 	ldr.w	r2, [r9]
   b5500:	7821      	ldrb	r1, [r4, #0]
   b5502:	463b      	mov	r3, r7
   b5504:	2001      	movs	r0, #1
   b5506:	f7fe fe2b 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b550a:	9600      	str	r6, [sp, #0]
   b550c:	463b      	mov	r3, r7
   b550e:	f8d8 2000 	ldr.w	r2, [r8]
   b5512:	7821      	ldrb	r1, [r4, #0]
   b5514:	2002      	movs	r0, #2
   b5516:	f7fe fe23 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueOrange, i, 255);
   b551a:	9600      	str	r6, [sp, #0]
   b551c:	463b      	mov	r3, r7
   b551e:	f8d9 2000 	ldr.w	r2, [r9]
   b5522:	7821      	ldrb	r1, [r4, #0]
   b5524:	2003      	movs	r0, #3
   b5526:	f7fe fe1b 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b552a:	9600      	str	r6, [sp, #0]
   b552c:	463b      	mov	r3, r7
   b552e:	f8d8 2000 	ldr.w	r2, [r8]
   b5532:	7821      	ldrb	r1, [r4, #0]
   b5534:	2004      	movs	r0, #4
   b5536:	f7fe fe13 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueOrange, i, 255);
   b553a:	9600      	str	r6, [sp, #0]
   b553c:	463b      	mov	r3, r7
   b553e:	f8d9 2000 	ldr.w	r2, [r9]
   b5542:	7821      	ldrb	r1, [r4, #0]
   b5544:	2005      	movs	r0, #5
   b5546:	f7fe fe0b 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b554a:	9600      	str	r6, [sp, #0]
   b554c:	463b      	mov	r3, r7
   b554e:	f8d8 2000 	ldr.w	r2, [r8]
   b5552:	7821      	ldrb	r1, [r4, #0]
   b5554:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5556:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b5558:	f7fe fe02 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b555c:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b5560:	d1c3      	bne.n	b54ea <loop+0xeae>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b5562:	f8df a1bc 	ldr.w	sl, [pc, #444]	; b5720 <loop+0x10e4>
        for(int i=0; i<=255; i=i+100) {
   b5566:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b5568:	f003 fd36 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b556c:	4651      	mov	r1, sl
   b556e:	f7fe fdc4 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b5572:	9600      	str	r6, [sp, #0]
   b5574:	463b      	mov	r3, r7
   b5576:	f8d9 2000 	ldr.w	r2, [r9]
   b557a:	7821      	ldrb	r1, [r4, #0]
   b557c:	2001      	movs	r0, #1
   b557e:	f7fe fdef 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b5582:	9600      	str	r6, [sp, #0]
   b5584:	463b      	mov	r3, r7
   b5586:	f8d8 2000 	ldr.w	r2, [r8]
   b558a:	7821      	ldrb	r1, [r4, #0]
   b558c:	2002      	movs	r0, #2
   b558e:	f7fe fde7 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueOrange, i, 255);
   b5592:	9600      	str	r6, [sp, #0]
   b5594:	463b      	mov	r3, r7
   b5596:	f8d9 2000 	ldr.w	r2, [r9]
   b559a:	7821      	ldrb	r1, [r4, #0]
   b559c:	2003      	movs	r0, #3
   b559e:	f7fe fddf 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b55a2:	9600      	str	r6, [sp, #0]
   b55a4:	463b      	mov	r3, r7
   b55a6:	f8d8 2000 	ldr.w	r2, [r8]
   b55aa:	7821      	ldrb	r1, [r4, #0]
   b55ac:	2004      	movs	r0, #4
   b55ae:	f7fe fdd7 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueOrange, i, 255);
   b55b2:	9600      	str	r6, [sp, #0]
   b55b4:	463b      	mov	r3, r7
   b55b6:	f8d9 2000 	ldr.w	r2, [r9]
   b55ba:	7821      	ldrb	r1, [r4, #0]
   b55bc:	2005      	movs	r0, #5
   b55be:	f7fe fdcf 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b55c2:	9600      	str	r6, [sp, #0]
   b55c4:	463b      	mov	r3, r7
   b55c6:	f8d8 2000 	ldr.w	r2, [r8]
   b55ca:	7821      	ldrb	r1, [r4, #0]
   b55cc:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b55ce:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b55d0:	f7fe fdc6 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b55d4:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b55d8:	d1c6      	bne.n	b5568 <loop+0xf2c>
        }

        hueOnOff = false;
   b55da:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b55dc:	4f4a      	ldr	r7, [pc, #296]	; (b5708 <loop+0x10cc>)
        hueOnOff = false;
   b55de:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b55e0:	f003 fcfa 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b55e4:	4949      	ldr	r1, [pc, #292]	; (b570c <loop+0x10d0>)
   b55e6:	f7fe fd88 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b55ea:	9600      	str	r6, [sp, #0]
   b55ec:	683a      	ldr	r2, [r7, #0]
   b55ee:	7821      	ldrb	r1, [r4, #0]
   b55f0:	23ff      	movs	r3, #255	; 0xff
   b55f2:	2001      	movs	r0, #1
   b55f4:	f7fe fdb4 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b55f8:	9600      	str	r6, [sp, #0]
   b55fa:	683a      	ldr	r2, [r7, #0]
   b55fc:	7821      	ldrb	r1, [r4, #0]
   b55fe:	23ff      	movs	r3, #255	; 0xff
   b5600:	2002      	movs	r0, #2
   b5602:	f7fe fdad 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b5606:	9600      	str	r6, [sp, #0]
   b5608:	683a      	ldr	r2, [r7, #0]
   b560a:	7821      	ldrb	r1, [r4, #0]
   b560c:	23ff      	movs	r3, #255	; 0xff
   b560e:	2003      	movs	r0, #3
   b5610:	f7fe fda6 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b5614:	9600      	str	r6, [sp, #0]
   b5616:	683a      	ldr	r2, [r7, #0]
   b5618:	7821      	ldrb	r1, [r4, #0]
   b561a:	23ff      	movs	r3, #255	; 0xff
   b561c:	2004      	movs	r0, #4
   b561e:	f7fe fd9f 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b5622:	9600      	str	r6, [sp, #0]
   b5624:	683a      	ldr	r2, [r7, #0]
   b5626:	7821      	ldrb	r1, [r4, #0]
   b5628:	23ff      	movs	r3, #255	; 0xff
   b562a:	2005      	movs	r0, #5
   b562c:	f7fe fd98 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b5630:	9600      	str	r6, [sp, #0]
   b5632:	23ff      	movs	r3, #255	; 0xff
   b5634:	683a      	ldr	r2, [r7, #0]
   b5636:	7821      	ldrb	r1, [r4, #0]
   b5638:	2006      	movs	r0, #6
   b563a:	f7fe fd91 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b563e:	f242 7010 	movw	r0, #10000	; 0x2710
   b5642:	f002 fc9f 	bl	b7f84 <delay>

        roll=10;
   b5646:	230a      	movs	r3, #10
   b5648:	602b      	str	r3, [r5, #0]


    if(roll==10) {
//10 Blue & Cyan Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b564a:	4831      	ldr	r0, [pc, #196]	; (b5710 <loop+0x10d4>)
//10 Blue & Cyan Lights


//HUE SETTINGS
// 10 Blue & Cyan Lights
 hueOnOff = true;
   b564c:	4c31      	ldr	r4, [pc, #196]	; (b5714 <loop+0x10d8>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
            setHue(1, hueOnOff, HueBlue, i, 255);
   b564e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; b572c <loop+0x10f0>
        myDisplay.setRotation(2); //0-3
   b5652:	2102      	movs	r1, #2
   b5654:	f001 fe2d 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b5658:	2200      	movs	r2, #0
   b565a:	4611      	mov	r1, r2
   b565c:	482c      	ldr	r0, [pc, #176]	; (b5710 <loop+0x10d4>)
   b565e:	f001 fe1b 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, gentle, 128, 64, WHITE);
   b5662:	2601      	movs	r6, #1
   b5664:	2340      	movs	r3, #64	; 0x40
   b5666:	2200      	movs	r2, #0
   b5668:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b566c:	2380      	movs	r3, #128	; 0x80
   b566e:	4611      	mov	r1, r2
   b5670:	4827      	ldr	r0, [pc, #156]	; (b5710 <loop+0x10d4>)
   b5672:	9300      	str	r3, [sp, #0]
   b5674:	4b29      	ldr	r3, [pc, #164]	; (b571c <loop+0x10e0>)
   b5676:	f001 fd0b 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b567a:	4825      	ldr	r0, [pc, #148]	; (b5710 <loop+0x10d4>)
   b567c:	f002 f87e 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5680:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5684:	f002 fc7e 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b5688:	4821      	ldr	r0, [pc, #132]	; (b5710 <loop+0x10d4>)
   b568a:	f001 ffff 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b568e:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5690:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueBlue, i, 255);
   b5692:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5694:	f003 fca0 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5698:	4921      	ldr	r1, [pc, #132]	; (b5720 <loop+0x10e4>)
   b569a:	f7fe fd2e 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueBlue, i, 255);
   b569e:	9600      	str	r6, [sp, #0]
   b56a0:	463b      	mov	r3, r7
   b56a2:	f8d8 2000 	ldr.w	r2, [r8]
   b56a6:	7821      	ldrb	r1, [r4, #0]
   b56a8:	2001      	movs	r0, #1
   b56aa:	f7fe fd59 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 175, i, 255);
   b56ae:	9600      	str	r6, [sp, #0]
   b56b0:	463b      	mov	r3, r7
   b56b2:	7821      	ldrb	r1, [r4, #0]
   b56b4:	22af      	movs	r2, #175	; 0xaf
   b56b6:	2002      	movs	r0, #2
   b56b8:	f7fe fd52 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueBlue, i, 255);
   b56bc:	9600      	str	r6, [sp, #0]
   b56be:	463b      	mov	r3, r7
   b56c0:	f8d8 2000 	ldr.w	r2, [r8]
   b56c4:	7821      	ldrb	r1, [r4, #0]
   b56c6:	2003      	movs	r0, #3
   b56c8:	f7fe fd4a 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 175, i, 255);
   b56cc:	9600      	str	r6, [sp, #0]
   b56ce:	463b      	mov	r3, r7
   b56d0:	7821      	ldrb	r1, [r4, #0]
   b56d2:	22af      	movs	r2, #175	; 0xaf
   b56d4:	2004      	movs	r0, #4
   b56d6:	f7fe fd43 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueBlue, i, 255);
   b56da:	9600      	str	r6, [sp, #0]
   b56dc:	463b      	mov	r3, r7
   b56de:	f8d8 2000 	ldr.w	r2, [r8]
   b56e2:	7821      	ldrb	r1, [r4, #0]
   b56e4:	2005      	movs	r0, #5
   b56e6:	f7fe fd3b 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 175, i, 255);
   b56ea:	9600      	str	r6, [sp, #0]
   b56ec:	463b      	mov	r3, r7
   b56ee:	7821      	ldrb	r1, [r4, #0]
   b56f0:	22af      	movs	r2, #175	; 0xaf
   b56f2:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b56f4:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, 175, i, 255);
   b56f6:	f7fe fd33 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b56fa:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b56fe:	d1c8      	bne.n	b5692 <loop+0x1056>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b5700:	f8df 901c 	ldr.w	r9, [pc, #28]	; b5720 <loop+0x10e4>
        for(int i=0; i<=255; i=i+100) {
   b5704:	2700      	movs	r7, #0
   b5706:	e013      	b.n	b5730 <loop+0x10f4>
   b5708:	2003e608 	.word	0x2003e608
   b570c:	000bb4da 	.word	0x000bb4da
   b5710:	2003e670 	.word	0x2003e670
   b5714:	2003e66c 	.word	0x2003e66c
   b5718:	000bc979 	.word	0x000bc979
   b571c:	000be979 	.word	0x000be979
   b5720:	000bb4c4 	.word	0x000bb4c4
   b5724:	2003e144 	.word	0x2003e144
   b5728:	2003e13c 	.word	0x2003e13c
   b572c:	2003e138 	.word	0x2003e138
            Serial.printf("turning on the light\n");
   b5730:	f003 fc52 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5734:	4649      	mov	r1, r9
   b5736:	f7fe fce0 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 175, i, 255);
   b573a:	9600      	str	r6, [sp, #0]
   b573c:	463b      	mov	r3, r7
   b573e:	7821      	ldrb	r1, [r4, #0]
   b5740:	22af      	movs	r2, #175	; 0xaf
   b5742:	2001      	movs	r0, #1
   b5744:	f7fe fd0c 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueBlue, i, 255);
   b5748:	9600      	str	r6, [sp, #0]
   b574a:	463b      	mov	r3, r7
   b574c:	f8d8 2000 	ldr.w	r2, [r8]
   b5750:	7821      	ldrb	r1, [r4, #0]
   b5752:	2002      	movs	r0, #2
   b5754:	f7fe fd04 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 175, i, 255);
   b5758:	9600      	str	r6, [sp, #0]
   b575a:	463b      	mov	r3, r7
   b575c:	7821      	ldrb	r1, [r4, #0]
   b575e:	22af      	movs	r2, #175	; 0xaf
   b5760:	2003      	movs	r0, #3
   b5762:	f7fe fcfd 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueBlue, i, 255);
   b5766:	9600      	str	r6, [sp, #0]
   b5768:	463b      	mov	r3, r7
   b576a:	f8d8 2000 	ldr.w	r2, [r8]
   b576e:	7821      	ldrb	r1, [r4, #0]
   b5770:	2004      	movs	r0, #4
   b5772:	f7fe fcf5 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 175, i, 255);
   b5776:	9600      	str	r6, [sp, #0]
   b5778:	463b      	mov	r3, r7
   b577a:	7821      	ldrb	r1, [r4, #0]
   b577c:	22af      	movs	r2, #175	; 0xaf
   b577e:	2005      	movs	r0, #5
   b5780:	f7fe fcee 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueBlue, i, 255);
   b5784:	9600      	str	r6, [sp, #0]
   b5786:	463b      	mov	r3, r7
   b5788:	f8d8 2000 	ldr.w	r2, [r8]
   b578c:	7821      	ldrb	r1, [r4, #0]
   b578e:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5790:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueBlue, i, 255);
   b5792:	f7fe fce5 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b5796:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b579a:	d1c9      	bne.n	b5730 <loop+0x10f4>
        }

        hueOnOff = false;
   b579c:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b579e:	4fb2      	ldr	r7, [pc, #712]	; (b5a68 <loop+0x142c>)
        hueOnOff = false;
   b57a0:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b57a2:	f003 fc19 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b57a6:	49b1      	ldr	r1, [pc, #708]	; (b5a6c <loop+0x1430>)
   b57a8:	f7fe fca7 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b57ac:	9600      	str	r6, [sp, #0]
   b57ae:	683a      	ldr	r2, [r7, #0]
   b57b0:	7821      	ldrb	r1, [r4, #0]
   b57b2:	23ff      	movs	r3, #255	; 0xff
   b57b4:	2001      	movs	r0, #1
   b57b6:	f7fe fcd3 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b57ba:	9600      	str	r6, [sp, #0]
   b57bc:	683a      	ldr	r2, [r7, #0]
   b57be:	7821      	ldrb	r1, [r4, #0]
   b57c0:	23ff      	movs	r3, #255	; 0xff
   b57c2:	2002      	movs	r0, #2
   b57c4:	f7fe fccc 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b57c8:	9600      	str	r6, [sp, #0]
   b57ca:	683a      	ldr	r2, [r7, #0]
   b57cc:	7821      	ldrb	r1, [r4, #0]
   b57ce:	23ff      	movs	r3, #255	; 0xff
   b57d0:	2003      	movs	r0, #3
   b57d2:	f7fe fcc5 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b57d6:	9600      	str	r6, [sp, #0]
   b57d8:	683a      	ldr	r2, [r7, #0]
   b57da:	7821      	ldrb	r1, [r4, #0]
   b57dc:	23ff      	movs	r3, #255	; 0xff
   b57de:	2004      	movs	r0, #4
   b57e0:	f7fe fcbe 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b57e4:	9600      	str	r6, [sp, #0]
   b57e6:	683a      	ldr	r2, [r7, #0]
   b57e8:	7821      	ldrb	r1, [r4, #0]
   b57ea:	23ff      	movs	r3, #255	; 0xff
   b57ec:	2005      	movs	r0, #5
   b57ee:	f7fe fcb7 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b57f2:	9600      	str	r6, [sp, #0]
   b57f4:	23ff      	movs	r3, #255	; 0xff
   b57f6:	683a      	ldr	r2, [r7, #0]
   b57f8:	7821      	ldrb	r1, [r4, #0]
   b57fa:	2006      	movs	r0, #6
   b57fc:	f7fe fcb0 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5800:	f242 7010 	movw	r0, #10000	; 0x2710
   b5804:	f002 fbbe 	bl	b7f84 <delay>

        roll=11;
   b5808:	230b      	movs	r3, #11
   b580a:	602b      	str	r3, [r5, #0]


    if(roll==11) {
//11 Purple & Cyan Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b580c:	4898      	ldr	r0, [pc, #608]	; (b5a70 <loop+0x1434>)
// NEOPIXEL SETTINGS
//11 Purple & Cyan Lights

//HUE SETTINGS
// 11 Purple & Cyan Lights
 hueOnOff = true;
   b580e:	4c99      	ldr	r4, [pc, #612]	; (b5a74 <loop+0x1438>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5810:	f8df 8270 	ldr.w	r8, [pc, #624]	; b5a84 <loop+0x1448>
        myDisplay.setRotation(2); //0-3
   b5814:	2102      	movs	r1, #2
   b5816:	f001 fd4c 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b581a:	2200      	movs	r2, #0
   b581c:	4611      	mov	r1, r2
   b581e:	4894      	ldr	r0, [pc, #592]	; (b5a70 <loop+0x1434>)
   b5820:	f001 fd3a 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, goodLuck, 128, 64, WHITE);
   b5824:	2601      	movs	r6, #1
   b5826:	2340      	movs	r3, #64	; 0x40
   b5828:	2200      	movs	r2, #0
   b582a:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b582e:	2380      	movs	r3, #128	; 0x80
   b5830:	4611      	mov	r1, r2
   b5832:	488f      	ldr	r0, [pc, #572]	; (b5a70 <loop+0x1434>)
   b5834:	9300      	str	r3, [sp, #0]
   b5836:	4b90      	ldr	r3, [pc, #576]	; (b5a78 <loop+0x143c>)
   b5838:	f001 fc2a 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b583c:	488c      	ldr	r0, [pc, #560]	; (b5a70 <loop+0x1434>)
   b583e:	f001 ff9d 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5842:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5846:	f002 fb9d 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b584a:	4889      	ldr	r0, [pc, #548]	; (b5a70 <loop+0x1434>)
   b584c:	f001 ff1e 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b5850:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5852:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5854:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5856:	f003 fbbf 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b585a:	4988      	ldr	r1, [pc, #544]	; (b5a7c <loop+0x1440>)
   b585c:	f7fe fc4d 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5860:	9600      	str	r6, [sp, #0]
   b5862:	463b      	mov	r3, r7
   b5864:	f8d8 2000 	ldr.w	r2, [r8]
   b5868:	7821      	ldrb	r1, [r4, #0]
   b586a:	2001      	movs	r0, #1
   b586c:	f7fe fc78 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 195, i, 255);
   b5870:	9600      	str	r6, [sp, #0]
   b5872:	463b      	mov	r3, r7
   b5874:	7821      	ldrb	r1, [r4, #0]
   b5876:	22c3      	movs	r2, #195	; 0xc3
   b5878:	2002      	movs	r0, #2
   b587a:	f7fe fc71 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueViolet, i, 255);
   b587e:	9600      	str	r6, [sp, #0]
   b5880:	463b      	mov	r3, r7
   b5882:	f8d8 2000 	ldr.w	r2, [r8]
   b5886:	7821      	ldrb	r1, [r4, #0]
   b5888:	2003      	movs	r0, #3
   b588a:	f7fe fc69 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 195, i, 255);
   b588e:	9600      	str	r6, [sp, #0]
   b5890:	463b      	mov	r3, r7
   b5892:	7821      	ldrb	r1, [r4, #0]
   b5894:	22c3      	movs	r2, #195	; 0xc3
   b5896:	2004      	movs	r0, #4
   b5898:	f7fe fc62 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueViolet, i, 255);
   b589c:	9600      	str	r6, [sp, #0]
   b589e:	463b      	mov	r3, r7
   b58a0:	f8d8 2000 	ldr.w	r2, [r8]
   b58a4:	7821      	ldrb	r1, [r4, #0]
   b58a6:	2005      	movs	r0, #5
   b58a8:	f7fe fc5a 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 195, i, 255);
   b58ac:	9600      	str	r6, [sp, #0]
   b58ae:	463b      	mov	r3, r7
   b58b0:	7821      	ldrb	r1, [r4, #0]
   b58b2:	22c3      	movs	r2, #195	; 0xc3
   b58b4:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b58b6:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, 195, i, 255);
   b58b8:	f7fe fc52 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b58bc:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b58c0:	d1c8      	bne.n	b5854 <loop+0x1218>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b58c2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; b5a7c <loop+0x1440>
        for(int i=0; i<=255; i=i+100) {
   b58c6:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b58c8:	f003 fb86 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b58cc:	4649      	mov	r1, r9
   b58ce:	f7fe fc14 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 195, i, 255);
   b58d2:	9600      	str	r6, [sp, #0]
   b58d4:	463b      	mov	r3, r7
   b58d6:	7821      	ldrb	r1, [r4, #0]
   b58d8:	22c3      	movs	r2, #195	; 0xc3
   b58da:	2001      	movs	r0, #1
   b58dc:	f7fe fc40 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueViolet, i, 255);
   b58e0:	9600      	str	r6, [sp, #0]
   b58e2:	463b      	mov	r3, r7
   b58e4:	f8d8 2000 	ldr.w	r2, [r8]
   b58e8:	7821      	ldrb	r1, [r4, #0]
   b58ea:	2002      	movs	r0, #2
   b58ec:	f7fe fc38 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 195, i, 255);
   b58f0:	9600      	str	r6, [sp, #0]
   b58f2:	463b      	mov	r3, r7
   b58f4:	7821      	ldrb	r1, [r4, #0]
   b58f6:	22c3      	movs	r2, #195	; 0xc3
   b58f8:	2003      	movs	r0, #3
   b58fa:	f7fe fc31 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueViolet, i, 255);
   b58fe:	9600      	str	r6, [sp, #0]
   b5900:	463b      	mov	r3, r7
   b5902:	f8d8 2000 	ldr.w	r2, [r8]
   b5906:	7821      	ldrb	r1, [r4, #0]
   b5908:	2004      	movs	r0, #4
   b590a:	f7fe fc29 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 195, i, 255);
   b590e:	9600      	str	r6, [sp, #0]
   b5910:	463b      	mov	r3, r7
   b5912:	7821      	ldrb	r1, [r4, #0]
   b5914:	22c3      	movs	r2, #195	; 0xc3
   b5916:	2005      	movs	r0, #5
   b5918:	f7fe fc22 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueViolet, i, 255);
   b591c:	9600      	str	r6, [sp, #0]
   b591e:	463b      	mov	r3, r7
   b5920:	f8d8 2000 	ldr.w	r2, [r8]
   b5924:	7821      	ldrb	r1, [r4, #0]
   b5926:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5928:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueViolet, i, 255);
   b592a:	f7fe fc19 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b592e:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b5932:	d1c9      	bne.n	b58c8 <loop+0x128c>
        }

        hueOnOff = false;
   b5934:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5936:	4f4c      	ldr	r7, [pc, #304]	; (b5a68 <loop+0x142c>)
        hueOnOff = false;
   b5938:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b593a:	f003 fb4d 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b593e:	494b      	ldr	r1, [pc, #300]	; (b5a6c <loop+0x1430>)
   b5940:	f7fe fbdb 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5944:	9600      	str	r6, [sp, #0]
   b5946:	683a      	ldr	r2, [r7, #0]
   b5948:	7821      	ldrb	r1, [r4, #0]
   b594a:	23ff      	movs	r3, #255	; 0xff
   b594c:	2001      	movs	r0, #1
   b594e:	f7fe fc07 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b5952:	9600      	str	r6, [sp, #0]
   b5954:	683a      	ldr	r2, [r7, #0]
   b5956:	7821      	ldrb	r1, [r4, #0]
   b5958:	23ff      	movs	r3, #255	; 0xff
   b595a:	2002      	movs	r0, #2
   b595c:	f7fe fc00 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b5960:	9600      	str	r6, [sp, #0]
   b5962:	683a      	ldr	r2, [r7, #0]
   b5964:	7821      	ldrb	r1, [r4, #0]
   b5966:	23ff      	movs	r3, #255	; 0xff
   b5968:	2003      	movs	r0, #3
   b596a:	f7fe fbf9 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b596e:	9600      	str	r6, [sp, #0]
   b5970:	683a      	ldr	r2, [r7, #0]
   b5972:	7821      	ldrb	r1, [r4, #0]
   b5974:	23ff      	movs	r3, #255	; 0xff
   b5976:	2004      	movs	r0, #4
   b5978:	f7fe fbf2 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b597c:	9600      	str	r6, [sp, #0]
   b597e:	683a      	ldr	r2, [r7, #0]
   b5980:	7821      	ldrb	r1, [r4, #0]
   b5982:	23ff      	movs	r3, #255	; 0xff
   b5984:	2005      	movs	r0, #5
   b5986:	f7fe fbeb 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b598a:	9600      	str	r6, [sp, #0]
   b598c:	23ff      	movs	r3, #255	; 0xff
   b598e:	683a      	ldr	r2, [r7, #0]
   b5990:	7821      	ldrb	r1, [r4, #0]
   b5992:	2006      	movs	r0, #6
   b5994:	f7fe fbe4 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5998:	f242 7010 	movw	r0, #10000	; 0x2710
   b599c:	f002 faf2 	bl	b7f84 <delay>

        roll=12;
   b59a0:	230c      	movs	r3, #12
   b59a2:	602b      	str	r3, [r5, #0]


    if(roll==12) {
//12 Pink & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b59a4:	4832      	ldr	r0, [pc, #200]	; (b5a70 <loop+0x1434>)
// NEOPIXEL SETTINGS
//12 Pink & Green Lights

//HUE SETTINGS
// 12 Pink & Green Lights
 hueOnOff = true;
   b59a6:	4c33      	ldr	r4, [pc, #204]	; (b5a74 <loop+0x1438>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
            setHue(1, hueOnOff, HueGreen, i, 255);
   b59a8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; b5a88 <loop+0x144c>
        myDisplay.setRotation(2); //0-3
   b59ac:	2102      	movs	r1, #2
   b59ae:	f001 fc80 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b59b2:	2200      	movs	r2, #0
   b59b4:	4611      	mov	r1, r2
   b59b6:	482e      	ldr	r0, [pc, #184]	; (b5a70 <loop+0x1434>)
   b59b8:	f001 fc6e 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, skull, 128, 64, WHITE);
   b59bc:	2601      	movs	r6, #1
   b59be:	2340      	movs	r3, #64	; 0x40
   b59c0:	2200      	movs	r2, #0
   b59c2:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b59c6:	2380      	movs	r3, #128	; 0x80
   b59c8:	4611      	mov	r1, r2
   b59ca:	4829      	ldr	r0, [pc, #164]	; (b5a70 <loop+0x1434>)
   b59cc:	9300      	str	r3, [sp, #0]
   b59ce:	4b2c      	ldr	r3, [pc, #176]	; (b5a80 <loop+0x1444>)
   b59d0:	f001 fb5e 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b59d4:	4826      	ldr	r0, [pc, #152]	; (b5a70 <loop+0x1434>)
   b59d6:	f001 fed1 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b59da:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b59de:	f002 fad1 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b59e2:	4823      	ldr	r0, [pc, #140]	; (b5a70 <loop+0x1434>)
   b59e4:	f001 fe52 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b59e8:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b59ea:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueGreen, i, 255);
   b59ec:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b59ee:	f003 faf3 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b59f2:	4922      	ldr	r1, [pc, #136]	; (b5a7c <loop+0x1440>)
   b59f4:	f7fe fb81 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b59f8:	9600      	str	r6, [sp, #0]
   b59fa:	463b      	mov	r3, r7
   b59fc:	f8d8 2000 	ldr.w	r2, [r8]
   b5a00:	7821      	ldrb	r1, [r4, #0]
   b5a02:	2001      	movs	r0, #1
   b5a04:	f7fe fbac 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 315, i, 255);
   b5a08:	9600      	str	r6, [sp, #0]
   b5a0a:	463b      	mov	r3, r7
   b5a0c:	7821      	ldrb	r1, [r4, #0]
   b5a0e:	f240 123b 	movw	r2, #315	; 0x13b
   b5a12:	2002      	movs	r0, #2
   b5a14:	f7fe fba4 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b5a18:	9600      	str	r6, [sp, #0]
   b5a1a:	463b      	mov	r3, r7
   b5a1c:	f8d8 2000 	ldr.w	r2, [r8]
   b5a20:	7821      	ldrb	r1, [r4, #0]
   b5a22:	2003      	movs	r0, #3
   b5a24:	f7fe fb9c 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 315, i, 255);
   b5a28:	9600      	str	r6, [sp, #0]
   b5a2a:	463b      	mov	r3, r7
   b5a2c:	7821      	ldrb	r1, [r4, #0]
   b5a2e:	f240 123b 	movw	r2, #315	; 0x13b
   b5a32:	2004      	movs	r0, #4
   b5a34:	f7fe fb94 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b5a38:	9600      	str	r6, [sp, #0]
   b5a3a:	463b      	mov	r3, r7
   b5a3c:	f8d8 2000 	ldr.w	r2, [r8]
   b5a40:	7821      	ldrb	r1, [r4, #0]
   b5a42:	2005      	movs	r0, #5
   b5a44:	f7fe fb8c 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 315, i, 255);
   b5a48:	9600      	str	r6, [sp, #0]
   b5a4a:	463b      	mov	r3, r7
   b5a4c:	7821      	ldrb	r1, [r4, #0]
   b5a4e:	f240 123b 	movw	r2, #315	; 0x13b
   b5a52:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5a54:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, 315, i, 255);
   b5a56:	f7fe fb83 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b5a5a:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b5a5e:	d1c5      	bne.n	b59ec <loop+0x13b0>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b5a60:	f8df 9018 	ldr.w	r9, [pc, #24]	; b5a7c <loop+0x1440>
        for(int i=0; i<=255; i=i+100) {
   b5a64:	2700      	movs	r7, #0
   b5a66:	e011      	b.n	b5a8c <loop+0x1450>
   b5a68:	2003e608 	.word	0x2003e608
   b5a6c:	000bb4da 	.word	0x000bb4da
   b5a70:	2003e670 	.word	0x2003e670
   b5a74:	2003e66c 	.word	0x2003e66c
   b5a78:	000bf179 	.word	0x000bf179
   b5a7c:	000bb4c4 	.word	0x000bb4c4
   b5a80:	000be179 	.word	0x000be179
   b5a84:	2003e148 	.word	0x2003e148
   b5a88:	2003e13c 	.word	0x2003e13c
            Serial.printf("turning on the light\n");
   b5a8c:	f003 faa4 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5a90:	4649      	mov	r1, r9
   b5a92:	f7fe fb32 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 315, i, 255);
   b5a96:	9600      	str	r6, [sp, #0]
   b5a98:	463b      	mov	r3, r7
   b5a9a:	7821      	ldrb	r1, [r4, #0]
   b5a9c:	f240 123b 	movw	r2, #315	; 0x13b
   b5aa0:	2001      	movs	r0, #1
   b5aa2:	f7fe fb5d 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b5aa6:	9600      	str	r6, [sp, #0]
   b5aa8:	463b      	mov	r3, r7
   b5aaa:	f8d8 2000 	ldr.w	r2, [r8]
   b5aae:	7821      	ldrb	r1, [r4, #0]
   b5ab0:	2002      	movs	r0, #2
   b5ab2:	f7fe fb55 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 315, i, 255);
   b5ab6:	9600      	str	r6, [sp, #0]
   b5ab8:	463b      	mov	r3, r7
   b5aba:	7821      	ldrb	r1, [r4, #0]
   b5abc:	f240 123b 	movw	r2, #315	; 0x13b
   b5ac0:	2003      	movs	r0, #3
   b5ac2:	f7fe fb4d 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b5ac6:	9600      	str	r6, [sp, #0]
   b5ac8:	463b      	mov	r3, r7
   b5aca:	f8d8 2000 	ldr.w	r2, [r8]
   b5ace:	7821      	ldrb	r1, [r4, #0]
   b5ad0:	2004      	movs	r0, #4
   b5ad2:	f7fe fb45 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 315, i, 255);
   b5ad6:	9600      	str	r6, [sp, #0]
   b5ad8:	463b      	mov	r3, r7
   b5ada:	7821      	ldrb	r1, [r4, #0]
   b5adc:	f240 123b 	movw	r2, #315	; 0x13b
   b5ae0:	2005      	movs	r0, #5
   b5ae2:	f7fe fb3d 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b5ae6:	9600      	str	r6, [sp, #0]
   b5ae8:	463b      	mov	r3, r7
   b5aea:	f8d8 2000 	ldr.w	r2, [r8]
   b5aee:	7821      	ldrb	r1, [r4, #0]
   b5af0:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5af2:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b5af4:	f7fe fb34 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b5af8:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b5afc:	d1c6      	bne.n	b5a8c <loop+0x1450>
        }

        hueOnOff = false;
   b5afe:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5b00:	4fb7      	ldr	r7, [pc, #732]	; (b5de0 <loop+0x17a4>)
        hueOnOff = false;
   b5b02:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b5b04:	f003 fa68 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5b08:	49b6      	ldr	r1, [pc, #728]	; (b5de4 <loop+0x17a8>)
   b5b0a:	f7fe faf6 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5b0e:	9600      	str	r6, [sp, #0]
   b5b10:	683a      	ldr	r2, [r7, #0]
   b5b12:	7821      	ldrb	r1, [r4, #0]
   b5b14:	23ff      	movs	r3, #255	; 0xff
   b5b16:	2001      	movs	r0, #1
   b5b18:	f7fe fb22 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b5b1c:	9600      	str	r6, [sp, #0]
   b5b1e:	683a      	ldr	r2, [r7, #0]
   b5b20:	7821      	ldrb	r1, [r4, #0]
   b5b22:	23ff      	movs	r3, #255	; 0xff
   b5b24:	2002      	movs	r0, #2
   b5b26:	f7fe fb1b 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b5b2a:	9600      	str	r6, [sp, #0]
   b5b2c:	683a      	ldr	r2, [r7, #0]
   b5b2e:	7821      	ldrb	r1, [r4, #0]
   b5b30:	23ff      	movs	r3, #255	; 0xff
   b5b32:	2003      	movs	r0, #3
   b5b34:	f7fe fb14 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b5b38:	9600      	str	r6, [sp, #0]
   b5b3a:	683a      	ldr	r2, [r7, #0]
   b5b3c:	7821      	ldrb	r1, [r4, #0]
   b5b3e:	23ff      	movs	r3, #255	; 0xff
   b5b40:	2004      	movs	r0, #4
   b5b42:	f7fe fb0d 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b5b46:	9600      	str	r6, [sp, #0]
   b5b48:	683a      	ldr	r2, [r7, #0]
   b5b4a:	7821      	ldrb	r1, [r4, #0]
   b5b4c:	23ff      	movs	r3, #255	; 0xff
   b5b4e:	2005      	movs	r0, #5
   b5b50:	f7fe fb06 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b5b54:	9600      	str	r6, [sp, #0]
   b5b56:	23ff      	movs	r3, #255	; 0xff
   b5b58:	683a      	ldr	r2, [r7, #0]
   b5b5a:	7821      	ldrb	r1, [r4, #0]
   b5b5c:	2006      	movs	r0, #6
   b5b5e:	f7fe faff 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5b62:	f242 7010 	movw	r0, #10000	; 0x2710
   b5b66:	f002 fa0d 	bl	b7f84 <delay>

        roll=13;
   b5b6a:	230d      	movs	r3, #13
   b5b6c:	602b      	str	r3, [r5, #0]


    if(roll==13) {
//13 Blue, Cyan & Purple Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b5b6e:	489e      	ldr	r0, [pc, #632]	; (b5de8 <loop+0x17ac>)
// NEOPIXEL SETTINGS
//13 Blue, Cyan & Purple Lights

//HUE SETTINGS
// 13 Blue, Cyan & Purple Lights
 hueOnOff = true;
   b5b70:	4c9e      	ldr	r4, [pc, #632]	; (b5dec <loop+0x17b0>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b5b72:	f8df a284 	ldr.w	sl, [pc, #644]	; b5df8 <loop+0x17bc>
            setHue(1, hueOnOff, HueViolet, i, 255);
            setHue(2, hueOnOff, HueBlue, i, 255);
   b5b76:	f8df 8284 	ldr.w	r8, [pc, #644]	; b5dfc <loop+0x17c0>
        myDisplay.setRotation(2); //0-3
   b5b7a:	2102      	movs	r1, #2
   b5b7c:	f001 fb99 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b5b80:	2200      	movs	r2, #0
   b5b82:	4611      	mov	r1, r2
   b5b84:	4898      	ldr	r0, [pc, #608]	; (b5de8 <loop+0x17ac>)
   b5b86:	f001 fb87 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, lucky, 128, 64, WHITE);
   b5b8a:	2601      	movs	r6, #1
   b5b8c:	2340      	movs	r3, #64	; 0x40
   b5b8e:	2200      	movs	r2, #0
   b5b90:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b5b94:	2380      	movs	r3, #128	; 0x80
   b5b96:	4611      	mov	r1, r2
   b5b98:	4893      	ldr	r0, [pc, #588]	; (b5de8 <loop+0x17ac>)
   b5b9a:	9300      	str	r3, [sp, #0]
   b5b9c:	4b94      	ldr	r3, [pc, #592]	; (b5df0 <loop+0x17b4>)
   b5b9e:	f001 fa77 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b5ba2:	4891      	ldr	r0, [pc, #580]	; (b5de8 <loop+0x17ac>)
   b5ba4:	f001 fdea 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5ba8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5bac:	f002 f9ea 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b5bb0:	488d      	ldr	r0, [pc, #564]	; (b5de8 <loop+0x17ac>)
   b5bb2:	f001 fd6b 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b5bb6:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5bb8:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5bba:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5bbc:	f003 fa0c 	bl	b8fd8 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5bc0:	f8df 923c 	ldr.w	r9, [pc, #572]	; b5e00 <loop+0x17c4>
            Serial.printf("turning on the light\n");
   b5bc4:	4651      	mov	r1, sl
   b5bc6:	f7fe fa98 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5bca:	9600      	str	r6, [sp, #0]
   b5bcc:	463b      	mov	r3, r7
   b5bce:	f8d9 2000 	ldr.w	r2, [r9]
   b5bd2:	7821      	ldrb	r1, [r4, #0]
   b5bd4:	2001      	movs	r0, #1
   b5bd6:	f7fe fac3 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueBlue, i, 255);
   b5bda:	9600      	str	r6, [sp, #0]
   b5bdc:	463b      	mov	r3, r7
   b5bde:	f8d8 2000 	ldr.w	r2, [r8]
   b5be2:	7821      	ldrb	r1, [r4, #0]
   b5be4:	2002      	movs	r0, #2
   b5be6:	f7fe fabb 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 195, i, 255);
   b5bea:	9600      	str	r6, [sp, #0]
   b5bec:	463b      	mov	r3, r7
   b5bee:	7821      	ldrb	r1, [r4, #0]
   b5bf0:	22c3      	movs	r2, #195	; 0xc3
   b5bf2:	2003      	movs	r0, #3
   b5bf4:	f7fe fab4 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueViolet, i, 255);
   b5bf8:	9600      	str	r6, [sp, #0]
   b5bfa:	463b      	mov	r3, r7
   b5bfc:	f8d9 2000 	ldr.w	r2, [r9]
   b5c00:	7821      	ldrb	r1, [r4, #0]
   b5c02:	2004      	movs	r0, #4
   b5c04:	f7fe faac 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueBlue, i, 255);
   b5c08:	9600      	str	r6, [sp, #0]
   b5c0a:	463b      	mov	r3, r7
   b5c0c:	f8d8 2000 	ldr.w	r2, [r8]
   b5c10:	7821      	ldrb	r1, [r4, #0]
   b5c12:	2005      	movs	r0, #5
   b5c14:	f7fe faa4 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 195, i, 255);
   b5c18:	9600      	str	r6, [sp, #0]
   b5c1a:	463b      	mov	r3, r7
   b5c1c:	7821      	ldrb	r1, [r4, #0]
   b5c1e:	22c3      	movs	r2, #195	; 0xc3
   b5c20:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5c22:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, 195, i, 255);
   b5c24:	f7fe fa9c 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b5c28:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b5c2c:	d1c5      	bne.n	b5bba <loop+0x157e>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b5c2e:	f8df a1c8 	ldr.w	sl, [pc, #456]	; b5df8 <loop+0x17bc>
        for(int i=0; i<=255; i=i+100) {
   b5c32:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b5c34:	f003 f9d0 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5c38:	4651      	mov	r1, sl
   b5c3a:	f7fe fa5e 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 195, i, 255);
   b5c3e:	9600      	str	r6, [sp, #0]
   b5c40:	463b      	mov	r3, r7
   b5c42:	7821      	ldrb	r1, [r4, #0]
   b5c44:	22c3      	movs	r2, #195	; 0xc3
   b5c46:	2001      	movs	r0, #1
   b5c48:	f7fe fa8a 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueViolet, i, 255);
   b5c4c:	9600      	str	r6, [sp, #0]
   b5c4e:	463b      	mov	r3, r7
   b5c50:	f8d9 2000 	ldr.w	r2, [r9]
   b5c54:	7821      	ldrb	r1, [r4, #0]
   b5c56:	2002      	movs	r0, #2
   b5c58:	f7fe fa82 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueBlue, i, 255);
   b5c5c:	9600      	str	r6, [sp, #0]
   b5c5e:	463b      	mov	r3, r7
   b5c60:	f8d8 2000 	ldr.w	r2, [r8]
   b5c64:	7821      	ldrb	r1, [r4, #0]
   b5c66:	2003      	movs	r0, #3
   b5c68:	f7fe fa7a 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 195, i, 255);
   b5c6c:	9600      	str	r6, [sp, #0]
   b5c6e:	463b      	mov	r3, r7
   b5c70:	7821      	ldrb	r1, [r4, #0]
   b5c72:	22c3      	movs	r2, #195	; 0xc3
   b5c74:	2004      	movs	r0, #4
   b5c76:	f7fe fa73 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueViolet, i, 255);
   b5c7a:	9600      	str	r6, [sp, #0]
   b5c7c:	463b      	mov	r3, r7
   b5c7e:	f8d9 2000 	ldr.w	r2, [r9]
   b5c82:	7821      	ldrb	r1, [r4, #0]
   b5c84:	2005      	movs	r0, #5
   b5c86:	f7fe fa6b 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueBlue, i, 255);
   b5c8a:	9600      	str	r6, [sp, #0]
   b5c8c:	463b      	mov	r3, r7
   b5c8e:	f8d8 2000 	ldr.w	r2, [r8]
   b5c92:	7821      	ldrb	r1, [r4, #0]
   b5c94:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5c96:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueBlue, i, 255);
   b5c98:	f7fe fa62 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b5c9c:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b5ca0:	d1c8      	bne.n	b5c34 <loop+0x15f8>
        }

        hueOnOff = false;
   b5ca2:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5ca4:	4f4e      	ldr	r7, [pc, #312]	; (b5de0 <loop+0x17a4>)
        hueOnOff = false;
   b5ca6:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b5ca8:	f003 f996 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5cac:	494d      	ldr	r1, [pc, #308]	; (b5de4 <loop+0x17a8>)
   b5cae:	f7fe fa24 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5cb2:	9600      	str	r6, [sp, #0]
   b5cb4:	683a      	ldr	r2, [r7, #0]
   b5cb6:	7821      	ldrb	r1, [r4, #0]
   b5cb8:	23ff      	movs	r3, #255	; 0xff
   b5cba:	2001      	movs	r0, #1
   b5cbc:	f7fe fa50 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b5cc0:	9600      	str	r6, [sp, #0]
   b5cc2:	683a      	ldr	r2, [r7, #0]
   b5cc4:	7821      	ldrb	r1, [r4, #0]
   b5cc6:	23ff      	movs	r3, #255	; 0xff
   b5cc8:	2002      	movs	r0, #2
   b5cca:	f7fe fa49 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b5cce:	9600      	str	r6, [sp, #0]
   b5cd0:	683a      	ldr	r2, [r7, #0]
   b5cd2:	7821      	ldrb	r1, [r4, #0]
   b5cd4:	23ff      	movs	r3, #255	; 0xff
   b5cd6:	2003      	movs	r0, #3
   b5cd8:	f7fe fa42 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b5cdc:	9600      	str	r6, [sp, #0]
   b5cde:	683a      	ldr	r2, [r7, #0]
   b5ce0:	7821      	ldrb	r1, [r4, #0]
   b5ce2:	23ff      	movs	r3, #255	; 0xff
   b5ce4:	2004      	movs	r0, #4
   b5ce6:	f7fe fa3b 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b5cea:	9600      	str	r6, [sp, #0]
   b5cec:	683a      	ldr	r2, [r7, #0]
   b5cee:	7821      	ldrb	r1, [r4, #0]
   b5cf0:	23ff      	movs	r3, #255	; 0xff
   b5cf2:	2005      	movs	r0, #5
   b5cf4:	f7fe fa34 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b5cf8:	9600      	str	r6, [sp, #0]
   b5cfa:	23ff      	movs	r3, #255	; 0xff
   b5cfc:	683a      	ldr	r2, [r7, #0]
   b5cfe:	7821      	ldrb	r1, [r4, #0]
   b5d00:	2006      	movs	r0, #6
   b5d02:	f7fe fa2d 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5d06:	f242 7010 	movw	r0, #10000	; 0x2710
   b5d0a:	f002 f93b 	bl	b7f84 <delay>

        roll=14;
   b5d0e:	230e      	movs	r3, #14
   b5d10:	602b      	str	r3, [r5, #0]


    if(roll==14) {
//14 Orange & Purple Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b5d12:	4835      	ldr	r0, [pc, #212]	; (b5de8 <loop+0x17ac>)
// NEOPIXEL SETTINGS
//14 Orange & Purple Lights

//HUE SETTINGS
// 14 Orange & Purple Lights
 hueOnOff = true;
   b5d14:	4c35      	ldr	r4, [pc, #212]	; (b5dec <loop+0x17b0>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b5d16:	f8df a0e0 	ldr.w	sl, [pc, #224]	; b5df8 <loop+0x17bc>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b5d1a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; b5e04 <loop+0x17c8>
        myDisplay.setRotation(2); //0-3
   b5d1e:	2102      	movs	r1, #2
   b5d20:	f001 fac7 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b5d24:	2200      	movs	r2, #0
   b5d26:	4611      	mov	r1, r2
   b5d28:	482f      	ldr	r0, [pc, #188]	; (b5de8 <loop+0x17ac>)
   b5d2a:	f001 fab5 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, goodIdea, 128, 64, WHITE);
   b5d2e:	2601      	movs	r6, #1
   b5d30:	2340      	movs	r3, #64	; 0x40
   b5d32:	2200      	movs	r2, #0
   b5d34:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b5d38:	2380      	movs	r3, #128	; 0x80
   b5d3a:	4611      	mov	r1, r2
   b5d3c:	482a      	ldr	r0, [pc, #168]	; (b5de8 <loop+0x17ac>)
   b5d3e:	9300      	str	r3, [sp, #0]
   b5d40:	4b2c      	ldr	r3, [pc, #176]	; (b5df4 <loop+0x17b8>)
   b5d42:	f001 f9a5 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b5d46:	4828      	ldr	r0, [pc, #160]	; (b5de8 <loop+0x17ac>)
   b5d48:	f001 fd18 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5d4c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5d50:	f002 f918 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b5d54:	4824      	ldr	r0, [pc, #144]	; (b5de8 <loop+0x17ac>)
   b5d56:	f001 fc99 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b5d5a:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5d5c:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueOrange, i, 255);
   b5d5e:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5d60:	f003 f93a 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5d64:	4651      	mov	r1, sl
   b5d66:	f7fe f9c8 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b5d6a:	9600      	str	r6, [sp, #0]
            setHue(2, hueOnOff, HueViolet, i, 255);
   b5d6c:	f8df 9090 	ldr.w	r9, [pc, #144]	; b5e00 <loop+0x17c4>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b5d70:	f8d8 2000 	ldr.w	r2, [r8]
   b5d74:	7821      	ldrb	r1, [r4, #0]
   b5d76:	463b      	mov	r3, r7
   b5d78:	2001      	movs	r0, #1
   b5d7a:	f7fe f9f1 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueViolet, i, 255);
   b5d7e:	9600      	str	r6, [sp, #0]
   b5d80:	463b      	mov	r3, r7
   b5d82:	f8d9 2000 	ldr.w	r2, [r9]
   b5d86:	7821      	ldrb	r1, [r4, #0]
   b5d88:	2002      	movs	r0, #2
   b5d8a:	f7fe f9e9 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueOrange, i, 255);
   b5d8e:	9600      	str	r6, [sp, #0]
   b5d90:	463b      	mov	r3, r7
   b5d92:	f8d8 2000 	ldr.w	r2, [r8]
   b5d96:	7821      	ldrb	r1, [r4, #0]
   b5d98:	2003      	movs	r0, #3
   b5d9a:	f7fe f9e1 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueViolet, i, 255);
   b5d9e:	9600      	str	r6, [sp, #0]
   b5da0:	463b      	mov	r3, r7
   b5da2:	f8d9 2000 	ldr.w	r2, [r9]
   b5da6:	7821      	ldrb	r1, [r4, #0]
   b5da8:	2004      	movs	r0, #4
   b5daa:	f7fe f9d9 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueOrange, i, 255);
   b5dae:	9600      	str	r6, [sp, #0]
   b5db0:	463b      	mov	r3, r7
   b5db2:	f8d8 2000 	ldr.w	r2, [r8]
   b5db6:	7821      	ldrb	r1, [r4, #0]
   b5db8:	2005      	movs	r0, #5
   b5dba:	f7fe f9d1 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueViolet, i, 255);
   b5dbe:	9600      	str	r6, [sp, #0]
   b5dc0:	463b      	mov	r3, r7
   b5dc2:	f8d9 2000 	ldr.w	r2, [r9]
   b5dc6:	7821      	ldrb	r1, [r4, #0]
   b5dc8:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5dca:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueViolet, i, 255);
   b5dcc:	f7fe f9c8 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b5dd0:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b5dd4:	d1c3      	bne.n	b5d5e <loop+0x1722>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b5dd6:	f8df a020 	ldr.w	sl, [pc, #32]	; b5df8 <loop+0x17bc>
        for(int i=0; i<=255; i=i+100) {
   b5dda:	2700      	movs	r7, #0
   b5ddc:	e014      	b.n	b5e08 <loop+0x17cc>
   b5dde:	bf00      	nop
   b5de0:	2003e608 	.word	0x2003e608
   b5de4:	000bb4da 	.word	0x000bb4da
   b5de8:	2003e670 	.word	0x2003e670
   b5dec:	2003e66c 	.word	0x2003e66c
   b5df0:	000bdd79 	.word	0x000bdd79
   b5df4:	000bed79 	.word	0x000bed79
   b5df8:	000bb4c4 	.word	0x000bb4c4
   b5dfc:	2003e138 	.word	0x2003e138
   b5e00:	2003e148 	.word	0x2003e148
   b5e04:	2003e144 	.word	0x2003e144
            Serial.printf("turning on the light\n");
   b5e08:	f003 f8e6 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5e0c:	4651      	mov	r1, sl
   b5e0e:	f7fe f974 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5e12:	9600      	str	r6, [sp, #0]
   b5e14:	463b      	mov	r3, r7
   b5e16:	f8d9 2000 	ldr.w	r2, [r9]
   b5e1a:	7821      	ldrb	r1, [r4, #0]
   b5e1c:	2001      	movs	r0, #1
   b5e1e:	f7fe f99f 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueOrange, i, 255);
   b5e22:	9600      	str	r6, [sp, #0]
   b5e24:	463b      	mov	r3, r7
   b5e26:	f8d8 2000 	ldr.w	r2, [r8]
   b5e2a:	7821      	ldrb	r1, [r4, #0]
   b5e2c:	2002      	movs	r0, #2
   b5e2e:	f7fe f997 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueViolet, i, 255);
   b5e32:	9600      	str	r6, [sp, #0]
   b5e34:	463b      	mov	r3, r7
   b5e36:	f8d9 2000 	ldr.w	r2, [r9]
   b5e3a:	7821      	ldrb	r1, [r4, #0]
   b5e3c:	2003      	movs	r0, #3
   b5e3e:	f7fe f98f 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueOrange, i, 255);
   b5e42:	9600      	str	r6, [sp, #0]
   b5e44:	463b      	mov	r3, r7
   b5e46:	f8d8 2000 	ldr.w	r2, [r8]
   b5e4a:	7821      	ldrb	r1, [r4, #0]
   b5e4c:	2004      	movs	r0, #4
   b5e4e:	f7fe f987 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueViolet, i, 255);
   b5e52:	9600      	str	r6, [sp, #0]
   b5e54:	463b      	mov	r3, r7
   b5e56:	f8d9 2000 	ldr.w	r2, [r9]
   b5e5a:	7821      	ldrb	r1, [r4, #0]
   b5e5c:	2005      	movs	r0, #5
   b5e5e:	f7fe f97f 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueOrange, i, 255);
   b5e62:	9600      	str	r6, [sp, #0]
   b5e64:	463b      	mov	r3, r7
   b5e66:	f8d8 2000 	ldr.w	r2, [r8]
   b5e6a:	7821      	ldrb	r1, [r4, #0]
   b5e6c:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5e6e:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueOrange, i, 255);
   b5e70:	f7fe f976 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b5e74:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b5e78:	d1c6      	bne.n	b5e08 <loop+0x17cc>
        }

        hueOnOff = false;
   b5e7a:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5e7c:	4fb7      	ldr	r7, [pc, #732]	; (b615c <loop+0x1b20>)
        hueOnOff = false;
   b5e7e:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b5e80:	f003 f8aa 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5e84:	49b6      	ldr	r1, [pc, #728]	; (b6160 <loop+0x1b24>)
   b5e86:	f7fe f938 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5e8a:	9600      	str	r6, [sp, #0]
   b5e8c:	683a      	ldr	r2, [r7, #0]
   b5e8e:	7821      	ldrb	r1, [r4, #0]
   b5e90:	23ff      	movs	r3, #255	; 0xff
   b5e92:	2001      	movs	r0, #1
   b5e94:	f7fe f964 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b5e98:	9600      	str	r6, [sp, #0]
   b5e9a:	683a      	ldr	r2, [r7, #0]
   b5e9c:	7821      	ldrb	r1, [r4, #0]
   b5e9e:	23ff      	movs	r3, #255	; 0xff
   b5ea0:	2002      	movs	r0, #2
   b5ea2:	f7fe f95d 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b5ea6:	9600      	str	r6, [sp, #0]
   b5ea8:	683a      	ldr	r2, [r7, #0]
   b5eaa:	7821      	ldrb	r1, [r4, #0]
   b5eac:	23ff      	movs	r3, #255	; 0xff
   b5eae:	2003      	movs	r0, #3
   b5eb0:	f7fe f956 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b5eb4:	9600      	str	r6, [sp, #0]
   b5eb6:	683a      	ldr	r2, [r7, #0]
   b5eb8:	7821      	ldrb	r1, [r4, #0]
   b5eba:	23ff      	movs	r3, #255	; 0xff
   b5ebc:	2004      	movs	r0, #4
   b5ebe:	f7fe f94f 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b5ec2:	9600      	str	r6, [sp, #0]
   b5ec4:	683a      	ldr	r2, [r7, #0]
   b5ec6:	7821      	ldrb	r1, [r4, #0]
   b5ec8:	23ff      	movs	r3, #255	; 0xff
   b5eca:	2005      	movs	r0, #5
   b5ecc:	f7fe f948 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b5ed0:	9600      	str	r6, [sp, #0]
   b5ed2:	23ff      	movs	r3, #255	; 0xff
   b5ed4:	683a      	ldr	r2, [r7, #0]
   b5ed6:	7821      	ldrb	r1, [r4, #0]
   b5ed8:	2006      	movs	r0, #6
   b5eda:	f7fe f941 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5ede:	f242 7010 	movw	r0, #10000	; 0x2710
   b5ee2:	f002 f84f 	bl	b7f84 <delay>

        roll=15;
   b5ee6:	230f      	movs	r3, #15
   b5ee8:	602b      	str	r3, [r5, #0]


    if(roll==15) {
//15 Magenta, Pink, and Orange Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b5eea:	489e      	ldr	r0, [pc, #632]	; (b6164 <loop+0x1b28>)
// NEOPIXEL SETTINGS
//15 Magenta, Pink, and Orange Lights

//HUE SETTINGS
// 15 Magenta, Pink, and Orange Lights
 hueOnOff = true;
   b5eec:	4c9e      	ldr	r4, [pc, #632]	; (b6168 <loop+0x1b2c>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
            setHue(1, hueOnOff, 315, i, 255);
            setHue(2, hueOnOff, HueOrange, i, 255);
   b5eee:	f8df 828c 	ldr.w	r8, [pc, #652]	; b617c <loop+0x1b40>
        myDisplay.setRotation(2); //0-3
   b5ef2:	2102      	movs	r1, #2
   b5ef4:	f001 f9dd 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b5ef8:	2200      	movs	r2, #0
   b5efa:	4611      	mov	r1, r2
   b5efc:	4899      	ldr	r0, [pc, #612]	; (b6164 <loop+0x1b28>)
   b5efe:	f001 f9cb 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, mushrooms, 128, 64, WHITE);
   b5f02:	2601      	movs	r6, #1
   b5f04:	2340      	movs	r3, #64	; 0x40
   b5f06:	2200      	movs	r2, #0
   b5f08:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b5f0c:	2380      	movs	r3, #128	; 0x80
   b5f0e:	4611      	mov	r1, r2
   b5f10:	4894      	ldr	r0, [pc, #592]	; (b6164 <loop+0x1b28>)
   b5f12:	9300      	str	r3, [sp, #0]
   b5f14:	4b95      	ldr	r3, [pc, #596]	; (b616c <loop+0x1b30>)
   b5f16:	f001 f8bb 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b5f1a:	4892      	ldr	r0, [pc, #584]	; (b6164 <loop+0x1b28>)
   b5f1c:	f001 fc2e 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5f20:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5f24:	f002 f82e 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b5f28:	488e      	ldr	r0, [pc, #568]	; (b6164 <loop+0x1b28>)
   b5f2a:	f001 fbaf 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
 hueOnOff = true;
   b5f2e:	7026      	strb	r6, [r4, #0]
        for(int i=255; i>=0; i=i-100) {
   b5f30:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5f32:	f003 f851 	bl	b8fd8 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, 315, i, 255);
   b5f36:	27ff      	movs	r7, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5f38:	498d      	ldr	r1, [pc, #564]	; (b6170 <loop+0x1b34>)
   b5f3a:	f7fe f8de 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 315, i, 255);
   b5f3e:	9700      	str	r7, [sp, #0]
   b5f40:	4633      	mov	r3, r6
   b5f42:	7821      	ldrb	r1, [r4, #0]
   b5f44:	f240 123b 	movw	r2, #315	; 0x13b
   b5f48:	2001      	movs	r0, #1
   b5f4a:	f7fe f909 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueOrange, i, 255);
   b5f4e:	9700      	str	r7, [sp, #0]
   b5f50:	4633      	mov	r3, r6
   b5f52:	f8d8 2000 	ldr.w	r2, [r8]
   b5f56:	7821      	ldrb	r1, [r4, #0]
            setHue(3, hueOnOff, 315, i, 127);
   b5f58:	f04f 097f 	mov.w	r9, #127	; 0x7f
            setHue(2, hueOnOff, HueOrange, i, 255);
   b5f5c:	2002      	movs	r0, #2
   b5f5e:	f7fe f8ff 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 315, i, 127);
   b5f62:	f8cd 9000 	str.w	r9, [sp]
   b5f66:	4633      	mov	r3, r6
   b5f68:	7821      	ldrb	r1, [r4, #0]
   b5f6a:	f240 123b 	movw	r2, #315	; 0x13b
   b5f6e:	2003      	movs	r0, #3
   b5f70:	f7fe f8f6 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 315, i, 255);
   b5f74:	9700      	str	r7, [sp, #0]
   b5f76:	4633      	mov	r3, r6
   b5f78:	7821      	ldrb	r1, [r4, #0]
   b5f7a:	f240 123b 	movw	r2, #315	; 0x13b
   b5f7e:	2004      	movs	r0, #4
   b5f80:	f7fe f8ee 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueOrange, i, 255);
   b5f84:	9700      	str	r7, [sp, #0]
   b5f86:	4633      	mov	r3, r6
   b5f88:	f8d8 2000 	ldr.w	r2, [r8]
   b5f8c:	7821      	ldrb	r1, [r4, #0]
   b5f8e:	2005      	movs	r0, #5
   b5f90:	f7fe f8e6 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 315, i, 127);
   b5f94:	f8cd 9000 	str.w	r9, [sp]
   b5f98:	4633      	mov	r3, r6
   b5f9a:	7821      	ldrb	r1, [r4, #0]
   b5f9c:	f240 123b 	movw	r2, #315	; 0x13b
   b5fa0:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5fa2:	3e64      	subs	r6, #100	; 0x64
            setHue(6, hueOnOff, 315, i, 127);
   b5fa4:	f7fe f8dc 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b5fa8:	f116 0f2d 	cmn.w	r6, #45	; 0x2d
   b5fac:	d1c1      	bne.n	b5f32 <loop+0x18f6>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b5fae:	f8df a1c0 	ldr.w	sl, [pc, #448]	; b6170 <loop+0x1b34>
        for(int i=0; i<=255; i=i+100) {
   b5fb2:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b5fb4:	f003 f810 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b5fb8:	4651      	mov	r1, sl
   b5fba:	f7fe f89e 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 315, i, 127);
   b5fbe:	f8cd 9000 	str.w	r9, [sp]
            setHue(2, hueOnOff, 315, i, 255);
   b5fc2:	26ff      	movs	r6, #255	; 0xff
            setHue(1, hueOnOff, 315, i, 127);
   b5fc4:	463b      	mov	r3, r7
   b5fc6:	7821      	ldrb	r1, [r4, #0]
   b5fc8:	f240 123b 	movw	r2, #315	; 0x13b
   b5fcc:	2001      	movs	r0, #1
   b5fce:	f7fe f8c7 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 315, i, 255);
   b5fd2:	9600      	str	r6, [sp, #0]
   b5fd4:	463b      	mov	r3, r7
   b5fd6:	7821      	ldrb	r1, [r4, #0]
   b5fd8:	f240 123b 	movw	r2, #315	; 0x13b
   b5fdc:	2002      	movs	r0, #2
   b5fde:	f7fe f8bf 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueOrange, i, 255);
   b5fe2:	9600      	str	r6, [sp, #0]
   b5fe4:	463b      	mov	r3, r7
   b5fe6:	f8d8 2000 	ldr.w	r2, [r8]
   b5fea:	7821      	ldrb	r1, [r4, #0]
   b5fec:	2003      	movs	r0, #3
   b5fee:	f7fe f8b7 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 315, i, 127);
   b5ff2:	f8cd 9000 	str.w	r9, [sp]
   b5ff6:	463b      	mov	r3, r7
   b5ff8:	7821      	ldrb	r1, [r4, #0]
   b5ffa:	f240 123b 	movw	r2, #315	; 0x13b
   b5ffe:	2004      	movs	r0, #4
   b6000:	f7fe f8ae 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 315, i, 255);
   b6004:	9600      	str	r6, [sp, #0]
   b6006:	463b      	mov	r3, r7
   b6008:	7821      	ldrb	r1, [r4, #0]
   b600a:	f240 123b 	movw	r2, #315	; 0x13b
   b600e:	2005      	movs	r0, #5
   b6010:	f7fe f8a6 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueOrange, i, 255);
   b6014:	9600      	str	r6, [sp, #0]
   b6016:	463b      	mov	r3, r7
   b6018:	f8d8 2000 	ldr.w	r2, [r8]
   b601c:	7821      	ldrb	r1, [r4, #0]
   b601e:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b6020:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueOrange, i, 255);
   b6022:	f7fe f89d 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b6026:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b602a:	d1c3      	bne.n	b5fb4 <loop+0x1978>
        }

        hueOnOff = false;
   b602c:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b602e:	4f4b      	ldr	r7, [pc, #300]	; (b615c <loop+0x1b20>)
        hueOnOff = false;
   b6030:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b6032:	f002 ffd1 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b6036:	494a      	ldr	r1, [pc, #296]	; (b6160 <loop+0x1b24>)
   b6038:	f7fe f85f 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b603c:	9600      	str	r6, [sp, #0]
   b603e:	683a      	ldr	r2, [r7, #0]
   b6040:	7821      	ldrb	r1, [r4, #0]
   b6042:	4633      	mov	r3, r6
   b6044:	2001      	movs	r0, #1
   b6046:	f7fe f88b 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b604a:	9600      	str	r6, [sp, #0]
   b604c:	683a      	ldr	r2, [r7, #0]
   b604e:	7821      	ldrb	r1, [r4, #0]
   b6050:	4633      	mov	r3, r6
   b6052:	2002      	movs	r0, #2
   b6054:	f7fe f884 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b6058:	9600      	str	r6, [sp, #0]
   b605a:	683a      	ldr	r2, [r7, #0]
   b605c:	7821      	ldrb	r1, [r4, #0]
   b605e:	4633      	mov	r3, r6
   b6060:	2003      	movs	r0, #3
   b6062:	f7fe f87d 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b6066:	9600      	str	r6, [sp, #0]
   b6068:	683a      	ldr	r2, [r7, #0]
   b606a:	7821      	ldrb	r1, [r4, #0]
   b606c:	4633      	mov	r3, r6
   b606e:	2004      	movs	r0, #4
   b6070:	f7fe f876 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b6074:	9600      	str	r6, [sp, #0]
   b6076:	683a      	ldr	r2, [r7, #0]
   b6078:	7821      	ldrb	r1, [r4, #0]
   b607a:	4633      	mov	r3, r6
   b607c:	2005      	movs	r0, #5
   b607e:	f7fe f86f 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b6082:	9600      	str	r6, [sp, #0]
   b6084:	4633      	mov	r3, r6
   b6086:	683a      	ldr	r2, [r7, #0]
   b6088:	7821      	ldrb	r1, [r4, #0]
   b608a:	2006      	movs	r0, #6
   b608c:	f7fe f868 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b6090:	f242 7010 	movw	r0, #10000	; 0x2710
   b6094:	f001 ff76 	bl	b7f84 <delay>

        roll=16;
   b6098:	2310      	movs	r3, #16
   b609a:	602b      	str	r3, [r5, #0]


    if(roll==16) {
//16 Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b609c:	4831      	ldr	r0, [pc, #196]	; (b6164 <loop+0x1b28>)
// NEOPIXEL SETTINGS
//16 Green Lights

//HUE SETTINGS
// 16 Green Lights
 hueOnOff = true;
   b609e:	4c32      	ldr	r4, [pc, #200]	; (b6168 <loop+0x1b2c>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b60a0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; b6170 <loop+0x1b34>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b60a4:	4f33      	ldr	r7, [pc, #204]	; (b6174 <loop+0x1b38>)
        myDisplay.setRotation(2); //0-3
   b60a6:	2102      	movs	r1, #2
   b60a8:	f001 f903 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b60ac:	2200      	movs	r2, #0
   b60ae:	4611      	mov	r1, r2
   b60b0:	482c      	ldr	r0, [pc, #176]	; (b6164 <loop+0x1b28>)
   b60b2:	f001 f8f1 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, fight, 128, 64, WHITE);
   b60b6:	2601      	movs	r6, #1
   b60b8:	2340      	movs	r3, #64	; 0x40
   b60ba:	2200      	movs	r2, #0
   b60bc:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b60c0:	2380      	movs	r3, #128	; 0x80
   b60c2:	4611      	mov	r1, r2
   b60c4:	4827      	ldr	r0, [pc, #156]	; (b6164 <loop+0x1b28>)
   b60c6:	9300      	str	r3, [sp, #0]
   b60c8:	4b2b      	ldr	r3, [pc, #172]	; (b6178 <loop+0x1b3c>)
   b60ca:	f000 ffe1 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b60ce:	4825      	ldr	r0, [pc, #148]	; (b6164 <loop+0x1b28>)
   b60d0:	f001 fb54 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b60d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b60d8:	f001 ff54 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b60dc:	4821      	ldr	r0, [pc, #132]	; (b6164 <loop+0x1b28>)
   b60de:	f001 fad5 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b60e2:	f04f 08ff 	mov.w	r8, #255	; 0xff
 hueOnOff = true;
   b60e6:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueGreen, i, 255);
   b60e8:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b60ea:	f002 ff75 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b60ee:	4649      	mov	r1, r9
   b60f0:	f7fe f803 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b60f4:	9600      	str	r6, [sp, #0]
   b60f6:	4643      	mov	r3, r8
   b60f8:	683a      	ldr	r2, [r7, #0]
   b60fa:	7821      	ldrb	r1, [r4, #0]
   b60fc:	2001      	movs	r0, #1
   b60fe:	f7fe f82f 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b6102:	9600      	str	r6, [sp, #0]
   b6104:	4643      	mov	r3, r8
   b6106:	683a      	ldr	r2, [r7, #0]
   b6108:	7821      	ldrb	r1, [r4, #0]
   b610a:	2002      	movs	r0, #2
   b610c:	f7fe f828 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b6110:	9600      	str	r6, [sp, #0]
   b6112:	4643      	mov	r3, r8
   b6114:	683a      	ldr	r2, [r7, #0]
   b6116:	7821      	ldrb	r1, [r4, #0]
   b6118:	2003      	movs	r0, #3
   b611a:	f7fe f821 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b611e:	9600      	str	r6, [sp, #0]
   b6120:	4643      	mov	r3, r8
   b6122:	683a      	ldr	r2, [r7, #0]
   b6124:	7821      	ldrb	r1, [r4, #0]
   b6126:	2004      	movs	r0, #4
   b6128:	f7fe f81a 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b612c:	9600      	str	r6, [sp, #0]
   b612e:	4643      	mov	r3, r8
   b6130:	683a      	ldr	r2, [r7, #0]
   b6132:	7821      	ldrb	r1, [r4, #0]
   b6134:	2005      	movs	r0, #5
   b6136:	f7fe f813 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b613a:	9600      	str	r6, [sp, #0]
   b613c:	4643      	mov	r3, r8
   b613e:	683a      	ldr	r2, [r7, #0]
   b6140:	7821      	ldrb	r1, [r4, #0]
   b6142:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b6144:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b6148:	f7fe f80a 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b614c:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b6150:	d1ca      	bne.n	b60e8 <loop+0x1aac>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b6152:	f8df 901c 	ldr.w	r9, [pc, #28]	; b6170 <loop+0x1b34>
        for(int i=0; i<=255; i=i+100) {
   b6156:	f04f 0800 	mov.w	r8, #0
   b615a:	e011      	b.n	b6180 <loop+0x1b44>
   b615c:	2003e608 	.word	0x2003e608
   b6160:	000bb4da 	.word	0x000bb4da
   b6164:	2003e670 	.word	0x2003e670
   b6168:	2003e66c 	.word	0x2003e66c
   b616c:	000c0185 	.word	0x000c0185
   b6170:	000bb4c4 	.word	0x000bb4c4
   b6174:	2003e13c 	.word	0x2003e13c
   b6178:	000bd979 	.word	0x000bd979
   b617c:	2003e144 	.word	0x2003e144
            Serial.printf("turning on the light\n");
   b6180:	f002 ff2a 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b6184:	4649      	mov	r1, r9
   b6186:	f7fd ffb8 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b618a:	9600      	str	r6, [sp, #0]
   b618c:	4643      	mov	r3, r8
   b618e:	683a      	ldr	r2, [r7, #0]
   b6190:	7821      	ldrb	r1, [r4, #0]
   b6192:	2001      	movs	r0, #1
   b6194:	f7fd ffe4 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b6198:	9600      	str	r6, [sp, #0]
   b619a:	4643      	mov	r3, r8
   b619c:	683a      	ldr	r2, [r7, #0]
   b619e:	7821      	ldrb	r1, [r4, #0]
   b61a0:	2002      	movs	r0, #2
   b61a2:	f7fd ffdd 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b61a6:	9600      	str	r6, [sp, #0]
   b61a8:	4643      	mov	r3, r8
   b61aa:	683a      	ldr	r2, [r7, #0]
   b61ac:	7821      	ldrb	r1, [r4, #0]
   b61ae:	2003      	movs	r0, #3
   b61b0:	f7fd ffd6 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b61b4:	9600      	str	r6, [sp, #0]
   b61b6:	4643      	mov	r3, r8
   b61b8:	683a      	ldr	r2, [r7, #0]
   b61ba:	7821      	ldrb	r1, [r4, #0]
   b61bc:	2004      	movs	r0, #4
   b61be:	f7fd ffcf 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b61c2:	9600      	str	r6, [sp, #0]
   b61c4:	4643      	mov	r3, r8
   b61c6:	683a      	ldr	r2, [r7, #0]
   b61c8:	7821      	ldrb	r1, [r4, #0]
   b61ca:	2005      	movs	r0, #5
   b61cc:	f7fd ffc8 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b61d0:	9600      	str	r6, [sp, #0]
   b61d2:	4643      	mov	r3, r8
   b61d4:	683a      	ldr	r2, [r7, #0]
   b61d6:	7821      	ldrb	r1, [r4, #0]
   b61d8:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b61da:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b61de:	f7fd ffbf 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b61e2:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b61e6:	d1cb      	bne.n	b6180 <loop+0x1b44>
        }

        hueOnOff = false;
   b61e8:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b61ea:	4fb9      	ldr	r7, [pc, #740]	; (b64d0 <loop+0x1e94>)
        hueOnOff = false;
   b61ec:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b61ee:	f002 fef3 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b61f2:	49b8      	ldr	r1, [pc, #736]	; (b64d4 <loop+0x1e98>)
   b61f4:	f7fd ff81 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b61f8:	9600      	str	r6, [sp, #0]
   b61fa:	683a      	ldr	r2, [r7, #0]
   b61fc:	7821      	ldrb	r1, [r4, #0]
   b61fe:	23ff      	movs	r3, #255	; 0xff
   b6200:	2001      	movs	r0, #1
   b6202:	f7fd ffad 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b6206:	9600      	str	r6, [sp, #0]
   b6208:	683a      	ldr	r2, [r7, #0]
   b620a:	7821      	ldrb	r1, [r4, #0]
   b620c:	23ff      	movs	r3, #255	; 0xff
   b620e:	2002      	movs	r0, #2
   b6210:	f7fd ffa6 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b6214:	9600      	str	r6, [sp, #0]
   b6216:	683a      	ldr	r2, [r7, #0]
   b6218:	7821      	ldrb	r1, [r4, #0]
   b621a:	23ff      	movs	r3, #255	; 0xff
   b621c:	2003      	movs	r0, #3
   b621e:	f7fd ff9f 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b6222:	9600      	str	r6, [sp, #0]
   b6224:	683a      	ldr	r2, [r7, #0]
   b6226:	7821      	ldrb	r1, [r4, #0]
   b6228:	23ff      	movs	r3, #255	; 0xff
   b622a:	2004      	movs	r0, #4
   b622c:	f7fd ff98 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b6230:	9600      	str	r6, [sp, #0]
   b6232:	683a      	ldr	r2, [r7, #0]
   b6234:	7821      	ldrb	r1, [r4, #0]
   b6236:	23ff      	movs	r3, #255	; 0xff
   b6238:	2005      	movs	r0, #5
   b623a:	f7fd ff91 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b623e:	9600      	str	r6, [sp, #0]
   b6240:	23ff      	movs	r3, #255	; 0xff
   b6242:	683a      	ldr	r2, [r7, #0]
   b6244:	7821      	ldrb	r1, [r4, #0]
   b6246:	2006      	movs	r0, #6
   b6248:	f7fd ff8a 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b624c:	f242 7010 	movw	r0, #10000	; 0x2710
   b6250:	f001 fe98 	bl	b7f84 <delay>

        roll=17;
   b6254:	2311      	movs	r3, #17
   b6256:	602b      	str	r3, [r5, #0]


    if(roll==17) {
//17 Green & Yellow Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b6258:	489f      	ldr	r0, [pc, #636]	; (b64d8 <loop+0x1e9c>)
// NEOPIXEL SETTINGS
//17 Green & Yellow Lights

//HUE SETTINGS
// 17 Green & Yellow Lights
 hueOnOff = true;
   b625a:	4ca0      	ldr	r4, [pc, #640]	; (b64dc <loop+0x1ea0>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b625c:	f8df a288 	ldr.w	sl, [pc, #648]	; b64e8 <loop+0x1eac>
            setHue(1, hueOnOff, HueGreen, i, 255);
            setHue(2, hueOnOff, HueYellow, i, 255);
   b6260:	f8df 9288 	ldr.w	r9, [pc, #648]	; b64ec <loop+0x1eb0>
        myDisplay.setRotation(2); //0-3
   b6264:	2102      	movs	r1, #2
   b6266:	f001 f824 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b626a:	2200      	movs	r2, #0
   b626c:	4611      	mov	r1, r2
   b626e:	489a      	ldr	r0, [pc, #616]	; (b64d8 <loop+0x1e9c>)
   b6270:	f001 f812 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, cheers, 128, 64, WHITE);
   b6274:	2601      	movs	r6, #1
   b6276:	2340      	movs	r3, #64	; 0x40
   b6278:	2200      	movs	r2, #0
   b627a:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b627e:	2380      	movs	r3, #128	; 0x80
   b6280:	4611      	mov	r1, r2
   b6282:	4895      	ldr	r0, [pc, #596]	; (b64d8 <loop+0x1e9c>)
   b6284:	9300      	str	r3, [sp, #0]
   b6286:	4b96      	ldr	r3, [pc, #600]	; (b64e0 <loop+0x1ea4>)
   b6288:	f000 ff02 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b628c:	4892      	ldr	r0, [pc, #584]	; (b64d8 <loop+0x1e9c>)
   b628e:	f001 fa75 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b6292:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b6296:	f001 fe75 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b629a:	488f      	ldr	r0, [pc, #572]	; (b64d8 <loop+0x1e9c>)
   b629c:	f001 f9f6 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b62a0:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b62a2:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueGreen, i, 255);
   b62a4:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b62a6:	f002 fe97 	bl	b8fd8 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b62aa:	f8df 8244 	ldr.w	r8, [pc, #580]	; b64f0 <loop+0x1eb4>
            Serial.printf("turning on the light\n");
   b62ae:	4651      	mov	r1, sl
   b62b0:	f7fd ff23 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b62b4:	9600      	str	r6, [sp, #0]
   b62b6:	463b      	mov	r3, r7
   b62b8:	f8d8 2000 	ldr.w	r2, [r8]
   b62bc:	7821      	ldrb	r1, [r4, #0]
   b62be:	2001      	movs	r0, #1
   b62c0:	f7fd ff4e 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b62c4:	9600      	str	r6, [sp, #0]
   b62c6:	463b      	mov	r3, r7
   b62c8:	f8d9 2000 	ldr.w	r2, [r9]
   b62cc:	7821      	ldrb	r1, [r4, #0]
   b62ce:	2002      	movs	r0, #2
   b62d0:	f7fd ff46 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b62d4:	9600      	str	r6, [sp, #0]
   b62d6:	463b      	mov	r3, r7
   b62d8:	f8d8 2000 	ldr.w	r2, [r8]
   b62dc:	7821      	ldrb	r1, [r4, #0]
   b62de:	2003      	movs	r0, #3
   b62e0:	f7fd ff3e 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b62e4:	9600      	str	r6, [sp, #0]
   b62e6:	463b      	mov	r3, r7
   b62e8:	f8d9 2000 	ldr.w	r2, [r9]
   b62ec:	7821      	ldrb	r1, [r4, #0]
   b62ee:	2004      	movs	r0, #4
   b62f0:	f7fd ff36 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b62f4:	9600      	str	r6, [sp, #0]
   b62f6:	463b      	mov	r3, r7
   b62f8:	f8d8 2000 	ldr.w	r2, [r8]
   b62fc:	7821      	ldrb	r1, [r4, #0]
   b62fe:	2005      	movs	r0, #5
   b6300:	f7fd ff2e 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b6304:	9600      	str	r6, [sp, #0]
   b6306:	463b      	mov	r3, r7
   b6308:	f8d9 2000 	ldr.w	r2, [r9]
   b630c:	7821      	ldrb	r1, [r4, #0]
   b630e:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b6310:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b6312:	f7fd ff25 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b6316:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b631a:	d1c3      	bne.n	b62a4 <loop+0x1c68>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b631c:	f8df a1c8 	ldr.w	sl, [pc, #456]	; b64e8 <loop+0x1eac>
        for(int i=0; i<=255; i=i+100) {
   b6320:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b6322:	f002 fe59 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b6326:	4651      	mov	r1, sl
   b6328:	f7fd fee7 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b632c:	9600      	str	r6, [sp, #0]
   b632e:	463b      	mov	r3, r7
   b6330:	f8d9 2000 	ldr.w	r2, [r9]
   b6334:	7821      	ldrb	r1, [r4, #0]
   b6336:	2001      	movs	r0, #1
   b6338:	f7fd ff12 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b633c:	9600      	str	r6, [sp, #0]
   b633e:	463b      	mov	r3, r7
   b6340:	f8d8 2000 	ldr.w	r2, [r8]
   b6344:	7821      	ldrb	r1, [r4, #0]
   b6346:	2002      	movs	r0, #2
   b6348:	f7fd ff0a 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueYellow, i, 255);
   b634c:	9600      	str	r6, [sp, #0]
   b634e:	463b      	mov	r3, r7
   b6350:	f8d9 2000 	ldr.w	r2, [r9]
   b6354:	7821      	ldrb	r1, [r4, #0]
   b6356:	2003      	movs	r0, #3
   b6358:	f7fd ff02 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b635c:	9600      	str	r6, [sp, #0]
   b635e:	463b      	mov	r3, r7
   b6360:	f8d8 2000 	ldr.w	r2, [r8]
   b6364:	7821      	ldrb	r1, [r4, #0]
   b6366:	2004      	movs	r0, #4
   b6368:	f7fd fefa 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueYellow, i, 255);
   b636c:	9600      	str	r6, [sp, #0]
   b636e:	463b      	mov	r3, r7
   b6370:	f8d9 2000 	ldr.w	r2, [r9]
   b6374:	7821      	ldrb	r1, [r4, #0]
   b6376:	2005      	movs	r0, #5
   b6378:	f7fd fef2 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b637c:	9600      	str	r6, [sp, #0]
   b637e:	463b      	mov	r3, r7
   b6380:	f8d8 2000 	ldr.w	r2, [r8]
   b6384:	7821      	ldrb	r1, [r4, #0]
   b6386:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b6388:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b638a:	f7fd fee9 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b638e:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b6392:	d1c6      	bne.n	b6322 <loop+0x1ce6>
        }

        hueOnOff = false;
   b6394:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b6396:	4f4e      	ldr	r7, [pc, #312]	; (b64d0 <loop+0x1e94>)
        hueOnOff = false;
   b6398:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b639a:	f002 fe1d 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b639e:	494d      	ldr	r1, [pc, #308]	; (b64d4 <loop+0x1e98>)
   b63a0:	f7fd feab 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b63a4:	9600      	str	r6, [sp, #0]
   b63a6:	683a      	ldr	r2, [r7, #0]
   b63a8:	7821      	ldrb	r1, [r4, #0]
   b63aa:	23ff      	movs	r3, #255	; 0xff
   b63ac:	2001      	movs	r0, #1
   b63ae:	f7fd fed7 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b63b2:	9600      	str	r6, [sp, #0]
   b63b4:	683a      	ldr	r2, [r7, #0]
   b63b6:	7821      	ldrb	r1, [r4, #0]
   b63b8:	23ff      	movs	r3, #255	; 0xff
   b63ba:	2002      	movs	r0, #2
   b63bc:	f7fd fed0 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b63c0:	9600      	str	r6, [sp, #0]
   b63c2:	683a      	ldr	r2, [r7, #0]
   b63c4:	7821      	ldrb	r1, [r4, #0]
   b63c6:	23ff      	movs	r3, #255	; 0xff
   b63c8:	2003      	movs	r0, #3
   b63ca:	f7fd fec9 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b63ce:	9600      	str	r6, [sp, #0]
   b63d0:	683a      	ldr	r2, [r7, #0]
   b63d2:	7821      	ldrb	r1, [r4, #0]
   b63d4:	23ff      	movs	r3, #255	; 0xff
   b63d6:	2004      	movs	r0, #4
   b63d8:	f7fd fec2 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b63dc:	9600      	str	r6, [sp, #0]
   b63de:	683a      	ldr	r2, [r7, #0]
   b63e0:	7821      	ldrb	r1, [r4, #0]
   b63e2:	23ff      	movs	r3, #255	; 0xff
   b63e4:	2005      	movs	r0, #5
   b63e6:	f7fd febb 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b63ea:	9600      	str	r6, [sp, #0]
   b63ec:	23ff      	movs	r3, #255	; 0xff
   b63ee:	683a      	ldr	r2, [r7, #0]
   b63f0:	7821      	ldrb	r1, [r4, #0]
   b63f2:	2006      	movs	r0, #6
   b63f4:	f7fd feb4 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b63f8:	f242 7010 	movw	r0, #10000	; 0x2710
   b63fc:	f001 fdc2 	bl	b7f84 <delay>

        roll=18;
   b6400:	2312      	movs	r3, #18
   b6402:	602b      	str	r3, [r5, #0]


    if(roll==18) {
//18 Blue & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b6404:	4834      	ldr	r0, [pc, #208]	; (b64d8 <loop+0x1e9c>)
// NEOPIXEL SETTINGS
//18 Blue & Green Lights

//HUE SETTINGS
// 18 Blue & Green Lights
 hueOnOff = true;
   b6406:	4c35      	ldr	r4, [pc, #212]	; (b64dc <loop+0x1ea0>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b6408:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b64e8 <loop+0x1eac>
            setHue(1, hueOnOff, HueBlue, i, 255);
            setHue(2, hueOnOff, HueGreen, i, 255);
   b640c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; b64f0 <loop+0x1eb4>
        myDisplay.setRotation(2); //0-3
   b6410:	2102      	movs	r1, #2
   b6412:	f000 ff4e 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b6416:	2200      	movs	r2, #0
   b6418:	4611      	mov	r1, r2
   b641a:	482f      	ldr	r0, [pc, #188]	; (b64d8 <loop+0x1e9c>)
   b641c:	f000 ff3c 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, youNeededThat, 128, 64, WHITE);
   b6420:	2601      	movs	r6, #1
   b6422:	2340      	movs	r3, #64	; 0x40
   b6424:	2200      	movs	r2, #0
   b6426:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b642a:	2380      	movs	r3, #128	; 0x80
   b642c:	4611      	mov	r1, r2
   b642e:	482a      	ldr	r0, [pc, #168]	; (b64d8 <loop+0x1e9c>)
   b6430:	9300      	str	r3, [sp, #0]
   b6432:	4b2c      	ldr	r3, [pc, #176]	; (b64e4 <loop+0x1ea8>)
   b6434:	f000 fe2c 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b6438:	4827      	ldr	r0, [pc, #156]	; (b64d8 <loop+0x1e9c>)
   b643a:	f001 f99f 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b643e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b6442:	f001 fd9f 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b6446:	4824      	ldr	r0, [pc, #144]	; (b64d8 <loop+0x1e9c>)
   b6448:	f001 f920 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b644c:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b644e:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueBlue, i, 255);
   b6450:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b6452:	f002 fdc1 	bl	b8fd8 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, HueBlue, i, 255);
   b6456:	f8df 809c 	ldr.w	r8, [pc, #156]	; b64f4 <loop+0x1eb8>
            Serial.printf("turning on the light\n");
   b645a:	4651      	mov	r1, sl
   b645c:	f7fd fe4d 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueBlue, i, 255);
   b6460:	9600      	str	r6, [sp, #0]
   b6462:	463b      	mov	r3, r7
   b6464:	f8d8 2000 	ldr.w	r2, [r8]
   b6468:	7821      	ldrb	r1, [r4, #0]
   b646a:	2001      	movs	r0, #1
   b646c:	f7fd fe78 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b6470:	9600      	str	r6, [sp, #0]
   b6472:	463b      	mov	r3, r7
   b6474:	f8d9 2000 	ldr.w	r2, [r9]
   b6478:	7821      	ldrb	r1, [r4, #0]
   b647a:	2002      	movs	r0, #2
   b647c:	f7fd fe70 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueBlue, i, 255);
   b6480:	9600      	str	r6, [sp, #0]
   b6482:	463b      	mov	r3, r7
   b6484:	f8d8 2000 	ldr.w	r2, [r8]
   b6488:	7821      	ldrb	r1, [r4, #0]
   b648a:	2003      	movs	r0, #3
   b648c:	f7fd fe68 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b6490:	9600      	str	r6, [sp, #0]
   b6492:	463b      	mov	r3, r7
   b6494:	f8d9 2000 	ldr.w	r2, [r9]
   b6498:	7821      	ldrb	r1, [r4, #0]
   b649a:	2004      	movs	r0, #4
   b649c:	f7fd fe60 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueBlue, i, 255);
   b64a0:	9600      	str	r6, [sp, #0]
   b64a2:	463b      	mov	r3, r7
   b64a4:	f8d8 2000 	ldr.w	r2, [r8]
   b64a8:	7821      	ldrb	r1, [r4, #0]
   b64aa:	2005      	movs	r0, #5
   b64ac:	f7fd fe58 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b64b0:	9600      	str	r6, [sp, #0]
   b64b2:	463b      	mov	r3, r7
   b64b4:	f8d9 2000 	ldr.w	r2, [r9]
   b64b8:	7821      	ldrb	r1, [r4, #0]
   b64ba:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b64bc:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b64be:	f7fd fe4f 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b64c2:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b64c6:	d1c3      	bne.n	b6450 <loop+0x1e14>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b64c8:	f8df a01c 	ldr.w	sl, [pc, #28]	; b64e8 <loop+0x1eac>
        for(int i=0; i<=255; i=i+100) {
   b64cc:	2700      	movs	r7, #0
   b64ce:	e013      	b.n	b64f8 <loop+0x1ebc>
   b64d0:	2003e608 	.word	0x2003e608
   b64d4:	000bb4da 	.word	0x000bb4da
   b64d8:	2003e670 	.word	0x2003e670
   b64dc:	2003e66c 	.word	0x2003e66c
   b64e0:	000be579 	.word	0x000be579
   b64e4:	000bb979 	.word	0x000bb979
   b64e8:	000bb4c4 	.word	0x000bb4c4
   b64ec:	2003e14c 	.word	0x2003e14c
   b64f0:	2003e13c 	.word	0x2003e13c
   b64f4:	2003e138 	.word	0x2003e138
            Serial.printf("turning on the light\n");
   b64f8:	f002 fd6e 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b64fc:	4651      	mov	r1, sl
   b64fe:	f7fd fdfc 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b6502:	9600      	str	r6, [sp, #0]
   b6504:	463b      	mov	r3, r7
   b6506:	f8d9 2000 	ldr.w	r2, [r9]
   b650a:	7821      	ldrb	r1, [r4, #0]
   b650c:	2001      	movs	r0, #1
   b650e:	f7fd fe27 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueBlue, i, 255);
   b6512:	9600      	str	r6, [sp, #0]
   b6514:	463b      	mov	r3, r7
   b6516:	f8d8 2000 	ldr.w	r2, [r8]
   b651a:	7821      	ldrb	r1, [r4, #0]
   b651c:	2002      	movs	r0, #2
   b651e:	f7fd fe1f 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b6522:	9600      	str	r6, [sp, #0]
   b6524:	463b      	mov	r3, r7
   b6526:	f8d9 2000 	ldr.w	r2, [r9]
   b652a:	7821      	ldrb	r1, [r4, #0]
   b652c:	2003      	movs	r0, #3
   b652e:	f7fd fe17 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueBlue, i, 255);
   b6532:	9600      	str	r6, [sp, #0]
   b6534:	463b      	mov	r3, r7
   b6536:	f8d8 2000 	ldr.w	r2, [r8]
   b653a:	7821      	ldrb	r1, [r4, #0]
   b653c:	2004      	movs	r0, #4
   b653e:	f7fd fe0f 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b6542:	9600      	str	r6, [sp, #0]
   b6544:	463b      	mov	r3, r7
   b6546:	f8d9 2000 	ldr.w	r2, [r9]
   b654a:	7821      	ldrb	r1, [r4, #0]
   b654c:	2005      	movs	r0, #5
   b654e:	f7fd fe07 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueBlue, i, 255);
   b6552:	9600      	str	r6, [sp, #0]
   b6554:	463b      	mov	r3, r7
   b6556:	f8d8 2000 	ldr.w	r2, [r8]
   b655a:	7821      	ldrb	r1, [r4, #0]
   b655c:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b655e:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueBlue, i, 255);
   b6560:	f7fd fdfe 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b6564:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b6568:	d1c6      	bne.n	b64f8 <loop+0x1ebc>
        }

        hueOnOff = false;
   b656a:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b656c:	4fcb      	ldr	r7, [pc, #812]	; (b689c <loop+0x2260>)
        hueOnOff = false;
   b656e:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b6570:	f002 fd32 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b6574:	49ca      	ldr	r1, [pc, #808]	; (b68a0 <loop+0x2264>)
   b6576:	f7fd fdc0 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b657a:	9600      	str	r6, [sp, #0]
   b657c:	683a      	ldr	r2, [r7, #0]
   b657e:	7821      	ldrb	r1, [r4, #0]
   b6580:	23ff      	movs	r3, #255	; 0xff
   b6582:	2001      	movs	r0, #1
   b6584:	f7fd fdec 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b6588:	9600      	str	r6, [sp, #0]
   b658a:	683a      	ldr	r2, [r7, #0]
   b658c:	7821      	ldrb	r1, [r4, #0]
   b658e:	23ff      	movs	r3, #255	; 0xff
   b6590:	2002      	movs	r0, #2
   b6592:	f7fd fde5 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b6596:	9600      	str	r6, [sp, #0]
   b6598:	683a      	ldr	r2, [r7, #0]
   b659a:	7821      	ldrb	r1, [r4, #0]
   b659c:	23ff      	movs	r3, #255	; 0xff
   b659e:	2003      	movs	r0, #3
   b65a0:	f7fd fdde 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b65a4:	9600      	str	r6, [sp, #0]
   b65a6:	683a      	ldr	r2, [r7, #0]
   b65a8:	7821      	ldrb	r1, [r4, #0]
   b65aa:	23ff      	movs	r3, #255	; 0xff
   b65ac:	2004      	movs	r0, #4
   b65ae:	f7fd fdd7 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b65b2:	9600      	str	r6, [sp, #0]
   b65b4:	683a      	ldr	r2, [r7, #0]
   b65b6:	7821      	ldrb	r1, [r4, #0]
   b65b8:	23ff      	movs	r3, #255	; 0xff
   b65ba:	2005      	movs	r0, #5
   b65bc:	f7fd fdd0 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b65c0:	9600      	str	r6, [sp, #0]
   b65c2:	23ff      	movs	r3, #255	; 0xff
   b65c4:	683a      	ldr	r2, [r7, #0]
   b65c6:	7821      	ldrb	r1, [r4, #0]
   b65c8:	2006      	movs	r0, #6
   b65ca:	f7fd fdc9 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b65ce:	f242 7010 	movw	r0, #10000	; 0x2710
   b65d2:	f001 fcd7 	bl	b7f84 <delay>

        roll=19;
   b65d6:	2313      	movs	r3, #19
   b65d8:	602b      	str	r3, [r5, #0]


    if(roll==19) {
//19 Magenta, Purple & Green Lights
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b65da:	48b2      	ldr	r0, [pc, #712]	; (b68a4 <loop+0x2268>)
// NEOPIXEL SETTINGS
//19 Magenta, Purple & Green Lights

//HUE SETTINGS
// 19 Magenta, Purple & Green Lights
 hueOnOff = true;
   b65dc:	4cb2      	ldr	r4, [pc, #712]	; (b68a8 <loop+0x226c>)
        for(int i=255; i>=0; i=i-100) {
            Serial.printf("turning on the light\n");
   b65de:	f8df a2e8 	ldr.w	sl, [pc, #744]	; b68c8 <loop+0x228c>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b65e2:	f8df 82e8 	ldr.w	r8, [pc, #744]	; b68cc <loop+0x2290>
        myDisplay.setRotation(2); //0-3
   b65e6:	2102      	movs	r1, #2
   b65e8:	f000 fe63 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b65ec:	2200      	movs	r2, #0
   b65ee:	4611      	mov	r1, r2
   b65f0:	48ac      	ldr	r0, [pc, #688]	; (b68a4 <loop+0x2268>)
   b65f2:	f000 fe51 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, heroTime, 128, 64, WHITE);
   b65f6:	2601      	movs	r6, #1
   b65f8:	2340      	movs	r3, #64	; 0x40
   b65fa:	2200      	movs	r2, #0
   b65fc:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b6600:	2380      	movs	r3, #128	; 0x80
   b6602:	4611      	mov	r1, r2
   b6604:	48a7      	ldr	r0, [pc, #668]	; (b68a4 <loop+0x2268>)
   b6606:	9300      	str	r3, [sp, #0]
   b6608:	4ba8      	ldr	r3, [pc, #672]	; (b68ac <loop+0x2270>)
   b660a:	f000 fd41 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b660e:	48a5      	ldr	r0, [pc, #660]	; (b68a4 <loop+0x2268>)
   b6610:	f001 f8b4 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b6614:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b6618:	f001 fcb4 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b661c:	48a1      	ldr	r0, [pc, #644]	; (b68a4 <loop+0x2268>)
   b661e:	f001 f835 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b6622:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b6624:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueGreen, i, 255);
   b6626:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b6628:	f002 fcd6 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b662c:	4651      	mov	r1, sl
   b662e:	f7fd fd64 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b6632:	9600      	str	r6, [sp, #0]
            setHue(2, hueOnOff, HueViolet, i, 255);
   b6634:	f8df 9298 	ldr.w	r9, [pc, #664]	; b68d0 <loop+0x2294>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b6638:	f8d8 2000 	ldr.w	r2, [r8]
   b663c:	7821      	ldrb	r1, [r4, #0]
   b663e:	463b      	mov	r3, r7
   b6640:	2001      	movs	r0, #1
   b6642:	f7fd fd8d 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueViolet, i, 255);
   b6646:	9600      	str	r6, [sp, #0]
   b6648:	463b      	mov	r3, r7
   b664a:	f8d9 2000 	ldr.w	r2, [r9]
   b664e:	7821      	ldrb	r1, [r4, #0]
   b6650:	2002      	movs	r0, #2
   b6652:	f7fd fd85 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b6656:	9600      	str	r6, [sp, #0]
   b6658:	463b      	mov	r3, r7
   b665a:	f8d8 2000 	ldr.w	r2, [r8]
   b665e:	7821      	ldrb	r1, [r4, #0]
   b6660:	2003      	movs	r0, #3
   b6662:	f7fd fd7d 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueViolet, i, 255);
   b6666:	9600      	str	r6, [sp, #0]
   b6668:	463b      	mov	r3, r7
   b666a:	f8d9 2000 	ldr.w	r2, [r9]
   b666e:	7821      	ldrb	r1, [r4, #0]
   b6670:	2004      	movs	r0, #4
   b6672:	f7fd fd75 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b6676:	9600      	str	r6, [sp, #0]
   b6678:	463b      	mov	r3, r7
   b667a:	f8d8 2000 	ldr.w	r2, [r8]
   b667e:	7821      	ldrb	r1, [r4, #0]
   b6680:	2005      	movs	r0, #5
   b6682:	f7fd fd6d 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueViolet, i, 255);
   b6686:	9600      	str	r6, [sp, #0]
   b6688:	463b      	mov	r3, r7
   b668a:	f8d9 2000 	ldr.w	r2, [r9]
   b668e:	7821      	ldrb	r1, [r4, #0]
   b6690:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b6692:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueViolet, i, 255);
   b6694:	f7fd fd64 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b6698:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b669c:	d1c3      	bne.n	b6626 <loop+0x1fea>
        }
        for(int i=0; i<=255; i=i+100) {
            Serial.printf("turning on the light\n");
   b669e:	f8df a228 	ldr.w	sl, [pc, #552]	; b68c8 <loop+0x228c>
        for(int i=0; i<=255; i=i+100) {
   b66a2:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b66a4:	f002 fc98 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b66a8:	4651      	mov	r1, sl
   b66aa:	f7fd fd26 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueViolet, i, 255);
   b66ae:	9600      	str	r6, [sp, #0]
   b66b0:	463b      	mov	r3, r7
   b66b2:	f8d9 2000 	ldr.w	r2, [r9]
   b66b6:	7821      	ldrb	r1, [r4, #0]
   b66b8:	2001      	movs	r0, #1
   b66ba:	f7fd fd51 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b66be:	9600      	str	r6, [sp, #0]
   b66c0:	463b      	mov	r3, r7
   b66c2:	f8d8 2000 	ldr.w	r2, [r8]
   b66c6:	7821      	ldrb	r1, [r4, #0]
   b66c8:	2002      	movs	r0, #2
   b66ca:	f7fd fd49 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueViolet, i, 255);
   b66ce:	9600      	str	r6, [sp, #0]
   b66d0:	463b      	mov	r3, r7
   b66d2:	f8d9 2000 	ldr.w	r2, [r9]
   b66d6:	7821      	ldrb	r1, [r4, #0]
   b66d8:	2003      	movs	r0, #3
   b66da:	f7fd fd41 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b66de:	9600      	str	r6, [sp, #0]
   b66e0:	463b      	mov	r3, r7
   b66e2:	f8d8 2000 	ldr.w	r2, [r8]
   b66e6:	7821      	ldrb	r1, [r4, #0]
   b66e8:	2004      	movs	r0, #4
   b66ea:	f7fd fd39 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueViolet, i, 255);
   b66ee:	9600      	str	r6, [sp, #0]
   b66f0:	463b      	mov	r3, r7
   b66f2:	f8d9 2000 	ldr.w	r2, [r9]
   b66f6:	7821      	ldrb	r1, [r4, #0]
   b66f8:	2005      	movs	r0, #5
   b66fa:	f7fd fd31 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b66fe:	9600      	str	r6, [sp, #0]
   b6700:	463b      	mov	r3, r7
   b6702:	f8d8 2000 	ldr.w	r2, [r8]
   b6706:	7821      	ldrb	r1, [r4, #0]
   b6708:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b670a:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b670c:	f7fd fd28 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b6710:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b6714:	d1c6      	bne.n	b66a4 <loop+0x2068>
        }

        hueOnOff = false;
   b6716:	2300      	movs	r3, #0
        Serial.printf("turning off the light");
        setHue(1, hueOnOff, HueRed, 255, 255);
   b6718:	4f60      	ldr	r7, [pc, #384]	; (b689c <loop+0x2260>)
        hueOnOff = false;
   b671a:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b671c:	f002 fc5c 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b6720:	495f      	ldr	r1, [pc, #380]	; (b68a0 <loop+0x2264>)
   b6722:	f7fd fcea 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b6726:	9600      	str	r6, [sp, #0]
   b6728:	683a      	ldr	r2, [r7, #0]
   b672a:	7821      	ldrb	r1, [r4, #0]
   b672c:	23ff      	movs	r3, #255	; 0xff
   b672e:	2001      	movs	r0, #1
   b6730:	f7fd fd16 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b6734:	9600      	str	r6, [sp, #0]
   b6736:	683a      	ldr	r2, [r7, #0]
   b6738:	7821      	ldrb	r1, [r4, #0]
   b673a:	23ff      	movs	r3, #255	; 0xff
   b673c:	2002      	movs	r0, #2
   b673e:	f7fd fd0f 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b6742:	9600      	str	r6, [sp, #0]
   b6744:	683a      	ldr	r2, [r7, #0]
   b6746:	7821      	ldrb	r1, [r4, #0]
   b6748:	23ff      	movs	r3, #255	; 0xff
   b674a:	2003      	movs	r0, #3
   b674c:	f7fd fd08 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b6750:	9600      	str	r6, [sp, #0]
   b6752:	683a      	ldr	r2, [r7, #0]
   b6754:	7821      	ldrb	r1, [r4, #0]
   b6756:	23ff      	movs	r3, #255	; 0xff
   b6758:	2004      	movs	r0, #4
   b675a:	f7fd fd01 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b675e:	9600      	str	r6, [sp, #0]
   b6760:	683a      	ldr	r2, [r7, #0]
   b6762:	7821      	ldrb	r1, [r4, #0]
   b6764:	23ff      	movs	r3, #255	; 0xff
   b6766:	2005      	movs	r0, #5
   b6768:	f7fd fcfa 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b676c:	9600      	str	r6, [sp, #0]
   b676e:	23ff      	movs	r3, #255	; 0xff
   b6770:	683a      	ldr	r2, [r7, #0]
   b6772:	7821      	ldrb	r1, [r4, #0]
   b6774:	2006      	movs	r0, #6
   b6776:	f7fd fcf3 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b677a:	f242 7010 	movw	r0, #10000	; 0x2710
   b677e:	f001 fc01 	bl	b7f84 <delay>

        roll=20;
   b6782:	2314      	movs	r3, #20
   b6784:	602b      	str	r3, [r5, #0]


    if(roll==20) {
// 20 Rainbow Lights, random colors, excitement!
//OLED DISPLAY
        myDisplay.setRotation(2); //0-3
   b6786:	4847      	ldr	r0, [pc, #284]	; (b68a4 <loop+0x2268>)
    // delay(10000);

//HUE SETTINGS
//20 Rainbow Lights, random colors, excitement!
           int r;
            hueOnOff = true;
   b6788:	4e47      	ldr	r6, [pc, #284]	; (b68a8 <loop+0x226c>)
            for(int hr=2; hr>=0; hr--) {
                Serial.printf("turning on the light\n");
   b678a:	f8df b13c 	ldr.w	fp, [pc, #316]	; b68c8 <loop+0x228c>
                r=random(7);
                Serial.printf("light 1, r= %i\n", r);
   b678e:	f8df a144 	ldr.w	sl, [pc, #324]	; b68d4 <loop+0x2298>
        myDisplay.setRotation(2); //0-3
   b6792:	2102      	movs	r1, #2
   b6794:	f000 fd8d 	bl	b72b2 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b6798:	2200      	movs	r2, #0
   b679a:	4611      	mov	r1, r2
   b679c:	4841      	ldr	r0, [pc, #260]	; (b68a4 <loop+0x2268>)
   b679e:	f000 fd7b 	bl	b7298 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, killUmAll, 128, 64, WHITE);
   b67a2:	2401      	movs	r4, #1
   b67a4:	2340      	movs	r3, #64	; 0x40
   b67a6:	2200      	movs	r2, #0
   b67a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b67ac:	2380      	movs	r3, #128	; 0x80
   b67ae:	4611      	mov	r1, r2
   b67b0:	483c      	ldr	r0, [pc, #240]	; (b68a4 <loop+0x2268>)
   b67b2:	9300      	str	r3, [sp, #0]
   b67b4:	4b3e      	ldr	r3, [pc, #248]	; (b68b0 <loop+0x2274>)
   b67b6:	f000 fc6b 	bl	b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b67ba:	483a      	ldr	r0, [pc, #232]	; (b68a4 <loop+0x2268>)
   b67bc:	f000 ffde 	bl	b777c <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b67c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b67c4:	f001 fbde 	bl	b7f84 <delay>
        myDisplay.clearDisplay();
   b67c8:	4836      	ldr	r0, [pc, #216]	; (b68a4 <loop+0x2268>)
   b67ca:	f000 ff5f 	bl	b768c <_ZN16Adafruit_SSD130612clearDisplayEv>
            hueOnOff = true;
   b67ce:	f04f 0803 	mov.w	r8, #3
   b67d2:	7034      	strb	r4, [r6, #0]
                Serial.printf("turning on the light\n");
   b67d4:	f002 fc00 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b67d8:	4659      	mov	r1, fp
   b67da:	f7fd fc8e 	bl	b40fa <_ZN5Print6printfEPKcz>
                r=random(7);
   b67de:	2007      	movs	r0, #7
   b67e0:	f001 fe7e 	bl	b84e0 <_Z6randomi>
   b67e4:	4681      	mov	r9, r0
                setHue(1, hueOnOff, HueRainbow[r], 255, 255);
   b67e6:	24ff      	movs	r4, #255	; 0xff
   b67e8:	4f32      	ldr	r7, [pc, #200]	; (b68b4 <loop+0x2278>)
                Serial.printf("light 1, r= %i\n", r);
   b67ea:	f002 fbf5 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b67ee:	464a      	mov	r2, r9
   b67f0:	4651      	mov	r1, sl
   b67f2:	f7fd fc82 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(1, hueOnOff, HueRainbow[r], 255, 255);
   b67f6:	9400      	str	r4, [sp, #0]
   b67f8:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b67fc:	7831      	ldrb	r1, [r6, #0]
   b67fe:	4623      	mov	r3, r4
   b6800:	2001      	movs	r0, #1
   b6802:	f7fd fcad 	bl	b4160 <_Z6setHueibiii>
                r=random(7);
   b6806:	2007      	movs	r0, #7
   b6808:	f001 fe6a 	bl	b84e0 <_Z6randomi>
   b680c:	4681      	mov	r9, r0
                Serial.printf("light 2, r= %i\n", r);
   b680e:	f002 fbe3 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b6812:	464a      	mov	r2, r9
   b6814:	4928      	ldr	r1, [pc, #160]	; (b68b8 <loop+0x227c>)
   b6816:	f7fd fc70 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(2, hueOnOff, HueRainbow[r], 255, 255);
   b681a:	9400      	str	r4, [sp, #0]
   b681c:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b6820:	7831      	ldrb	r1, [r6, #0]
   b6822:	4623      	mov	r3, r4
   b6824:	2002      	movs	r0, #2
   b6826:	f7fd fc9b 	bl	b4160 <_Z6setHueibiii>
                r=random(7);
   b682a:	2007      	movs	r0, #7
   b682c:	f001 fe58 	bl	b84e0 <_Z6randomi>
   b6830:	4681      	mov	r9, r0
                Serial.printf("light 3, r= %i\n", r);
   b6832:	f002 fbd1 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b6836:	464a      	mov	r2, r9
   b6838:	4920      	ldr	r1, [pc, #128]	; (b68bc <loop+0x2280>)
   b683a:	f7fd fc5e 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(3, hueOnOff, HueRainbow[r], 255, 255);
   b683e:	9400      	str	r4, [sp, #0]
   b6840:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b6844:	7831      	ldrb	r1, [r6, #0]
   b6846:	4623      	mov	r3, r4
   b6848:	2003      	movs	r0, #3
   b684a:	f7fd fc89 	bl	b4160 <_Z6setHueibiii>
                r=random(7);
   b684e:	2007      	movs	r0, #7
   b6850:	f001 fe46 	bl	b84e0 <_Z6randomi>
   b6854:	4681      	mov	r9, r0
                Serial.printf("light 4, r= %i\n", r);
   b6856:	f002 fbbf 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b685a:	464a      	mov	r2, r9
   b685c:	4918      	ldr	r1, [pc, #96]	; (b68c0 <loop+0x2284>)
   b685e:	f7fd fc4c 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(4, hueOnOff, HueRainbow[r], 255, 255);
   b6862:	9400      	str	r4, [sp, #0]
   b6864:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b6868:	7831      	ldrb	r1, [r6, #0]
   b686a:	4623      	mov	r3, r4
   b686c:	2004      	movs	r0, #4
   b686e:	f7fd fc77 	bl	b4160 <_Z6setHueibiii>
                r=random(7);
   b6872:	2007      	movs	r0, #7
   b6874:	f001 fe34 	bl	b84e0 <_Z6randomi>
   b6878:	4681      	mov	r9, r0
                Serial.printf("light 5, r= %i\n", r);
   b687a:	f002 fbad 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b687e:	464a      	mov	r2, r9
   b6880:	4910      	ldr	r1, [pc, #64]	; (b68c4 <loop+0x2288>)
   b6882:	f7fd fc3a 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(5, hueOnOff, HueRainbow[r], 255, 255);
   b6886:	9400      	str	r4, [sp, #0]
   b6888:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b688c:	7831      	ldrb	r1, [r6, #0]
   b688e:	4623      	mov	r3, r4
   b6890:	2005      	movs	r0, #5
   b6892:	f7fd fc65 	bl	b4160 <_Z6setHueibiii>
                r=random(7);
   b6896:	2007      	movs	r0, #7
   b6898:	e01e      	b.n	b68d8 <loop+0x229c>
   b689a:	bf00      	nop
   b689c:	2003e608 	.word	0x2003e608
   b68a0:	000bb4da 	.word	0x000bb4da
   b68a4:	2003e670 	.word	0x2003e670
   b68a8:	2003e66c 	.word	0x2003e66c
   b68ac:	000bf579 	.word	0x000bf579
   b68b0:	000bf985 	.word	0x000bf985
   b68b4:	2003e5ec 	.word	0x2003e5ec
   b68b8:	000bb500 	.word	0x000bb500
   b68bc:	000bb510 	.word	0x000bb510
   b68c0:	000bb520 	.word	0x000bb520
   b68c4:	000bb530 	.word	0x000bb530
   b68c8:	000bb4c4 	.word	0x000bb4c4
   b68cc:	2003e13c 	.word	0x2003e13c
   b68d0:	2003e148 	.word	0x2003e148
   b68d4:	000bb4f0 	.word	0x000bb4f0
   b68d8:	f001 fe02 	bl	b84e0 <_Z6randomi>
   b68dc:	4681      	mov	r9, r0
                Serial.printf("light 6, r= %i\n", r);
   b68de:	f002 fb7b 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b68e2:	4942      	ldr	r1, [pc, #264]	; (b69ec <loop+0x23b0>)
   b68e4:	464a      	mov	r2, r9
   b68e6:	f7fd fc08 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(6, hueOnOff, HueRainbow[r], 255, 255);
   b68ea:	9400      	str	r4, [sp, #0]
   b68ec:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b68f0:	7831      	ldrb	r1, [r6, #0]
   b68f2:	4623      	mov	r3, r4
   b68f4:	2006      	movs	r0, #6
   b68f6:	f7fd fc33 	bl	b4160 <_Z6setHueibiii>
            for(int hr=2; hr>=0; hr--) {
   b68fa:	f1b8 0801 	subs.w	r8, r8, #1
   b68fe:	f47f af69 	bne.w	b67d4 <loop+0x2198>

    
            }
            hueOnOff = false;
            Serial.printf("turning off the light");
            setHue(1, hueOnOff, HueRed, 255, 255);
   b6902:	4f3b      	ldr	r7, [pc, #236]	; (b69f0 <loop+0x23b4>)
            hueOnOff = false;
   b6904:	f886 8000 	strb.w	r8, [r6]
            Serial.printf("turning off the light");
   b6908:	f002 fb66 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b690c:	4939      	ldr	r1, [pc, #228]	; (b69f4 <loop+0x23b8>)
   b690e:	f7fd fbf4 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, 255, 255);
   b6912:	9400      	str	r4, [sp, #0]
   b6914:	683a      	ldr	r2, [r7, #0]
   b6916:	7831      	ldrb	r1, [r6, #0]
   b6918:	4623      	mov	r3, r4
   b691a:	2001      	movs	r0, #1
   b691c:	f7fd fc20 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, 255, 255);
   b6920:	9400      	str	r4, [sp, #0]
   b6922:	683a      	ldr	r2, [r7, #0]
   b6924:	7831      	ldrb	r1, [r6, #0]
   b6926:	4623      	mov	r3, r4
   b6928:	2002      	movs	r0, #2
   b692a:	f7fd fc19 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, 255, 255);
   b692e:	9400      	str	r4, [sp, #0]
   b6930:	683a      	ldr	r2, [r7, #0]
   b6932:	7831      	ldrb	r1, [r6, #0]
   b6934:	4623      	mov	r3, r4
   b6936:	2003      	movs	r0, #3
   b6938:	f7fd fc12 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, 255, 255);
   b693c:	9400      	str	r4, [sp, #0]
   b693e:	683a      	ldr	r2, [r7, #0]
   b6940:	7831      	ldrb	r1, [r6, #0]
   b6942:	4623      	mov	r3, r4
   b6944:	2004      	movs	r0, #4
   b6946:	f7fd fc0b 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, 255, 255);
   b694a:	9400      	str	r4, [sp, #0]
   b694c:	683a      	ldr	r2, [r7, #0]
   b694e:	7831      	ldrb	r1, [r6, #0]
   b6950:	4623      	mov	r3, r4
   b6952:	2005      	movs	r0, #5
   b6954:	f7fd fc04 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, 255, 255);
   b6958:	9400      	str	r4, [sp, #0]
   b695a:	683a      	ldr	r2, [r7, #0]
   b695c:	7831      	ldrb	r1, [r6, #0]
   b695e:	4623      	mov	r3, r4
   b6960:	2006      	movs	r0, #6
   b6962:	f7fd fbfd 	bl	b4160 <_Z6setHueibiii>
            delay(10000);
   b6966:	f242 7010 	movw	r0, #10000	; 0x2710
   b696a:	f001 fb0b 	bl	b7f84 <delay>
   b696e:	e038      	b.n	b69e2 <loop+0x23a6>
    if(roll==2) {
   b6970:	2c02      	cmp	r4, #2
   b6972:	f43d af8e 	beq.w	b4892 <loop+0x256>
    if(roll==3) {
   b6976:	2c03      	cmp	r4, #3
   b6978:	f43e a87b 	beq.w	b4a72 <loop+0x436>
    if(roll==4) {
   b697c:	2c04      	cmp	r4, #4
   b697e:	f43e a943 	beq.w	b4c08 <loop+0x5cc>
    if(roll==5) {
   b6982:	2c05      	cmp	r4, #5
   b6984:	f43e aa20 	beq.w	b4dc8 <loop+0x78c>
    if(roll==6) {
   b6988:	2c06      	cmp	r4, #6
   b698a:	f43e aaef 	beq.w	b4f6c <loop+0x930>
    if(roll==7) {
   b698e:	2c07      	cmp	r4, #7
   b6990:	f43e abc5 	beq.w	b511e <loop+0xae2>
    if(roll==8) {
   b6994:	2c08      	cmp	r4, #8
   b6996:	f43e ac98 	beq.w	b52ca <loop+0xc8e>
    if(roll==9) {
   b699a:	2c09      	cmp	r4, #9
   b699c:	f43e ad7f 	beq.w	b549e <loop+0xe62>
    if(roll==10) {
   b69a0:	2c0a      	cmp	r4, #10
   b69a2:	f43e ae52 	beq.w	b564a <loop+0x100e>
    if(roll==11) {
   b69a6:	2c0b      	cmp	r4, #11
   b69a8:	f43e af30 	beq.w	b580c <loop+0x11d0>
    if(roll==12) {
   b69ac:	2c0c      	cmp	r4, #12
   b69ae:	f43e aff9 	beq.w	b59a4 <loop+0x1368>
    if(roll==13) {
   b69b2:	2c0d      	cmp	r4, #13
   b69b4:	f43f a8db 	beq.w	b5b6e <loop+0x1532>
    if(roll==14) {
   b69b8:	2c0e      	cmp	r4, #14
   b69ba:	f43f a9aa 	beq.w	b5d12 <loop+0x16d6>
    if(roll==15) {
   b69be:	2c0f      	cmp	r4, #15
   b69c0:	f43f aa93 	beq.w	b5eea <loop+0x18ae>
    if(roll==16) {
   b69c4:	2c10      	cmp	r4, #16
   b69c6:	f43f ab69 	beq.w	b609c <loop+0x1a60>
    if(roll==17) {
   b69ca:	2c11      	cmp	r4, #17
   b69cc:	f43f ac44 	beq.w	b6258 <loop+0x1c1c>
    if(roll==18) {
   b69d0:	2c12      	cmp	r4, #18
   b69d2:	f43f ad17 	beq.w	b6404 <loop+0x1dc8>
    if(roll==19) {
   b69d6:	2c13      	cmp	r4, #19
   b69d8:	f43f adff 	beq.w	b65da <loop+0x1f9e>
    if(roll==20) {
   b69dc:	2c14      	cmp	r4, #20
   b69de:	f43f aed2 	beq.w	b6786 <loop+0x214a>
        } 
        roll=1;
   b69e2:	2301      	movs	r3, #1
   b69e4:	602b      	str	r3, [r5, #0]
}
   b69e6:	b007      	add	sp, #28
   b69e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b69ec:	000bb540 	.word	0x000bb540
   b69f0:	2003e608 	.word	0x2003e608
   b69f4:	000bb4da 	.word	0x000bb4da

000b69f8 <_GLOBAL__sub_I_hueOn>:
   b69f8:	b508      	push	{r3, lr}
String hueCmd;  // Hue command
   b69fa:	491b      	ldr	r1, [pc, #108]	; (b6a68 <_GLOBAL__sub_I_hueOn+0x70>)
   b69fc:	481b      	ldr	r0, [pc, #108]	; (b6a6c <_GLOBAL__sub_I_hueOn+0x74>)
   b69fe:	f001 feb6 	bl	b876e <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b6a02:	4a1b      	ldr	r2, [pc, #108]	; (b6a70 <_GLOBAL__sub_I_hueOn+0x78>)
   b6a04:	4b1b      	ldr	r3, [pc, #108]	; (b6a74 <_GLOBAL__sub_I_hueOn+0x7c>)
   b6a06:	6812      	ldr	r2, [r2, #0]
   b6a08:	601a      	str	r2, [r3, #0]
   b6a0a:	4a1b      	ldr	r2, [pc, #108]	; (b6a78 <_GLOBAL__sub_I_hueOn+0x80>)
TCPClient HueClient;
   b6a0c:	481b      	ldr	r0, [pc, #108]	; (b6a7c <_GLOBAL__sub_I_hueOn+0x84>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b6a0e:	6812      	ldr	r2, [r2, #0]
   b6a10:	605a      	str	r2, [r3, #4]
   b6a12:	4a1b      	ldr	r2, [pc, #108]	; (b6a80 <_GLOBAL__sub_I_hueOn+0x88>)
   b6a14:	6812      	ldr	r2, [r2, #0]
   b6a16:	609a      	str	r2, [r3, #8]
   b6a18:	4a1a      	ldr	r2, [pc, #104]	; (b6a84 <_GLOBAL__sub_I_hueOn+0x8c>)
   b6a1a:	6812      	ldr	r2, [r2, #0]
   b6a1c:	60da      	str	r2, [r3, #12]
   b6a1e:	4a1a      	ldr	r2, [pc, #104]	; (b6a88 <_GLOBAL__sub_I_hueOn+0x90>)
   b6a20:	6812      	ldr	r2, [r2, #0]
   b6a22:	611a      	str	r2, [r3, #16]
   b6a24:	4a19      	ldr	r2, [pc, #100]	; (b6a8c <_GLOBAL__sub_I_hueOn+0x94>)
   b6a26:	6812      	ldr	r2, [r2, #0]
   b6a28:	615a      	str	r2, [r3, #20]
   b6a2a:	4a19      	ldr	r2, [pc, #100]	; (b6a90 <_GLOBAL__sub_I_hueOn+0x98>)
   b6a2c:	6812      	ldr	r2, [r2, #0]
   b6a2e:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b6a30:	f002 fa00 	bl	b8e34 <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b6a34:	4817      	ldr	r0, [pc, #92]	; (b6a94 <_GLOBAL__sub_I_hueOn+0x9c>)
   b6a36:	f002 f9fd 	bl	b8e34 <_ZN9TCPClientC1Ev>
Adafruit_SSD1306 myDisplay(OLED_RESET); 
   b6a3a:	2104      	movs	r1, #4
   b6a3c:	4816      	ldr	r0, [pc, #88]	; (b6a98 <_GLOBAL__sub_I_hueOn+0xa0>)
   b6a3e:	f000 fe0f 	bl	b7660 <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b6a42:	2302      	movs	r3, #2
   b6a44:	2208      	movs	r2, #8
   b6a46:	4815      	ldr	r0, [pc, #84]	; (b6a9c <_GLOBAL__sub_I_hueOn+0xa4>)
   b6a48:	2101      	movs	r1, #1
   b6a4a:	f000 f86f 	bl	b6b2c <_ZN17Adafruit_NeoPixelC1Ethh>
              error_(SYSTEM_ERROR_NONE) {
   b6a4e:	4b14      	ldr	r3, [pc, #80]	; (b6aa0 <_GLOBAL__sub_I_hueOn+0xa8>)
   b6a50:	2200      	movs	r2, #0
   b6a52:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b6a56:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b6a5a:	609a      	str	r2, [r3, #8]
}
   b6a5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   b6a60:	2002      	movs	r0, #2
   b6a62:	f001 b9bb 	b.w	b7ddc <set_system_mode>
   b6a66:	bf00      	nop
   b6a68:	000bb46e 	.word	0x000bb46e
   b6a6c:	2003e65c 	.word	0x2003e65c
   b6a70:	2003e608 	.word	0x2003e608
   b6a74:	2003e5ec 	.word	0x2003e5ec
   b6a78:	2003e144 	.word	0x2003e144
   b6a7c:	2003e5d0 	.word	0x2003e5d0
   b6a80:	2003e14c 	.word	0x2003e14c
   b6a84:	2003e13c 	.word	0x2003e13c
   b6a88:	2003e138 	.word	0x2003e138
   b6a8c:	2003e140 	.word	0x2003e140
   b6a90:	2003e148 	.word	0x2003e148
   b6a94:	2003e618 	.word	0x2003e618
   b6a98:	2003e670 	.word	0x2003e670
   b6a9c:	2003e698 	.word	0x2003e698
   b6aa0:	2003e60c 	.word	0x2003e60c

000b6aa4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b6aa4:	b538      	push	{r3, r4, r5, lr}
   b6aa6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b6aa8:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b6aaa:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b6aac:	b108      	cbz	r0, b6ab2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b6aae:	f001 fa39 	bl	b7f24 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b6ab2:	79a3      	ldrb	r3, [r4, #6]
   b6ab4:	2b06      	cmp	r3, #6
   b6ab6:	bf0c      	ite	eq
   b6ab8:	2004      	moveq	r0, #4
   b6aba:	2003      	movne	r0, #3
   b6abc:	fb10 f005 	smulbb	r0, r0, r5
   b6ac0:	b280      	uxth	r0, r0
   b6ac2:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b6ac4:	f001 fa26 	bl	b7f14 <malloc>
   b6ac8:	60e0      	str	r0, [r4, #12]
   b6aca:	b128      	cbz	r0, b6ad8 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b6acc:	88a2      	ldrh	r2, [r4, #4]
   b6ace:	2100      	movs	r1, #0
   b6ad0:	f004 fb44 	bl	bb15c <memset>
    numLEDs = n;
   b6ad4:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b6ad6:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b6ad8:	80a0      	strh	r0, [r4, #4]
   b6ada:	8060      	strh	r0, [r4, #2]
}
   b6adc:	e7fb      	b.n	b6ad6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b6ade <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b6ade:	b510      	push	{r4, lr}
   b6ae0:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b6ae2:	2101      	movs	r1, #1
   b6ae4:	79c0      	ldrb	r0, [r0, #7]
   b6ae6:	f002 fc01 	bl	b92ec <pinMode>
  digitalWrite(pin, LOW);
   b6aea:	79e0      	ldrb	r0, [r4, #7]
   b6aec:	2100      	movs	r1, #0
   b6aee:	f002 fc0e 	bl	b930e <digitalWrite>
  begun = true;
   b6af2:	2301      	movs	r3, #1
   b6af4:	7023      	strb	r3, [r4, #0]
}
   b6af6:	bd10      	pop	{r4, pc}

000b6af8 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b6af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b6afa:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b6afc:	4605      	mov	r5, r0
   b6afe:	460c      	mov	r4, r1
    if (begun) {
   b6b00:	b11b      	cbz	r3, b6b0a <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b6b02:	79c0      	ldrb	r0, [r0, #7]
   b6b04:	2100      	movs	r1, #0
   b6b06:	f002 fbf1 	bl	b92ec <pinMode>
    }
    pin = p;
    if (begun) {
   b6b0a:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b6b0c:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b6b0e:	b15b      	cbz	r3, b6b28 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b6b10:	b2a0      	uxth	r0, r4
   b6b12:	2101      	movs	r1, #1
   b6b14:	9001      	str	r0, [sp, #4]
   b6b16:	f002 fbe9 	bl	b92ec <pinMode>
        digitalWrite(p, LOW);
   b6b1a:	9801      	ldr	r0, [sp, #4]
   b6b1c:	2100      	movs	r1, #0
    }
}
   b6b1e:	b003      	add	sp, #12
   b6b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b6b24:	f002 bbf3 	b.w	b930e <digitalWrite>
}
   b6b28:	b003      	add	sp, #12
   b6b2a:	bd30      	pop	{r4, r5, pc}

000b6b2c <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b6b2c:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b6b2e:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b6b30:	4604      	mov	r4, r0
   b6b32:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b6b34:	7183      	strb	r3, [r0, #6]
   b6b36:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b6b3a:	7005      	strb	r5, [r0, #0]
   b6b3c:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b6b3e:	f7ff ffb1 	bl	b6aa4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b6b42:	4620      	mov	r0, r4
   b6b44:	4631      	mov	r1, r6
   b6b46:	f7ff ffd7 	bl	b6af8 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b6b4a:	4620      	mov	r0, r4
   b6b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6b50 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b6b50:	68c3      	ldr	r3, [r0, #12]
   b6b52:	2b00      	cmp	r3, #0
   b6b54:	f000 81a4 	beq.w	b6ea0 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b6b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b5c:	7983      	ldrb	r3, [r0, #6]
   b6b5e:	3b02      	subs	r3, #2
   b6b60:	b2db      	uxtb	r3, r3
   b6b62:	2b04      	cmp	r3, #4
   b6b64:	bf9c      	itt	ls
   b6b66:	4abf      	ldrls	r2, [pc, #764]	; (b6e64 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b6b68:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b6b6c:	b085      	sub	sp, #20
   b6b6e:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b6b70:	bf88      	it	hi
   b6b72:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6b74:	f000 ff62 	bl	b7a3c <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b6b78:	692b      	ldr	r3, [r5, #16]
   b6b7a:	1ac0      	subs	r0, r0, r3
   b6b7c:	42a0      	cmp	r0, r4
   b6b7e:	d3f9      	bcc.n	b6b74 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b6b80:	4cb9      	ldr	r4, [pc, #740]	; (b6e68 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b6b82:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b6b84:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6b88:	b91b      	cbnz	r3, b6b92 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6b8a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b6b8e:	2b00      	cmp	r3, #0
   b6b90:	db7e      	blt.n	b6c90 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b6b92:	4cb6      	ldr	r4, [pc, #728]	; (b6e6c <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b6b94:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6b98:	b923      	cbnz	r3, b6ba4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6b9a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b6b9e:	2b00      	cmp	r3, #0
   b6ba0:	f2c0 816e 	blt.w	b6e80 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b6ba4:	4cb2      	ldr	r4, [pc, #712]	; (b6e70 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b6ba6:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6baa:	2b00      	cmp	r3, #0
   b6bac:	f000 8144 	beq.w	b6e38 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b6bb0:	79eb      	ldrb	r3, [r5, #7]
   b6bb2:	4ab0      	ldr	r2, [pc, #704]	; (b6e74 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b6bb4:	4cb0      	ldr	r4, [pc, #704]	; (b6e78 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b6bb6:	6812      	ldr	r2, [r2, #0]
   b6bb8:	0119      	lsls	r1, r3, #4
   b6bba:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b6bbe:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b6bc0:	49ae      	ldr	r1, [pc, #696]	; (b6e7c <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b6bc2:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b6bc4:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b6bc8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b6bcc:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b6bd0:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b6bd2:	f003 031f 	and.w	r3, r3, #31
   b6bd6:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b6bda:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b6bdc:	433a      	orrs	r2, r7
   b6bde:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b6be0:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b6be2:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b6be6:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b6bea:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b6bec:	2900      	cmp	r1, #0
   b6bee:	d044      	beq.n	b6c7a <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b6bf0:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b6bf4:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b6bf6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b6bfa:	f818 cb01 	ldrb.w	ip, [r8], #1
   b6bfe:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b6c00:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b6c02:	6863      	ldr	r3, [r4, #4]
   b6c04:	1a9b      	subs	r3, r3, r2
   b6c06:	2b46      	cmp	r3, #70	; 0x46
   b6c08:	d9fb      	bls.n	b6c02 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b6c0a:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b6c0c:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b6c10:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b6c14:	ea43 0307 	orr.w	r3, r3, r7
   b6c18:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b6c1c:	d02f      	beq.n	b6c7e <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b6c1e:	6863      	ldr	r3, [r4, #4]
   b6c20:	1a9b      	subs	r3, r3, r2
   b6c22:	2b28      	cmp	r3, #40	; 0x28
   b6c24:	d9fb      	bls.n	b6c1e <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b6c26:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b6c2a:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b6c2c:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b6c30:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b6c34:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b6c38:	d1e3      	bne.n	b6c02 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b6c3a:	88ab      	ldrh	r3, [r5, #4]
   b6c3c:	f10e 0e01 	add.w	lr, lr, #1
   b6c40:	fa1f fe8e 	uxth.w	lr, lr
   b6c44:	4573      	cmp	r3, lr
   b6c46:	d8d8      	bhi.n	b6bfa <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b6c48:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b6c4c:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b6c50:	6863      	ldr	r3, [r4, #4]
   b6c52:	1a9b      	subs	r3, r3, r2
   b6c54:	2b46      	cmp	r3, #70	; 0x46
   b6c56:	d9fb      	bls.n	b6c50 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b6c58:	6863      	ldr	r3, [r4, #4]
   b6c5a:	eba3 0909 	sub.w	r9, r3, r9
   b6c5e:	4589      	cmp	r9, r1
   b6c60:	f0c0 80e4 	bcc.w	b6e2c <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6c64:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b6c68:	f000 fee0 	bl	b7a2c <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b6c6c:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b6c6e:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b6c72:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b6c76:	2900      	cmp	r1, #0
   b6c78:	d1ba      	bne.n	b6bf0 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b6c7a:	460a      	mov	r2, r1
   b6c7c:	e7e8      	b.n	b6c50 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b6c7e:	6863      	ldr	r3, [r4, #4]
   b6c80:	1a9b      	subs	r3, r3, r2
   b6c82:	2b11      	cmp	r3, #17
   b6c84:	d8cf      	bhi.n	b6c26 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b6c86:	6863      	ldr	r3, [r4, #4]
   b6c88:	1a9b      	subs	r3, r3, r2
   b6c8a:	2b11      	cmp	r3, #17
   b6c8c:	d9f7      	bls.n	b6c7e <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b6c8e:	e7ca      	b.n	b6c26 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6c90:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6c94:	2b00      	cmp	r3, #0
   b6c96:	f6bf af7c 	bge.w	b6b92 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6c9a:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6c9e:	2b00      	cmp	r3, #0
   b6ca0:	f6bf af77 	bge.w	b6b92 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b6ca4:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6ca8:	2b00      	cmp	r3, #0
   b6caa:	f6bf af72 	bge.w	b6b92 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b6cae:	0136      	lsls	r6, r6, #4
   b6cb0:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b6cb2:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b6cb4:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b6cb6:	f001 f92d 	bl	b7f14 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b6cba:	2800      	cmp	r0, #0
   b6cbc:	f43f af78 	beq.w	b6bb0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b6cc0:	88ab      	ldrh	r3, [r5, #4]
   b6cc2:	2b00      	cmp	r3, #0
   b6cc4:	f000 80ed 	beq.w	b6ea2 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b6cc8:	68ea      	ldr	r2, [r5, #12]
   b6cca:	3b01      	subs	r3, #1
   b6ccc:	fa12 f783 	uxtah	r7, r2, r3
   b6cd0:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b6cd4:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6cd6:	f248 0206 	movw	r2, #32774	; 0x8006
   b6cda:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b6cde:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6ce2:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b6ce6:	bf0c      	ite	eq
   b6ce8:	4693      	moveq	fp, r2
   b6cea:	468b      	movne	fp, r1
   b6cec:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b6cf0:	bf0c      	ite	eq
   b6cf2:	4616      	moveq	r6, r2
   b6cf4:	460e      	movne	r6, r1
   b6cf6:	f01c 0f20 	tst.w	ip, #32
   b6cfa:	bf0c      	ite	eq
   b6cfc:	4690      	moveq	r8, r2
   b6cfe:	4688      	movne	r8, r1
        pos++;
   b6d00:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d04:	f8cd 8008 	str.w	r8, [sp, #8]
   b6d08:	9601      	str	r6, [sp, #4]
        pos++;
   b6d0a:	f103 0802 	add.w	r8, r3, #2
   b6d0e:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d12:	9e01      	ldr	r6, [sp, #4]
   b6d14:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b6d18:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d1c:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b6d20:	9e02      	ldr	r6, [sp, #8]
   b6d22:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b6d26:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d2a:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b6d2e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d32:	bf0c      	ite	eq
   b6d34:	4693      	moveq	fp, r2
   b6d36:	468b      	movne	fp, r1
   b6d38:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b6d3c:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d40:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b6d44:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d48:	bf0c      	ite	eq
   b6d4a:	4693      	moveq	fp, r2
   b6d4c:	468b      	movne	fp, r1
   b6d4e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b6d52:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d56:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b6d5a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d5e:	bf0c      	ite	eq
   b6d60:	4693      	moveq	fp, r2
   b6d62:	468b      	movne	fp, r1
   b6d64:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b6d68:	f103 0a08 	add.w	sl, r3, #8
   b6d6c:	f103 0806 	add.w	r8, r3, #6
   b6d70:	3307      	adds	r3, #7
   b6d72:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d74:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b6d78:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d7c:	bf0c      	ite	eq
   b6d7e:	4693      	moveq	fp, r2
   b6d80:	468b      	movne	fp, r1
        pos++;
   b6d82:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6d86:	f01c 0f01 	tst.w	ip, #1
   b6d8a:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b6d8e:	bf15      	itete	ne
   b6d90:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b6d94:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b6d98:	fa1f f38a 	uxthne.w	r3, sl
   b6d9c:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b6da0:	4577      	cmp	r7, lr
   b6da2:	d19c      	bne.n	b6cde <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b6da4:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b6da6:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b6da8:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b6daa:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b6dac:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b6dae:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b6db0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b6db4:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b6db6:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b6db8:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b6dba:	4b2e      	ldr	r3, [pc, #184]	; (b6e74 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b6dbc:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b6dbe:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b6dc0:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b6dc2:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b6dc4:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b6dc8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b6dcc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b6dd0:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b6dd4:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b6dd8:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b6ddc:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b6de0:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b6de4:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b6de8:	79eb      	ldrb	r3, [r5, #7]
   b6dea:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b6dee:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b6df0:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b6df2:	5cfe      	ldrb	r6, [r7, r3]
   b6df4:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b6df8:	f003 031f 	and.w	r3, r3, #31
   b6dfc:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b6e00:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b6e04:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b6e08:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b6e0c:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b6e0e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b6e12:	2b00      	cmp	r3, #0
   b6e14:	d0fb      	beq.n	b6e0e <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b6e16:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b6e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b6e1c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b6e20:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b6e24:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b6e28:	f001 f87c 	bl	b7f24 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6e2c:	f000 fe06 	bl	b7a3c <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b6e30:	6128      	str	r0, [r5, #16]
}
   b6e32:	b005      	add	sp, #20
   b6e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6e38:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b6e3c:	2b00      	cmp	r3, #0
   b6e3e:	f6bf aeb7 	bge.w	b6bb0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6e42:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6e46:	2b00      	cmp	r3, #0
   b6e48:	f6bf aeb2 	bge.w	b6bb0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6e4c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6e50:	2b00      	cmp	r3, #0
   b6e52:	f6bf aead 	bge.w	b6bb0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b6e56:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6e5a:	2b00      	cmp	r3, #0
   b6e5c:	f6bf aea8 	bge.w	b6bb0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b6e60:	e725      	b.n	b6cae <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b6e62:	bf00      	nop
   b6e64:	000c0588 	.word	0x000c0588
   b6e68:	4001c000 	.word	0x4001c000
   b6e6c:	40021000 	.word	0x40021000
   b6e70:	40022000 	.word	0x40022000
   b6e74:	2003e6b4 	.word	0x2003e6b4
   b6e78:	e0001000 	.word	0xe0001000
   b6e7c:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6e80:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6e84:	2b00      	cmp	r3, #0
   b6e86:	f6bf ae8d 	bge.w	b6ba4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6e8a:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6e8e:	2b00      	cmp	r3, #0
   b6e90:	f6bf ae88 	bge.w	b6ba4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b6e94:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6e98:	2b00      	cmp	r3, #0
   b6e9a:	f6bf ae83 	bge.w	b6ba4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b6e9e:	e706      	b.n	b6cae <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b6ea0:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b6ea2:	2304      	movs	r3, #4
   b6ea4:	2102      	movs	r1, #2
   b6ea6:	e783      	b.n	b6db0 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b6ea8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b6ea8:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b6eaa:	f000 fddf 	bl	b7a6c <HAL_Pin_Map>
   b6eae:	4b01      	ldr	r3, [pc, #4]	; (b6eb4 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b6eb0:	6018      	str	r0, [r3, #0]
}
   b6eb2:	bd08      	pop	{r3, pc}
   b6eb4:	2003e6b4 	.word	0x2003e6b4

000b6eb8 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b6eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ebc:	b085      	sub	sp, #20
   b6ebe:	461f      	mov	r7, r3
   b6ec0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b6ec4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b6ec8:	eba8 0902 	sub.w	r9, r8, r2
   b6ecc:	eba7 0a01 	sub.w	sl, r7, r1
   b6ed0:	f1b9 0f00 	cmp.w	r9, #0
   b6ed4:	bfb8      	it	lt
   b6ed6:	f1c9 0900 	rsblt	r9, r9, #0
   b6eda:	f1ba 0f00 	cmp.w	sl, #0
   b6ede:	bfb8      	it	lt
   b6ee0:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b6ee4:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b6ee6:	4683      	mov	fp, r0
   b6ee8:	460c      	mov	r4, r1
   b6eea:	4615      	mov	r5, r2
  if (steep) {
   b6eec:	dd04      	ble.n	b6ef8 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b6eee:	463a      	mov	r2, r7
    swap(x0, y0);
   b6ef0:	462c      	mov	r4, r5
    swap(x1, y1);
   b6ef2:	4647      	mov	r7, r8
    swap(x0, y0);
   b6ef4:	460d      	mov	r5, r1
    swap(x1, y1);
   b6ef6:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b6ef8:	42bc      	cmp	r4, r7
   b6efa:	dd05      	ble.n	b6f08 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b6efc:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b6efe:	4645      	mov	r5, r8
   b6f00:	4690      	mov	r8, r2
  if (x0 > x1) {
   b6f02:	4622      	mov	r2, r4
   b6f04:	463c      	mov	r4, r7
   b6f06:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b6f08:	1b3e      	subs	r6, r7, r4
   b6f0a:	b2b2      	uxth	r2, r6
   b6f0c:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b6f0e:	eba8 0205 	sub.w	r2, r8, r5
   b6f12:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b6f16:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b6f1a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b6f1e:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b6f22:	4545      	cmp	r5, r8
   b6f24:	bfb4      	ite	lt
   b6f26:	2201      	movlt	r2, #1
   b6f28:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b6f2c:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b6f2e:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b6f30:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b6f32:	42bc      	cmp	r4, r7
   b6f34:	dc1c      	bgt.n	b6f70 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b6f36:	f8db 2000 	ldr.w	r2, [fp]
   b6f3a:	9303      	str	r3, [sp, #12]
    if (steep) {
   b6f3c:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b6f3e:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b6f42:	bfc7      	ittee	gt
   b6f44:	4629      	movgt	r1, r5
   b6f46:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b6f48:	462a      	movle	r2, r5
   b6f4a:	4621      	movle	r1, r4
   b6f4c:	4658      	mov	r0, fp
   b6f4e:	47c0      	blx	r8
    }
    err -= dy;
   b6f50:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b6f52:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b6f54:	1ab6      	subs	r6, r6, r2
   b6f56:	b2b1      	uxth	r1, r6
   b6f58:	b236      	sxth	r6, r6
    if (err < 0) {
   b6f5a:	2e00      	cmp	r6, #0
   b6f5c:	da05      	bge.n	b6f6a <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b6f5e:	9a02      	ldr	r2, [sp, #8]
   b6f60:	4415      	add	r5, r2
      err += dx;
   b6f62:	9a00      	ldr	r2, [sp, #0]
   b6f64:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b6f66:	b22d      	sxth	r5, r5
      err += dx;
   b6f68:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b6f6a:	3401      	adds	r4, #1
   b6f6c:	b224      	sxth	r4, r4
   b6f6e:	e7e0      	b.n	b6f32 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b6f70:	b005      	add	sp, #20
   b6f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6f76 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b6f76:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6f7a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b6f7e:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b6f80:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b6f84:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b6f88:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b6f8a:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b6f8c:	4616      	mov	r6, r2
   b6f8e:	468a      	mov	sl, r1
   b6f90:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b6f92:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b6f94:	6823      	ldr	r3, [r4, #0]
   b6f96:	f8cd 8000 	str.w	r8, [sp]
   b6f9a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b6f9e:	4432      	add	r2, r6
   b6fa0:	69df      	ldr	r7, [r3, #28]
   b6fa2:	4651      	mov	r1, sl
   b6fa4:	462b      	mov	r3, r5
   b6fa6:	4620      	mov	r0, r4
   b6fa8:	b212      	sxth	r2, r2
   b6faa:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b6fac:	6823      	ldr	r3, [r4, #0]
   b6fae:	f8cd 8000 	str.w	r8, [sp]
   b6fb2:	699f      	ldr	r7, [r3, #24]
   b6fb4:	4632      	mov	r2, r6
   b6fb6:	464b      	mov	r3, r9
   b6fb8:	4651      	mov	r1, sl
   b6fba:	4620      	mov	r0, r4
   b6fbc:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b6fbe:	1e6b      	subs	r3, r5, #1
   b6fc0:	eb03 010a 	add.w	r1, r3, sl
   b6fc4:	6823      	ldr	r3, [r4, #0]
   b6fc6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b6fca:	699d      	ldr	r5, [r3, #24]
   b6fcc:	4632      	mov	r2, r6
   b6fce:	464b      	mov	r3, r9
   b6fd0:	b209      	sxth	r1, r1
   b6fd2:	4620      	mov	r0, r4
   b6fd4:	46ac      	mov	ip, r5
}
   b6fd6:	b002      	add	sp, #8
   b6fd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b6fdc:	4760      	bx	ip

000b6fde <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b6fde:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b6fe0:	3b01      	subs	r3, #1
   b6fe2:	4413      	add	r3, r2
   b6fe4:	6804      	ldr	r4, [r0, #0]
   b6fe6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b6fea:	9501      	str	r5, [sp, #4]
   b6fec:	b21b      	sxth	r3, r3
   b6fee:	9300      	str	r3, [sp, #0]
   b6ff0:	6964      	ldr	r4, [r4, #20]
   b6ff2:	460b      	mov	r3, r1
   b6ff4:	47a0      	blx	r4
}
   b6ff6:	b003      	add	sp, #12
   b6ff8:	bd30      	pop	{r4, r5, pc}

000b6ffa <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b6ffa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b6ffc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b7000:	6804      	ldr	r4, [r0, #0]
   b7002:	e9cd 2500 	strd	r2, r5, [sp]
   b7006:	3b01      	subs	r3, #1
   b7008:	440b      	add	r3, r1
   b700a:	6964      	ldr	r4, [r4, #20]
   b700c:	b21b      	sxth	r3, r3
   b700e:	47a0      	blx	r4
}
   b7010:	b003      	add	sp, #12
   b7012:	bd30      	pop	{r4, r5, pc}

000b7014 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b7014:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7018:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b701c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b7020:	4605      	mov	r5, r0
   b7022:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b7024:	460c      	mov	r4, r1
   b7026:	18ce      	adds	r6, r1, r3
   b7028:	42b4      	cmp	r4, r6
   b702a:	da0b      	bge.n	b7044 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b702c:	682b      	ldr	r3, [r5, #0]
   b702e:	f8cd 8000 	str.w	r8, [sp]
   b7032:	699f      	ldr	r7, [r3, #24]
   b7034:	4621      	mov	r1, r4
   b7036:	464b      	mov	r3, r9
   b7038:	4652      	mov	r2, sl
   b703a:	4628      	mov	r0, r5
   b703c:	3401      	adds	r4, #1
   b703e:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b7040:	b224      	sxth	r4, r4
   b7042:	e7f1      	b.n	b7028 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b7044:	b002      	add	sp, #8
   b7046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b704a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b704a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b704c:	6802      	ldr	r2, [r0, #0]
   b704e:	9101      	str	r1, [sp, #4]
   b7050:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b7054:	9100      	str	r1, [sp, #0]
   b7056:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b7058:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b705c:	2200      	movs	r2, #0
   b705e:	4611      	mov	r1, r2
   b7060:	47a0      	blx	r4
}
   b7062:	b002      	add	sp, #8
   b7064:	bd10      	pop	{r4, pc}

000b7066 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b7066:	4770      	bx	lr

000b7068 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b7068:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b706a:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b706c:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b706e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b7072:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b7074:	4d05      	ldr	r5, [pc, #20]	; (b708c <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b7076:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b7078:	2201      	movs	r2, #1
   b707a:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b707c:	6005      	str	r5, [r0, #0]
   b707e:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b7080:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b7082:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b7084:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b7086:	7682      	strb	r2, [r0, #26]
}
   b7088:	bd30      	pop	{r4, r5, pc}
   b708a:	bf00      	nop
   b708c:	000c0aa0 	.word	0x000c0aa0

000b7090 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
			      uint16_t color) {
   b7090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7094:	b089      	sub	sp, #36	; 0x24
   b7096:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b709a:	f9bd 7048 	ldrsh.w	r7, [sp, #72]	; 0x48
   b709e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
   b70a2:	9305      	str	r3, [sp, #20]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b70a4:	1dfa      	adds	r2, r7, #7
			      uint16_t color) {
   b70a6:	e9cd 0101 	strd	r0, r1, [sp, #4]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b70aa:	bf48      	it	mi
   b70ac:	f107 020e 	addmi.w	r2, r7, #14
   b70b0:	2400      	movs	r4, #0
			      uint16_t color) {
   b70b2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  int16_t i, j, byteWidth = (w + 7) / 8;
   b70b6:	ea4f 0be2 	mov.w	fp, r2, asr #3
   b70ba:	4625      	mov	r5, r4
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b70bc:	f04f 0980 	mov.w	r9, #128	; 0x80
  for(j=0; j<h; j++) {
   b70c0:	9905      	ldr	r1, [sp, #20]
   b70c2:	b22a      	sxth	r2, r5
   b70c4:	4291      	cmp	r1, r2
   b70c6:	dd2a      	ble.n	b711e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b70c8:	9a04      	ldr	r2, [sp, #16]
   b70ca:	eb02 0a04 	add.w	sl, r2, r4
	drawPixel(x+i, y+j, color);
   b70ce:	9a03      	ldr	r2, [sp, #12]
   b70d0:	442a      	add	r2, r5
   b70d2:	f04f 0800 	mov.w	r8, #0
   b70d6:	b212      	sxth	r2, r2
   b70d8:	fa0f f088 	sxth.w	r0, r8
    for(i=0; i<w; i++ ) {
   b70dc:	4287      	cmp	r7, r0
   b70de:	fa1f f188 	uxth.w	r1, r8
   b70e2:	dd19      	ble.n	b7118 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b70e4:	10c0      	asrs	r0, r0, #3
   b70e6:	f81a c000 	ldrb.w	ip, [sl, r0]
   b70ea:	f001 0007 	and.w	r0, r1, #7
   b70ee:	fa49 f000 	asr.w	r0, r9, r0
   b70f2:	ea1c 0f00 	tst.w	ip, r0
   b70f6:	d00c      	beq.n	b7112 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x82>
	drawPixel(x+i, y+j, color);
   b70f8:	9802      	ldr	r0, [sp, #8]
   b70fa:	4401      	add	r1, r0
   b70fc:	9801      	ldr	r0, [sp, #4]
   b70fe:	6800      	ldr	r0, [r0, #0]
   b7100:	6900      	ldr	r0, [r0, #16]
   b7102:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7106:	4606      	mov	r6, r0
   b7108:	b209      	sxth	r1, r1
   b710a:	9801      	ldr	r0, [sp, #4]
   b710c:	47b0      	blx	r6
   b710e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    for(i=0; i<w; i++ ) {
   b7112:	f108 0801 	add.w	r8, r8, #1
   b7116:	e7df      	b.n	b70d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x48>
  for(j=0; j<h; j++) {
   b7118:	3501      	adds	r5, #1
   b711a:	445c      	add	r4, fp
   b711c:	e7d0      	b.n	b70c0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x30>
}
   b711e:	b009      	add	sp, #36	; 0x24
   b7120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7124 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b7124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7128:	ed2d 8b02 	vpush	{d8}
   b712c:	b08d      	sub	sp, #52	; 0x34
   b712e:	4607      	mov	r7, r0
   b7130:	9104      	str	r1, [sp, #16]
   b7132:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b7136:	9105      	str	r1, [sp, #20]
   b7138:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b713c:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b713e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b7142:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b7144:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b7148:	4281      	cmp	r1, r0
   b714a:	dd52      	ble.n	b71f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b714c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b7150:	4291      	cmp	r1, r2
   b7152:	dd4e      	ble.n	b71f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b7154:	2106      	movs	r1, #6
   b7156:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b715a:	2c00      	cmp	r4, #0
   b715c:	dd49      	ble.n	b71f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b715e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b7162:	2c00      	cmp	r4, #0
   b7164:	dd45      	ble.n	b71f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b7166:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b716a:	930b      	str	r3, [sp, #44]	; 0x2c
   b716c:	b293      	uxth	r3, r2
   b716e:	9307      	str	r3, [sp, #28]
   b7170:	3308      	adds	r3, #8
   b7172:	b29b      	uxth	r3, r3
   b7174:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b7176:	2400      	movs	r4, #0
   b7178:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b717a:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b717c:	bf1c      	itt	ne
   b717e:	4b2c      	ldrne	r3, [pc, #176]	; (b7230 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b7180:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b7182:	9e07      	ldr	r6, [sp, #28]
   b7184:	bf16      	itet	ne
   b7186:	191b      	addne	r3, r3, r4
      line = 0x0;
   b7188:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b718a:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b718c:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b718e:	9a04      	ldr	r2, [sp, #16]
   b7190:	b2ab      	uxth	r3, r5
   b7192:	930a      	str	r3, [sp, #40]	; 0x28
   b7194:	fb04 f305 	mul.w	r3, r4, r5
   b7198:	fa13 f382 	uxtah	r3, r3, r2
   b719c:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b719e:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b71a2:	ee08 3a10 	vmov	s16, r3
   b71a6:	46b0      	mov	r8, r6
   b71a8:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b71ac:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b71b0:	9b03      	ldr	r3, [sp, #12]
   b71b2:	07db      	lsls	r3, r3, #31
   b71b4:	d52f      	bpl.n	b7216 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b71b6:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b71b8:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b71ba:	d11f      	bne.n	b71fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b71bc:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b71c0:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b71c2:	b232      	sxth	r2, r6
   b71c4:	4651      	mov	r1, sl
   b71c6:	4638      	mov	r0, r7
   b71c8:	47d8      	blx	fp
      line >>= 1;
   b71ca:	9b03      	ldr	r3, [sp, #12]
   b71cc:	085b      	lsrs	r3, r3, #1
   b71ce:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b71d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b71d2:	3601      	adds	r6, #1
   b71d4:	4498      	add	r8, r3
   b71d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b71d8:	b2b6      	uxth	r6, r6
   b71da:	42b3      	cmp	r3, r6
   b71dc:	fa1f f888 	uxth.w	r8, r8
   b71e0:	d1e6      	bne.n	b71b0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b71e2:	9b08      	ldr	r3, [sp, #32]
   b71e4:	3b01      	subs	r3, #1
   b71e6:	3401      	adds	r4, #1
   b71e8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b71ec:	b264      	sxtb	r4, r4
   b71ee:	9308      	str	r3, [sp, #32]
   b71f0:	d1c3      	bne.n	b717a <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b71f2:	b00d      	add	sp, #52	; 0x34
   b71f4:	ecbd 8b02 	vpop	{d8}
   b71f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b71fc:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b71fe:	e9cd 9200 	strd	r9, r2, [sp]
   b7202:	ee18 1a10 	vmov	r1, s16
   b7206:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b720a:	fa0f f288 	sxth.w	r2, r8
   b720e:	464b      	mov	r3, r9
   b7210:	4638      	mov	r0, r7
   b7212:	47d8      	blx	fp
   b7214:	e7d9      	b.n	b71ca <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b7216:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b721a:	4293      	cmp	r3, r2
   b721c:	d0d5      	beq.n	b71ca <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b721e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b7220:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b7222:	d103      	bne.n	b722c <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b7224:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b7228:	9b06      	ldr	r3, [sp, #24]
   b722a:	e7ca      	b.n	b71c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b722c:	9a06      	ldr	r2, [sp, #24]
   b722e:	e7e6      	b.n	b71fe <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b7230:	000c059c 	.word	0x000c059c

000b7234 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b7234:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b7236:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b7238:	b085      	sub	sp, #20
   b723a:	4604      	mov	r4, r0
  if (c == '\n') {
   b723c:	d107      	bne.n	b724e <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b723e:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b7240:	8a63      	ldrh	r3, [r4, #18]
   b7242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b7246:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b7248:	2300      	movs	r3, #0
   b724a:	8223      	strh	r3, [r4, #16]
   b724c:	e021      	b.n	b7292 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b724e:	290d      	cmp	r1, #13
   b7250:	d01f      	beq.n	b7292 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b7252:	7e03      	ldrb	r3, [r0, #24]
   b7254:	9302      	str	r3, [sp, #8]
   b7256:	8ac3      	ldrh	r3, [r0, #22]
   b7258:	9301      	str	r3, [sp, #4]
   b725a:	8a83      	ldrh	r3, [r0, #20]
   b725c:	9300      	str	r3, [sp, #0]
   b725e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b7262:	460b      	mov	r3, r1
   b7264:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b7268:	f7ff ff5c 	bl	b7124 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b726c:	7e20      	ldrb	r0, [r4, #24]
   b726e:	8a23      	ldrh	r3, [r4, #16]
   b7270:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b7274:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b7278:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b727a:	b21b      	sxth	r3, r3
   b727c:	4602      	mov	r2, r0
   b727e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b7280:	b139      	cbz	r1, b7292 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b7282:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b7286:	f06f 0505 	mvn.w	r5, #5
   b728a:	fb05 1100 	mla	r1, r5, r0, r1
   b728e:	428b      	cmp	r3, r1
   b7290:	dcd6      	bgt.n	b7240 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b7292:	2001      	movs	r0, #1
   b7294:	b005      	add	sp, #20
   b7296:	bd30      	pop	{r4, r5, pc}

000b7298 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b7298:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b729a:	8242      	strh	r2, [r0, #18]
}
   b729c:	4770      	bx	lr

000b729e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b729e:	2901      	cmp	r1, #1
   b72a0:	bf38      	it	cc
   b72a2:	2101      	movcc	r1, #1
   b72a4:	7601      	strb	r1, [r0, #24]
}
   b72a6:	4770      	bx	lr

000b72a8 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b72a8:	82c1      	strh	r1, [r0, #22]
   b72aa:	8281      	strh	r1, [r0, #20]
}
   b72ac:	4770      	bx	lr

000b72ae <_ZN12Adafruit_GFX11getRotationEv>:
}
   b72ae:	7e40      	ldrb	r0, [r0, #25]
   b72b0:	4770      	bx	lr

000b72b2 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b72b2:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b72b6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b72ba:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b72bc:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b72be:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b72c2:	bf59      	ittee	pl
   b72c4:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b72c6:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b72c8:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b72ca:	81c3      	strhmi	r3, [r0, #14]
}
   b72cc:	4770      	bx	lr

000b72ce <_ZN12Adafruit_GFX5widthEv>:
}
   b72ce:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b72d2:	4770      	bx	lr

000b72d4 <_ZN12Adafruit_GFX6heightEv>:
}
   b72d4:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b72d8:	4770      	bx	lr
	...

000b72dc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b72dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b72de:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b72e0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b72e4:	2d02      	cmp	r5, #2
   b72e6:	d069      	beq.n	b73bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b72e8:	2d03      	cmp	r5, #3
   b72ea:	f000 8099 	beq.w	b7420 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b72ee:	2d01      	cmp	r5, #1
   b72f0:	d16c      	bne.n	b73cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b72f2:	8905      	ldrh	r5, [r0, #8]
   b72f4:	43d2      	mvns	r2, r2
   b72f6:	442a      	add	r2, r5
   b72f8:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b72fa:	2a00      	cmp	r2, #0
   b72fc:	db5d      	blt.n	b73ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b72fe:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b7302:	4295      	cmp	r5, r2
   b7304:	dd59      	ble.n	b73ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b7306:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b7308:	bfbe      	ittt	lt
   b730a:	185b      	addlt	r3, r3, r1
   b730c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b730e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b7310:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b7314:	18cd      	adds	r5, r1, r3
   b7316:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b7318:	bfc4      	itt	gt
   b731a:	1a43      	subgt	r3, r0, r1
   b731c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b731e:	2b00      	cmp	r3, #0
   b7320:	dd4b      	ble.n	b73ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b7322:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b7326:	f8df c120 	ldr.w	ip, [pc, #288]	; b7448 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b732a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b732e:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b7332:	b2db      	uxtb	r3, r3
  pBuf += x;
   b7334:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b7338:	d01a      	beq.n	b7370 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b733a:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b733e:	4e40      	ldr	r6, [pc, #256]	; (b7440 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b7340:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b7342:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b7344:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b7346:	bf3f      	itttt	cc
   b7348:	eba5 0e03 	subcc.w	lr, r5, r3
   b734c:	26ff      	movcc	r6, #255	; 0xff
   b734e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b7352:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b7354:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b7358:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b735a:	bf0c      	ite	eq
   b735c:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b735e:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b7360:	42ab      	cmp	r3, r5
   b7362:	f80c 6002 	strb.w	r6, [ip, r2]
   b7366:	d328      	bcc.n	b73ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b7368:	3908      	subs	r1, #8
   b736a:	440b      	add	r3, r1
   b736c:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b736e:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b7370:	2b07      	cmp	r3, #7
   b7372:	d919      	bls.n	b73a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b7374:	2c01      	cmp	r4, #1
   b7376:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b737a:	bf18      	it	ne
   b737c:	2500      	movne	r5, #0
   b737e:	b2ed      	uxtb	r5, r5
   b7380:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b7384:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b7386:	3a08      	subs	r2, #8
   b7388:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b738a:	2a07      	cmp	r2, #7
      *pBuf = val;
   b738c:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b7390:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b7394:	d8f7      	bhi.n	b7386 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b7396:	f1a3 0208 	sub.w	r2, r3, #8
   b739a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b739e:	3201      	adds	r2, #1
   b73a0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b73a4:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b73a8:	b13b      	cbz	r3, b73ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b73aa:	4a26      	ldr	r2, [pc, #152]	; (b7444 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b73ac:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b73ae:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b73b0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b73b2:	bf0c      	ite	eq
   b73b4:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b73b6:	4393      	bicne	r3, r2
   b73b8:	7003      	strb	r3, [r0, #0]
}
   b73ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b73bc:	8945      	ldrh	r5, [r0, #10]
   b73be:	43d2      	mvns	r2, r2
   b73c0:	442a      	add	r2, r5
      x -= (w-1);
   b73c2:	18cd      	adds	r5, r1, r3
   b73c4:	8901      	ldrh	r1, [r0, #8]
   b73c6:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b73c8:	b212      	sxth	r2, r2
      x -= (w-1);
   b73ca:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b73cc:	2a00      	cmp	r2, #0
   b73ce:	dbf4      	blt.n	b73ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b73d0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b73d4:	4295      	cmp	r5, r2
   b73d6:	ddf0      	ble.n	b73ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b73d8:	2900      	cmp	r1, #0
    w += x;
   b73da:	bfbe      	ittt	lt
   b73dc:	185b      	addlt	r3, r3, r1
   b73de:	b21b      	sxthlt	r3, r3
    x = 0;
   b73e0:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b73e2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b73e6:	18ce      	adds	r6, r1, r3
   b73e8:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b73ea:	bfc4      	itt	gt
   b73ec:	1a6b      	subgt	r3, r5, r1
   b73ee:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b73f0:	2b00      	cmp	r3, #0
   b73f2:	dde2      	ble.n	b73ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b73f4:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b73f6:	2580      	movs	r5, #128	; 0x80
   b73f8:	fb10 1105 	smlabb	r1, r0, r5, r1
   b73fc:	4812      	ldr	r0, [pc, #72]	; (b7448 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b73fe:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b7400:	f002 0007 	and.w	r0, r2, #7
   b7404:	2201      	movs	r2, #1
   b7406:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b7408:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b740a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b740c:	440b      	add	r3, r1
   b740e:	d10c      	bne.n	b742a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b7410:	428b      	cmp	r3, r1
   b7412:	d0d2      	beq.n	b73ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b7414:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7418:	4310      	orrs	r0, r2
   b741a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b741e:	e7f7      	b.n	b7410 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b7420:	18cd      	adds	r5, r1, r3
   b7422:	8941      	ldrh	r1, [r0, #10]
   b7424:	1b49      	subs	r1, r1, r5
   b7426:	b209      	sxth	r1, r1
      break;
   b7428:	e767      	b.n	b72fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b742a:	43d2      	mvns	r2, r2
   b742c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b742e:	428b      	cmp	r3, r1
   b7430:	d0c3      	beq.n	b73ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b7432:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7436:	4010      	ands	r0, r2
   b7438:	f801 0c01 	strb.w	r0, [r1, #-1]
   b743c:	e7f7      	b.n	b742e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b743e:	bf00      	nop
   b7440:	2003e158 	.word	0x2003e158
   b7444:	2003e150 	.word	0x2003e150
   b7448:	2003e160 	.word	0x2003e160

000b744c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b744c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b744e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b7450:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b7454:	2d02      	cmp	r5, #2
   b7456:	d034      	beq.n	b74c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b7458:	2d03      	cmp	r5, #3
   b745a:	f000 809b 	beq.w	b7594 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b745e:	2d01      	cmp	r5, #1
   b7460:	d137      	bne.n	b74d2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b7462:	18d5      	adds	r5, r2, r3
   b7464:	8902      	ldrh	r2, [r0, #8]
   b7466:	1b52      	subs	r2, r2, r5
   b7468:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b746a:	2900      	cmp	r1, #0
   b746c:	f2c0 8091 	blt.w	b7592 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b7470:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b7474:	428d      	cmp	r5, r1
   b7476:	f340 808c 	ble.w	b7592 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b747a:	2a00      	cmp	r2, #0
    w += x;
   b747c:	bfbe      	ittt	lt
   b747e:	189b      	addlt	r3, r3, r2
   b7480:	b21b      	sxthlt	r3, r3
    x = 0;
   b7482:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b7484:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b7488:	18d6      	adds	r6, r2, r3
   b748a:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b748c:	bfc4      	itt	gt
   b748e:	1aab      	subgt	r3, r5, r2
   b7490:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b7492:	2b00      	cmp	r3, #0
   b7494:	dd7d      	ble.n	b7592 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b7496:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b7498:	2580      	movs	r5, #128	; 0x80
   b749a:	fb10 2205 	smlabb	r2, r0, r5, r2
   b749e:	4845      	ldr	r0, [pc, #276]	; (b75b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b74a0:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b74a2:	f001 0007 	and.w	r0, r1, #7
   b74a6:	2101      	movs	r1, #1
   b74a8:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b74aa:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b74ac:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b74ae:	4413      	add	r3, r2
   b74b0:	d175      	bne.n	b759e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b74b2:	429a      	cmp	r2, r3
   b74b4:	d06d      	beq.n	b7592 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b74b6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b74ba:	4308      	orrs	r0, r1
   b74bc:	f802 0c01 	strb.w	r0, [r2, #-1]
   b74c0:	e7f7      	b.n	b74b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b74c2:	8905      	ldrh	r5, [r0, #8]
   b74c4:	43c9      	mvns	r1, r1
   b74c6:	4429      	add	r1, r5
      y -= (h-1);
   b74c8:	18d5      	adds	r5, r2, r3
   b74ca:	8942      	ldrh	r2, [r0, #10]
   b74cc:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b74ce:	b209      	sxth	r1, r1
      y -= (h-1);
   b74d0:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b74d2:	2900      	cmp	r1, #0
   b74d4:	db5d      	blt.n	b7592 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b74d6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b74da:	428d      	cmp	r5, r1
   b74dc:	dd59      	ble.n	b7592 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b74de:	2a00      	cmp	r2, #0
    __h += __y;
   b74e0:	bfbe      	ittt	lt
   b74e2:	189b      	addlt	r3, r3, r2
   b74e4:	b21b      	sxthlt	r3, r3
    __y = 0;
   b74e6:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b74e8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b74ec:	18d5      	adds	r5, r2, r3
   b74ee:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b74f0:	bfc4      	itt	gt
   b74f2:	1a83      	subgt	r3, r0, r2
   b74f4:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b74f6:	2b00      	cmp	r3, #0
   b74f8:	dd4b      	ble.n	b7592 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b74fa:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b74fe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b75b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b7502:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b7506:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b750a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b750c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b7510:	d01a      	beq.n	b7548 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b7512:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b7516:	4e28      	ldr	r6, [pc, #160]	; (b75b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b7518:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b751a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b751c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b751e:	bf3f      	itttt	cc
   b7520:	eba5 0e03 	subcc.w	lr, r5, r3
   b7524:	26ff      	movcc	r6, #255	; 0xff
   b7526:	fa46 f60e 	asrcc.w	r6, r6, lr
   b752a:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b752c:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b7530:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b7532:	bf0c      	ite	eq
   b7534:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b7536:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b7538:	42ab      	cmp	r3, r5
   b753a:	f80c 6001 	strb.w	r6, [ip, r1]
   b753e:	d328      	bcc.n	b7592 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b7540:	3a08      	subs	r2, #8
   b7542:	4413      	add	r3, r2
   b7544:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b7546:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b7548:	2b07      	cmp	r3, #7
   b754a:	d919      	bls.n	b7580 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b754c:	2c01      	cmp	r4, #1
   b754e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b7552:	bf18      	it	ne
   b7554:	2500      	movne	r5, #0
   b7556:	b2ed      	uxtb	r5, r5
   b7558:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b755c:	461a      	mov	r2, r3
      h -= 8;
   b755e:	3a08      	subs	r2, #8
   b7560:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b7562:	2a07      	cmp	r2, #7
      *pBuf = val;
   b7564:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b7568:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b756c:	d8f7      	bhi.n	b755e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b756e:	f1a3 0208 	sub.w	r2, r3, #8
   b7572:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b7576:	3201      	adds	r2, #1
   b7578:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b757c:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b7580:	b13b      	cbz	r3, b7592 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b7582:	4a0e      	ldr	r2, [pc, #56]	; (b75bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b7584:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b7586:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b7588:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b758a:	bf0c      	ite	eq
   b758c:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b758e:	4393      	bicne	r3, r2
   b7590:	7003      	strb	r3, [r0, #0]
}
   b7592:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b7594:	8945      	ldrh	r5, [r0, #10]
   b7596:	43c9      	mvns	r1, r1
   b7598:	4429      	add	r1, r5
   b759a:	b209      	sxth	r1, r1
      break;
   b759c:	e765      	b.n	b746a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b759e:	43c9      	mvns	r1, r1
   b75a0:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b75a2:	429a      	cmp	r2, r3
   b75a4:	d0f5      	beq.n	b7592 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b75a6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b75aa:	4008      	ands	r0, r1
   b75ac:	f802 0c01 	strb.w	r0, [r2, #-1]
   b75b0:	e7f7      	b.n	b75a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b75b2:	bf00      	nop
   b75b4:	2003e160 	.word	0x2003e160
   b75b8:	2003e158 	.word	0x2003e158
   b75bc:	2003e150 	.word	0x2003e150

000b75c0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b75c0:	4770      	bx	lr
	...

000b75c4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b75c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b75c6:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b75c8:	4606      	mov	r6, r0
   b75ca:	4614      	mov	r4, r2
   b75cc:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b75ce:	db2d      	blt.n	b762c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b75d0:	f7ff fe7d 	bl	b72ce <_ZN12Adafruit_GFX5widthEv>
   b75d4:	42a8      	cmp	r0, r5
   b75d6:	dd29      	ble.n	b762c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b75d8:	2c00      	cmp	r4, #0
   b75da:	db27      	blt.n	b762c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b75dc:	4630      	mov	r0, r6
   b75de:	f7ff fe79 	bl	b72d4 <_ZN12Adafruit_GFX6heightEv>
   b75e2:	42a0      	cmp	r0, r4
   b75e4:	dd22      	ble.n	b762c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b75e6:	4630      	mov	r0, r6
   b75e8:	f7ff fe61 	bl	b72ae <_ZN12Adafruit_GFX11getRotationEv>
   b75ec:	2802      	cmp	r0, #2
   b75ee:	d01e      	beq.n	b762e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b75f0:	2803      	cmp	r0, #3
   b75f2:	d025      	beq.n	b7640 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b75f4:	2801      	cmp	r0, #1
   b75f6:	d104      	bne.n	b7602 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b75f8:	8933      	ldrh	r3, [r6, #8]
   b75fa:	43e2      	mvns	r2, r4
   b75fc:	441a      	add	r2, r3
    break;
   b75fe:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b7600:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b7602:	2c00      	cmp	r4, #0
   b7604:	4622      	mov	r2, r4
   b7606:	bfb8      	it	lt
   b7608:	1de2      	addlt	r2, r4, #7
   b760a:	10d2      	asrs	r2, r2, #3
   b760c:	2180      	movs	r1, #128	; 0x80
   b760e:	fb12 5501 	smlabb	r5, r2, r1, r5
   b7612:	490e      	ldr	r1, [pc, #56]	; (b764c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b7614:	2201      	movs	r2, #1
   b7616:	f004 0407 	and.w	r4, r4, #7
   b761a:	574b      	ldrsb	r3, [r1, r5]
   b761c:	fa02 f404 	lsl.w	r4, r2, r4
   b7620:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b7622:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b7624:	bf0c      	ite	eq
   b7626:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b7628:	43a3      	bicne	r3, r4
   b762a:	554b      	strb	r3, [r1, r5]
}
   b762c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b762e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b7630:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b7632:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b7634:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b7636:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b7638:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b763a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b763c:	b224      	sxth	r4, r4
    break;
   b763e:	e7e0      	b.n	b7602 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b7640:	8973      	ldrh	r3, [r6, #10]
   b7642:	3b01      	subs	r3, #1
   b7644:	1b5b      	subs	r3, r3, r5
    break;
   b7646:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b7648:	b21c      	sxth	r4, r3
    break;
   b764a:	e7da      	b.n	b7602 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b764c:	2003e160 	.word	0x2003e160

000b7650 <_ZN16Adafruit_SSD1306D0Ev>:
   b7650:	b510      	push	{r4, lr}
   b7652:	2124      	movs	r1, #36	; 0x24
   b7654:	4604      	mov	r4, r0
   b7656:	f7fc fd22 	bl	b409e <_ZdlPvj>
   b765a:	4620      	mov	r0, r4
   b765c:	bd10      	pop	{r4, pc}
	...

000b7660 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b7660:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b7662:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b7664:	4604      	mov	r4, r0
   b7666:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b7668:	2180      	movs	r1, #128	; 0x80
   b766a:	f7ff fcfd 	bl	b7068 <_ZN12Adafruit_GFXC1Ess>
   b766e:	4b06      	ldr	r3, [pc, #24]	; (b7688 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b7670:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b7672:	23ff      	movs	r3, #255	; 0xff
   b7674:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b7678:	7763      	strb	r3, [r4, #29]
   b767a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b767e:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b7680:	f884 5020 	strb.w	r5, [r4, #32]
}
   b7684:	4620      	mov	r0, r4
   b7686:	bd38      	pop	{r3, r4, r5, pc}
   b7688:	000c0ad8 	.word	0x000c0ad8

000b768c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b768c:	4802      	ldr	r0, [pc, #8]	; (b7698 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b768e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b7692:	2100      	movs	r1, #0
   b7694:	f003 bd62 	b.w	bb15c <memset>
   b7698:	2003e160 	.word	0x2003e160

000b769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b769c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b769e:	4c0b      	ldr	r4, [pc, #44]	; (b76cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b76a0:	7821      	ldrb	r1, [r4, #0]
   b76a2:	f3bf 8f5b 	dmb	ish
   b76a6:	f011 0101 	ands.w	r1, r1, #1
   b76aa:	d10b      	bne.n	b76c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b76ac:	4620      	mov	r0, r4
   b76ae:	9101      	str	r1, [sp, #4]
   b76b0:	f7fc fd04 	bl	b40bc <__cxa_guard_acquire>
   b76b4:	9901      	ldr	r1, [sp, #4]
   b76b6:	b128      	cbz	r0, b76c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b76b8:	4805      	ldr	r0, [pc, #20]	; (b76d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b76ba:	f000 ff29 	bl	b8510 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b76be:	4620      	mov	r0, r4
   b76c0:	f7fc fd01 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b76c4:	4802      	ldr	r0, [pc, #8]	; (b76d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b76c6:	b002      	add	sp, #8
   b76c8:	bd10      	pop	{r4, pc}
   b76ca:	bf00      	nop
   b76cc:	2003e6b8 	.word	0x2003e6b8
   b76d0:	2003e6bc 	.word	0x2003e6bc

000b76d4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b76d4:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b76d6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b76da:	b143      	cbz	r3, b76ee <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b76dc:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b76de:	f7ff ffdd 	bl	b769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b76e2:	9901      	ldr	r1, [sp, #4]
}
   b76e4:	b003      	add	sp, #12
   b76e6:	f85d eb04 	ldr.w	lr, [sp], #4
   b76ea:	f000 bfc5 	b.w	b8678 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b76ee:	460b      	mov	r3, r1
   b76f0:	7f81      	ldrb	r1, [r0, #30]
   b76f2:	7f40      	ldrb	r0, [r0, #29]
   b76f4:	2201      	movs	r2, #1
}
   b76f6:	b003      	add	sp, #12
   b76f8:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b76fc:	f001 be20 	b.w	b9340 <shiftOut>

000b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b7700:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b7702:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b7706:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b7708:	4604      	mov	r4, r0
   b770a:	460d      	mov	r5, r1
  if (sid != -1)
   b770c:	d01d      	beq.n	b774a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b770e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b7712:	2101      	movs	r1, #1
   b7714:	b280      	uxth	r0, r0
   b7716:	f001 fdfa 	bl	b930e <digitalWrite>
    digitalWrite(dc, LOW);
   b771a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b771e:	2100      	movs	r1, #0
   b7720:	b280      	uxth	r0, r0
   b7722:	f001 fdf4 	bl	b930e <digitalWrite>
    digitalWrite(cs, LOW);
   b7726:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b772a:	2100      	movs	r1, #0
   b772c:	b280      	uxth	r0, r0
   b772e:	f001 fdee 	bl	b930e <digitalWrite>
    fastSPIwrite(c);
   b7732:	4629      	mov	r1, r5
   b7734:	4620      	mov	r0, r4
   b7736:	f7ff ffcd 	bl	b76d4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b773a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b773e:	2101      	movs	r1, #1
}
   b7740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b7744:	b280      	uxth	r0, r0
   b7746:	f001 bde2 	b.w	b930e <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b774a:	f001 fe37 	bl	b93bc <_Z19__fetch_global_Wirev>
   b774e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b7752:	f000 fcde 	bl	b8112 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b7756:	f001 fe31 	bl	b93bc <_Z19__fetch_global_Wirev>
   b775a:	6803      	ldr	r3, [r0, #0]
   b775c:	2100      	movs	r1, #0
   b775e:	689b      	ldr	r3, [r3, #8]
   b7760:	4798      	blx	r3
    Wire.write(c);
   b7762:	f001 fe2b 	bl	b93bc <_Z19__fetch_global_Wirev>
   b7766:	6803      	ldr	r3, [r0, #0]
   b7768:	4629      	mov	r1, r5
   b776a:	689b      	ldr	r3, [r3, #8]
   b776c:	4798      	blx	r3
    Wire.endTransmission();
   b776e:	f001 fe25 	bl	b93bc <_Z19__fetch_global_Wirev>
}
   b7772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b7776:	f000 bcd3 	b.w	b8120 <_ZN7TwoWire15endTransmissionEv>
	...

000b777c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b777e:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b7780:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b7782:	f7ff ffbd 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b7786:	2100      	movs	r1, #0
   b7788:	4620      	mov	r0, r4
   b778a:	f7ff ffb9 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b778e:	217f      	movs	r1, #127	; 0x7f
   b7790:	4620      	mov	r0, r4
   b7792:	f7ff ffb5 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b7796:	2122      	movs	r1, #34	; 0x22
   b7798:	4620      	mov	r0, r4
   b779a:	f7ff ffb1 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b779e:	2100      	movs	r1, #0
   b77a0:	4620      	mov	r0, r4
   b77a2:	f7ff ffad 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b77a6:	2107      	movs	r1, #7
   b77a8:	4620      	mov	r0, r4
   b77aa:	f7ff ffa9 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b77ae:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b77b2:	4f29      	ldr	r7, [pc, #164]	; (b7858 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b77b4:	3301      	adds	r3, #1
   b77b6:	d02a      	beq.n	b780e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b77b8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b77bc:	2101      	movs	r1, #1
   b77be:	b280      	uxth	r0, r0
   b77c0:	f001 fda5 	bl	b930e <digitalWrite>
    digitalWrite(dc, HIGH);
   b77c4:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b77c8:	2101      	movs	r1, #1
   b77ca:	b280      	uxth	r0, r0
   b77cc:	f001 fd9f 	bl	b930e <digitalWrite>
    digitalWrite(cs, LOW);
   b77d0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b77d4:	2100      	movs	r1, #0
   b77d6:	b280      	uxth	r0, r0
   b77d8:	f001 fd99 	bl	b930e <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b77dc:	2001      	movs	r0, #1
   b77de:	f000 f925 	bl	b7a2c <HAL_Delay_Microseconds>
   b77e2:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b77e6:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b77e8:	f817 1b01 	ldrb.w	r1, [r7], #1
   b77ec:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b77ee:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b77f0:	f7ff ff70 	bl	b76d4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b77f4:	2d00      	cmp	r5, #0
   b77f6:	d1f6      	bne.n	b77e6 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b77f8:	2001      	movs	r0, #1
   b77fa:	f000 f917 	bl	b7a2c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b77fe:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b7802:	2101      	movs	r1, #1
}
   b7804:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b7808:	b280      	uxth	r0, r0
   b780a:	f001 bd80 	b.w	b930e <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b780e:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b7810:	f001 fdd4 	bl	b93bc <_Z19__fetch_global_Wirev>
   b7814:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b7818:	f000 fc7b 	bl	b8112 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b781c:	f001 fdce 	bl	b93bc <_Z19__fetch_global_Wirev>
   b7820:	6803      	ldr	r3, [r0, #0]
   b7822:	2140      	movs	r1, #64	; 0x40
   b7824:	689b      	ldr	r3, [r3, #8]
   b7826:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b7828:	f105 0610 	add.w	r6, r5, #16
   b782c:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b782e:	f001 fdc5 	bl	b93bc <_Z19__fetch_global_Wirev>
   b7832:	6803      	ldr	r3, [r0, #0]
   b7834:	5d79      	ldrb	r1, [r7, r5]
   b7836:	689b      	ldr	r3, [r3, #8]
   b7838:	4798      	blx	r3
		i++;
   b783a:	1c6b      	adds	r3, r5, #1
   b783c:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b783e:	42ae      	cmp	r6, r5
   b7840:	d1f5      	bne.n	b782e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b7842:	f001 fdbb 	bl	b93bc <_Z19__fetch_global_Wirev>
   b7846:	f000 fc6b 	bl	b8120 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b784a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b784e:	d100      	bne.n	b7852 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b7850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7852:	4635      	mov	r5, r6
   b7854:	e7dc      	b.n	b7810 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b7856:	bf00      	nop
   b7858:	2003e160 	.word	0x2003e160

000b785c <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b785c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b785e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b7862:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b7864:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b7866:	4604      	mov	r4, r0
   b7868:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b786a:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b786c:	f000 80c9 	beq.w	b7a02 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b7870:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b7874:	2101      	movs	r1, #1
   b7876:	b280      	uxth	r0, r0
   b7878:	f001 fd38 	bl	b92ec <pinMode>
    pinMode(cs, OUTPUT);
   b787c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b7880:	2101      	movs	r1, #1
   b7882:	b280      	uxth	r0, r0
   b7884:	f001 fd32 	bl	b92ec <pinMode>
    if (!hwSPI){
   b7888:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b788c:	2b00      	cmp	r3, #0
   b788e:	f000 80a6 	beq.w	b79de <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b7892:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b7896:	2101      	movs	r1, #1
   b7898:	b280      	uxth	r0, r0
   b789a:	f001 fd38 	bl	b930e <digitalWrite>
        instance().setBitOrder(order);
   b789e:	f7ff fefd 	bl	b769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b78a2:	2101      	movs	r1, #1
   b78a4:	f000 fe52 	bl	b854c <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b78a8:	f7ff fef8 	bl	b769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b78ac:	2110      	movs	r1, #16
   b78ae:	f000 febd 	bl	b862c <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b78b2:	f7ff fef3 	bl	b769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b78b6:	2100      	movs	r1, #0
   b78b8:	f000 fe5c 	bl	b8574 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b78bc:	f7ff feee 	bl	b769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b78c0:	f000 fe30 	bl	b8524 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b78c4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b78c8:	2101      	movs	r1, #1
   b78ca:	b280      	uxth	r0, r0
   b78cc:	f001 fd0e 	bl	b92ec <pinMode>
  digitalWrite(rst, HIGH);
   b78d0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b78d4:	2101      	movs	r1, #1
   b78d6:	b280      	uxth	r0, r0
   b78d8:	f001 fd19 	bl	b930e <digitalWrite>
  delay(1);
   b78dc:	2001      	movs	r0, #1
   b78de:	f000 fb51 	bl	b7f84 <delay>
  digitalWrite(rst, LOW);
   b78e2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b78e6:	2100      	movs	r1, #0
   b78e8:	b280      	uxth	r0, r0
   b78ea:	f001 fd10 	bl	b930e <digitalWrite>
  delay(10);
   b78ee:	200a      	movs	r0, #10
   b78f0:	f000 fb48 	bl	b7f84 <delay>
  digitalWrite(rst, HIGH);
   b78f4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b78f8:	2101      	movs	r1, #1
   b78fa:	b280      	uxth	r0, r0
   b78fc:	f001 fd07 	bl	b930e <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b7900:	4620      	mov	r0, r4
   b7902:	21ae      	movs	r1, #174	; 0xae
   b7904:	f7ff fefc 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b7908:	4620      	mov	r0, r4
   b790a:	21d5      	movs	r1, #213	; 0xd5
   b790c:	f7ff fef8 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b7910:	4620      	mov	r0, r4
   b7912:	2180      	movs	r1, #128	; 0x80
   b7914:	f7ff fef4 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b7918:	4620      	mov	r0, r4
   b791a:	21a8      	movs	r1, #168	; 0xa8
   b791c:	f7ff fef0 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b7920:	4620      	mov	r0, r4
   b7922:	213f      	movs	r1, #63	; 0x3f
   b7924:	f7ff feec 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b7928:	4620      	mov	r0, r4
   b792a:	21d3      	movs	r1, #211	; 0xd3
   b792c:	f7ff fee8 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b7930:	4620      	mov	r0, r4
   b7932:	2100      	movs	r1, #0
   b7934:	f7ff fee4 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b7938:	4620      	mov	r0, r4
   b793a:	2140      	movs	r1, #64	; 0x40
   b793c:	f7ff fee0 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b7940:	218d      	movs	r1, #141	; 0x8d
   b7942:	4620      	mov	r0, r4
   b7944:	f7ff fedc 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b7948:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b794a:	bf0c      	ite	eq
   b794c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b794e:	2114      	movne	r1, #20
   b7950:	4620      	mov	r0, r4
   b7952:	f7ff fed5 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b7956:	4620      	mov	r0, r4
   b7958:	2120      	movs	r1, #32
   b795a:	f7ff fed1 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b795e:	4620      	mov	r0, r4
   b7960:	2100      	movs	r1, #0
   b7962:	f7ff fecd 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b7966:	4620      	mov	r0, r4
   b7968:	21a1      	movs	r1, #161	; 0xa1
   b796a:	f7ff fec9 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b796e:	4620      	mov	r0, r4
   b7970:	21c8      	movs	r1, #200	; 0xc8
   b7972:	f7ff fec5 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b7976:	4620      	mov	r0, r4
   b7978:	21da      	movs	r1, #218	; 0xda
   b797a:	f7ff fec1 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b797e:	4620      	mov	r0, r4
   b7980:	2112      	movs	r1, #18
   b7982:	f7ff febd 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b7986:	2181      	movs	r1, #129	; 0x81
   b7988:	4620      	mov	r0, r4
   b798a:	f7ff feb9 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b798e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b7990:	bf0c      	ite	eq
   b7992:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b7994:	21cf      	movne	r1, #207	; 0xcf
   b7996:	4620      	mov	r0, r4
   b7998:	f7ff feb2 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b799c:	21d9      	movs	r1, #217	; 0xd9
   b799e:	4620      	mov	r0, r4
   b79a0:	f7ff feae 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b79a4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b79a6:	bf0c      	ite	eq
   b79a8:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b79aa:	21f1      	movne	r1, #241	; 0xf1
   b79ac:	4620      	mov	r0, r4
   b79ae:	f7ff fea7 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b79b2:	4620      	mov	r0, r4
   b79b4:	21db      	movs	r1, #219	; 0xdb
   b79b6:	f7ff fea3 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b79ba:	4620      	mov	r0, r4
   b79bc:	2140      	movs	r1, #64	; 0x40
   b79be:	f7ff fe9f 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b79c2:	4620      	mov	r0, r4
   b79c4:	21a4      	movs	r1, #164	; 0xa4
   b79c6:	f7ff fe9b 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b79ca:	4620      	mov	r0, r4
   b79cc:	21a6      	movs	r1, #166	; 0xa6
   b79ce:	f7ff fe97 	bl	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b79d2:	4620      	mov	r0, r4
   b79d4:	21af      	movs	r1, #175	; 0xaf
}
   b79d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b79da:	f7ff be91 	b.w	b7700 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b79de:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b79e2:	2101      	movs	r1, #1
   b79e4:	b280      	uxth	r0, r0
   b79e6:	f001 fc81 	bl	b92ec <pinMode>
    	pinMode(sclk, OUTPUT);
   b79ea:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b79ee:	2101      	movs	r1, #1
   b79f0:	b280      	uxth	r0, r0
   b79f2:	f001 fc7b 	bl	b92ec <pinMode>
    if (hwSPI){
   b79f6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b79fa:	2b00      	cmp	r3, #0
   b79fc:	f43f af62 	beq.w	b78c4 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b7a00:	e747      	b.n	b7892 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b7a02:	f001 fcdb 	bl	b93bc <_Z19__fetch_global_Wirev>
   b7a06:	f000 fb51 	bl	b80ac <_ZN7TwoWire5beginEv>
   b7a0a:	e75b      	b.n	b78c4 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b7a0c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7a0c:	b508      	push	{r3, lr}
   b7a0e:	4b02      	ldr	r3, [pc, #8]	; (b7a18 <os_mutex_recursive_create+0xc>)
   b7a10:	681b      	ldr	r3, [r3, #0]
   b7a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7a14:	9301      	str	r3, [sp, #4]
   b7a16:	bd08      	pop	{r3, pc}
   b7a18:	00030248 	.word	0x00030248

000b7a1c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7a1c:	b508      	push	{r3, lr}
   b7a1e:	4b02      	ldr	r3, [pc, #8]	; (b7a28 <HAL_RNG_GetRandomNumber+0xc>)
   b7a20:	681b      	ldr	r3, [r3, #0]
   b7a22:	685b      	ldr	r3, [r3, #4]
   b7a24:	9301      	str	r3, [sp, #4]
   b7a26:	bd08      	pop	{r3, pc}
   b7a28:	00030218 	.word	0x00030218

000b7a2c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7a2c:	b508      	push	{r3, lr}
   b7a2e:	4b02      	ldr	r3, [pc, #8]	; (b7a38 <HAL_Delay_Microseconds+0xc>)
   b7a30:	681b      	ldr	r3, [r3, #0]
   b7a32:	68db      	ldr	r3, [r3, #12]
   b7a34:	9301      	str	r3, [sp, #4]
   b7a36:	bd08      	pop	{r3, pc}
   b7a38:	00030218 	.word	0x00030218

000b7a3c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b7a3c:	b508      	push	{r3, lr}
   b7a3e:	4b02      	ldr	r3, [pc, #8]	; (b7a48 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b7a40:	681b      	ldr	r3, [r3, #0]
   b7a42:	691b      	ldr	r3, [r3, #16]
   b7a44:	9301      	str	r3, [sp, #4]
   b7a46:	bd08      	pop	{r3, pc}
   b7a48:	00030218 	.word	0x00030218

000b7a4c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7a4c:	b508      	push	{r3, lr}
   b7a4e:	4b02      	ldr	r3, [pc, #8]	; (b7a58 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7a50:	681b      	ldr	r3, [r3, #0]
   b7a52:	695b      	ldr	r3, [r3, #20]
   b7a54:	9301      	str	r3, [sp, #4]
   b7a56:	bd08      	pop	{r3, pc}
   b7a58:	00030218 	.word	0x00030218

000b7a5c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b7a5c:	b508      	push	{r3, lr}
   b7a5e:	4b02      	ldr	r3, [pc, #8]	; (b7a68 <hal_timer_millis+0xc>)
   b7a60:	681b      	ldr	r3, [r3, #0]
   b7a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b7a64:	9301      	str	r3, [sp, #4]
   b7a66:	bd08      	pop	{r3, pc}
   b7a68:	00030218 	.word	0x00030218

000b7a6c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b7a6c:	b508      	push	{r3, lr}
   b7a6e:	4b02      	ldr	r3, [pc, #8]	; (b7a78 <HAL_Pin_Map+0xc>)
   b7a70:	681b      	ldr	r3, [r3, #0]
   b7a72:	681b      	ldr	r3, [r3, #0]
   b7a74:	9301      	str	r3, [sp, #4]
   b7a76:	bd08      	pop	{r3, pc}
   b7a78:	0003022c 	.word	0x0003022c

000b7a7c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7a7c:	b508      	push	{r3, lr}
   b7a7e:	4b02      	ldr	r3, [pc, #8]	; (b7a88 <HAL_Pin_Mode+0xc>)
   b7a80:	681b      	ldr	r3, [r3, #0]
   b7a82:	689b      	ldr	r3, [r3, #8]
   b7a84:	9301      	str	r3, [sp, #4]
   b7a86:	bd08      	pop	{r3, pc}
   b7a88:	0003022c 	.word	0x0003022c

000b7a8c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7a8c:	b508      	push	{r3, lr}
   b7a8e:	4b02      	ldr	r3, [pc, #8]	; (b7a98 <HAL_Get_Pin_Mode+0xc>)
   b7a90:	681b      	ldr	r3, [r3, #0]
   b7a92:	68db      	ldr	r3, [r3, #12]
   b7a94:	9301      	str	r3, [sp, #4]
   b7a96:	bd08      	pop	{r3, pc}
   b7a98:	0003022c 	.word	0x0003022c

000b7a9c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7a9c:	b508      	push	{r3, lr}
   b7a9e:	4b02      	ldr	r3, [pc, #8]	; (b7aa8 <HAL_GPIO_Write+0xc>)
   b7aa0:	681b      	ldr	r3, [r3, #0]
   b7aa2:	691b      	ldr	r3, [r3, #16]
   b7aa4:	9301      	str	r3, [sp, #4]
   b7aa6:	bd08      	pop	{r3, pc}
   b7aa8:	0003022c 	.word	0x0003022c

000b7aac <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7aac:	b508      	push	{r3, lr}
   b7aae:	4b02      	ldr	r3, [pc, #8]	; (b7ab8 <hal_i2c_begin+0xc>)
   b7ab0:	681b      	ldr	r3, [r3, #0]
   b7ab2:	68db      	ldr	r3, [r3, #12]
   b7ab4:	9301      	str	r3, [sp, #4]
   b7ab6:	bd08      	pop	{r3, pc}
   b7ab8:	00030228 	.word	0x00030228

000b7abc <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7abc:	b508      	push	{r3, lr}
   b7abe:	4b02      	ldr	r3, [pc, #8]	; (b7ac8 <hal_i2c_begin_transmission+0xc>)
   b7ac0:	681b      	ldr	r3, [r3, #0]
   b7ac2:	699b      	ldr	r3, [r3, #24]
   b7ac4:	9301      	str	r3, [sp, #4]
   b7ac6:	bd08      	pop	{r3, pc}
   b7ac8:	00030228 	.word	0x00030228

000b7acc <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7acc:	b508      	push	{r3, lr}
   b7ace:	4b02      	ldr	r3, [pc, #8]	; (b7ad8 <hal_i2c_end_transmission+0xc>)
   b7ad0:	681b      	ldr	r3, [r3, #0]
   b7ad2:	69db      	ldr	r3, [r3, #28]
   b7ad4:	9301      	str	r3, [sp, #4]
   b7ad6:	bd08      	pop	{r3, pc}
   b7ad8:	00030228 	.word	0x00030228

000b7adc <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7adc:	b508      	push	{r3, lr}
   b7ade:	4b02      	ldr	r3, [pc, #8]	; (b7ae8 <hal_i2c_write+0xc>)
   b7ae0:	681b      	ldr	r3, [r3, #0]
   b7ae2:	6a1b      	ldr	r3, [r3, #32]
   b7ae4:	9301      	str	r3, [sp, #4]
   b7ae6:	bd08      	pop	{r3, pc}
   b7ae8:	00030228 	.word	0x00030228

000b7aec <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7aec:	b508      	push	{r3, lr}
   b7aee:	4b02      	ldr	r3, [pc, #8]	; (b7af8 <hal_i2c_available+0xc>)
   b7af0:	681b      	ldr	r3, [r3, #0]
   b7af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7af4:	9301      	str	r3, [sp, #4]
   b7af6:	bd08      	pop	{r3, pc}
   b7af8:	00030228 	.word	0x00030228

000b7afc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7afc:	b508      	push	{r3, lr}
   b7afe:	4b02      	ldr	r3, [pc, #8]	; (b7b08 <hal_i2c_read+0xc>)
   b7b00:	681b      	ldr	r3, [r3, #0]
   b7b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7b04:	9301      	str	r3, [sp, #4]
   b7b06:	bd08      	pop	{r3, pc}
   b7b08:	00030228 	.word	0x00030228

000b7b0c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7b0c:	b508      	push	{r3, lr}
   b7b0e:	4b02      	ldr	r3, [pc, #8]	; (b7b18 <hal_i2c_peek+0xc>)
   b7b10:	681b      	ldr	r3, [r3, #0]
   b7b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7b14:	9301      	str	r3, [sp, #4]
   b7b16:	bd08      	pop	{r3, pc}
   b7b18:	00030228 	.word	0x00030228

000b7b1c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7b1c:	b508      	push	{r3, lr}
   b7b1e:	4b02      	ldr	r3, [pc, #8]	; (b7b28 <hal_i2c_flush+0xc>)
   b7b20:	681b      	ldr	r3, [r3, #0]
   b7b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7b24:	9301      	str	r3, [sp, #4]
   b7b26:	bd08      	pop	{r3, pc}
   b7b28:	00030228 	.word	0x00030228

000b7b2c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7b2c:	b508      	push	{r3, lr}
   b7b2e:	4b02      	ldr	r3, [pc, #8]	; (b7b38 <hal_i2c_is_enabled+0xc>)
   b7b30:	681b      	ldr	r3, [r3, #0]
   b7b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7b34:	9301      	str	r3, [sp, #4]
   b7b36:	bd08      	pop	{r3, pc}
   b7b38:	00030228 	.word	0x00030228

000b7b3c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7b3c:	b508      	push	{r3, lr}
   b7b3e:	4b02      	ldr	r3, [pc, #8]	; (b7b48 <hal_i2c_init+0xc>)
   b7b40:	681b      	ldr	r3, [r3, #0]
   b7b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7b44:	9301      	str	r3, [sp, #4]
   b7b46:	bd08      	pop	{r3, pc}
   b7b48:	00030228 	.word	0x00030228

000b7b4c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7b4c:	b508      	push	{r3, lr}
   b7b4e:	4b02      	ldr	r3, [pc, #8]	; (b7b58 <hal_i2c_request_ex+0xc>)
   b7b50:	681b      	ldr	r3, [r3, #0]
   b7b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7b54:	9301      	str	r3, [sp, #4]
   b7b56:	bd08      	pop	{r3, pc}
   b7b58:	00030228 	.word	0x00030228

000b7b5c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7b5c:	b508      	push	{r3, lr}
   b7b5e:	4b02      	ldr	r3, [pc, #8]	; (b7b68 <if_index_to_name+0xc>)
   b7b60:	681b      	ldr	r3, [r3, #0]
   b7b62:	695b      	ldr	r3, [r3, #20]
   b7b64:	9301      	str	r3, [sp, #4]
   b7b66:	bd08      	pop	{r3, pc}
   b7b68:	0003026c 	.word	0x0003026c

000b7b6c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7b6c:	b508      	push	{r3, lr}
   b7b6e:	4b02      	ldr	r3, [pc, #8]	; (b7b78 <inet_inet_ntop+0xc>)
   b7b70:	681b      	ldr	r3, [r3, #0]
   b7b72:	695b      	ldr	r3, [r3, #20]
   b7b74:	9301      	str	r3, [sp, #4]
   b7b76:	bd08      	pop	{r3, pc}
   b7b78:	00030264 	.word	0x00030264

000b7b7c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7b7c:	b508      	push	{r3, lr}
   b7b7e:	4b02      	ldr	r3, [pc, #8]	; (b7b88 <inet_htonl+0xc>)
   b7b80:	681b      	ldr	r3, [r3, #0]
   b7b82:	6a1b      	ldr	r3, [r3, #32]
   b7b84:	9301      	str	r3, [sp, #4]
   b7b86:	bd08      	pop	{r3, pc}
   b7b88:	00030264 	.word	0x00030264

000b7b8c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7b8c:	b508      	push	{r3, lr}
   b7b8e:	4b02      	ldr	r3, [pc, #8]	; (b7b98 <inet_htons+0xc>)
   b7b90:	681b      	ldr	r3, [r3, #0]
   b7b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7b94:	9301      	str	r3, [sp, #4]
   b7b96:	bd08      	pop	{r3, pc}
   b7b98:	00030264 	.word	0x00030264

000b7b9c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7b9c:	b508      	push	{r3, lr}
   b7b9e:	4b02      	ldr	r3, [pc, #8]	; (b7ba8 <netdb_freeaddrinfo+0xc>)
   b7ba0:	681b      	ldr	r3, [r3, #0]
   b7ba2:	689b      	ldr	r3, [r3, #8]
   b7ba4:	9301      	str	r3, [sp, #4]
   b7ba6:	bd08      	pop	{r3, pc}
   b7ba8:	00030268 	.word	0x00030268

000b7bac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7bac:	b508      	push	{r3, lr}
   b7bae:	4b02      	ldr	r3, [pc, #8]	; (b7bb8 <netdb_getaddrinfo+0xc>)
   b7bb0:	681b      	ldr	r3, [r3, #0]
   b7bb2:	68db      	ldr	r3, [r3, #12]
   b7bb4:	9301      	str	r3, [sp, #4]
   b7bb6:	bd08      	pop	{r3, pc}
   b7bb8:	00030268 	.word	0x00030268

000b7bbc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7bbc:	b508      	push	{r3, lr}
   b7bbe:	4b02      	ldr	r3, [pc, #8]	; (b7bc8 <sock_setsockopt+0xc>)
   b7bc0:	681b      	ldr	r3, [r3, #0]
   b7bc2:	699b      	ldr	r3, [r3, #24]
   b7bc4:	9301      	str	r3, [sp, #4]
   b7bc6:	bd08      	pop	{r3, pc}
   b7bc8:	00030238 	.word	0x00030238

000b7bcc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7bcc:	b508      	push	{r3, lr}
   b7bce:	4b02      	ldr	r3, [pc, #8]	; (b7bd8 <sock_close+0xc>)
   b7bd0:	681b      	ldr	r3, [r3, #0]
   b7bd2:	69db      	ldr	r3, [r3, #28]
   b7bd4:	9301      	str	r3, [sp, #4]
   b7bd6:	bd08      	pop	{r3, pc}
   b7bd8:	00030238 	.word	0x00030238

000b7bdc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7bdc:	b508      	push	{r3, lr}
   b7bde:	4b02      	ldr	r3, [pc, #8]	; (b7be8 <sock_connect+0xc>)
   b7be0:	681b      	ldr	r3, [r3, #0]
   b7be2:	6a1b      	ldr	r3, [r3, #32]
   b7be4:	9301      	str	r3, [sp, #4]
   b7be6:	bd08      	pop	{r3, pc}
   b7be8:	00030238 	.word	0x00030238

000b7bec <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7bec:	b508      	push	{r3, lr}
   b7bee:	4b02      	ldr	r3, [pc, #8]	; (b7bf8 <sock_recv+0xc>)
   b7bf0:	681b      	ldr	r3, [r3, #0]
   b7bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7bf4:	9301      	str	r3, [sp, #4]
   b7bf6:	bd08      	pop	{r3, pc}
   b7bf8:	00030238 	.word	0x00030238

000b7bfc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7bfc:	b508      	push	{r3, lr}
   b7bfe:	4b02      	ldr	r3, [pc, #8]	; (b7c08 <sock_send+0xc>)
   b7c00:	681b      	ldr	r3, [r3, #0]
   b7c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c04:	9301      	str	r3, [sp, #4]
   b7c06:	bd08      	pop	{r3, pc}
   b7c08:	00030238 	.word	0x00030238

000b7c0c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7c0c:	b508      	push	{r3, lr}
   b7c0e:	4b02      	ldr	r3, [pc, #8]	; (b7c18 <sock_socket+0xc>)
   b7c10:	681b      	ldr	r3, [r3, #0]
   b7c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7c14:	9301      	str	r3, [sp, #4]
   b7c16:	bd08      	pop	{r3, pc}
   b7c18:	00030238 	.word	0x00030238

000b7c1c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7c1c:	b508      	push	{r3, lr}
   b7c1e:	4b02      	ldr	r3, [pc, #8]	; (b7c28 <hal_spi_begin+0xc>)
   b7c20:	681b      	ldr	r3, [r3, #0]
   b7c22:	681b      	ldr	r3, [r3, #0]
   b7c24:	9301      	str	r3, [sp, #4]
   b7c26:	bd08      	pop	{r3, pc}
   b7c28:	00030230 	.word	0x00030230

000b7c2c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b7c2c:	b508      	push	{r3, lr}
   b7c2e:	4b02      	ldr	r3, [pc, #8]	; (b7c38 <hal_spi_set_bit_order+0xc>)
   b7c30:	681b      	ldr	r3, [r3, #0]
   b7c32:	689b      	ldr	r3, [r3, #8]
   b7c34:	9301      	str	r3, [sp, #4]
   b7c36:	bd08      	pop	{r3, pc}
   b7c38:	00030230 	.word	0x00030230

000b7c3c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b7c3c:	b508      	push	{r3, lr}
   b7c3e:	4b02      	ldr	r3, [pc, #8]	; (b7c48 <hal_spi_set_data_mode+0xc>)
   b7c40:	681b      	ldr	r3, [r3, #0]
   b7c42:	68db      	ldr	r3, [r3, #12]
   b7c44:	9301      	str	r3, [sp, #4]
   b7c46:	bd08      	pop	{r3, pc}
   b7c48:	00030230 	.word	0x00030230

000b7c4c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b7c4c:	b508      	push	{r3, lr}
   b7c4e:	4b02      	ldr	r3, [pc, #8]	; (b7c58 <hal_spi_set_clock_divider+0xc>)
   b7c50:	681b      	ldr	r3, [r3, #0]
   b7c52:	691b      	ldr	r3, [r3, #16]
   b7c54:	9301      	str	r3, [sp, #4]
   b7c56:	bd08      	pop	{r3, pc}
   b7c58:	00030230 	.word	0x00030230

000b7c5c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7c5c:	b508      	push	{r3, lr}
   b7c5e:	4b02      	ldr	r3, [pc, #8]	; (b7c68 <hal_spi_transfer+0xc>)
   b7c60:	681b      	ldr	r3, [r3, #0]
   b7c62:	695b      	ldr	r3, [r3, #20]
   b7c64:	9301      	str	r3, [sp, #4]
   b7c66:	bd08      	pop	{r3, pc}
   b7c68:	00030230 	.word	0x00030230

000b7c6c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7c6c:	b508      	push	{r3, lr}
   b7c6e:	4b02      	ldr	r3, [pc, #8]	; (b7c78 <hal_spi_init+0xc>)
   b7c70:	681b      	ldr	r3, [r3, #0]
   b7c72:	69db      	ldr	r3, [r3, #28]
   b7c74:	9301      	str	r3, [sp, #4]
   b7c76:	bd08      	pop	{r3, pc}
   b7c78:	00030230 	.word	0x00030230

000b7c7c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7c7c:	b508      	push	{r3, lr}
   b7c7e:	4b02      	ldr	r3, [pc, #8]	; (b7c88 <hal_spi_is_enabled+0xc>)
   b7c80:	681b      	ldr	r3, [r3, #0]
   b7c82:	6a1b      	ldr	r3, [r3, #32]
   b7c84:	9301      	str	r3, [sp, #4]
   b7c86:	bd08      	pop	{r3, pc}
   b7c88:	00030230 	.word	0x00030230

000b7c8c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7c8c:	b508      	push	{r3, lr}
   b7c8e:	4b02      	ldr	r3, [pc, #8]	; (b7c98 <hal_spi_info+0xc>)
   b7c90:	681b      	ldr	r3, [r3, #0]
   b7c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7c94:	9301      	str	r3, [sp, #4]
   b7c96:	bd08      	pop	{r3, pc}
   b7c98:	00030230 	.word	0x00030230

000b7c9c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7c9c:	b508      	push	{r3, lr}
   b7c9e:	4b02      	ldr	r3, [pc, #8]	; (b7ca8 <hal_spi_acquire+0xc>)
   b7ca0:	681b      	ldr	r3, [r3, #0]
   b7ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7ca4:	9301      	str	r3, [sp, #4]
   b7ca6:	bd08      	pop	{r3, pc}
   b7ca8:	00030230 	.word	0x00030230

000b7cac <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7cac:	b508      	push	{r3, lr}
   b7cae:	4b02      	ldr	r3, [pc, #8]	; (b7cb8 <hal_spi_release+0xc>)
   b7cb0:	681b      	ldr	r3, [r3, #0]
   b7cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7cb4:	9301      	str	r3, [sp, #4]
   b7cb6:	bd08      	pop	{r3, pc}
   b7cb8:	00030230 	.word	0x00030230

000b7cbc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7cbc:	b508      	push	{r3, lr}
   b7cbe:	4b02      	ldr	r3, [pc, #8]	; (b7cc8 <hal_usart_write+0xc>)
   b7cc0:	681b      	ldr	r3, [r3, #0]
   b7cc2:	68db      	ldr	r3, [r3, #12]
   b7cc4:	9301      	str	r3, [sp, #4]
   b7cc6:	bd08      	pop	{r3, pc}
   b7cc8:	0003023c 	.word	0x0003023c

000b7ccc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7ccc:	b508      	push	{r3, lr}
   b7cce:	4b02      	ldr	r3, [pc, #8]	; (b7cd8 <hal_usart_available+0xc>)
   b7cd0:	681b      	ldr	r3, [r3, #0]
   b7cd2:	691b      	ldr	r3, [r3, #16]
   b7cd4:	9301      	str	r3, [sp, #4]
   b7cd6:	bd08      	pop	{r3, pc}
   b7cd8:	0003023c 	.word	0x0003023c

000b7cdc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7cdc:	b508      	push	{r3, lr}
   b7cde:	4b02      	ldr	r3, [pc, #8]	; (b7ce8 <hal_usart_read+0xc>)
   b7ce0:	681b      	ldr	r3, [r3, #0]
   b7ce2:	695b      	ldr	r3, [r3, #20]
   b7ce4:	9301      	str	r3, [sp, #4]
   b7ce6:	bd08      	pop	{r3, pc}
   b7ce8:	0003023c 	.word	0x0003023c

000b7cec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7cec:	b508      	push	{r3, lr}
   b7cee:	4b02      	ldr	r3, [pc, #8]	; (b7cf8 <hal_usart_peek+0xc>)
   b7cf0:	681b      	ldr	r3, [r3, #0]
   b7cf2:	699b      	ldr	r3, [r3, #24]
   b7cf4:	9301      	str	r3, [sp, #4]
   b7cf6:	bd08      	pop	{r3, pc}
   b7cf8:	0003023c 	.word	0x0003023c

000b7cfc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7cfc:	b508      	push	{r3, lr}
   b7cfe:	4b02      	ldr	r3, [pc, #8]	; (b7d08 <hal_usart_flush+0xc>)
   b7d00:	681b      	ldr	r3, [r3, #0]
   b7d02:	69db      	ldr	r3, [r3, #28]
   b7d04:	9301      	str	r3, [sp, #4]
   b7d06:	bd08      	pop	{r3, pc}
   b7d08:	0003023c 	.word	0x0003023c

000b7d0c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7d0c:	b508      	push	{r3, lr}
   b7d0e:	4b02      	ldr	r3, [pc, #8]	; (b7d18 <hal_usart_is_enabled+0xc>)
   b7d10:	681b      	ldr	r3, [r3, #0]
   b7d12:	6a1b      	ldr	r3, [r3, #32]
   b7d14:	9301      	str	r3, [sp, #4]
   b7d16:	bd08      	pop	{r3, pc}
   b7d18:	0003023c 	.word	0x0003023c

000b7d1c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7d1c:	b508      	push	{r3, lr}
   b7d1e:	4b02      	ldr	r3, [pc, #8]	; (b7d28 <hal_usart_available_data_for_write+0xc>)
   b7d20:	681b      	ldr	r3, [r3, #0]
   b7d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7d24:	9301      	str	r3, [sp, #4]
   b7d26:	bd08      	pop	{r3, pc}
   b7d28:	0003023c 	.word	0x0003023c

000b7d2c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7d2c:	b508      	push	{r3, lr}
   b7d2e:	4b02      	ldr	r3, [pc, #8]	; (b7d38 <hal_usart_init_ex+0xc>)
   b7d30:	681b      	ldr	r3, [r3, #0]
   b7d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7d34:	9301      	str	r3, [sp, #4]
   b7d36:	bd08      	pop	{r3, pc}
   b7d38:	0003023c 	.word	0x0003023c

000b7d3c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7d3c:	b508      	push	{r3, lr}
   b7d3e:	4b02      	ldr	r3, [pc, #8]	; (b7d48 <HAL_USB_USART_Init+0xc>)
   b7d40:	681b      	ldr	r3, [r3, #0]
   b7d42:	681b      	ldr	r3, [r3, #0]
   b7d44:	9301      	str	r3, [sp, #4]
   b7d46:	bd08      	pop	{r3, pc}
   b7d48:	0003024c 	.word	0x0003024c

000b7d4c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7d4c:	b508      	push	{r3, lr}
   b7d4e:	4b02      	ldr	r3, [pc, #8]	; (b7d58 <HAL_USB_USART_Begin+0xc>)
   b7d50:	681b      	ldr	r3, [r3, #0]
   b7d52:	685b      	ldr	r3, [r3, #4]
   b7d54:	9301      	str	r3, [sp, #4]
   b7d56:	bd08      	pop	{r3, pc}
   b7d58:	0003024c 	.word	0x0003024c

000b7d5c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7d5c:	b508      	push	{r3, lr}
   b7d5e:	4b02      	ldr	r3, [pc, #8]	; (b7d68 <HAL_USB_USART_Available_Data+0xc>)
   b7d60:	681b      	ldr	r3, [r3, #0]
   b7d62:	691b      	ldr	r3, [r3, #16]
   b7d64:	9301      	str	r3, [sp, #4]
   b7d66:	bd08      	pop	{r3, pc}
   b7d68:	0003024c 	.word	0x0003024c

000b7d6c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7d6c:	b508      	push	{r3, lr}
   b7d6e:	4b02      	ldr	r3, [pc, #8]	; (b7d78 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7d70:	681b      	ldr	r3, [r3, #0]
   b7d72:	695b      	ldr	r3, [r3, #20]
   b7d74:	9301      	str	r3, [sp, #4]
   b7d76:	bd08      	pop	{r3, pc}
   b7d78:	0003024c 	.word	0x0003024c

000b7d7c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7d7c:	b508      	push	{r3, lr}
   b7d7e:	4b02      	ldr	r3, [pc, #8]	; (b7d88 <HAL_USB_USART_Receive_Data+0xc>)
   b7d80:	681b      	ldr	r3, [r3, #0]
   b7d82:	699b      	ldr	r3, [r3, #24]
   b7d84:	9301      	str	r3, [sp, #4]
   b7d86:	bd08      	pop	{r3, pc}
   b7d88:	0003024c 	.word	0x0003024c

000b7d8c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7d8c:	b508      	push	{r3, lr}
   b7d8e:	4b02      	ldr	r3, [pc, #8]	; (b7d98 <HAL_USB_USART_Send_Data+0xc>)
   b7d90:	681b      	ldr	r3, [r3, #0]
   b7d92:	69db      	ldr	r3, [r3, #28]
   b7d94:	9301      	str	r3, [sp, #4]
   b7d96:	bd08      	pop	{r3, pc}
   b7d98:	0003024c 	.word	0x0003024c

000b7d9c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7d9c:	b508      	push	{r3, lr}
   b7d9e:	4b02      	ldr	r3, [pc, #8]	; (b7da8 <HAL_USB_USART_Flush_Data+0xc>)
   b7da0:	681b      	ldr	r3, [r3, #0]
   b7da2:	6a1b      	ldr	r3, [r3, #32]
   b7da4:	9301      	str	r3, [sp, #4]
   b7da6:	bd08      	pop	{r3, pc}
   b7da8:	0003024c 	.word	0x0003024c

000b7dac <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b7dac:	b508      	push	{r3, lr}
   b7dae:	4b02      	ldr	r3, [pc, #8]	; (b7db8 <HAL_USB_USART_Is_Connected+0xc>)
   b7db0:	681b      	ldr	r3, [r3, #0]
   b7db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7db4:	9301      	str	r3, [sp, #4]
   b7db6:	bd08      	pop	{r3, pc}
   b7db8:	0003024c 	.word	0x0003024c

000b7dbc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7dbc:	b508      	push	{r3, lr}
   b7dbe:	4b02      	ldr	r3, [pc, #8]	; (b7dc8 <panic_+0xc>)
   b7dc0:	681b      	ldr	r3, [r3, #0]
   b7dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7dc4:	9301      	str	r3, [sp, #4]
   b7dc6:	bd08      	pop	{r3, pc}
   b7dc8:	00030260 	.word	0x00030260

000b7dcc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7dcc:	b508      	push	{r3, lr}
   b7dce:	4b02      	ldr	r3, [pc, #8]	; (b7dd8 <log_message+0xc>)
   b7dd0:	681b      	ldr	r3, [r3, #0]
   b7dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7dd4:	9301      	str	r3, [sp, #4]
   b7dd6:	bd08      	pop	{r3, pc}
   b7dd8:	00030260 	.word	0x00030260

000b7ddc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7ddc:	b508      	push	{r3, lr}
   b7dde:	4b02      	ldr	r3, [pc, #8]	; (b7de8 <set_system_mode+0xc>)
   b7de0:	681b      	ldr	r3, [r3, #0]
   b7de2:	685b      	ldr	r3, [r3, #4]
   b7de4:	9301      	str	r3, [sp, #4]
   b7de6:	bd08      	pop	{r3, pc}
   b7de8:	00030220 	.word	0x00030220

000b7dec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7dec:	b508      	push	{r3, lr}
   b7dee:	4b02      	ldr	r3, [pc, #8]	; (b7df8 <system_delay_ms+0xc>)
   b7df0:	681b      	ldr	r3, [r3, #0]
   b7df2:	695b      	ldr	r3, [r3, #20]
   b7df4:	9301      	str	r3, [sp, #4]
   b7df6:	bd08      	pop	{r3, pc}
   b7df8:	00030220 	.word	0x00030220

000b7dfc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7dfc:	b508      	push	{r3, lr}
   b7dfe:	4b03      	ldr	r3, [pc, #12]	; (b7e0c <system_ctrl_set_app_request_handler+0x10>)
   b7e00:	681b      	ldr	r3, [r3, #0]
   b7e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7e06:	9301      	str	r3, [sp, #4]
   b7e08:	bd08      	pop	{r3, pc}
   b7e0a:	0000      	.short	0x0000
   b7e0c:	00030220 	.word	0x00030220

000b7e10 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7e10:	b508      	push	{r3, lr}
   b7e12:	4b03      	ldr	r3, [pc, #12]	; (b7e20 <system_ctrl_set_result+0x10>)
   b7e14:	681b      	ldr	r3, [r3, #0]
   b7e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7e1a:	9301      	str	r3, [sp, #4]
   b7e1c:	bd08      	pop	{r3, pc}
   b7e1e:	0000      	.short	0x0000
   b7e20:	00030220 	.word	0x00030220

000b7e24 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7e24:	b508      	push	{r3, lr}
   b7e26:	4b02      	ldr	r3, [pc, #8]	; (b7e30 <spark_process+0xc>)
   b7e28:	681b      	ldr	r3, [r3, #0]
   b7e2a:	689b      	ldr	r3, [r3, #8]
   b7e2c:	9301      	str	r3, [sp, #4]
   b7e2e:	bd08      	pop	{r3, pc}
   b7e30:	00030244 	.word	0x00030244

000b7e34 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7e34:	b508      	push	{r3, lr}
   b7e36:	4b02      	ldr	r3, [pc, #8]	; (b7e40 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7e38:	681b      	ldr	r3, [r3, #0]
   b7e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7e3c:	9301      	str	r3, [sp, #4]
   b7e3e:	bd08      	pop	{r3, pc}
   b7e40:	00030244 	.word	0x00030244

000b7e44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7e44:	b508      	push	{r3, lr}
   b7e46:	4b02      	ldr	r3, [pc, #8]	; (b7e50 <network_connect+0xc>)
   b7e48:	681b      	ldr	r3, [r3, #0]
   b7e4a:	685b      	ldr	r3, [r3, #4]
   b7e4c:	9301      	str	r3, [sp, #4]
   b7e4e:	bd08      	pop	{r3, pc}
   b7e50:	00030240 	.word	0x00030240

000b7e54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7e54:	b508      	push	{r3, lr}
   b7e56:	4b02      	ldr	r3, [pc, #8]	; (b7e60 <network_connecting+0xc>)
   b7e58:	681b      	ldr	r3, [r3, #0]
   b7e5a:	689b      	ldr	r3, [r3, #8]
   b7e5c:	9301      	str	r3, [sp, #4]
   b7e5e:	bd08      	pop	{r3, pc}
   b7e60:	00030240 	.word	0x00030240

000b7e64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7e64:	b508      	push	{r3, lr}
   b7e66:	4b02      	ldr	r3, [pc, #8]	; (b7e70 <network_disconnect+0xc>)
   b7e68:	681b      	ldr	r3, [r3, #0]
   b7e6a:	68db      	ldr	r3, [r3, #12]
   b7e6c:	9301      	str	r3, [sp, #4]
   b7e6e:	bd08      	pop	{r3, pc}
   b7e70:	00030240 	.word	0x00030240

000b7e74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7e74:	b508      	push	{r3, lr}
   b7e76:	4b02      	ldr	r3, [pc, #8]	; (b7e80 <network_ready+0xc>)
   b7e78:	681b      	ldr	r3, [r3, #0]
   b7e7a:	691b      	ldr	r3, [r3, #16]
   b7e7c:	9301      	str	r3, [sp, #4]
   b7e7e:	bd08      	pop	{r3, pc}
   b7e80:	00030240 	.word	0x00030240

000b7e84 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7e84:	b508      	push	{r3, lr}
   b7e86:	4b02      	ldr	r3, [pc, #8]	; (b7e90 <network_on+0xc>)
   b7e88:	681b      	ldr	r3, [r3, #0]
   b7e8a:	695b      	ldr	r3, [r3, #20]
   b7e8c:	9301      	str	r3, [sp, #4]
   b7e8e:	bd08      	pop	{r3, pc}
   b7e90:	00030240 	.word	0x00030240

000b7e94 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7e94:	b508      	push	{r3, lr}
   b7e96:	4b02      	ldr	r3, [pc, #8]	; (b7ea0 <network_off+0xc>)
   b7e98:	681b      	ldr	r3, [r3, #0]
   b7e9a:	699b      	ldr	r3, [r3, #24]
   b7e9c:	9301      	str	r3, [sp, #4]
   b7e9e:	bd08      	pop	{r3, pc}
   b7ea0:	00030240 	.word	0x00030240

000b7ea4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7ea4:	b508      	push	{r3, lr}
   b7ea6:	4b02      	ldr	r3, [pc, #8]	; (b7eb0 <network_listen+0xc>)
   b7ea8:	681b      	ldr	r3, [r3, #0]
   b7eaa:	69db      	ldr	r3, [r3, #28]
   b7eac:	9301      	str	r3, [sp, #4]
   b7eae:	bd08      	pop	{r3, pc}
   b7eb0:	00030240 	.word	0x00030240

000b7eb4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7eb4:	b508      	push	{r3, lr}
   b7eb6:	4b02      	ldr	r3, [pc, #8]	; (b7ec0 <network_listening+0xc>)
   b7eb8:	681b      	ldr	r3, [r3, #0]
   b7eba:	6a1b      	ldr	r3, [r3, #32]
   b7ebc:	9301      	str	r3, [sp, #4]
   b7ebe:	bd08      	pop	{r3, pc}
   b7ec0:	00030240 	.word	0x00030240

000b7ec4 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b7ec4:	b508      	push	{r3, lr}
   b7ec6:	4b02      	ldr	r3, [pc, #8]	; (b7ed0 <network_set_credentials+0xc>)
   b7ec8:	681b      	ldr	r3, [r3, #0]
   b7eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7ecc:	9301      	str	r3, [sp, #4]
   b7ece:	bd08      	pop	{r3, pc}
   b7ed0:	00030240 	.word	0x00030240

000b7ed4 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7ed4:	b508      	push	{r3, lr}
   b7ed6:	4b02      	ldr	r3, [pc, #8]	; (b7ee0 <network_set_listen_timeout+0xc>)
   b7ed8:	681b      	ldr	r3, [r3, #0]
   b7eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7edc:	9301      	str	r3, [sp, #4]
   b7ede:	bd08      	pop	{r3, pc}
   b7ee0:	00030240 	.word	0x00030240

000b7ee4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7ee4:	b508      	push	{r3, lr}
   b7ee6:	4b02      	ldr	r3, [pc, #8]	; (b7ef0 <network_get_listen_timeout+0xc>)
   b7ee8:	681b      	ldr	r3, [r3, #0]
   b7eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7eec:	9301      	str	r3, [sp, #4]
   b7eee:	bd08      	pop	{r3, pc}
   b7ef0:	00030240 	.word	0x00030240

000b7ef4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7ef4:	b508      	push	{r3, lr}
   b7ef6:	4b02      	ldr	r3, [pc, #8]	; (b7f00 <network_is_on+0xc>)
   b7ef8:	681b      	ldr	r3, [r3, #0]
   b7efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7efc:	9301      	str	r3, [sp, #4]
   b7efe:	bd08      	pop	{r3, pc}
   b7f00:	00030240 	.word	0x00030240

000b7f04 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7f04:	b508      	push	{r3, lr}
   b7f06:	4b02      	ldr	r3, [pc, #8]	; (b7f10 <network_is_off+0xc>)
   b7f08:	681b      	ldr	r3, [r3, #0]
   b7f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7f0c:	9301      	str	r3, [sp, #4]
   b7f0e:	bd08      	pop	{r3, pc}
   b7f10:	00030240 	.word	0x00030240

000b7f14 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7f14:	b508      	push	{r3, lr}
   b7f16:	4b02      	ldr	r3, [pc, #8]	; (b7f20 <malloc+0xc>)
   b7f18:	681b      	ldr	r3, [r3, #0]
   b7f1a:	681b      	ldr	r3, [r3, #0]
   b7f1c:	9301      	str	r3, [sp, #4]
   b7f1e:	bd08      	pop	{r3, pc}
   b7f20:	0003021c 	.word	0x0003021c

000b7f24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7f24:	b508      	push	{r3, lr}
   b7f26:	4b02      	ldr	r3, [pc, #8]	; (b7f30 <free+0xc>)
   b7f28:	681b      	ldr	r3, [r3, #0]
   b7f2a:	685b      	ldr	r3, [r3, #4]
   b7f2c:	9301      	str	r3, [sp, #4]
   b7f2e:	bd08      	pop	{r3, pc}
   b7f30:	0003021c 	.word	0x0003021c

000b7f34 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7f34:	b508      	push	{r3, lr}
   b7f36:	4b02      	ldr	r3, [pc, #8]	; (b7f40 <realloc+0xc>)
   b7f38:	681b      	ldr	r3, [r3, #0]
   b7f3a:	689b      	ldr	r3, [r3, #8]
   b7f3c:	9301      	str	r3, [sp, #4]
   b7f3e:	bd08      	pop	{r3, pc}
   b7f40:	0003021c 	.word	0x0003021c

000b7f44 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7f44:	b508      	push	{r3, lr}
   b7f46:	4b02      	ldr	r3, [pc, #8]	; (b7f50 <vsnprintf+0xc>)
   b7f48:	681b      	ldr	r3, [r3, #0]
   b7f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7f4c:	9301      	str	r3, [sp, #4]
   b7f4e:	bd08      	pop	{r3, pc}
   b7f50:	0003021c 	.word	0x0003021c

000b7f54 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7f54:	b508      	push	{r3, lr}
   b7f56:	4b02      	ldr	r3, [pc, #8]	; (b7f60 <__errno+0xc>)
   b7f58:	681b      	ldr	r3, [r3, #0]
   b7f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7f5c:	9301      	str	r3, [sp, #4]
   b7f5e:	bd08      	pop	{r3, pc}
   b7f60:	0003021c 	.word	0x0003021c

000b7f64 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7f64:	b508      	push	{r3, lr}
   b7f66:	4b02      	ldr	r3, [pc, #8]	; (b7f70 <__assert_func+0xc>)
   b7f68:	681b      	ldr	r3, [r3, #0]
   b7f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7f6c:	9301      	str	r3, [sp, #4]
   b7f6e:	bd08      	pop	{r3, pc}
   b7f70:	0003021c 	.word	0x0003021c

000b7f74 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7f74:	b508      	push	{r3, lr}
   b7f76:	4b02      	ldr	r3, [pc, #8]	; (b7f80 <newlib_impure_ptr_callback+0xc>)
   b7f78:	681b      	ldr	r3, [r3, #0]
   b7f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7f7c:	9301      	str	r3, [sp, #4]
   b7f7e:	bd08      	pop	{r3, pc}
   b7f80:	0003021c 	.word	0x0003021c

000b7f84 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7f84:	2100      	movs	r1, #0
   b7f86:	f7ff bf31 	b.w	b7dec <system_delay_ms>
	...

000b7f8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7f8c:	4802      	ldr	r0, [pc, #8]	; (b7f98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7f8e:	2300      	movs	r3, #0
   b7f90:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7f92:	f7ff bd3b 	b.w	b7a0c <os_mutex_recursive_create>
   b7f96:	bf00      	nop
   b7f98:	2003e6c4 	.word	0x2003e6c4

000b7f9c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7f9c:	2200      	movs	r2, #0
   b7f9e:	6840      	ldr	r0, [r0, #4]
   b7fa0:	4611      	mov	r1, r2
   b7fa2:	f7ff bf87 	b.w	b7eb4 <network_listening>

000b7fa6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7fa6:	2200      	movs	r2, #0
   b7fa8:	6840      	ldr	r0, [r0, #4]
   b7faa:	4611      	mov	r1, r2
   b7fac:	f7ff bf9a 	b.w	b7ee4 <network_get_listen_timeout>

000b7fb0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7fb0:	6840      	ldr	r0, [r0, #4]
   b7fb2:	2200      	movs	r2, #0
   b7fb4:	f7ff bf8e 	b.w	b7ed4 <network_set_listen_timeout>

000b7fb8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7fb8:	6840      	ldr	r0, [r0, #4]
   b7fba:	2200      	movs	r2, #0
   b7fbc:	f081 0101 	eor.w	r1, r1, #1
   b7fc0:	f7ff bf70 	b.w	b7ea4 <network_listen>

000b7fc4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7fc4:	2300      	movs	r3, #0
   b7fc6:	6840      	ldr	r0, [r0, #4]
   b7fc8:	461a      	mov	r2, r3
   b7fca:	4619      	mov	r1, r3
   b7fcc:	f7ff bf62 	b.w	b7e94 <network_off>

000b7fd0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7fd0:	2300      	movs	r3, #0
   b7fd2:	6840      	ldr	r0, [r0, #4]
   b7fd4:	461a      	mov	r2, r3
   b7fd6:	4619      	mov	r1, r3
   b7fd8:	f7ff bf54 	b.w	b7e84 <network_on>

000b7fdc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7fdc:	2200      	movs	r2, #0
   b7fde:	6840      	ldr	r0, [r0, #4]
   b7fe0:	4611      	mov	r1, r2
   b7fe2:	f7ff bf47 	b.w	b7e74 <network_ready>

000b7fe6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7fe6:	2200      	movs	r2, #0
   b7fe8:	6840      	ldr	r0, [r0, #4]
   b7fea:	4611      	mov	r1, r2
   b7fec:	f7ff bf32 	b.w	b7e54 <network_connecting>

000b7ff0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7ff0:	6840      	ldr	r0, [r0, #4]
   b7ff2:	2200      	movs	r2, #0
   b7ff4:	2102      	movs	r1, #2
   b7ff6:	f7ff bf35 	b.w	b7e64 <network_disconnect>

000b7ffa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7ffa:	2300      	movs	r3, #0
   b7ffc:	6840      	ldr	r0, [r0, #4]
   b7ffe:	461a      	mov	r2, r3
   b8000:	f7ff bf20 	b.w	b7e44 <network_connect>

000b8004 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8004:	4b02      	ldr	r3, [pc, #8]	; (b8010 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8006:	2203      	movs	r2, #3
   b8008:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b800a:	4a02      	ldr	r2, [pc, #8]	; (b8014 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b800c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b800e:	4770      	bx	lr
   b8010:	2003e6c8 	.word	0x2003e6c8
   b8014:	000c0b18 	.word	0x000c0b18

000b8018 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8018:	4770      	bx	lr

000b801a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b801a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b801c:	4606      	mov	r6, r0
   b801e:	4615      	mov	r5, r2
   b8020:	460c      	mov	r4, r1
   b8022:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8024:	42bc      	cmp	r4, r7
   b8026:	d006      	beq.n	b8036 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8028:	6833      	ldr	r3, [r6, #0]
   b802a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b802e:	689b      	ldr	r3, [r3, #8]
   b8030:	4630      	mov	r0, r6
   b8032:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8034:	e7f6      	b.n	b8024 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8036:	4628      	mov	r0, r5
   b8038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b803a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b803a:	7c00      	ldrb	r0, [r0, #16]
   b803c:	2200      	movs	r2, #0
   b803e:	f7ff bd4d 	b.w	b7adc <hal_i2c_write>

000b8042 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8042:	7c00      	ldrb	r0, [r0, #16]
   b8044:	2100      	movs	r1, #0
   b8046:	f7ff bd51 	b.w	b7aec <hal_i2c_available>

000b804a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b804a:	7c00      	ldrb	r0, [r0, #16]
   b804c:	2100      	movs	r1, #0
   b804e:	f7ff bd55 	b.w	b7afc <hal_i2c_read>

000b8052 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8052:	7c00      	ldrb	r0, [r0, #16]
   b8054:	2100      	movs	r1, #0
   b8056:	f7ff bd59 	b.w	b7b0c <hal_i2c_peek>

000b805a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b805a:	7c00      	ldrb	r0, [r0, #16]
   b805c:	2100      	movs	r1, #0
   b805e:	f7ff bd5d 	b.w	b7b1c <hal_i2c_flush>

000b8062 <_ZN7TwoWireD0Ev>:
   b8062:	b510      	push	{r4, lr}
   b8064:	2114      	movs	r1, #20
   b8066:	4604      	mov	r4, r0
   b8068:	f7fc f819 	bl	b409e <_ZdlPvj>
   b806c:	4620      	mov	r0, r4
   b806e:	bd10      	pop	{r4, pc}

000b8070 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8070:	b538      	push	{r3, r4, r5, lr}
   b8072:	4604      	mov	r4, r0
   b8074:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b807a:	2200      	movs	r2, #0
   b807c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8080:	4b09      	ldr	r3, [pc, #36]	; (b80a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b8082:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8084:	4608      	mov	r0, r1
   b8086:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b8088:	4629      	mov	r1, r5
   b808a:	f7ff fd57 	bl	b7b3c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b808e:	30bf      	adds	r0, #191	; 0xbf
   b8090:	d108      	bne.n	b80a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b8092:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8094:	07db      	lsls	r3, r3, #31
   b8096:	d505      	bpl.n	b80a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b8098:	6868      	ldr	r0, [r5, #4]
   b809a:	f7ff ff43 	bl	b7f24 <free>
    free(conf.tx_buffer);
   b809e:	68e8      	ldr	r0, [r5, #12]
   b80a0:	f7ff ff40 	bl	b7f24 <free>
}
   b80a4:	4620      	mov	r0, r4
   b80a6:	bd38      	pop	{r3, r4, r5, pc}
   b80a8:	000c0b54 	.word	0x000c0b54

000b80ac <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b80ac:	2300      	movs	r3, #0
   b80ae:	7c00      	ldrb	r0, [r0, #16]
   b80b0:	461a      	mov	r2, r3
   b80b2:	4619      	mov	r1, r3
   b80b4:	f7ff bcfa 	b.w	b7aac <hal_i2c_begin>

000b80b8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b80b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b80ba:	2200      	movs	r2, #0
   b80bc:	2314      	movs	r3, #20
   b80be:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b80c2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b80c6:	780b      	ldrb	r3, [r1, #0]
   b80c8:	f88d 3008 	strb.w	r3, [sp, #8]
   b80cc:	684b      	ldr	r3, [r1, #4]
   b80ce:	9303      	str	r3, [sp, #12]
   b80d0:	68cb      	ldr	r3, [r1, #12]
   b80d2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b80d4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b80d6:	7a0b      	ldrb	r3, [r1, #8]
   b80d8:	9305      	str	r3, [sp, #20]
   b80da:	a901      	add	r1, sp, #4
   b80dc:	f7ff fd36 	bl	b7b4c <hal_i2c_request_ex>
}
   b80e0:	b007      	add	sp, #28
   b80e2:	f85d fb04 	ldr.w	pc, [sp], #4

000b80e6 <_ZN7TwoWire11requestFromEhjh>:
{
   b80e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b80e8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b80ea:	f88d 1000 	strb.w	r1, [sp]
   b80ee:	f04f 0164 	mov.w	r1, #100	; 0x64
   b80f2:	9103      	str	r1, [sp, #12]
   b80f4:	bf18      	it	ne
   b80f6:	2301      	movne	r3, #1
   b80f8:	4669      	mov	r1, sp
    size_ = size;
   b80fa:	9201      	str	r2, [sp, #4]
   b80fc:	f88d 3008 	strb.w	r3, [sp, #8]
   b8100:	f7ff ffda 	bl	b80b8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8104:	b005      	add	sp, #20
   b8106:	f85d fb04 	ldr.w	pc, [sp], #4

000b810a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b810a:	7c00      	ldrb	r0, [r0, #16]
   b810c:	2200      	movs	r2, #0
   b810e:	f7ff bcd5 	b.w	b7abc <hal_i2c_begin_transmission>

000b8112 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8112:	b2c9      	uxtb	r1, r1
   b8114:	f7ff bff9 	b.w	b810a <_ZN7TwoWire17beginTransmissionEh>

000b8118 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8118:	7c00      	ldrb	r0, [r0, #16]
   b811a:	2200      	movs	r2, #0
   b811c:	f7ff bcd6 	b.w	b7acc <hal_i2c_end_transmission>

000b8120 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8120:	2101      	movs	r1, #1
   b8122:	f7ff bff9 	b.w	b8118 <_ZN7TwoWire15endTransmissionEh>

000b8126 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8126:	4770      	bx	lr

000b8128 <_ZN9IPAddressD0Ev>:
   b8128:	b510      	push	{r4, lr}
   b812a:	2118      	movs	r1, #24
   b812c:	4604      	mov	r4, r0
   b812e:	f7fb ffb6 	bl	b409e <_ZdlPvj>
   b8132:	4620      	mov	r0, r4
   b8134:	bd10      	pop	{r4, pc}

000b8136 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8136:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8138:	7d03      	ldrb	r3, [r0, #20]
   b813a:	2b06      	cmp	r3, #6
{
   b813c:	b08d      	sub	sp, #52	; 0x34
   b813e:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8140:	f100 0704 	add.w	r7, r0, #4
   b8144:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8148:	d012      	beq.n	b8170 <_ZNK9IPAddress7printToER5Print+0x3a>
   b814a:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b814e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8152:	220a      	movs	r2, #10
   b8154:	4630      	mov	r0, r6
   b8156:	f000 f974 	bl	b8442 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b815a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b815c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b815e:	d019      	beq.n	b8194 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8160:	2c00      	cmp	r4, #0
   b8162:	d0f4      	beq.n	b814e <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8164:	212e      	movs	r1, #46	; 0x2e
   b8166:	4630      	mov	r0, r6
   b8168:	f000 f952 	bl	b8410 <_ZN5Print5printEc>
   b816c:	4404      	add	r4, r0
   b816e:	e7ee      	b.n	b814e <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8170:	232f      	movs	r3, #47	; 0x2f
   b8172:	466a      	mov	r2, sp
   b8174:	4639      	mov	r1, r7
   b8176:	200a      	movs	r0, #10
		buf[0] = 0;
   b8178:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b817c:	f7ff fcf6 	bl	b7b6c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8180:	4668      	mov	r0, sp
   b8182:	f003 f871 	bl	bb268 <strlen>
   b8186:	6833      	ldr	r3, [r6, #0]
   b8188:	4602      	mov	r2, r0
   b818a:	68db      	ldr	r3, [r3, #12]
   b818c:	4669      	mov	r1, sp
   b818e:	4630      	mov	r0, r6
   b8190:	4798      	blx	r3
   b8192:	4604      	mov	r4, r0
    }
    return n;
}
   b8194:	4620      	mov	r0, r4
   b8196:	b00d      	add	sp, #52	; 0x34
   b8198:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b819c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b819c:	b510      	push	{r4, lr}
   b819e:	4b05      	ldr	r3, [pc, #20]	; (b81b4 <_ZN9IPAddressC1Ev+0x18>)
   b81a0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b81a2:	2211      	movs	r2, #17
   b81a4:	f840 3b04 	str.w	r3, [r0], #4
   b81a8:	2100      	movs	r1, #0
   b81aa:	f002 ffd7 	bl	bb15c <memset>
}
   b81ae:	4620      	mov	r0, r4
   b81b0:	bd10      	pop	{r4, pc}
   b81b2:	bf00      	nop
   b81b4:	000c0b7c 	.word	0x000c0b7c

000b81b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b81b8:	4603      	mov	r3, r0
   b81ba:	4a07      	ldr	r2, [pc, #28]	; (b81d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b81bc:	b510      	push	{r4, lr}
   b81be:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b81c2:	f101 0210 	add.w	r2, r1, #16
   b81c6:	f851 4b04 	ldr.w	r4, [r1], #4
   b81ca:	f843 4b04 	str.w	r4, [r3], #4
   b81ce:	4291      	cmp	r1, r2
   b81d0:	d1f9      	bne.n	b81c6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b81d2:	780a      	ldrb	r2, [r1, #0]
   b81d4:	701a      	strb	r2, [r3, #0]
}
   b81d6:	bd10      	pop	{r4, pc}
   b81d8:	000c0b7c 	.word	0x000c0b7c

000b81dc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b81dc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b81de:	2b04      	cmp	r3, #4
   b81e0:	d104      	bne.n	b81ec <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b81e2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b81e4:	3800      	subs	r0, #0
   b81e6:	bf18      	it	ne
   b81e8:	2001      	movne	r0, #1
   b81ea:	4770      	bx	lr
    } else if (version() == 6) {
   b81ec:	2b06      	cmp	r3, #6
   b81ee:	d107      	bne.n	b8200 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b81f0:	6843      	ldr	r3, [r0, #4]
   b81f2:	b93b      	cbnz	r3, b8204 <_ZNK9IPAddresscvbEv+0x28>
   b81f4:	6883      	ldr	r3, [r0, #8]
   b81f6:	b92b      	cbnz	r3, b8204 <_ZNK9IPAddresscvbEv+0x28>
   b81f8:	68c3      	ldr	r3, [r0, #12]
   b81fa:	b91b      	cbnz	r3, b8204 <_ZNK9IPAddresscvbEv+0x28>
   b81fc:	6900      	ldr	r0, [r0, #16]
   b81fe:	e7f1      	b.n	b81e4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8200:	2000      	movs	r0, #0
   b8202:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8204:	2001      	movs	r0, #1
}
   b8206:	4770      	bx	lr

000b8208 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8208:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b820a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b820e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8212:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8216:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b821a:	2304      	movs	r3, #4
   b821c:	6041      	str	r1, [r0, #4]
   b821e:	7503      	strb	r3, [r0, #20]
}
   b8220:	bd10      	pop	{r4, pc}
	...

000b8224 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8224:	b507      	push	{r0, r1, r2, lr}
   b8226:	4b06      	ldr	r3, [pc, #24]	; (b8240 <_ZN9IPAddressC1EPKh+0x1c>)
   b8228:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b822a:	78cb      	ldrb	r3, [r1, #3]
   b822c:	9300      	str	r3, [sp, #0]
   b822e:	788b      	ldrb	r3, [r1, #2]
   b8230:	784a      	ldrb	r2, [r1, #1]
   b8232:	7809      	ldrb	r1, [r1, #0]
   b8234:	f7ff ffe8 	bl	b8208 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8238:	b003      	add	sp, #12
   b823a:	f85d fb04 	ldr.w	pc, [sp], #4
   b823e:	bf00      	nop
   b8240:	000c0b7c 	.word	0x000c0b7c

000b8244 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8244:	4b01      	ldr	r3, [pc, #4]	; (b824c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8246:	4a02      	ldr	r2, [pc, #8]	; (b8250 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8248:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b824a:	4770      	bx	lr
   b824c:	2003e6d0 	.word	0x2003e6d0
   b8250:	000c0b88 	.word	0x000c0b88

000b8254 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8254:	2300      	movs	r3, #0
   b8256:	6840      	ldr	r0, [r0, #4]
   b8258:	461a      	mov	r2, r3
   b825a:	f7ff bdf3 	b.w	b7e44 <network_connect>

000b825e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b825e:	6840      	ldr	r0, [r0, #4]
   b8260:	2200      	movs	r2, #0
   b8262:	2102      	movs	r1, #2
   b8264:	f7ff bdfe 	b.w	b7e64 <network_disconnect>

000b8268 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8268:	2200      	movs	r2, #0
   b826a:	6840      	ldr	r0, [r0, #4]
   b826c:	4611      	mov	r1, r2
   b826e:	f7ff bdf1 	b.w	b7e54 <network_connecting>

000b8272 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8272:	2200      	movs	r2, #0
   b8274:	6840      	ldr	r0, [r0, #4]
   b8276:	4611      	mov	r1, r2
   b8278:	f7ff bdfc 	b.w	b7e74 <network_ready>

000b827c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b827c:	2300      	movs	r3, #0
   b827e:	6840      	ldr	r0, [r0, #4]
   b8280:	461a      	mov	r2, r3
   b8282:	4619      	mov	r1, r3
   b8284:	f7ff bdfe 	b.w	b7e84 <network_on>

000b8288 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8288:	2300      	movs	r3, #0
   b828a:	6840      	ldr	r0, [r0, #4]
   b828c:	461a      	mov	r2, r3
   b828e:	4619      	mov	r1, r3
   b8290:	f7ff be00 	b.w	b7e94 <network_off>

000b8294 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8294:	6840      	ldr	r0, [r0, #4]
   b8296:	2100      	movs	r1, #0
   b8298:	f7ff be2c 	b.w	b7ef4 <network_is_on>

000b829c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b829c:	6840      	ldr	r0, [r0, #4]
   b829e:	2100      	movs	r1, #0
   b82a0:	f7ff be30 	b.w	b7f04 <network_is_off>

000b82a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b82a4:	6840      	ldr	r0, [r0, #4]
   b82a6:	2200      	movs	r2, #0
   b82a8:	f081 0101 	eor.w	r1, r1, #1
   b82ac:	f7ff bdfa 	b.w	b7ea4 <network_listen>

000b82b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b82b0:	6840      	ldr	r0, [r0, #4]
   b82b2:	2200      	movs	r2, #0
   b82b4:	f7ff be0e 	b.w	b7ed4 <network_set_listen_timeout>

000b82b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b82b8:	2200      	movs	r2, #0
   b82ba:	6840      	ldr	r0, [r0, #4]
   b82bc:	4611      	mov	r1, r2
   b82be:	f7ff be11 	b.w	b7ee4 <network_get_listen_timeout>

000b82c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b82c2:	2200      	movs	r2, #0
   b82c4:	6840      	ldr	r0, [r0, #4]
   b82c6:	4611      	mov	r1, r2
   b82c8:	f7ff bdf4 	b.w	b7eb4 <network_listening>

000b82cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b82cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b82d0:	b095      	sub	sp, #84	; 0x54
   b82d2:	4614      	mov	r4, r2
   b82d4:	460d      	mov	r5, r1
   b82d6:	4607      	mov	r7, r0
    IPAddress addr;
   b82d8:	f7ff ff60 	bl	b819c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b82dc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b82de:	221c      	movs	r2, #28
   b82e0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b82e2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b82e4:	f002 ff3a 	bl	bb15c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b82e8:	2340      	movs	r3, #64	; 0x40
   b82ea:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b82ec:	4620      	mov	r0, r4
   b82ee:	466b      	mov	r3, sp
   b82f0:	aa0c      	add	r2, sp, #48	; 0x30
   b82f2:	2100      	movs	r1, #0
   b82f4:	f7ff fc5a 	bl	b7bac <netdb_getaddrinfo>
    if (!r) {
   b82f8:	4604      	mov	r4, r0
   b82fa:	2800      	cmp	r0, #0
   b82fc:	d14b      	bne.n	b8396 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b82fe:	4602      	mov	r2, r0
   b8300:	2101      	movs	r1, #1
   b8302:	6868      	ldr	r0, [r5, #4]
   b8304:	f7ff fdb6 	bl	b7e74 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8308:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b830a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b830c:	4622      	mov	r2, r4
   b830e:	6868      	ldr	r0, [r5, #4]
   b8310:	f7ff fdb0 	bl	b7e74 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8314:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8316:	4681      	mov	r9, r0
        bool ok = false;
   b8318:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b831a:	2e00      	cmp	r6, #0
   b831c:	d03b      	beq.n	b8396 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b831e:	2900      	cmp	r1, #0
   b8320:	d139      	bne.n	b8396 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8322:	6873      	ldr	r3, [r6, #4]
   b8324:	2b02      	cmp	r3, #2
   b8326:	d003      	beq.n	b8330 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8328:	2b0a      	cmp	r3, #10
   b832a:	d011      	beq.n	b8350 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b832c:	69f6      	ldr	r6, [r6, #28]
   b832e:	e7f4      	b.n	b831a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8330:	f1b8 0f00 	cmp.w	r8, #0
   b8334:	d0fa      	beq.n	b832c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8336:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8338:	a806      	add	r0, sp, #24
   b833a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b833c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b833e:	f7ff ff71 	bl	b8224 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8344:	1d3c      	adds	r4, r7, #4
   b8346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8348:	682b      	ldr	r3, [r5, #0]
   b834a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b834c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b834e:	e7ed      	b.n	b832c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8350:	f1b9 0f00 	cmp.w	r9, #0
   b8354:	d0ea      	beq.n	b832c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8356:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8358:	2210      	movs	r2, #16
   b835a:	a801      	add	r0, sp, #4
   b835c:	f002 fefe 	bl	bb15c <memset>
                    a.v = 6;
   b8360:	2306      	movs	r3, #6
   b8362:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8366:	ad01      	add	r5, sp, #4
   b8368:	f104 0308 	add.w	r3, r4, #8
   b836c:	3418      	adds	r4, #24
   b836e:	6818      	ldr	r0, [r3, #0]
   b8370:	6859      	ldr	r1, [r3, #4]
   b8372:	462a      	mov	r2, r5
   b8374:	c203      	stmia	r2!, {r0, r1}
   b8376:	3308      	adds	r3, #8
   b8378:	42a3      	cmp	r3, r4
   b837a:	4615      	mov	r5, r2
   b837c:	d1f7      	bne.n	b836e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b837e:	a901      	add	r1, sp, #4
   b8380:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8382:	ad07      	add	r5, sp, #28
   b8384:	f7ff ff18 	bl	b81b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b838a:	1d3c      	adds	r4, r7, #4
   b838c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b838e:	682b      	ldr	r3, [r5, #0]
   b8390:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8392:	4649      	mov	r1, r9
   b8394:	e7ca      	b.n	b832c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8396:	9800      	ldr	r0, [sp, #0]
   b8398:	f7ff fc00 	bl	b7b9c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b839c:	4638      	mov	r0, r7
   b839e:	b015      	add	sp, #84	; 0x54
   b83a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b83a4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b83a4:	4b02      	ldr	r3, [pc, #8]	; (b83b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b83a6:	4a03      	ldr	r2, [pc, #12]	; (b83b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b83a8:	601a      	str	r2, [r3, #0]
   b83aa:	2200      	movs	r2, #0
   b83ac:	605a      	str	r2, [r3, #4]

} // spark
   b83ae:	4770      	bx	lr
   b83b0:	2003e6d4 	.word	0x2003e6d4
   b83b4:	000c0b94 	.word	0x000c0b94

000b83b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b83b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b83ba:	4606      	mov	r6, r0
   b83bc:	460d      	mov	r5, r1
  size_t n = 0;
   b83be:	188f      	adds	r7, r1, r2
   b83c0:	2400      	movs	r4, #0
  while (size--) {
   b83c2:	42bd      	cmp	r5, r7
   b83c4:	d00c      	beq.n	b83e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b83c6:	6833      	ldr	r3, [r6, #0]
   b83c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b83cc:	689b      	ldr	r3, [r3, #8]
   b83ce:	4630      	mov	r0, r6
   b83d0:	4798      	blx	r3
     if (chunk>=0)
   b83d2:	1e03      	subs	r3, r0, #0
   b83d4:	db01      	blt.n	b83da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b83d6:	441c      	add	r4, r3
  while (size--) {
   b83d8:	e7f3      	b.n	b83c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b83da:	2c00      	cmp	r4, #0
   b83dc:	bf08      	it	eq
   b83de:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b83e0:	4620      	mov	r0, r4
   b83e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b83e4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b83e4:	b513      	push	{r0, r1, r4, lr}
   b83e6:	4604      	mov	r4, r0
    }
   b83e8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b83ea:	b159      	cbz	r1, b8404 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b83ec:	9101      	str	r1, [sp, #4]
   b83ee:	f002 ff3b 	bl	bb268 <strlen>
   b83f2:	6823      	ldr	r3, [r4, #0]
   b83f4:	9901      	ldr	r1, [sp, #4]
   b83f6:	68db      	ldr	r3, [r3, #12]
   b83f8:	4602      	mov	r2, r0
   b83fa:	4620      	mov	r0, r4
    }
   b83fc:	b002      	add	sp, #8
   b83fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8402:	4718      	bx	r3
    }
   b8404:	b002      	add	sp, #8
   b8406:	bd10      	pop	{r4, pc}

000b8408 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8408:	b508      	push	{r3, lr}
  return write(str);
   b840a:	f7ff ffeb 	bl	b83e4 <_ZN5Print5writeEPKc>
}
   b840e:	bd08      	pop	{r3, pc}

000b8410 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8410:	6803      	ldr	r3, [r0, #0]
   b8412:	689b      	ldr	r3, [r3, #8]
   b8414:	4718      	bx	r3

000b8416 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8416:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8418:	210d      	movs	r1, #13
{
   b841a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b841c:	f7ff fff8 	bl	b8410 <_ZN5Print5printEc>
  n += print('\n');
   b8420:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8422:	4604      	mov	r4, r0
  n += print('\n');
   b8424:	4628      	mov	r0, r5
   b8426:	f7ff fff3 	bl	b8410 <_ZN5Print5printEc>
  return n;
}
   b842a:	4420      	add	r0, r4
   b842c:	bd38      	pop	{r3, r4, r5, pc}

000b842e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b842e:	b538      	push	{r3, r4, r5, lr}
   b8430:	4605      	mov	r5, r0
  return write(str);
   b8432:	f7ff ffd7 	bl	b83e4 <_ZN5Print5writeEPKc>
   b8436:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8438:	4628      	mov	r0, r5
   b843a:	f7ff ffec 	bl	b8416 <_ZN5Print7printlnEv>
  return n;
}
   b843e:	4420      	add	r0, r4
   b8440:	bd38      	pop	{r3, r4, r5, pc}

000b8442 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8442:	b530      	push	{r4, r5, lr}
   b8444:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8446:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8448:	2a01      	cmp	r2, #1
  *str = '\0';
   b844a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b844e:	bf98      	it	ls
   b8450:	220a      	movls	r2, #10
   b8452:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8454:	460d      	mov	r5, r1
   b8456:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b845a:	fb01 5312 	mls	r3, r1, r2, r5
   b845e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8462:	2b09      	cmp	r3, #9
   b8464:	bf94      	ite	ls
   b8466:	3330      	addls	r3, #48	; 0x30
   b8468:	3337      	addhi	r3, #55	; 0x37
   b846a:	b2db      	uxtb	r3, r3
  } while(n);
   b846c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b846e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8472:	d9ef      	bls.n	b8454 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8474:	4621      	mov	r1, r4
   b8476:	f7ff ffb5 	bl	b83e4 <_ZN5Print5writeEPKc>
}
   b847a:	b00b      	add	sp, #44	; 0x2c
   b847c:	bd30      	pop	{r4, r5, pc}

000b847e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b847e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8482:	b086      	sub	sp, #24
   b8484:	af00      	add	r7, sp, #0
   b8486:	4605      	mov	r5, r0
   b8488:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b848a:	1d38      	adds	r0, r7, #4
   b848c:	2114      	movs	r1, #20
{
   b848e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8490:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8492:	f7ff fd57 	bl	b7f44 <vsnprintf>

    if (n<bufsize)
   b8496:	2813      	cmp	r0, #19
   b8498:	d80e      	bhi.n	b84b8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b849a:	1d39      	adds	r1, r7, #4
   b849c:	4628      	mov	r0, r5
   b849e:	f7ff ffa1 	bl	b83e4 <_ZN5Print5writeEPKc>
   b84a2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b84a4:	b11e      	cbz	r6, b84ae <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b84a6:	4628      	mov	r0, r5
   b84a8:	f7ff ffb5 	bl	b8416 <_ZN5Print7printlnEv>
   b84ac:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b84ae:	4620      	mov	r0, r4
   b84b0:	3718      	adds	r7, #24
   b84b2:	46bd      	mov	sp, r7
   b84b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b84b8:	f100 0308 	add.w	r3, r0, #8
   b84bc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b84c0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b84c2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b84c6:	4622      	mov	r2, r4
   b84c8:	1c41      	adds	r1, r0, #1
   b84ca:	683b      	ldr	r3, [r7, #0]
   b84cc:	4668      	mov	r0, sp
   b84ce:	f7ff fd39 	bl	b7f44 <vsnprintf>
  return write(str);
   b84d2:	4669      	mov	r1, sp
   b84d4:	4628      	mov	r0, r5
   b84d6:	f7ff ff85 	bl	b83e4 <_ZN5Print5writeEPKc>
   b84da:	4604      	mov	r4, r0
   b84dc:	46c5      	mov	sp, r8
   b84de:	e7e1      	b.n	b84a4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b84e0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   b84e0:	b510      	push	{r4, lr}
  if (0 == max) {
   b84e2:	4604      	mov	r4, r0
   b84e4:	b128      	cbz	r0, b84f2 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   b84e6:	f002 fe6f 	bl	bb1c8 <rand>
   b84ea:	fb90 f3f4 	sdiv	r3, r0, r4
   b84ee:	fb03 0414 	mls	r4, r3, r4, r0
}
   b84f2:	4620      	mov	r0, r4
   b84f4:	bd10      	pop	{r4, pc}
	...

000b84f8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b84f8:	4b01      	ldr	r3, [pc, #4]	; (b8500 <_GLOBAL__sub_I_RGB+0x8>)
   b84fa:	2200      	movs	r2, #0
   b84fc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b84fe:	4770      	bx	lr
   b8500:	2003e6dc 	.word	0x2003e6dc

000b8504 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8504:	2100      	movs	r1, #0
   b8506:	f7ff bbd1 	b.w	b7cac <hal_spi_release>

000b850a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b850a:	2100      	movs	r1, #0
   b850c:	f7ff bbc6 	b.w	b7c9c <hal_spi_acquire>

000b8510 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8510:	b510      	push	{r4, lr}
   b8512:	4604      	mov	r4, r0
   b8514:	4608      	mov	r0, r1
{
    _spi = spi;
   b8516:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8518:	f7ff fba8 	bl	b7c6c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b851c:	2300      	movs	r3, #0
   b851e:	6063      	str	r3, [r4, #4]
}
   b8520:	4620      	mov	r0, r4
   b8522:	bd10      	pop	{r4, pc}

000b8524 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8524:	b513      	push	{r0, r1, r4, lr}
   b8526:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8528:	7800      	ldrb	r0, [r0, #0]
   b852a:	f7ff ffee 	bl	b850a <_ZN8SPIClass4lockEv.isra.0>
   b852e:	b958      	cbnz	r0, b8548 <_ZN8SPIClass5beginEv+0x24>
   b8530:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b8532:	9001      	str	r0, [sp, #4]
   b8534:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8538:	f7ff fb70 	bl	b7c1c <hal_spi_begin>
        unlock();
   b853c:	9801      	ldr	r0, [sp, #4]
    }
}
   b853e:	b002      	add	sp, #8
   b8540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8544:	f7ff bfde 	b.w	b8504 <_ZN8SPIClass6unlockEv.isra.0>
   b8548:	b002      	add	sp, #8
   b854a:	bd10      	pop	{r4, pc}

000b854c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b854c:	b513      	push	{r0, r1, r4, lr}
   b854e:	4604      	mov	r4, r0
    if (!lock())
   b8550:	7800      	ldrb	r0, [r0, #0]
{
   b8552:	9101      	str	r1, [sp, #4]
    if (!lock())
   b8554:	f7ff ffd9 	bl	b850a <_ZN8SPIClass4lockEv.isra.0>
   b8558:	9901      	ldr	r1, [sp, #4]
   b855a:	b948      	cbnz	r0, b8570 <_ZN8SPIClass11setBitOrderEh+0x24>
   b855c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b855e:	9001      	str	r0, [sp, #4]
   b8560:	f7ff fb64 	bl	b7c2c <hal_spi_set_bit_order>
        unlock();
   b8564:	9801      	ldr	r0, [sp, #4]
    }
}
   b8566:	b002      	add	sp, #8
   b8568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b856c:	f7ff bfca 	b.w	b8504 <_ZN8SPIClass6unlockEv.isra.0>
   b8570:	b002      	add	sp, #8
   b8572:	bd10      	pop	{r4, pc}

000b8574 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b8574:	b513      	push	{r0, r1, r4, lr}
   b8576:	4604      	mov	r4, r0
    if (!lock())
   b8578:	7800      	ldrb	r0, [r0, #0]
{
   b857a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b857c:	f7ff ffc5 	bl	b850a <_ZN8SPIClass4lockEv.isra.0>
   b8580:	9901      	ldr	r1, [sp, #4]
   b8582:	b948      	cbnz	r0, b8598 <_ZN8SPIClass11setDataModeEh+0x24>
   b8584:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b8586:	9001      	str	r0, [sp, #4]
   b8588:	f7ff fb58 	bl	b7c3c <hal_spi_set_data_mode>
        unlock();
   b858c:	9801      	ldr	r0, [sp, #4]
    }
}
   b858e:	b002      	add	sp, #8
   b8590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8594:	f7ff bfb6 	b.w	b8504 <_ZN8SPIClass6unlockEv.isra.0>
   b8598:	b002      	add	sp, #8
   b859a:	bd10      	pop	{r4, pc}

000b859c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b859c:	0840      	lsrs	r0, r0, #1
{
   b859e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b85a0:	6018      	str	r0, [r3, #0]
   b85a2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b85a4:	6818      	ldr	r0, [r3, #0]
   b85a6:	4288      	cmp	r0, r1
   b85a8:	b2e5      	uxtb	r5, r4
   b85aa:	d906      	bls.n	b85ba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b85ac:	3401      	adds	r4, #1
   b85ae:	2c08      	cmp	r4, #8
   b85b0:	d002      	beq.n	b85b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b85b2:	0840      	lsrs	r0, r0, #1
   b85b4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b85b6:	e7f5      	b.n	b85a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b85b8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b85ba:	4b02      	ldr	r3, [pc, #8]	; (b85c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b85bc:	5d5b      	ldrb	r3, [r3, r5]
   b85be:	7013      	strb	r3, [r2, #0]
}
   b85c0:	bd30      	pop	{r4, r5, pc}
   b85c2:	bf00      	nop
   b85c4:	000c0bc8 	.word	0x000c0bc8

000b85c8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b85c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b85cc:	b088      	sub	sp, #32
    unsigned clock = 0;
   b85ce:	2300      	movs	r3, #0
{
   b85d0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b85d2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b85d4:	9302      	str	r3, [sp, #8]
{
   b85d6:	460e      	mov	r6, r1
   b85d8:	4617      	mov	r7, r2
    if (!lock())
   b85da:	f7ff ff96 	bl	b850a <_ZN8SPIClass4lockEv.isra.0>
   b85de:	4605      	mov	r5, r0
   b85e0:	bb00      	cbnz	r0, b8624 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b85e2:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b85e6:	4601      	mov	r1, r0
   b85e8:	2214      	movs	r2, #20
   b85ea:	a803      	add	r0, sp, #12
   b85ec:	f002 fdb6 	bl	bb15c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b85f0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b85f2:	462a      	mov	r2, r5
   b85f4:	a903      	add	r1, sp, #12
   b85f6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b85f8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b85fc:	f7ff fb46 	bl	b7c8c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b8600:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b8602:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b8606:	ab02      	add	r3, sp, #8
   b8608:	f10d 0207 	add.w	r2, sp, #7
   b860c:	fb07 f106 	mul.w	r1, r7, r6
   b8610:	f7ff ffc4 	bl	b859c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b8614:	7820      	ldrb	r0, [r4, #0]
   b8616:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b861a:	f7ff fb17 	bl	b7c4c <hal_spi_set_clock_divider>
        unlock();
   b861e:	7820      	ldrb	r0, [r4, #0]
   b8620:	f7ff ff70 	bl	b8504 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b8624:	9802      	ldr	r0, [sp, #8]
   b8626:	b008      	add	sp, #32
   b8628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b862c <_ZN8SPIClass15setClockDividerEh>:
{
   b862c:	b538      	push	{r3, r4, r5, lr}
   b862e:	4604      	mov	r4, r0
    if (!lock())
   b8630:	7800      	ldrb	r0, [r0, #0]
{
   b8632:	460d      	mov	r5, r1
    if (!lock())
   b8634:	f7ff ff69 	bl	b850a <_ZN8SPIClass4lockEv.isra.0>
   b8638:	4603      	mov	r3, r0
   b863a:	b9d0      	cbnz	r0, b8672 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b863c:	6861      	ldr	r1, [r4, #4]
   b863e:	b199      	cbz	r1, b8668 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b8640:	4a0c      	ldr	r2, [pc, #48]	; (b8674 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b8642:	f812 0b01 	ldrb.w	r0, [r2], #1
   b8646:	4285      	cmp	r5, r0
   b8648:	d002      	beq.n	b8650 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b864a:	3301      	adds	r3, #1
   b864c:	2b08      	cmp	r3, #8
   b864e:	d1f8      	bne.n	b8642 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b8650:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b8652:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b8654:	2201      	movs	r2, #1
   b8656:	40d9      	lsrs	r1, r3
   b8658:	4620      	mov	r0, r4
   b865a:	f7ff ffb5 	bl	b85c8 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b865e:	7820      	ldrb	r0, [r4, #0]
}
   b8660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b8664:	f7ff bf4e 	b.w	b8504 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b8668:	7820      	ldrb	r0, [r4, #0]
   b866a:	4629      	mov	r1, r5
   b866c:	f7ff faee 	bl	b7c4c <hal_spi_set_clock_divider>
   b8670:	e7f5      	b.n	b865e <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b8672:	bd38      	pop	{r3, r4, r5, pc}
   b8674:	000c0bc8 	.word	0x000c0bc8

000b8678 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b8678:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b867a:	7800      	ldrb	r0, [r0, #0]
   b867c:	f7ff faee 	bl	b7c5c <hal_spi_transfer>
}
   b8680:	b2c0      	uxtb	r0, r0
   b8682:	bd08      	pop	{r3, pc}

000b8684 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b8684:	b510      	push	{r4, lr}
   b8686:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8688:	f7ff f9e0 	bl	b7a4c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b868c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b868e:	6823      	ldr	r3, [r4, #0]
   b8690:	4620      	mov	r0, r4
   b8692:	695b      	ldr	r3, [r3, #20]
   b8694:	4798      	blx	r3
    if (c >= 0) return c;
   b8696:	2800      	cmp	r0, #0
   b8698:	da08      	bge.n	b86ac <_ZN6Stream9timedReadEv+0x28>
   b869a:	f7ff f9d7 	bl	b7a4c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b869e:	68e3      	ldr	r3, [r4, #12]
   b86a0:	1ac0      	subs	r0, r0, r3
   b86a2:	68a3      	ldr	r3, [r4, #8]
   b86a4:	4298      	cmp	r0, r3
   b86a6:	d3f2      	bcc.n	b868e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b86a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b86ac:	bd10      	pop	{r4, pc}
	...

000b86b0 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b86b0:	b538      	push	{r3, r4, r5, lr}
   b86b2:	460d      	mov	r5, r1
  String ret;
   b86b4:	4907      	ldr	r1, [pc, #28]	; (b86d4 <_ZN6Stream10readStringEv+0x24>)
{
   b86b6:	4604      	mov	r4, r0
  String ret;
   b86b8:	f000 f859 	bl	b876e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b86bc:	4628      	mov	r0, r5
   b86be:	f7ff ffe1 	bl	b8684 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b86c2:	2800      	cmp	r0, #0
   b86c4:	db04      	blt.n	b86d0 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b86c6:	b2c1      	uxtb	r1, r0
   b86c8:	4620      	mov	r0, r4
   b86ca:	f000 f8ba 	bl	b8842 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b86ce:	e7f5      	b.n	b86bc <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b86d0:	4620      	mov	r0, r4
   b86d2:	bd38      	pop	{r3, r4, r5, pc}
   b86d4:	000bb46e 	.word	0x000bb46e

000b86d8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b86d8:	b510      	push	{r4, lr}
   b86da:	4604      	mov	r4, r0
{
	free(buffer);
   b86dc:	6800      	ldr	r0, [r0, #0]
   b86de:	f7ff fc21 	bl	b7f24 <free>
}
   b86e2:	4620      	mov	r0, r4
   b86e4:	bd10      	pop	{r4, pc}

000b86e6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b86e6:	b510      	push	{r4, lr}
   b86e8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b86ea:	6800      	ldr	r0, [r0, #0]
   b86ec:	b108      	cbz	r0, b86f2 <_ZN6String10invalidateEv+0xc>
   b86ee:	f7ff fc19 	bl	b7f24 <free>
	buffer = NULL;
   b86f2:	2300      	movs	r3, #0
	capacity = len = 0;
   b86f4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b86f8:	6023      	str	r3, [r4, #0]
}
   b86fa:	bd10      	pop	{r4, pc}

000b86fc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b86fc:	b538      	push	{r3, r4, r5, lr}
   b86fe:	4604      	mov	r4, r0
   b8700:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8702:	6800      	ldr	r0, [r0, #0]
   b8704:	3101      	adds	r1, #1
   b8706:	f7ff fc15 	bl	b7f34 <realloc>
	if (newbuffer) {
   b870a:	b110      	cbz	r0, b8712 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b870c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8710:	2001      	movs	r0, #1
	}
	return 0;
}
   b8712:	bd38      	pop	{r3, r4, r5, pc}

000b8714 <_ZN6String7reserveEj>:
{
   b8714:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8716:	6803      	ldr	r3, [r0, #0]
{
   b8718:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b871a:	b123      	cbz	r3, b8726 <_ZN6String7reserveEj+0x12>
   b871c:	6843      	ldr	r3, [r0, #4]
   b871e:	428b      	cmp	r3, r1
   b8720:	d301      	bcc.n	b8726 <_ZN6String7reserveEj+0x12>
   b8722:	2001      	movs	r0, #1
}
   b8724:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8726:	4620      	mov	r0, r4
   b8728:	f7ff ffe8 	bl	b86fc <_ZN6String12changeBufferEj>
   b872c:	2800      	cmp	r0, #0
   b872e:	d0f9      	beq.n	b8724 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8730:	68a3      	ldr	r3, [r4, #8]
   b8732:	2b00      	cmp	r3, #0
   b8734:	d1f5      	bne.n	b8722 <_ZN6String7reserveEj+0xe>
   b8736:	6822      	ldr	r2, [r4, #0]
   b8738:	7013      	strb	r3, [r2, #0]
   b873a:	e7f2      	b.n	b8722 <_ZN6String7reserveEj+0xe>

000b873c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b873c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b873e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8740:	4611      	mov	r1, r2
   b8742:	9201      	str	r2, [sp, #4]
{
   b8744:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8746:	f7ff ffe5 	bl	b8714 <_ZN6String7reserveEj>
   b874a:	9a01      	ldr	r2, [sp, #4]
   b874c:	b928      	cbnz	r0, b875a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b874e:	4620      	mov	r0, r4
   b8750:	f7ff ffc9 	bl	b86e6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8754:	4620      	mov	r0, r4
   b8756:	b003      	add	sp, #12
   b8758:	bd30      	pop	{r4, r5, pc}
	len = length;
   b875a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b875c:	4629      	mov	r1, r5
   b875e:	6820      	ldr	r0, [r4, #0]
   b8760:	f002 fcee 	bl	bb140 <memcpy>
	buffer[len] = 0;
   b8764:	6822      	ldr	r2, [r4, #0]
   b8766:	68a3      	ldr	r3, [r4, #8]
   b8768:	2100      	movs	r1, #0
   b876a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b876c:	e7f2      	b.n	b8754 <_ZN6String4copyEPKcj+0x18>

000b876e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b876e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8770:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8772:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8776:	4604      	mov	r4, r0
	len = 0;
   b8778:	6083      	str	r3, [r0, #8]
	flags = 0;
   b877a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b877c:	b141      	cbz	r1, b8790 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b877e:	4608      	mov	r0, r1
   b8780:	9101      	str	r1, [sp, #4]
   b8782:	f002 fd71 	bl	bb268 <strlen>
   b8786:	9901      	ldr	r1, [sp, #4]
   b8788:	4602      	mov	r2, r0
   b878a:	4620      	mov	r0, r4
   b878c:	f7ff ffd6 	bl	b873c <_ZN6String4copyEPKcj>
}
   b8790:	4620      	mov	r0, r4
   b8792:	b002      	add	sp, #8
   b8794:	bd10      	pop	{r4, pc}

000b8796 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8796:	4288      	cmp	r0, r1
{
   b8798:	b510      	push	{r4, lr}
   b879a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b879c:	d005      	beq.n	b87aa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b879e:	680b      	ldr	r3, [r1, #0]
   b87a0:	b12b      	cbz	r3, b87ae <_ZN6StringaSERKS_+0x18>
   b87a2:	688a      	ldr	r2, [r1, #8]
   b87a4:	4619      	mov	r1, r3
   b87a6:	f7ff ffc9 	bl	b873c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b87aa:	4620      	mov	r0, r4
   b87ac:	bd10      	pop	{r4, pc}
	else invalidate();
   b87ae:	f7ff ff9a 	bl	b86e6 <_ZN6String10invalidateEv>
   b87b2:	e7fa      	b.n	b87aa <_ZN6StringaSERKS_+0x14>

000b87b4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b87b4:	b510      	push	{r4, lr}
	buffer = NULL;
   b87b6:	2300      	movs	r3, #0
String::String(const String &value)
   b87b8:	4604      	mov	r4, r0
	capacity = 0;
   b87ba:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b87be:	6083      	str	r3, [r0, #8]
	flags = 0;
   b87c0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b87c2:	f7ff ffe8 	bl	b8796 <_ZN6StringaSERKS_>
}
   b87c6:	4620      	mov	r0, r4
   b87c8:	bd10      	pop	{r4, pc}

000b87ca <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b87ca:	b513      	push	{r0, r1, r4, lr}
   b87cc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b87ce:	b159      	cbz	r1, b87e8 <_ZN6StringaSEPKc+0x1e>
   b87d0:	4608      	mov	r0, r1
   b87d2:	9101      	str	r1, [sp, #4]
   b87d4:	f002 fd48 	bl	bb268 <strlen>
   b87d8:	9901      	ldr	r1, [sp, #4]
   b87da:	4602      	mov	r2, r0
   b87dc:	4620      	mov	r0, r4
   b87de:	f7ff ffad 	bl	b873c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b87e2:	4620      	mov	r0, r4
   b87e4:	b002      	add	sp, #8
   b87e6:	bd10      	pop	{r4, pc}
	else invalidate();
   b87e8:	f7ff ff7d 	bl	b86e6 <_ZN6String10invalidateEv>
   b87ec:	e7f9      	b.n	b87e2 <_ZN6StringaSEPKc+0x18>

000b87ee <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b87ee:	b510      	push	{r4, lr}
   b87f0:	4604      	mov	r4, r0
   b87f2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b87f4:	2300      	movs	r3, #0
	capacity = 0;
   b87f6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b87fa:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b87fc:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b87fe:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8800:	a901      	add	r1, sp, #4
   b8802:	f000 fc83 	bl	b910c <itoa>
	*this = buf;
   b8806:	a901      	add	r1, sp, #4
   b8808:	4620      	mov	r0, r4
   b880a:	f7ff ffde 	bl	b87ca <_ZN6StringaSEPKc>
}
   b880e:	4620      	mov	r0, r4
   b8810:	b00a      	add	sp, #40	; 0x28
   b8812:	bd10      	pop	{r4, pc}

000b8814 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8814:	b570      	push	{r4, r5, r6, lr}
   b8816:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8818:	460e      	mov	r6, r1
   b881a:	b909      	cbnz	r1, b8820 <_ZN6String6concatEPKcj+0xc>
   b881c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b881e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8820:	b16a      	cbz	r2, b883e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8822:	6884      	ldr	r4, [r0, #8]
   b8824:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8826:	4621      	mov	r1, r4
   b8828:	f7ff ff74 	bl	b8714 <_ZN6String7reserveEj>
   b882c:	2800      	cmp	r0, #0
   b882e:	d0f5      	beq.n	b881c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8830:	6828      	ldr	r0, [r5, #0]
   b8832:	68ab      	ldr	r3, [r5, #8]
   b8834:	4631      	mov	r1, r6
   b8836:	4418      	add	r0, r3
   b8838:	f002 fd0e 	bl	bb258 <strcpy>
	len = newlen;
   b883c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b883e:	2001      	movs	r0, #1
   b8840:	e7ed      	b.n	b881e <_ZN6String6concatEPKcj+0xa>

000b8842 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8842:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8844:	2300      	movs	r3, #0
	buf[0] = c;
   b8846:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b884a:	2201      	movs	r2, #1
   b884c:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b884e:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8852:	f7ff ffdf 	bl	b8814 <_ZN6String6concatEPKcj>
}
   b8856:	b003      	add	sp, #12
   b8858:	f85d fb04 	ldr.w	pc, [sp], #4

000b885c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b885c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b885e:	688a      	ldr	r2, [r1, #8]
   b8860:	6809      	ldr	r1, [r1, #0]
{
   b8862:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8864:	f7ff ffd6 	bl	b8814 <_ZN6String6concatEPKcj>
   b8868:	b910      	cbnz	r0, b8870 <_ZplRK15StringSumHelperRK6String+0x14>
   b886a:	4620      	mov	r0, r4
   b886c:	f7ff ff3b 	bl	b86e6 <_ZN6String10invalidateEv>
	return a;
}
   b8870:	4620      	mov	r0, r4
   b8872:	bd10      	pop	{r4, pc}

000b8874 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8874:	b513      	push	{r0, r1, r4, lr}
   b8876:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8878:	b929      	cbnz	r1, b8886 <_ZplRK15StringSumHelperPKc+0x12>
   b887a:	4620      	mov	r0, r4
   b887c:	f7ff ff33 	bl	b86e6 <_ZN6String10invalidateEv>
	return a;
}
   b8880:	4620      	mov	r0, r4
   b8882:	b002      	add	sp, #8
   b8884:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8886:	4608      	mov	r0, r1
   b8888:	9101      	str	r1, [sp, #4]
   b888a:	f002 fced 	bl	bb268 <strlen>
   b888e:	9901      	ldr	r1, [sp, #4]
   b8890:	4602      	mov	r2, r0
   b8892:	4620      	mov	r0, r4
   b8894:	f7ff ffbe 	bl	b8814 <_ZN6String6concatEPKcj>
   b8898:	2800      	cmp	r0, #0
   b889a:	d0ee      	beq.n	b887a <_ZplRK15StringSumHelperPKc+0x6>
   b889c:	e7f0      	b.n	b8880 <_ZplRK15StringSumHelperPKc+0xc>
	...

000b88a0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b88a0:	4b05      	ldr	r3, [pc, #20]	; (b88b8 <_GLOBAL__sub_I_System+0x18>)
   b88a2:	2202      	movs	r2, #2
   b88a4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b88a6:	4b05      	ldr	r3, [pc, #20]	; (b88bc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b88a8:	4a05      	ldr	r2, [pc, #20]	; (b88c0 <_GLOBAL__sub_I_System+0x20>)
   b88aa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b88ac:	2000      	movs	r0, #0
   b88ae:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b88b2:	f7ff ba93 	b.w	b7ddc <set_system_mode>
   b88b6:	bf00      	nop
   b88b8:	2003e6f8 	.word	0x2003e6f8
   b88bc:	2003e6ec 	.word	0x2003e6ec
   b88c0:	ffff0000 	.word	0xffff0000

000b88c4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b88c4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b88c6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b88c8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b88cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b88ce:	2201      	movs	r2, #1
   b88d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b88d4:	f10d 0107 	add.w	r1, sp, #7
   b88d8:	47a0      	blx	r4
}
   b88da:	b002      	add	sp, #8
   b88dc:	bd10      	pop	{r4, pc}

000b88de <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b88de:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b88e0:	6803      	ldr	r3, [r0, #0]
   b88e2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b88e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b88e8:	46a4      	mov	ip, r4
}
   b88ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b88ee:	4760      	bx	ip

000b88f0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b88f0:	b513      	push	{r0, r1, r4, lr}
   b88f2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b88f4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b88f6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b88fa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b88fc:	f10d 0107 	add.w	r1, sp, #7
   b8900:	2201      	movs	r2, #1
   b8902:	47a0      	blx	r4
}
   b8904:	b002      	add	sp, #8
   b8906:	bd10      	pop	{r4, pc}

000b8908 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8908:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b890a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b890c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8910:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8914:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8916:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8918:	d008      	beq.n	b892c <_ZN9TCPClient4readEv+0x24>
   b891a:	6963      	ldr	r3, [r4, #20]
   b891c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8920:	1c51      	adds	r1, r2, #1
   b8922:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8926:	4413      	add	r3, r2
   b8928:	7918      	ldrb	r0, [r3, #4]
}
   b892a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b892c:	6803      	ldr	r3, [r0, #0]
   b892e:	691b      	ldr	r3, [r3, #16]
   b8930:	4798      	blx	r3
   b8932:	2800      	cmp	r0, #0
   b8934:	d1f1      	bne.n	b891a <_ZN9TCPClient4readEv+0x12>
   b8936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b893a:	e7f6      	b.n	b892a <_ZN9TCPClient4readEv+0x22>

000b893c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b893c:	4770      	bx	lr

000b893e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b893e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8940:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8942:	43c0      	mvns	r0, r0
   b8944:	0fc0      	lsrs	r0, r0, #31
   b8946:	4770      	bx	lr

000b8948 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8948:	4770      	bx	lr
	...

000b894c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b894c:	4b06      	ldr	r3, [pc, #24]	; (b8968 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b894e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8950:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b8952:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8956:	d005      	beq.n	b8964 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8958:	4608      	mov	r0, r1
   b895a:	f000 fd95 	bl	b9488 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b895e:	2800      	cmp	r0, #0
   b8960:	bf08      	it	eq
   b8962:	2400      	moveq	r4, #0
      }
   b8964:	4620      	mov	r0, r4
   b8966:	bd10      	pop	{r4, pc}
   b8968:	000c0b08 	.word	0x000c0b08

000b896c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b896c:	b510      	push	{r4, lr}
   b896e:	21ac      	movs	r1, #172	; 0xac
   b8970:	4604      	mov	r4, r0
   b8972:	f7fb fb94 	bl	b409e <_ZdlPvj>
   b8976:	4620      	mov	r0, r4
   b8978:	bd10      	pop	{r4, pc}

000b897a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b897a:	21ac      	movs	r1, #172	; 0xac
   b897c:	f7fb bb8f 	b.w	b409e <_ZdlPvj>

000b8980 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8984:	f04f 0800 	mov.w	r8, #0
   b8988:	b086      	sub	sp, #24
   b898a:	461c      	mov	r4, r3
   b898c:	f8c0 8004 	str.w	r8, [r0, #4]
   b8990:	4605      	mov	r5, r0
   b8992:	460e      	mov	r6, r1
   b8994:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8996:	4641      	mov	r1, r8
   b8998:	2210      	movs	r2, #16
   b899a:	a802      	add	r0, sp, #8
   b899c:	f002 fbde 	bl	bb15c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b89a0:	1c63      	adds	r3, r4, #1
   b89a2:	d009      	beq.n	b89b8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b89a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b89a8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b89ac:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b89b0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b89b4:	435c      	muls	r4, r3
   b89b6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b89b8:	6968      	ldr	r0, [r5, #20]
   b89ba:	2310      	movs	r3, #16
   b89bc:	9300      	str	r3, [sp, #0]
   b89be:	6800      	ldr	r0, [r0, #0]
   b89c0:	ab02      	add	r3, sp, #8
   b89c2:	f241 0205 	movw	r2, #4101	; 0x1005
   b89c6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b89ca:	f7ff f8f7 	bl	b7bbc <sock_setsockopt>
    if (ret < 0) {
   b89ce:	2800      	cmp	r0, #0
   b89d0:	da07      	bge.n	b89e2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b89d2:	f7ff fabf 	bl	b7f54 <__errno>
   b89d6:	6803      	ldr	r3, [r0, #0]
   b89d8:	606b      	str	r3, [r5, #4]
        return 0;
   b89da:	2000      	movs	r0, #0
}
   b89dc:	b006      	add	sp, #24
   b89de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b89e2:	6968      	ldr	r0, [r5, #20]
   b89e4:	2300      	movs	r3, #0
   b89e6:	6800      	ldr	r0, [r0, #0]
   b89e8:	463a      	mov	r2, r7
   b89ea:	4631      	mov	r1, r6
   b89ec:	f7ff f906 	bl	b7bfc <sock_send>
    if (ret < 0) {
   b89f0:	1e03      	subs	r3, r0, #0
   b89f2:	dbee      	blt.n	b89d2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b89f4:	4618      	mov	r0, r3
   b89f6:	e7f1      	b.n	b89dc <_ZN9TCPClient5writeEPKhjm+0x5c>

000b89f8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b89f8:	b530      	push	{r4, r5, lr}
   b89fa:	b087      	sub	sp, #28
   b89fc:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b89fe:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8a00:	4668      	mov	r0, sp
   b8a02:	f7ff fc0f 	bl	b8224 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8a08:	3404      	adds	r4, #4
   b8a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8a0c:	682b      	ldr	r3, [r5, #0]
   b8a0e:	7023      	strb	r3, [r4, #0]
    }
   b8a10:	b007      	add	sp, #28
   b8a12:	bd30      	pop	{r4, r5, pc}

000b8a14 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8a14:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8a16:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8a18:	4b05      	ldr	r3, [pc, #20]	; (b8a30 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8a1a:	4604      	mov	r4, r0
   b8a1c:	358c      	adds	r5, #140	; 0x8c
   b8a1e:	f844 3b04 	str.w	r3, [r4], #4
   b8a22:	4606      	mov	r6, r0
   b8a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8a28:	682b      	ldr	r3, [r5, #0]
   b8a2a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8a2c:	4630      	mov	r0, r6
   b8a2e:	bd70      	pop	{r4, r5, r6, pc}
   b8a30:	000c0b7c 	.word	0x000c0b7c

000b8a34 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8a38:	4698      	mov	r8, r3
    stop();
   b8a3a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8a3c:	b093      	sub	sp, #76	; 0x4c
   b8a3e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8a40:	2400      	movs	r4, #0
    stop();
   b8a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8a44:	4606      	mov	r6, r0
   b8a46:	4617      	mov	r7, r2
    stop();
   b8a48:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8a4a:	4628      	mov	r0, r5
   b8a4c:	466b      	mov	r3, sp
   b8a4e:	4622      	mov	r2, r4
   b8a50:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8a52:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8a54:	f7ff f8aa 	bl	b7bac <netdb_getaddrinfo>
   b8a58:	4605      	mov	r5, r0
   b8a5a:	2800      	cmp	r0, #0
   b8a5c:	d163      	bne.n	b8b26 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8a5e:	9b00      	ldr	r3, [sp, #0]
   b8a60:	2b00      	cmp	r3, #0
   b8a62:	d04b      	beq.n	b8afc <_ZN9TCPClient7connectEPKctm+0xc8>
   b8a64:	695b      	ldr	r3, [r3, #20]
   b8a66:	2b00      	cmp	r3, #0
   b8a68:	d048      	beq.n	b8afc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8a6a:	a806      	add	r0, sp, #24
   b8a6c:	f7ff fb96 	bl	b819c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8a70:	9b00      	ldr	r3, [sp, #0]
   b8a72:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8a74:	7863      	ldrb	r3, [r4, #1]
   b8a76:	2b02      	cmp	r3, #2
   b8a78:	d104      	bne.n	b8a84 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8a7a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8a7c:	a806      	add	r0, sp, #24
   b8a7e:	f7ff ffbb 	bl	b89f8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8a82:	e026      	b.n	b8ad2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8a84:	2b0a      	cmp	r3, #10
   b8a86:	d124      	bne.n	b8ad2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8a88:	2211      	movs	r2, #17
   b8a8a:	4629      	mov	r1, r5
   b8a8c:	a801      	add	r0, sp, #4
   b8a8e:	f002 fb65 	bl	bb15c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8a92:	68a3      	ldr	r3, [r4, #8]
   b8a94:	2b00      	cmp	r3, #0
   b8a96:	d038      	beq.n	b8b0a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8a98:	f104 0308 	add.w	r3, r4, #8
   b8a9c:	f10d 0c04 	add.w	ip, sp, #4
   b8aa0:	3418      	adds	r4, #24
   b8aa2:	6818      	ldr	r0, [r3, #0]
   b8aa4:	6859      	ldr	r1, [r3, #4]
   b8aa6:	4662      	mov	r2, ip
   b8aa8:	c203      	stmia	r2!, {r0, r1}
   b8aaa:	3308      	adds	r3, #8
   b8aac:	42a3      	cmp	r3, r4
   b8aae:	4694      	mov	ip, r2
   b8ab0:	d1f7      	bne.n	b8aa2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8ab2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8ab4:	a901      	add	r1, sp, #4
   b8ab6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8ab8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8abc:	f7ff fb7c 	bl	b81b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8ac0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8ac4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8ac8:	ac07      	add	r4, sp, #28
   b8aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8acc:	f8dc 3000 	ldr.w	r3, [ip]
   b8ad0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8ad2:	a806      	add	r0, sp, #24
   b8ad4:	f7ff fb82 	bl	b81dc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8ad8:	b180      	cbz	r0, b8afc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b8ada:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8adc:	ad07      	add	r5, sp, #28
   b8ade:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8ae2:	4b12      	ldr	r3, [pc, #72]	; (b8b2c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8ae4:	930c      	str	r3, [sp, #48]	; 0x30
   b8ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8ae8:	ac0d      	add	r4, sp, #52	; 0x34
   b8aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8aec:	682b      	ldr	r3, [r5, #0]
   b8aee:	7023      	strb	r3, [r4, #0]
   b8af0:	463a      	mov	r2, r7
   b8af2:	4643      	mov	r3, r8
   b8af4:	a90c      	add	r1, sp, #48	; 0x30
   b8af6:	4630      	mov	r0, r6
   b8af8:	47c8      	blx	r9
   b8afa:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8afc:	9800      	ldr	r0, [sp, #0]
   b8afe:	f7ff f84d 	bl	b7b9c <netdb_freeaddrinfo>
}
   b8b02:	4628      	mov	r0, r5
   b8b04:	b013      	add	sp, #76	; 0x4c
   b8b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8b0a:	68e3      	ldr	r3, [r4, #12]
   b8b0c:	2b00      	cmp	r3, #0
   b8b0e:	d1c3      	bne.n	b8a98 <_ZN9TCPClient7connectEPKctm+0x64>
   b8b10:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8b14:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8b18:	f7ff f830 	bl	b7b7c <inet_htonl>
   b8b1c:	4581      	cmp	r9, r0
   b8b1e:	d1bb      	bne.n	b8a98 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8b20:	f104 0114 	add.w	r1, r4, #20
   b8b24:	e7aa      	b.n	b8a7c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8b26:	4625      	mov	r5, r4
   b8b28:	e7e8      	b.n	b8afc <_ZN9TCPClient7connectEPKctm+0xc8>
   b8b2a:	bf00      	nop
   b8b2c:	000c0b7c 	.word	0x000c0b7c

000b8b30 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8b30:	b538      	push	{r3, r4, r5, lr}
   b8b32:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8b34:	681a      	ldr	r2, [r3, #0]
   b8b36:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8b38:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8b3a:	da10      	bge.n	b8b5e <_ZN9TCPClient9connectedEv+0x2e>
   b8b3c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8b40:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8b44:	429a      	cmp	r2, r3
   b8b46:	d10a      	bne.n	b8b5e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8b48:	6803      	ldr	r3, [r0, #0]
   b8b4a:	691b      	ldr	r3, [r3, #16]
   b8b4c:	4798      	blx	r3
        if (!rv) {
   b8b4e:	4604      	mov	r4, r0
   b8b50:	b928      	cbnz	r0, b8b5e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8b52:	682b      	ldr	r3, [r5, #0]
   b8b54:	4628      	mov	r0, r5
   b8b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8b58:	4798      	blx	r3
        rv = available();
   b8b5a:	4620      	mov	r0, r4
}
   b8b5c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8b5e:	2001      	movs	r0, #1
   b8b60:	e7fc      	b.n	b8b5c <_ZN9TCPClient9connectedEv+0x2c>

000b8b62 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8b62:	b510      	push	{r4, lr}
   b8b64:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8b66:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8b6a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8b6e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8b70:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8b72:	d005      	beq.n	b8b80 <_ZN9TCPClient4peekEv+0x1e>
   b8b74:	6963      	ldr	r3, [r4, #20]
   b8b76:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8b7a:	4413      	add	r3, r2
   b8b7c:	7918      	ldrb	r0, [r3, #4]
}
   b8b7e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8b80:	6803      	ldr	r3, [r0, #0]
   b8b82:	691b      	ldr	r3, [r3, #16]
   b8b84:	4798      	blx	r3
   b8b86:	2800      	cmp	r0, #0
   b8b88:	d1f4      	bne.n	b8b74 <_ZN9TCPClient4peekEv+0x12>
   b8b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8b8e:	e7f6      	b.n	b8b7e <_ZN9TCPClient4peekEv+0x1c>

000b8b90 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b92:	6943      	ldr	r3, [r0, #20]
   b8b94:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b8b96:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8b9a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8b9e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8ba0:	4605      	mov	r5, r0
   b8ba2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8ba4:	d016      	beq.n	b8bd4 <_ZN9TCPClient4readEPhj+0x44>
   b8ba6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8ba8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8bac:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b8bb0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b8bb2:	42bc      	cmp	r4, r7
   b8bb4:	bf28      	it	cs
   b8bb6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b8bb8:	3304      	adds	r3, #4
   b8bba:	4622      	mov	r2, r4
   b8bbc:	4419      	add	r1, r3
   b8bbe:	4630      	mov	r0, r6
   b8bc0:	f002 fabe 	bl	bb140 <memcpy>
   b8bc4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b8bc6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b8bca:	4423      	add	r3, r4
   b8bcc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b8bd0:	4620      	mov	r0, r4
   b8bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b8bd4:	6803      	ldr	r3, [r0, #0]
   b8bd6:	691b      	ldr	r3, [r3, #16]
   b8bd8:	4798      	blx	r3
   b8bda:	2800      	cmp	r0, #0
   b8bdc:	d1e3      	bne.n	b8ba6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b8bde:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8be2:	e7f5      	b.n	b8bd0 <_ZN9TCPClient4readEPhj+0x40>

000b8be4 <_ZN9TCPClient12flush_bufferEv>:
   b8be4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b8be6:	2300      	movs	r3, #0
   b8be8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8bec:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b8bee:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b8bf2:	4770      	bx	lr

000b8bf4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8bf8:	461f      	mov	r7, r3
    stop();
   b8bfa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8bfc:	460c      	mov	r4, r1
    stop();
   b8bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8c00:	b08a      	sub	sp, #40	; 0x28
   b8c02:	4605      	mov	r5, r0
   b8c04:	4616      	mov	r6, r2
    stop();
   b8c06:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b8c08:	7d23      	ldrb	r3, [r4, #20]
   b8c0a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8c0e:	2b04      	cmp	r3, #4
   b8c10:	bf0c      	ite	eq
   b8c12:	2002      	moveq	r0, #2
   b8c14:	200a      	movne	r0, #10
   b8c16:	2206      	movs	r2, #6
   b8c18:	2101      	movs	r1, #1
   b8c1a:	f7fe fff7 	bl	b7c0c <sock_socket>
   b8c1e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8c22:	696b      	ldr	r3, [r5, #20]
   b8c24:	681b      	ldr	r3, [r3, #0]
   b8c26:	2b00      	cmp	r3, #0
   b8c28:	da08      	bge.n	b8c3c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8c2a:	682b      	ldr	r3, [r5, #0]
   b8c2c:	4628      	mov	r0, r5
   b8c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8c30:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8c32:	4798      	blx	r3
}
   b8c34:	4620      	mov	r0, r4
   b8c36:	b00a      	add	sp, #40	; 0x28
   b8c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8c3c:	4628      	mov	r0, r5
   b8c3e:	f7ff ffd1 	bl	b8be4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8c42:	b1b7      	cbz	r7, b8c72 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8c44:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8c46:	a903      	add	r1, sp, #12
   b8c48:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8c4a:	9303      	str	r3, [sp, #12]
   b8c4c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8c50:	f7fe ff84 	bl	b7b5c <if_index_to_name>
   b8c54:	2800      	cmp	r0, #0
   b8c56:	d1e8      	bne.n	b8c2a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8c58:	6968      	ldr	r0, [r5, #20]
   b8c5a:	2306      	movs	r3, #6
   b8c5c:	9300      	str	r3, [sp, #0]
   b8c5e:	6800      	ldr	r0, [r0, #0]
   b8c60:	ab03      	add	r3, sp, #12
   b8c62:	f241 020b 	movw	r2, #4107	; 0x100b
   b8c66:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8c6a:	f7fe ffa7 	bl	b7bbc <sock_setsockopt>
   b8c6e:	2800      	cmp	r0, #0
   b8c70:	d1db      	bne.n	b8c2a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8c72:	221c      	movs	r2, #28
   b8c74:	2100      	movs	r1, #0
   b8c76:	a803      	add	r0, sp, #12
   b8c78:	f002 fa70 	bl	bb15c <memset>
    if (ip.version() == 4) {
   b8c7c:	7d23      	ldrb	r3, [r4, #20]
   b8c7e:	2b04      	cmp	r3, #4
   b8c80:	d11d      	bne.n	b8cbe <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8c82:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b8c86:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8c88:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8c8c:	f7fe ff7e 	bl	b7b8c <inet_htons>
   b8c90:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8c94:	6860      	ldr	r0, [r4, #4]
   b8c96:	f7fe ff71 	bl	b7b7c <inet_htonl>
   b8c9a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8c9c:	696b      	ldr	r3, [r5, #20]
   b8c9e:	221c      	movs	r2, #28
   b8ca0:	6818      	ldr	r0, [r3, #0]
   b8ca2:	a903      	add	r1, sp, #12
   b8ca4:	f7fe ff9a 	bl	b7bdc <sock_connect>
   b8ca8:	2800      	cmp	r0, #0
   b8caa:	d1be      	bne.n	b8c2a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8cac:	3404      	adds	r4, #4
   b8cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8cb0:	696d      	ldr	r5, [r5, #20]
   b8cb2:	358c      	adds	r5, #140	; 0x8c
   b8cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8cb6:	6823      	ldr	r3, [r4, #0]
   b8cb8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b8cba:	2401      	movs	r4, #1
   b8cbc:	e7ba      	b.n	b8c34 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b8cbe:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b8cc2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b8cc4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b8cc8:	f7fe ff60 	bl	b7b8c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8ccc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b8cce:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8cd2:	1d23      	adds	r3, r4, #4
   b8cd4:	f104 0714 	add.w	r7, r4, #20
   b8cd8:	6818      	ldr	r0, [r3, #0]
   b8cda:	6859      	ldr	r1, [r3, #4]
   b8cdc:	4632      	mov	r2, r6
   b8cde:	c203      	stmia	r2!, {r0, r1}
   b8ce0:	3308      	adds	r3, #8
   b8ce2:	42bb      	cmp	r3, r7
   b8ce4:	4616      	mov	r6, r2
   b8ce6:	d1f7      	bne.n	b8cd8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b8ce8:	e7d8      	b.n	b8c9c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b8cec <_ZN9TCPClient9availableEv>:
{
   b8cec:	b530      	push	{r4, r5, lr}
   b8cee:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b8cf0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b8cf4:	b08b      	sub	sp, #44	; 0x2c
   b8cf6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b8cf8:	b12b      	cbz	r3, b8d06 <_ZN9TCPClient9availableEv+0x1a>
   b8cfa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b8cfe:	429a      	cmp	r2, r3
   b8d00:	d101      	bne.n	b8d06 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b8d02:	f7ff ff6f 	bl	b8be4 <_ZN9TCPClient12flush_bufferEv>
   b8d06:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b8d08:	6808      	ldr	r0, [r1, #0]
   b8d0a:	2800      	cmp	r0, #0
   b8d0c:	db18      	blt.n	b8d40 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b8d0e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b8d12:	2d7f      	cmp	r5, #127	; 0x7f
   b8d14:	d814      	bhi.n	b8d40 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b8d16:	3104      	adds	r1, #4
   b8d18:	2308      	movs	r3, #8
   b8d1a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b8d1e:	4429      	add	r1, r5
   b8d20:	f7fe ff64 	bl	b7bec <sock_recv>
            if (ret > 0) {
   b8d24:	2800      	cmp	r0, #0
   b8d26:	dd13      	ble.n	b8d50 <_ZN9TCPClient9availableEv+0x64>
   b8d28:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b8d2a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8d2e:	b90a      	cbnz	r2, b8d34 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8d30:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8d34:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b8d36:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8d3a:	4410      	add	r0, r2
   b8d3c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8d40:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8d42:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8d46:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8d4a:	1ac0      	subs	r0, r0, r3
   b8d4c:	b00b      	add	sp, #44	; 0x2c
   b8d4e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8d50:	f7ff f900 	bl	b7f54 <__errno>
   b8d54:	6803      	ldr	r3, [r0, #0]
   b8d56:	2b0b      	cmp	r3, #11
   b8d58:	d0f2      	beq.n	b8d40 <_ZN9TCPClient9availableEv+0x54>
   b8d5a:	f7ff f8fb 	bl	b7f54 <__errno>
   b8d5e:	6803      	ldr	r3, [r0, #0]
   b8d60:	2b0b      	cmp	r3, #11
   b8d62:	d0ed      	beq.n	b8d40 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8d64:	2320      	movs	r3, #32
   b8d66:	2500      	movs	r5, #0
   b8d68:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8d6c:	f7ff f8f2 	bl	b7f54 <__errno>
   b8d70:	6803      	ldr	r3, [r0, #0]
   b8d72:	9301      	str	r3, [sp, #4]
   b8d74:	4b08      	ldr	r3, [pc, #32]	; (b8d98 <_ZN9TCPClient9availableEv+0xac>)
   b8d76:	4909      	ldr	r1, [pc, #36]	; (b8d9c <_ZN9TCPClient9availableEv+0xb0>)
   b8d78:	9300      	str	r3, [sp, #0]
   b8d7a:	aa02      	add	r2, sp, #8
   b8d7c:	462b      	mov	r3, r5
   b8d7e:	2032      	movs	r0, #50	; 0x32
   b8d80:	f7ff f824 	bl	b7dcc <log_message>
                    sock_close(d_->sock);
   b8d84:	6963      	ldr	r3, [r4, #20]
   b8d86:	6818      	ldr	r0, [r3, #0]
   b8d88:	f7fe ff20 	bl	b7bcc <sock_close>
   b8d8c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8d92:	601a      	str	r2, [r3, #0]
   b8d94:	e7d4      	b.n	b8d40 <_ZN9TCPClient9availableEv+0x54>
   b8d96:	bf00      	nop
   b8d98:	000c0bd7 	.word	0x000c0bd7
   b8d9c:	000c0bd0 	.word	0x000c0bd0

000b8da0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8da0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b8da2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8da4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b8da6:	6818      	ldr	r0, [r3, #0]
   b8da8:	2800      	cmp	r0, #0
   b8daa:	db01      	blt.n	b8db0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8dac:	f7fe ff0e 	bl	b7bcc <sock_close>
   b8db0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b8db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8db6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b8db8:	6960      	ldr	r0, [r4, #20]
   b8dba:	2211      	movs	r2, #17
   b8dbc:	2100      	movs	r1, #0
   b8dbe:	308c      	adds	r0, #140	; 0x8c
   b8dc0:	f002 f9cc 	bl	bb15c <memset>
    flush_buffer();
   b8dc4:	4620      	mov	r0, r4
}
   b8dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b8dca:	f7ff bf0b 	b.w	b8be4 <_ZN9TCPClient12flush_bufferEv>

000b8dce <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b8dce:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b8dd0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b8dd2:	4604      	mov	r4, r0
          total(0) {
   b8dd4:	6001      	str	r1, [r0, #0]
   b8dd6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8dda:	3088      	adds	r0, #136	; 0x88
   b8ddc:	f7ff f9de 	bl	b819c <_ZN9IPAddressC1Ev>
}
   b8de0:	4620      	mov	r0, r4
   b8de2:	bd10      	pop	{r4, pc}

000b8de4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b8de4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8de6:	2300      	movs	r3, #0
   b8de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8dec:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8df0:	4a0e      	ldr	r2, [pc, #56]	; (b8e2c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b8df2:	6103      	str	r3, [r0, #16]
   b8df4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8df6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8df8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8dfa:	20ac      	movs	r0, #172	; 0xac
   b8dfc:	9101      	str	r1, [sp, #4]
   b8dfe:	f7fb f94a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8e02:	1e05      	subs	r5, r0, #0
   b8e04:	f105 060c 	add.w	r6, r5, #12
   b8e08:	d008      	beq.n	b8e1c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8e0a:	2301      	movs	r3, #1
   b8e0c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8e10:	4b07      	ldr	r3, [pc, #28]	; (b8e30 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8e12:	9901      	ldr	r1, [sp, #4]
   b8e14:	602b      	str	r3, [r5, #0]
   b8e16:	4630      	mov	r0, r6
   b8e18:	f7ff ffd9 	bl	b8dce <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8e1c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8e1e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8e22:	f7ff fedf 	bl	b8be4 <_ZN9TCPClient12flush_bufferEv>
}
   b8e26:	b002      	add	sp, #8
   b8e28:	bd70      	pop	{r4, r5, r6, pc}
   b8e2a:	bf00      	nop
   b8e2c:	000c0c0c 	.word	0x000c0c0c
   b8e30:	000c0bf0 	.word	0x000c0bf0

000b8e34 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8e34:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8e36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b8e3a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8e3c:	f7ff ffd2 	bl	b8de4 <_ZN9TCPClientC1Ei>
}
   b8e40:	4620      	mov	r0, r4
   b8e42:	bd10      	pop	{r4, pc}

000b8e44 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8e44:	b510      	push	{r4, lr}
   b8e46:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8e48:	6800      	ldr	r0, [r0, #0]
   b8e4a:	2800      	cmp	r0, #0
   b8e4c:	db01      	blt.n	b8e52 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b8e4e:	f7fe febd 	bl	b7bcc <sock_close>
    }
}
   b8e52:	4620      	mov	r0, r4
   b8e54:	bd10      	pop	{r4, pc}

000b8e56 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8e56:	300c      	adds	r0, #12
   b8e58:	f7ff bff4 	b.w	b8e44 <_ZN9TCPClient4DataD1Ev>

000b8e5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8e5c:	4b02      	ldr	r3, [pc, #8]	; (b8e68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8e5e:	681a      	ldr	r2, [r3, #0]
   b8e60:	4b02      	ldr	r3, [pc, #8]	; (b8e6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8e62:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8e64:	4770      	bx	lr
   b8e66:	bf00      	nop
   b8e68:	2003e560 	.word	0x2003e560
   b8e6c:	2003e6fc 	.word	0x2003e6fc

000b8e70 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8e70:	4770      	bx	lr

000b8e72 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8e72:	7441      	strb	r1, [r0, #17]
}
   b8e74:	4770      	bx	lr

000b8e76 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8e76:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8e78:	7c00      	ldrb	r0, [r0, #16]
   b8e7a:	f7fe ff4f 	bl	b7d1c <hal_usart_available_data_for_write>
}
   b8e7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8e82:	bd08      	pop	{r3, pc}

000b8e84 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8e84:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8e86:	7c00      	ldrb	r0, [r0, #16]
   b8e88:	f7fe ff20 	bl	b7ccc <hal_usart_available>
}
   b8e8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8e90:	bd08      	pop	{r3, pc}

000b8e92 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8e92:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8e94:	7c00      	ldrb	r0, [r0, #16]
   b8e96:	f7fe ff29 	bl	b7cec <hal_usart_peek>
}
   b8e9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8e9e:	bd08      	pop	{r3, pc}

000b8ea0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8ea0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8ea2:	7c00      	ldrb	r0, [r0, #16]
   b8ea4:	f7fe ff1a 	bl	b7cdc <hal_usart_read>
}
   b8ea8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8eac:	bd08      	pop	{r3, pc}

000b8eae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8eae:	7c00      	ldrb	r0, [r0, #16]
   b8eb0:	f7fe bf24 	b.w	b7cfc <hal_usart_flush>

000b8eb4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8eb6:	7c45      	ldrb	r5, [r0, #17]
{
   b8eb8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8eba:	b12d      	cbz	r5, b8ec8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8ebc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8ebe:	b003      	add	sp, #12
   b8ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8ec4:	f7fe befa 	b.w	b7cbc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8ec8:	7c00      	ldrb	r0, [r0, #16]
   b8eca:	9101      	str	r1, [sp, #4]
   b8ecc:	f7fe ff26 	bl	b7d1c <hal_usart_available_data_for_write>
   b8ed0:	2800      	cmp	r0, #0
   b8ed2:	9901      	ldr	r1, [sp, #4]
   b8ed4:	dcf2      	bgt.n	b8ebc <_ZN11USARTSerial5writeEh+0x8>
}
   b8ed6:	4628      	mov	r0, r5
   b8ed8:	b003      	add	sp, #12
   b8eda:	bd30      	pop	{r4, r5, pc}

000b8edc <_ZN11USARTSerialD0Ev>:
   b8edc:	b510      	push	{r4, lr}
   b8ede:	2114      	movs	r1, #20
   b8ee0:	4604      	mov	r4, r0
   b8ee2:	f7fb f8dc 	bl	b409e <_ZdlPvj>
   b8ee6:	4620      	mov	r0, r4
   b8ee8:	bd10      	pop	{r4, pc}
	...

000b8eec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8eec:	b510      	push	{r4, lr}
   b8eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8ef2:	4604      	mov	r4, r0
   b8ef4:	4608      	mov	r0, r1
   b8ef6:	4611      	mov	r1, r2
   b8ef8:	2200      	movs	r2, #0
   b8efa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8efe:	4b04      	ldr	r3, [pc, #16]	; (b8f10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8f00:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8f02:	2301      	movs	r3, #1
  _serial = serial;
   b8f04:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8f06:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8f08:	f7fe ff10 	bl	b7d2c <hal_usart_init_ex>
}
   b8f0c:	4620      	mov	r0, r4
   b8f0e:	bd10      	pop	{r4, pc}
   b8f10:	000c0c74 	.word	0x000c0c74

000b8f14 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8f14:	7441      	strb	r1, [r0, #17]
}
   b8f16:	4770      	bx	lr

000b8f18 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8f18:	4770      	bx	lr

000b8f1a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8f1a:	4770      	bx	lr

000b8f1c <_ZN9USBSerial4readEv>:
{
   b8f1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8f1e:	2100      	movs	r1, #0
   b8f20:	7c00      	ldrb	r0, [r0, #16]
   b8f22:	f7fe ff2b 	bl	b7d7c <HAL_USB_USART_Receive_Data>
}
   b8f26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8f2a:	bd08      	pop	{r3, pc}

000b8f2c <_ZN9USBSerial4peekEv>:
{
   b8f2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8f2e:	2101      	movs	r1, #1
   b8f30:	7c00      	ldrb	r0, [r0, #16]
   b8f32:	f7fe ff23 	bl	b7d7c <HAL_USB_USART_Receive_Data>
}
   b8f36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8f3a:	bd08      	pop	{r3, pc}

000b8f3c <_ZN9USBSerial17availableForWriteEv>:
{
   b8f3c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8f3e:	7c00      	ldrb	r0, [r0, #16]
   b8f40:	f7fe ff14 	bl	b7d6c <HAL_USB_USART_Available_Data_For_Write>
}
   b8f44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8f48:	bd08      	pop	{r3, pc}

000b8f4a <_ZN9USBSerial9availableEv>:
{
   b8f4a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8f4c:	7c00      	ldrb	r0, [r0, #16]
   b8f4e:	f7fe ff05 	bl	b7d5c <HAL_USB_USART_Available_Data>
}
   b8f52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8f56:	bd08      	pop	{r3, pc}

000b8f58 <_ZN9USBSerial5writeEh>:
{
   b8f58:	b513      	push	{r0, r1, r4, lr}
   b8f5a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8f5c:	7c00      	ldrb	r0, [r0, #16]
{
   b8f5e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8f60:	f7fe ff04 	bl	b7d6c <HAL_USB_USART_Available_Data_For_Write>
   b8f64:	2800      	cmp	r0, #0
   b8f66:	9901      	ldr	r1, [sp, #4]
   b8f68:	dc01      	bgt.n	b8f6e <_ZN9USBSerial5writeEh+0x16>
   b8f6a:	7c60      	ldrb	r0, [r4, #17]
   b8f6c:	b120      	cbz	r0, b8f78 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8f6e:	7c20      	ldrb	r0, [r4, #16]
   b8f70:	f7fe ff0c 	bl	b7d8c <HAL_USB_USART_Send_Data>
   b8f74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8f78:	b002      	add	sp, #8
   b8f7a:	bd10      	pop	{r4, pc}

000b8f7c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8f7c:	7c00      	ldrb	r0, [r0, #16]
   b8f7e:	f7fe bf0d 	b.w	b7d9c <HAL_USB_USART_Flush_Data>

000b8f82 <_ZN9USBSerialD0Ev>:
   b8f82:	b510      	push	{r4, lr}
   b8f84:	2114      	movs	r1, #20
   b8f86:	4604      	mov	r4, r0
   b8f88:	f7fb f889 	bl	b409e <_ZdlPvj>
   b8f8c:	4620      	mov	r0, r4
   b8f8e:	bd10      	pop	{r4, pc}

000b8f90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8f90:	b510      	push	{r4, lr}
   b8f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8f96:	4604      	mov	r4, r0
   b8f98:	4608      	mov	r0, r1
   b8f9a:	2100      	movs	r1, #0
   b8f9c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8fa0:	4b04      	ldr	r3, [pc, #16]	; (b8fb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8fa2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8fa4:	2301      	movs	r3, #1
  _serial = serial;
   b8fa6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8fa8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8faa:	4611      	mov	r1, r2
   b8fac:	f7fe fec6 	bl	b7d3c <HAL_USB_USART_Init>
}
   b8fb0:	4620      	mov	r0, r4
   b8fb2:	bd10      	pop	{r4, pc}
   b8fb4:	000c0ca4 	.word	0x000c0ca4

000b8fb8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8fb8:	7c00      	ldrb	r0, [r0, #16]
   b8fba:	2200      	movs	r2, #0
   b8fbc:	f7fe bec6 	b.w	b7d4c <HAL_USB_USART_Begin>

000b8fc0 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b8fc0:	7c00      	ldrb	r0, [r0, #16]
   b8fc2:	f7fe bef3 	b.w	b7dac <HAL_USB_USART_Is_Connected>

000b8fc6 <_Z19acquireSerialBufferv>:
{
   b8fc6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8fc8:	2214      	movs	r2, #20
{
   b8fca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8fcc:	2100      	movs	r1, #0
   b8fce:	f002 f8c5 	bl	bb15c <memset>
}
   b8fd2:	4620      	mov	r0, r4
   b8fd4:	bd10      	pop	{r4, pc}
	...

000b8fd8 <_Z16_fetch_usbserialv>:
{
   b8fd8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8fda:	4c0f      	ldr	r4, [pc, #60]	; (b9018 <_Z16_fetch_usbserialv+0x40>)
{
   b8fdc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8fde:	a803      	add	r0, sp, #12
   b8fe0:	f7ff fff1 	bl	b8fc6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8fe4:	7821      	ldrb	r1, [r4, #0]
   b8fe6:	f3bf 8f5b 	dmb	ish
   b8fea:	f011 0101 	ands.w	r1, r1, #1
   b8fee:	d10f      	bne.n	b9010 <_Z16_fetch_usbserialv+0x38>
   b8ff0:	4620      	mov	r0, r4
   b8ff2:	9101      	str	r1, [sp, #4]
   b8ff4:	f7fb f862 	bl	b40bc <__cxa_guard_acquire>
   b8ff8:	9901      	ldr	r1, [sp, #4]
   b8ffa:	b148      	cbz	r0, b9010 <_Z16_fetch_usbserialv+0x38>
   b8ffc:	aa03      	add	r2, sp, #12
   b8ffe:	4807      	ldr	r0, [pc, #28]	; (b901c <_Z16_fetch_usbserialv+0x44>)
   b9000:	f7ff ffc6 	bl	b8f90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9004:	4620      	mov	r0, r4
   b9006:	f7fb f85e 	bl	b40c6 <__cxa_guard_release>
   b900a:	4805      	ldr	r0, [pc, #20]	; (b9020 <_Z16_fetch_usbserialv+0x48>)
   b900c:	f002 f892 	bl	bb134 <atexit>
	return _usbserial;
}
   b9010:	4802      	ldr	r0, [pc, #8]	; (b901c <_Z16_fetch_usbserialv+0x44>)
   b9012:	b008      	add	sp, #32
   b9014:	bd10      	pop	{r4, pc}
   b9016:	bf00      	nop
   b9018:	2003e700 	.word	0x2003e700
   b901c:	2003e704 	.word	0x2003e704
   b9020:	000b8f19 	.word	0x000b8f19

000b9024 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9024:	2200      	movs	r2, #0
   b9026:	6840      	ldr	r0, [r0, #4]
   b9028:	4611      	mov	r1, r2
   b902a:	f7fe bf23 	b.w	b7e74 <network_ready>

000b902e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b902e:	2200      	movs	r2, #0
   b9030:	6840      	ldr	r0, [r0, #4]
   b9032:	4611      	mov	r1, r2
   b9034:	f7fe bf3e 	b.w	b7eb4 <network_listening>

000b9038 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9038:	2200      	movs	r2, #0
   b903a:	6840      	ldr	r0, [r0, #4]
   b903c:	4611      	mov	r1, r2
   b903e:	f7fe bf51 	b.w	b7ee4 <network_get_listen_timeout>

000b9042 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9042:	6840      	ldr	r0, [r0, #4]
   b9044:	2200      	movs	r2, #0
   b9046:	f7fe bf45 	b.w	b7ed4 <network_set_listen_timeout>

000b904a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b904a:	6840      	ldr	r0, [r0, #4]
   b904c:	2200      	movs	r2, #0
   b904e:	f081 0101 	eor.w	r1, r1, #1
   b9052:	f7fe bf27 	b.w	b7ea4 <network_listen>

000b9056 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9056:	2300      	movs	r3, #0
   b9058:	6840      	ldr	r0, [r0, #4]
   b905a:	461a      	mov	r2, r3
   b905c:	4619      	mov	r1, r3
   b905e:	f7fe bf19 	b.w	b7e94 <network_off>

000b9062 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9062:	2300      	movs	r3, #0
   b9064:	6840      	ldr	r0, [r0, #4]
   b9066:	461a      	mov	r2, r3
   b9068:	4619      	mov	r1, r3
   b906a:	f7fe bf0b 	b.w	b7e84 <network_on>

000b906e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b906e:	2200      	movs	r2, #0
   b9070:	6840      	ldr	r0, [r0, #4]
   b9072:	4611      	mov	r1, r2
   b9074:	f7fe beee 	b.w	b7e54 <network_connecting>

000b9078 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9078:	6840      	ldr	r0, [r0, #4]
   b907a:	2200      	movs	r2, #0
   b907c:	2102      	movs	r1, #2
   b907e:	f7fe bef1 	b.w	b7e64 <network_disconnect>

000b9082 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9082:	2300      	movs	r3, #0
   b9084:	6840      	ldr	r0, [r0, #4]
   b9086:	461a      	mov	r2, r3
   b9088:	f7fe bedc 	b.w	b7e44 <network_connect>

000b908c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b908c:	4b02      	ldr	r3, [pc, #8]	; (b9098 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b908e:	2204      	movs	r2, #4
   b9090:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9092:	4a02      	ldr	r2, [pc, #8]	; (b909c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9094:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9096:	4770      	bx	lr
   b9098:	2003e718 	.word	0x2003e718
   b909c:	000c0cd4 	.word	0x000c0cd4

000b90a0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b90a0:	b510      	push	{r4, lr}
   b90a2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b90a4:	f002 f8e0 	bl	bb268 <strlen>
   b90a8:	3801      	subs	r0, #1
   b90aa:	1823      	adds	r3, r4, r0
   b90ac:	4620      	mov	r0, r4
	while(i<j){
   b90ae:	4283      	cmp	r3, r0
   b90b0:	d906      	bls.n	b90c0 <_Z11str_reversePc+0x20>
		c = *i;
   b90b2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b90b4:	7819      	ldrb	r1, [r3, #0]
   b90b6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b90ba:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b90be:	e7f6      	b.n	b90ae <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b90c0:	bd10      	pop	{r4, pc}

000b90c2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b90c2:	b570      	push	{r4, r5, r6, lr}
   b90c4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b90c6:	1e91      	subs	r1, r2, #2
   b90c8:	2922      	cmp	r1, #34	; 0x22
   b90ca:	d81d      	bhi.n	b9108 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b90cc:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b90ce:	b930      	cbnz	r0, b90de <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b90d0:	4423      	add	r3, r4
            *ptr++ = '0';
   b90d2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b90d4:	429d      	cmp	r5, r3
   b90d6:	d210      	bcs.n	b90fa <ultoa+0x38>
            *ptr++ = '0';
   b90d8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b90dc:	e7fa      	b.n	b90d4 <ultoa+0x12>
            result.quot = a/radix;
   b90de:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b90e2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b90e6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b90e8:	2809      	cmp	r0, #9
                *ptr += '0';
   b90ea:	bf94      	ite	ls
   b90ec:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b90ee:	3157      	addhi	r1, #87	; 0x57
   b90f0:	b2c9      	uxtb	r1, r1
   b90f2:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b90f6:	4630      	mov	r0, r6
	while(a){
   b90f8:	e7e9      	b.n	b90ce <ultoa+0xc>

	*ptr = '\0';
   b90fa:	2300      	movs	r3, #0
	str_reverse(buffer);
   b90fc:	4620      	mov	r0, r4
	*ptr = '\0';
   b90fe:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b9100:	f7ff ffce 	bl	b90a0 <_Z11str_reversePc>
	return buffer;
   b9104:	4620      	mov	r0, r4
}
   b9106:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b9108:	2000      	movs	r0, #0
   b910a:	e7fc      	b.n	b9106 <ultoa+0x44>

000b910c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b910c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b910e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9110:	460c      	mov	r4, r1
   b9112:	4615      	mov	r5, r2
	if(a<0){
   b9114:	da0e      	bge.n	b9134 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b911a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b911e:	bf14      	ite	ne
   b9120:	4258      	negne	r0, r3
   b9122:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9124:	2301      	movs	r3, #1
		*buffer = '-';
   b9126:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b9128:	462a      	mov	r2, r5
   b912a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b912c:	f7ff ffc9 	bl	b90c2 <ultoa>
	}
	return buffer;
}
   b9130:	4620      	mov	r0, r4
   b9132:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9134:	2301      	movs	r3, #1
   b9136:	e7f9      	b.n	b912c <itoa+0x20>

000b9138 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9138:	4b01      	ldr	r3, [pc, #4]	; (b9140 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b913a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b913c:	4770      	bx	lr
   b913e:	bf00      	nop
   b9140:	2003e568 	.word	0x2003e568

000b9144 <serialEventRun>:
{
   b9144:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9146:	4b0b      	ldr	r3, [pc, #44]	; (b9174 <serialEventRun+0x30>)
   b9148:	b143      	cbz	r3, b915c <serialEventRun+0x18>
   b914a:	f7ff ff45 	bl	b8fd8 <_Z16_fetch_usbserialv>
   b914e:	6803      	ldr	r3, [r0, #0]
   b9150:	691b      	ldr	r3, [r3, #16]
   b9152:	4798      	blx	r3
   b9154:	2800      	cmp	r0, #0
   b9156:	dd01      	ble.n	b915c <serialEventRun+0x18>
        serialEvent();
   b9158:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b915c:	4b06      	ldr	r3, [pc, #24]	; (b9178 <serialEventRun+0x34>)
   b915e:	b143      	cbz	r3, b9172 <serialEventRun+0x2e>
   b9160:	f000 f96c 	bl	b943c <_Z22__fetch_global_Serial1v>
   b9164:	6803      	ldr	r3, [r0, #0]
   b9166:	691b      	ldr	r3, [r3, #16]
   b9168:	4798      	blx	r3
   b916a:	2800      	cmp	r0, #0
   b916c:	dd01      	ble.n	b9172 <serialEventRun+0x2e>
        serialEvent1();
   b916e:	f3af 8000 	nop.w
}
   b9172:	bd08      	pop	{r3, pc}
	...

000b917c <_post_loop>:
{
   b917c:	b508      	push	{r3, lr}
	serialEventRun();
   b917e:	f7ff ffe1 	bl	b9144 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9182:	f7fe fc63 	bl	b7a4c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9186:	4b01      	ldr	r3, [pc, #4]	; (b918c <_post_loop+0x10>)
   b9188:	6018      	str	r0, [r3, #0]
}
   b918a:	bd08      	pop	{r3, pc}
   b918c:	2003e728 	.word	0x2003e728

000b9190 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9190:	4805      	ldr	r0, [pc, #20]	; (b91a8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b9192:	4a06      	ldr	r2, [pc, #24]	; (b91ac <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9194:	4906      	ldr	r1, [pc, #24]	; (b91b0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9196:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9198:	1a12      	subs	r2, r2, r0
   b919a:	f001 ffd1 	bl	bb140 <memcpy>
    __backup_sram_signature = signature;
   b919e:	4b05      	ldr	r3, [pc, #20]	; (b91b4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b91a0:	4a05      	ldr	r2, [pc, #20]	; (b91b8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b91a2:	601a      	str	r2, [r3, #0]
}
   b91a4:	bd08      	pop	{r3, pc}
   b91a6:	bf00      	nop
   b91a8:	2003f400 	.word	0x2003f400
   b91ac:	2003f404 	.word	0x2003f404
   b91b0:	000c0ed4 	.word	0x000c0ed4
   b91b4:	2003f400 	.word	0x2003f400
   b91b8:	9a271c1e 	.word	0x9a271c1e

000b91bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b91bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b91be:	2300      	movs	r3, #0
   b91c0:	9300      	str	r3, [sp, #0]
   b91c2:	461a      	mov	r2, r3
   b91c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b91c8:	f7fe fe22 	bl	b7e10 <system_ctrl_set_result>
}
   b91cc:	b003      	add	sp, #12
   b91ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b91d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b91d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b91d6:	8843      	ldrh	r3, [r0, #2]
   b91d8:	2b0a      	cmp	r3, #10
   b91da:	d008      	beq.n	b91ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b91dc:	2b50      	cmp	r3, #80	; 0x50
   b91de:	d10b      	bne.n	b91f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b91e0:	4b09      	ldr	r3, [pc, #36]	; (b9208 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b91e2:	681b      	ldr	r3, [r3, #0]
   b91e4:	b14b      	cbz	r3, b91fa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b91e6:	b003      	add	sp, #12
   b91e8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b91ec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b91ee:	f7ff ffe5 	bl	b91bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b91f2:	b003      	add	sp, #12
   b91f4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b91f8:	2300      	movs	r3, #0
   b91fa:	9300      	str	r3, [sp, #0]
   b91fc:	461a      	mov	r2, r3
   b91fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9202:	f7fe fe05 	bl	b7e10 <system_ctrl_set_result>
}
   b9206:	e7f4      	b.n	b91f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9208:	2003e724 	.word	0x2003e724

000b920c <module_user_init_hook>:
{
   b920c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b920e:	4812      	ldr	r0, [pc, #72]	; (b9258 <module_user_init_hook+0x4c>)
   b9210:	2100      	movs	r1, #0
   b9212:	f7fe feaf 	bl	b7f74 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9216:	4b11      	ldr	r3, [pc, #68]	; (b925c <module_user_init_hook+0x50>)
   b9218:	681a      	ldr	r2, [r3, #0]
   b921a:	4b11      	ldr	r3, [pc, #68]	; (b9260 <module_user_init_hook+0x54>)
   b921c:	429a      	cmp	r2, r3
   b921e:	4b11      	ldr	r3, [pc, #68]	; (b9264 <module_user_init_hook+0x58>)
   b9220:	bf0c      	ite	eq
   b9222:	2201      	moveq	r2, #1
   b9224:	2200      	movne	r2, #0
   b9226:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9228:	d001      	beq.n	b922e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b922a:	f7ff ffb1 	bl	b9190 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b922e:	f7fe fbf5 	bl	b7a1c <HAL_RNG_GetRandomNumber>
   b9232:	4604      	mov	r4, r0
    srand(seed);
   b9234:	f001 ff9a 	bl	bb16c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9238:	4b0b      	ldr	r3, [pc, #44]	; (b9268 <module_user_init_hook+0x5c>)
   b923a:	b113      	cbz	r3, b9242 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b923c:	4620      	mov	r0, r4
   b923e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9242:	2100      	movs	r1, #0
   b9244:	4808      	ldr	r0, [pc, #32]	; (b9268 <module_user_init_hook+0x5c>)
   b9246:	f7fe fdf5 	bl	b7e34 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b924a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b924e:	4807      	ldr	r0, [pc, #28]	; (b926c <module_user_init_hook+0x60>)
   b9250:	2100      	movs	r1, #0
   b9252:	f7fe bdd3 	b.w	b7dfc <system_ctrl_set_app_request_handler>
   b9256:	bf00      	nop
   b9258:	000b9139 	.word	0x000b9139
   b925c:	2003f400 	.word	0x2003f400
   b9260:	9a271c1e 	.word	0x9a271c1e
   b9264:	2003e720 	.word	0x2003e720
   b9268:	00000000 	.word	0x00000000
   b926c:	000b91d5 	.word	0x000b91d5

000b9270 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9270:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b9272:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9274:	d902      	bls.n	b927c <pinAvailable+0xc>
    return false;
   b9276:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9278:	b002      	add	sp, #8
   b927a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b927c:	f1a0 030b 	sub.w	r3, r0, #11
   b9280:	2b02      	cmp	r3, #2
   b9282:	d81a      	bhi.n	b92ba <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9284:	4c17      	ldr	r4, [pc, #92]	; (b92e4 <pinAvailable+0x74>)
   b9286:	7821      	ldrb	r1, [r4, #0]
   b9288:	f3bf 8f5b 	dmb	ish
   b928c:	f011 0101 	ands.w	r1, r1, #1
   b9290:	d10b      	bne.n	b92aa <pinAvailable+0x3a>
   b9292:	4620      	mov	r0, r4
   b9294:	9101      	str	r1, [sp, #4]
   b9296:	f7fa ff11 	bl	b40bc <__cxa_guard_acquire>
   b929a:	9901      	ldr	r1, [sp, #4]
   b929c:	b128      	cbz	r0, b92aa <pinAvailable+0x3a>
   b929e:	4812      	ldr	r0, [pc, #72]	; (b92e8 <pinAvailable+0x78>)
   b92a0:	f7ff f936 	bl	b8510 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b92a4:	4620      	mov	r0, r4
   b92a6:	f7fa ff0e 	bl	b40c6 <__cxa_guard_release>
   b92aa:	4b0f      	ldr	r3, [pc, #60]	; (b92e8 <pinAvailable+0x78>)
   b92ac:	7818      	ldrb	r0, [r3, #0]
   b92ae:	f7fe fce5 	bl	b7c7c <hal_spi_is_enabled>
   b92b2:	2800      	cmp	r0, #0
   b92b4:	d1df      	bne.n	b9276 <pinAvailable+0x6>
  return true; // 'pin' is available
   b92b6:	2001      	movs	r0, #1
   b92b8:	e7de      	b.n	b9278 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b92ba:	2801      	cmp	r0, #1
   b92bc:	d809      	bhi.n	b92d2 <pinAvailable+0x62>
   b92be:	f000 f87d 	bl	b93bc <_Z19__fetch_global_Wirev>
   b92c2:	2100      	movs	r1, #0
   b92c4:	7c00      	ldrb	r0, [r0, #16]
   b92c6:	f7fe fc31 	bl	b7b2c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b92ca:	f080 0001 	eor.w	r0, r0, #1
   b92ce:	b2c0      	uxtb	r0, r0
   b92d0:	e7d2      	b.n	b9278 <pinAvailable+0x8>
   b92d2:	3809      	subs	r0, #9
   b92d4:	2801      	cmp	r0, #1
   b92d6:	d8ee      	bhi.n	b92b6 <pinAvailable+0x46>
   b92d8:	f000 f8b0 	bl	b943c <_Z22__fetch_global_Serial1v>
   b92dc:	7c00      	ldrb	r0, [r0, #16]
   b92de:	f7fe fd15 	bl	b7d0c <hal_usart_is_enabled>
   b92e2:	e7f2      	b.n	b92ca <pinAvailable+0x5a>
   b92e4:	2003e6b8 	.word	0x2003e6b8
   b92e8:	2003e6bc 	.word	0x2003e6bc

000b92ec <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b92ec:	2823      	cmp	r0, #35	; 0x23
{
   b92ee:	b538      	push	{r3, r4, r5, lr}
   b92f0:	4604      	mov	r4, r0
   b92f2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b92f4:	d80a      	bhi.n	b930c <pinMode+0x20>
   b92f6:	29ff      	cmp	r1, #255	; 0xff
   b92f8:	d008      	beq.n	b930c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b92fa:	f7ff ffb9 	bl	b9270 <pinAvailable>
   b92fe:	b128      	cbz	r0, b930c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9300:	4629      	mov	r1, r5
   b9302:	4620      	mov	r0, r4
}
   b9304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9308:	f7fe bbb8 	b.w	b7a7c <HAL_Pin_Mode>
}
   b930c:	bd38      	pop	{r3, r4, r5, pc}

000b930e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b930e:	b538      	push	{r3, r4, r5, lr}
   b9310:	4604      	mov	r4, r0
   b9312:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9314:	f7fe fbba 	bl	b7a8c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9318:	28ff      	cmp	r0, #255	; 0xff
   b931a:	d010      	beq.n	b933e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b931c:	2806      	cmp	r0, #6
   b931e:	d804      	bhi.n	b932a <digitalWrite+0x1c>
   b9320:	234d      	movs	r3, #77	; 0x4d
   b9322:	fa23 f000 	lsr.w	r0, r3, r0
   b9326:	07c3      	lsls	r3, r0, #31
   b9328:	d409      	bmi.n	b933e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b932a:	4620      	mov	r0, r4
   b932c:	f7ff ffa0 	bl	b9270 <pinAvailable>
   b9330:	b128      	cbz	r0, b933e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b9332:	4629      	mov	r1, r5
   b9334:	4620      	mov	r0, r4
}
   b9336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b933a:	f7fe bbaf 	b.w	b7a9c <HAL_GPIO_Write>
}
   b933e:	bd38      	pop	{r3, r4, r5, pc}

000b9340 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b9340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9344:	4690      	mov	r8, r2
   b9346:	461f      	mov	r7, r3
   b9348:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b934a:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b934c:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b934e:	f1c4 0107 	rsb	r1, r4, #7
   b9352:	f1b8 0f00 	cmp.w	r8, #0
   b9356:	d112      	bne.n	b937e <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b9358:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b935c:	f001 0101 	and.w	r1, r1, #1
   b9360:	4630      	mov	r0, r6
   b9362:	f7ff ffd4 	bl	b930e <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b9366:	2101      	movs	r1, #1
   b9368:	4628      	mov	r0, r5
   b936a:	f7ff ffd0 	bl	b930e <digitalWrite>
    digitalWrite(clockPin, LOW);
   b936e:	2100      	movs	r1, #0
   b9370:	4628      	mov	r0, r5
   b9372:	f7ff ffcc 	bl	b930e <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b9376:	3c01      	subs	r4, #1
   b9378:	d2e9      	bcs.n	b934e <shiftOut+0xe>
  }
}
   b937a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b937e:	fa47 f104 	asr.w	r1, r7, r4
   b9382:	e7eb      	b.n	b935c <shiftOut+0x1c>

000b9384 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9384:	4770      	bx	lr
	...

000b9388 <_Z17acquireWireBufferv>:
{
   b9388:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b938a:	4b0a      	ldr	r3, [pc, #40]	; (b93b4 <_Z17acquireWireBufferv+0x2c>)
   b938c:	6003      	str	r3, [r0, #0]
   b938e:	2301      	movs	r3, #1
{
   b9390:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9392:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9394:	4908      	ldr	r1, [pc, #32]	; (b93b8 <_Z17acquireWireBufferv+0x30>)
   b9396:	2020      	movs	r0, #32
   b9398:	f000 f874 	bl	b9484 <_ZnajRKSt9nothrow_t>
	};
   b939c:	2520      	movs	r5, #32
   b939e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b93a0:	4905      	ldr	r1, [pc, #20]	; (b93b8 <_Z17acquireWireBufferv+0x30>)
	};
   b93a2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b93a4:	4628      	mov	r0, r5
   b93a6:	f000 f86d 	bl	b9484 <_ZnajRKSt9nothrow_t>
	};
   b93aa:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b93ae:	4620      	mov	r0, r4
   b93b0:	bd38      	pop	{r3, r4, r5, pc}
   b93b2:	bf00      	nop
   b93b4:	00010018 	.word	0x00010018
   b93b8:	000c0d08 	.word	0x000c0d08

000b93bc <_Z19__fetch_global_Wirev>:
{
   b93bc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b93be:	4d0e      	ldr	r5, [pc, #56]	; (b93f8 <_Z19__fetch_global_Wirev+0x3c>)
   b93c0:	7829      	ldrb	r1, [r5, #0]
   b93c2:	f3bf 8f5b 	dmb	ish
   b93c6:	f011 0401 	ands.w	r4, r1, #1
{
   b93ca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b93cc:	d111      	bne.n	b93f2 <_Z19__fetch_global_Wirev+0x36>
   b93ce:	4628      	mov	r0, r5
   b93d0:	f7fa fe74 	bl	b40bc <__cxa_guard_acquire>
   b93d4:	b168      	cbz	r0, b93f2 <_Z19__fetch_global_Wirev+0x36>
   b93d6:	4668      	mov	r0, sp
   b93d8:	f7ff ffd6 	bl	b9388 <_Z17acquireWireBufferv>
   b93dc:	466a      	mov	r2, sp
   b93de:	4621      	mov	r1, r4
   b93e0:	4806      	ldr	r0, [pc, #24]	; (b93fc <_Z19__fetch_global_Wirev+0x40>)
   b93e2:	f7fe fe45 	bl	b8070 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b93e6:	4628      	mov	r0, r5
   b93e8:	f7fa fe6d 	bl	b40c6 <__cxa_guard_release>
   b93ec:	4804      	ldr	r0, [pc, #16]	; (b9400 <_Z19__fetch_global_Wirev+0x44>)
   b93ee:	f001 fea1 	bl	bb134 <atexit>
	return wire;
}
   b93f2:	4802      	ldr	r0, [pc, #8]	; (b93fc <_Z19__fetch_global_Wirev+0x40>)
   b93f4:	b007      	add	sp, #28
   b93f6:	bd30      	pop	{r4, r5, pc}
   b93f8:	2003e72c 	.word	0x2003e72c
   b93fc:	2003e730 	.word	0x2003e730
   b9400:	000b9385 	.word	0x000b9385

000b9404 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9404:	4770      	bx	lr
	...

000b9408 <_Z20acquireSerial1Bufferv>:
{
   b9408:	b538      	push	{r3, r4, r5, lr}
   b940a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b940c:	2514      	movs	r5, #20
   b940e:	462a      	mov	r2, r5
   b9410:	2100      	movs	r1, #0
   b9412:	f001 fea3 	bl	bb15c <memset>
   b9416:	8025      	strh	r5, [r4, #0]
   b9418:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b941a:	4907      	ldr	r1, [pc, #28]	; (b9438 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b941c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b941e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9420:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9422:	f000 f82f 	bl	b9484 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9426:	4904      	ldr	r1, [pc, #16]	; (b9438 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9428:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b942a:	4628      	mov	r0, r5
   b942c:	f000 f82a 	bl	b9484 <_ZnajRKSt9nothrow_t>
    };
   b9430:	60e0      	str	r0, [r4, #12]
}
   b9432:	4620      	mov	r0, r4
   b9434:	bd38      	pop	{r3, r4, r5, pc}
   b9436:	bf00      	nop
   b9438:	000c0d08 	.word	0x000c0d08

000b943c <_Z22__fetch_global_Serial1v>:
{
   b943c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b943e:	4d0e      	ldr	r5, [pc, #56]	; (b9478 <_Z22__fetch_global_Serial1v+0x3c>)
   b9440:	7829      	ldrb	r1, [r5, #0]
   b9442:	f3bf 8f5b 	dmb	ish
   b9446:	f011 0401 	ands.w	r4, r1, #1
{
   b944a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b944c:	d111      	bne.n	b9472 <_Z22__fetch_global_Serial1v+0x36>
   b944e:	4628      	mov	r0, r5
   b9450:	f7fa fe34 	bl	b40bc <__cxa_guard_acquire>
   b9454:	b168      	cbz	r0, b9472 <_Z22__fetch_global_Serial1v+0x36>
   b9456:	a801      	add	r0, sp, #4
   b9458:	f7ff ffd6 	bl	b9408 <_Z20acquireSerial1Bufferv>
   b945c:	aa01      	add	r2, sp, #4
   b945e:	4621      	mov	r1, r4
   b9460:	4806      	ldr	r0, [pc, #24]	; (b947c <_Z22__fetch_global_Serial1v+0x40>)
   b9462:	f7ff fd43 	bl	b8eec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9466:	4628      	mov	r0, r5
   b9468:	f7fa fe2d 	bl	b40c6 <__cxa_guard_release>
   b946c:	4804      	ldr	r0, [pc, #16]	; (b9480 <_Z22__fetch_global_Serial1v+0x44>)
   b946e:	f001 fe61 	bl	bb134 <atexit>
    return serial1;
}
   b9472:	4802      	ldr	r0, [pc, #8]	; (b947c <_Z22__fetch_global_Serial1v+0x40>)
   b9474:	b007      	add	sp, #28
   b9476:	bd30      	pop	{r4, r5, pc}
   b9478:	2003e744 	.word	0x2003e744
   b947c:	2003e748 	.word	0x2003e748
   b9480:	000b9405 	.word	0x000b9405

000b9484 <_ZnajRKSt9nothrow_t>:
   b9484:	f7fa be09 	b.w	b409a <_Znaj>

000b9488 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9488:	4901      	ldr	r1, [pc, #4]	; (b9490 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b948a:	f000 b8f9 	b.w	b9680 <_ZNKSt9type_infoeqERKS_>
   b948e:	bf00      	nop
   b9490:	000c0d24 	.word	0x000c0d24

000b9494 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9496:	2400      	movs	r4, #0
   b9498:	2310      	movs	r3, #16
   b949a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b949e:	6803      	ldr	r3, [r0, #0]
   b94a0:	4615      	mov	r5, r2
   b94a2:	699e      	ldr	r6, [r3, #24]
   b94a4:	6812      	ldr	r2, [r2, #0]
   b94a6:	466b      	mov	r3, sp
   b94a8:	e9cd 4400 	strd	r4, r4, [sp]
   b94ac:	47b0      	blx	r6
   b94ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b94b2:	f003 0306 	and.w	r3, r3, #6
   b94b6:	2b06      	cmp	r3, #6
   b94b8:	bf03      	ittte	eq
   b94ba:	9b00      	ldreq	r3, [sp, #0]
   b94bc:	602b      	streq	r3, [r5, #0]
   b94be:	2001      	moveq	r0, #1
   b94c0:	4620      	movne	r0, r4
   b94c2:	b004      	add	sp, #16
   b94c4:	bd70      	pop	{r4, r5, r6, pc}

000b94c6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b94c6:	9800      	ldr	r0, [sp, #0]
   b94c8:	4290      	cmp	r0, r2
   b94ca:	bf14      	ite	ne
   b94cc:	2001      	movne	r0, #1
   b94ce:	2006      	moveq	r0, #6
   b94d0:	4770      	bx	lr
	...

000b94d4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b94d4:	b510      	push	{r4, lr}
   b94d6:	4b03      	ldr	r3, [pc, #12]	; (b94e4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b94d8:	6003      	str	r3, [r0, #0]
   b94da:	4604      	mov	r4, r0
   b94dc:	f000 f8cd 	bl	b967a <_ZNSt9type_infoD1Ev>
   b94e0:	4620      	mov	r0, r4
   b94e2:	bd10      	pop	{r4, pc}
   b94e4:	000c0d64 	.word	0x000c0d64

000b94e8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b94e8:	b510      	push	{r4, lr}
   b94ea:	4604      	mov	r4, r0
   b94ec:	f7ff fff2 	bl	b94d4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b94f0:	4620      	mov	r0, r4
   b94f2:	2108      	movs	r1, #8
   b94f4:	f7fa fdd3 	bl	b409e <_ZdlPvj>
   b94f8:	4620      	mov	r0, r4
   b94fa:	bd10      	pop	{r4, pc}

000b94fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b94fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9500:	461f      	mov	r7, r3
   b9502:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9506:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b950a:	4598      	cmp	r8, r3
   b950c:	4606      	mov	r6, r0
   b950e:	4615      	mov	r5, r2
   b9510:	d107      	bne.n	b9522 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9512:	9907      	ldr	r1, [sp, #28]
   b9514:	f000 f8b4 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b9518:	b118      	cbz	r0, b9522 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b951a:	7165      	strb	r5, [r4, #5]
   b951c:	2000      	movs	r0, #0
   b951e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9522:	4639      	mov	r1, r7
   b9524:	4630      	mov	r0, r6
   b9526:	f000 f8ab 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b952a:	2800      	cmp	r0, #0
   b952c:	d0f6      	beq.n	b951c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b952e:	2301      	movs	r3, #1
   b9530:	f8c4 8000 	str.w	r8, [r4]
   b9534:	7125      	strb	r5, [r4, #4]
   b9536:	71a3      	strb	r3, [r4, #6]
   b9538:	e7f0      	b.n	b951c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b953a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b953a:	b538      	push	{r3, r4, r5, lr}
   b953c:	4615      	mov	r5, r2
   b953e:	461c      	mov	r4, r3
   b9540:	f000 f89e 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b9544:	b120      	cbz	r0, b9550 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9546:	2308      	movs	r3, #8
   b9548:	60e3      	str	r3, [r4, #12]
   b954a:	2306      	movs	r3, #6
   b954c:	6025      	str	r5, [r4, #0]
   b954e:	7123      	strb	r3, [r4, #4]
   b9550:	bd38      	pop	{r3, r4, r5, pc}

000b9552 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9552:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9554:	4605      	mov	r5, r0
   b9556:	460c      	mov	r4, r1
   b9558:	9201      	str	r2, [sp, #4]
   b955a:	461e      	mov	r6, r3
   b955c:	f000 f890 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b9560:	b950      	cbnz	r0, b9578 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9562:	2e03      	cmp	r6, #3
   b9564:	d808      	bhi.n	b9578 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9566:	6823      	ldr	r3, [r4, #0]
   b9568:	9a01      	ldr	r2, [sp, #4]
   b956a:	695b      	ldr	r3, [r3, #20]
   b956c:	4629      	mov	r1, r5
   b956e:	4620      	mov	r0, r4
   b9570:	b002      	add	sp, #8
   b9572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9576:	4718      	bx	r3
   b9578:	b002      	add	sp, #8
   b957a:	bd70      	pop	{r4, r5, r6, pc}

000b957c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b957c:	b510      	push	{r4, lr}
   b957e:	4b03      	ldr	r3, [pc, #12]	; (b958c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9580:	6003      	str	r3, [r0, #0]
   b9582:	4604      	mov	r4, r0
   b9584:	f7ff ffa6 	bl	b94d4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9588:	4620      	mov	r0, r4
   b958a:	bd10      	pop	{r4, pc}
   b958c:	000c0dc4 	.word	0x000c0dc4

000b9590 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9590:	b510      	push	{r4, lr}
   b9592:	4604      	mov	r4, r0
   b9594:	f7ff fff2 	bl	b957c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9598:	4620      	mov	r0, r4
   b959a:	210c      	movs	r1, #12
   b959c:	f7fa fd7f 	bl	b409e <_ZdlPvj>
   b95a0:	4620      	mov	r0, r4
   b95a2:	bd10      	pop	{r4, pc}

000b95a4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b95a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b95a6:	9f08      	ldr	r7, [sp, #32]
   b95a8:	4297      	cmp	r7, r2
   b95aa:	4605      	mov	r5, r0
   b95ac:	460e      	mov	r6, r1
   b95ae:	4614      	mov	r4, r2
   b95b0:	d00a      	beq.n	b95c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b95b2:	68a8      	ldr	r0, [r5, #8]
   b95b4:	6802      	ldr	r2, [r0, #0]
   b95b6:	9708      	str	r7, [sp, #32]
   b95b8:	6a15      	ldr	r5, [r2, #32]
   b95ba:	4631      	mov	r1, r6
   b95bc:	4622      	mov	r2, r4
   b95be:	46ac      	mov	ip, r5
   b95c0:	b003      	add	sp, #12
   b95c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b95c6:	4760      	bx	ip
   b95c8:	4619      	mov	r1, r3
   b95ca:	9301      	str	r3, [sp, #4]
   b95cc:	f000 f858 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b95d0:	9b01      	ldr	r3, [sp, #4]
   b95d2:	2800      	cmp	r0, #0
   b95d4:	d0ed      	beq.n	b95b2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b95d6:	2006      	movs	r0, #6
   b95d8:	b003      	add	sp, #12
   b95da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b95dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b95dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b95e0:	460d      	mov	r5, r1
   b95e2:	4619      	mov	r1, r3
   b95e4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b95e8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b95ec:	4681      	mov	r9, r0
   b95ee:	4617      	mov	r7, r2
   b95f0:	4698      	mov	r8, r3
   b95f2:	f000 f845 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b95f6:	b190      	cbz	r0, b961e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b95f8:	2d00      	cmp	r5, #0
   b95fa:	6034      	str	r4, [r6, #0]
   b95fc:	7137      	strb	r7, [r6, #4]
   b95fe:	db09      	blt.n	b9614 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9600:	1961      	adds	r1, r4, r5
   b9602:	458a      	cmp	sl, r1
   b9604:	bf0c      	ite	eq
   b9606:	2106      	moveq	r1, #6
   b9608:	2101      	movne	r1, #1
   b960a:	71b1      	strb	r1, [r6, #6]
   b960c:	2000      	movs	r0, #0
   b960e:	b001      	add	sp, #4
   b9610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9614:	3502      	adds	r5, #2
   b9616:	d1f9      	bne.n	b960c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9618:	2301      	movs	r3, #1
   b961a:	71b3      	strb	r3, [r6, #6]
   b961c:	e7f6      	b.n	b960c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b961e:	4554      	cmp	r4, sl
   b9620:	d106      	bne.n	b9630 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9622:	4659      	mov	r1, fp
   b9624:	4648      	mov	r0, r9
   b9626:	f000 f82b 	bl	b9680 <_ZNKSt9type_infoeqERKS_>
   b962a:	b108      	cbz	r0, b9630 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b962c:	7177      	strb	r7, [r6, #5]
   b962e:	e7ed      	b.n	b960c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9630:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9634:	6803      	ldr	r3, [r0, #0]
   b9636:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b963a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b963e:	69dc      	ldr	r4, [r3, #28]
   b9640:	463a      	mov	r2, r7
   b9642:	4643      	mov	r3, r8
   b9644:	4629      	mov	r1, r5
   b9646:	46a4      	mov	ip, r4
   b9648:	b001      	add	sp, #4
   b964a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b964e:	4760      	bx	ip

000b9650 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9654:	4607      	mov	r7, r0
   b9656:	460c      	mov	r4, r1
   b9658:	4615      	mov	r5, r2
   b965a:	461e      	mov	r6, r3
   b965c:	f7ff ff6d 	bl	b953a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9660:	b948      	cbnz	r0, b9676 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9662:	68b8      	ldr	r0, [r7, #8]
   b9664:	6803      	ldr	r3, [r0, #0]
   b9666:	699f      	ldr	r7, [r3, #24]
   b9668:	462a      	mov	r2, r5
   b966a:	4633      	mov	r3, r6
   b966c:	4621      	mov	r1, r4
   b966e:	46bc      	mov	ip, r7
   b9670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9674:	4760      	bx	ip
   b9676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b967a <_ZNSt9type_infoD1Ev>:
   b967a:	4770      	bx	lr

000b967c <_ZNKSt9type_info14__is_pointer_pEv>:
   b967c:	2000      	movs	r0, #0
   b967e:	4770      	bx	lr

000b9680 <_ZNKSt9type_infoeqERKS_>:
   b9680:	4281      	cmp	r1, r0
   b9682:	b508      	push	{r3, lr}
   b9684:	d00e      	beq.n	b96a4 <_ZNKSt9type_infoeqERKS_+0x24>
   b9686:	6840      	ldr	r0, [r0, #4]
   b9688:	7803      	ldrb	r3, [r0, #0]
   b968a:	2b2a      	cmp	r3, #42	; 0x2a
   b968c:	d00c      	beq.n	b96a8 <_ZNKSt9type_infoeqERKS_+0x28>
   b968e:	6849      	ldr	r1, [r1, #4]
   b9690:	780b      	ldrb	r3, [r1, #0]
   b9692:	2b2a      	cmp	r3, #42	; 0x2a
   b9694:	bf08      	it	eq
   b9696:	3101      	addeq	r1, #1
   b9698:	f001 fdd4 	bl	bb244 <strcmp>
   b969c:	fab0 f080 	clz	r0, r0
   b96a0:	0940      	lsrs	r0, r0, #5
   b96a2:	bd08      	pop	{r3, pc}
   b96a4:	2001      	movs	r0, #1
   b96a6:	e7fc      	b.n	b96a2 <_ZNKSt9type_infoeqERKS_+0x22>
   b96a8:	2000      	movs	r0, #0
   b96aa:	e7fa      	b.n	b96a2 <_ZNKSt9type_infoeqERKS_+0x22>
   b96ac:	0000      	movs	r0, r0
	...

000b96b0 <pow>:
   b96b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b96b2:	ed2d 8b02 	vpush	{d8}
   b96b6:	ec57 6b10 	vmov	r6, r7, d0
   b96ba:	ec55 4b11 	vmov	r4, r5, d1
   b96be:	f000 f8cb 	bl	b9858 <__ieee754_pow>
   b96c2:	4b63      	ldr	r3, [pc, #396]	; (b9850 <pow+0x1a0>)
   b96c4:	eeb0 8a40 	vmov.f32	s16, s0
   b96c8:	eef0 8a60 	vmov.f32	s17, s1
   b96cc:	f993 3000 	ldrsb.w	r3, [r3]
   b96d0:	3301      	adds	r3, #1
   b96d2:	d02a      	beq.n	b972a <pow+0x7a>
   b96d4:	4622      	mov	r2, r4
   b96d6:	462b      	mov	r3, r5
   b96d8:	4620      	mov	r0, r4
   b96da:	4629      	mov	r1, r5
   b96dc:	f001 fcc4 	bl	bb068 <__aeabi_dcmpun>
   b96e0:	bb18      	cbnz	r0, b972a <pow+0x7a>
   b96e2:	4632      	mov	r2, r6
   b96e4:	463b      	mov	r3, r7
   b96e6:	4630      	mov	r0, r6
   b96e8:	4639      	mov	r1, r7
   b96ea:	f001 fcbd 	bl	bb068 <__aeabi_dcmpun>
   b96ee:	2800      	cmp	r0, #0
   b96f0:	d144      	bne.n	b977c <pow+0xcc>
   b96f2:	2200      	movs	r2, #0
   b96f4:	2300      	movs	r3, #0
   b96f6:	4630      	mov	r0, r6
   b96f8:	4639      	mov	r1, r7
   b96fa:	f001 fc83 	bl	bb004 <__aeabi_dcmpeq>
   b96fe:	b1d8      	cbz	r0, b9738 <pow+0x88>
   b9700:	2200      	movs	r2, #0
   b9702:	2300      	movs	r3, #0
   b9704:	4620      	mov	r0, r4
   b9706:	4629      	mov	r1, r5
   b9708:	f001 fc7c 	bl	bb004 <__aeabi_dcmpeq>
   b970c:	2800      	cmp	r0, #0
   b970e:	d13d      	bne.n	b978c <pow+0xdc>
   b9710:	ec45 4b10 	vmov	d0, r4, r5
   b9714:	f000 ff10 	bl	ba538 <finite>
   b9718:	b138      	cbz	r0, b972a <pow+0x7a>
   b971a:	4620      	mov	r0, r4
   b971c:	4629      	mov	r1, r5
   b971e:	2200      	movs	r2, #0
   b9720:	2300      	movs	r3, #0
   b9722:	f001 fc79 	bl	bb018 <__aeabi_dcmplt>
   b9726:	2800      	cmp	r0, #0
   b9728:	d15c      	bne.n	b97e4 <pow+0x134>
   b972a:	eeb0 0a48 	vmov.f32	s0, s16
   b972e:	eef0 0a68 	vmov.f32	s1, s17
   b9732:	ecbd 8b02 	vpop	{d8}
   b9736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9738:	eeb0 0a48 	vmov.f32	s0, s16
   b973c:	eef0 0a68 	vmov.f32	s1, s17
   b9740:	f000 fefa 	bl	ba538 <finite>
   b9744:	b358      	cbz	r0, b979e <pow+0xee>
   b9746:	ec51 0b18 	vmov	r0, r1, d8
   b974a:	2200      	movs	r2, #0
   b974c:	2300      	movs	r3, #0
   b974e:	f001 fc59 	bl	bb004 <__aeabi_dcmpeq>
   b9752:	2800      	cmp	r0, #0
   b9754:	d0e9      	beq.n	b972a <pow+0x7a>
   b9756:	ec47 6b10 	vmov	d0, r6, r7
   b975a:	f000 feed 	bl	ba538 <finite>
   b975e:	2800      	cmp	r0, #0
   b9760:	d0e3      	beq.n	b972a <pow+0x7a>
   b9762:	ec45 4b10 	vmov	d0, r4, r5
   b9766:	f000 fee7 	bl	ba538 <finite>
   b976a:	2800      	cmp	r0, #0
   b976c:	d0dd      	beq.n	b972a <pow+0x7a>
   b976e:	f7fe fbf1 	bl	b7f54 <__errno>
   b9772:	2322      	movs	r3, #34	; 0x22
   b9774:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b9830 <pow+0x180>
   b9778:	6003      	str	r3, [r0, #0]
   b977a:	e7d6      	b.n	b972a <pow+0x7a>
   b977c:	4620      	mov	r0, r4
   b977e:	4629      	mov	r1, r5
   b9780:	2200      	movs	r2, #0
   b9782:	2300      	movs	r3, #0
   b9784:	f001 fc3e 	bl	bb004 <__aeabi_dcmpeq>
   b9788:	2800      	cmp	r0, #0
   b978a:	d0ce      	beq.n	b972a <pow+0x7a>
   b978c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b9838 <pow+0x188>
   b9790:	eeb0 0a48 	vmov.f32	s0, s16
   b9794:	eef0 0a68 	vmov.f32	s1, s17
   b9798:	ecbd 8b02 	vpop	{d8}
   b979c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b979e:	ec47 6b10 	vmov	d0, r6, r7
   b97a2:	f000 fec9 	bl	ba538 <finite>
   b97a6:	2800      	cmp	r0, #0
   b97a8:	d0cd      	beq.n	b9746 <pow+0x96>
   b97aa:	ec45 4b10 	vmov	d0, r4, r5
   b97ae:	f000 fec3 	bl	ba538 <finite>
   b97b2:	2800      	cmp	r0, #0
   b97b4:	d0c7      	beq.n	b9746 <pow+0x96>
   b97b6:	ec53 2b18 	vmov	r2, r3, d8
   b97ba:	ee18 0a10 	vmov	r0, s16
   b97be:	4619      	mov	r1, r3
   b97c0:	f001 fc52 	bl	bb068 <__aeabi_dcmpun>
   b97c4:	bb20      	cbnz	r0, b9810 <pow+0x160>
   b97c6:	f7fe fbc5 	bl	b7f54 <__errno>
   b97ca:	4603      	mov	r3, r0
   b97cc:	2222      	movs	r2, #34	; 0x22
   b97ce:	601a      	str	r2, [r3, #0]
   b97d0:	4630      	mov	r0, r6
   b97d2:	4639      	mov	r1, r7
   b97d4:	2200      	movs	r2, #0
   b97d6:	2300      	movs	r3, #0
   b97d8:	f001 fc1e 	bl	bb018 <__aeabi_dcmplt>
   b97dc:	b948      	cbnz	r0, b97f2 <pow+0x142>
   b97de:	ed9f 8b18 	vldr	d8, [pc, #96]	; b9840 <pow+0x190>
   b97e2:	e7a2      	b.n	b972a <pow+0x7a>
   b97e4:	f7fe fbb6 	bl	b7f54 <__errno>
   b97e8:	2321      	movs	r3, #33	; 0x21
   b97ea:	ed9f 8b17 	vldr	d8, [pc, #92]	; b9848 <pow+0x198>
   b97ee:	6003      	str	r3, [r0, #0]
   b97f0:	e79b      	b.n	b972a <pow+0x7a>
   b97f2:	ec45 4b10 	vmov	d0, r4, r5
   b97f6:	f000 feb3 	bl	ba560 <rint>
   b97fa:	4622      	mov	r2, r4
   b97fc:	ec51 0b10 	vmov	r0, r1, d0
   b9800:	462b      	mov	r3, r5
   b9802:	f001 fbff 	bl	bb004 <__aeabi_dcmpeq>
   b9806:	2800      	cmp	r0, #0
   b9808:	d1e9      	bne.n	b97de <pow+0x12e>
   b980a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b9848 <pow+0x198>
   b980e:	e78c      	b.n	b972a <pow+0x7a>
   b9810:	f7fe fba0 	bl	b7f54 <__errno>
   b9814:	2200      	movs	r2, #0
   b9816:	2300      	movs	r3, #0
   b9818:	2121      	movs	r1, #33	; 0x21
   b981a:	6001      	str	r1, [r0, #0]
   b981c:	4610      	mov	r0, r2
   b981e:	4619      	mov	r1, r3
   b9820:	f001 fab2 	bl	bad88 <__aeabi_ddiv>
   b9824:	ec41 0b18 	vmov	d8, r0, r1
   b9828:	e77f      	b.n	b972a <pow+0x7a>
   b982a:	bf00      	nop
   b982c:	f3af 8000 	nop.w
	...
   b983c:	3ff00000 	.word	0x3ff00000
   b9840:	00000000 	.word	0x00000000
   b9844:	7ff00000 	.word	0x7ff00000
   b9848:	00000000 	.word	0x00000000
   b984c:	fff00000 	.word	0xfff00000
   b9850:	2003e564 	.word	0x2003e564
   b9854:	00000000 	.word	0x00000000

000b9858 <__ieee754_pow>:
   b9858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b985c:	ec57 6b11 	vmov	r6, r7, d1
   b9860:	ed2d 8b0c 	vpush	{d8-d13}
   b9864:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b9868:	ea5a 0206 	orrs.w	r2, sl, r6
   b986c:	b087      	sub	sp, #28
   b986e:	d03d      	beq.n	b98ec <__ieee754_pow+0x94>
   b9870:	ec55 4b10 	vmov	r4, r5, d0
   b9874:	4972      	ldr	r1, [pc, #456]	; (b9a40 <__ieee754_pow+0x1e8>)
   b9876:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b987a:	4588      	cmp	r8, r1
   b987c:	ee10 2a10 	vmov	r2, s0
   b9880:	46a9      	mov	r9, r5
   b9882:	dc2c      	bgt.n	b98de <__ieee754_pow+0x86>
   b9884:	ee11 3a10 	vmov	r3, s2
   b9888:	46bb      	mov	fp, r7
   b988a:	d036      	beq.n	b98fa <__ieee754_pow+0xa2>
   b988c:	458a      	cmp	sl, r1
   b988e:	dc26      	bgt.n	b98de <__ieee754_pow+0x86>
   b9890:	496b      	ldr	r1, [pc, #428]	; (b9a40 <__ieee754_pow+0x1e8>)
   b9892:	458a      	cmp	sl, r1
   b9894:	d021      	beq.n	b98da <__ieee754_pow+0x82>
   b9896:	f1b9 0f00 	cmp.w	r9, #0
   b989a:	db39      	blt.n	b9910 <__ieee754_pow+0xb8>
   b989c:	2100      	movs	r1, #0
   b989e:	9100      	str	r1, [sp, #0]
   b98a0:	2b00      	cmp	r3, #0
   b98a2:	d151      	bne.n	b9948 <__ieee754_pow+0xf0>
   b98a4:	4b66      	ldr	r3, [pc, #408]	; (b9a40 <__ieee754_pow+0x1e8>)
   b98a6:	459a      	cmp	sl, r3
   b98a8:	f000 80a2 	beq.w	b99f0 <__ieee754_pow+0x198>
   b98ac:	4b65      	ldr	r3, [pc, #404]	; (b9a44 <__ieee754_pow+0x1ec>)
   b98ae:	459a      	cmp	sl, r3
   b98b0:	f000 80b0 	beq.w	b9a14 <__ieee754_pow+0x1bc>
   b98b4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b98b8:	f000 84c0 	beq.w	ba23c <__ieee754_pow+0x9e4>
   b98bc:	4b62      	ldr	r3, [pc, #392]	; (b9a48 <__ieee754_pow+0x1f0>)
   b98be:	459b      	cmp	fp, r3
   b98c0:	d142      	bne.n	b9948 <__ieee754_pow+0xf0>
   b98c2:	f1b9 0f00 	cmp.w	r9, #0
   b98c6:	db3f      	blt.n	b9948 <__ieee754_pow+0xf0>
   b98c8:	ec45 4b10 	vmov	d0, r4, r5
   b98cc:	b007      	add	sp, #28
   b98ce:	ecbd 8b0c 	vpop	{d8-d13}
   b98d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b98d6:	f000 bd59 	b.w	ba38c <__ieee754_sqrt>
   b98da:	2b00      	cmp	r3, #0
   b98dc:	d0db      	beq.n	b9896 <__ieee754_pow+0x3e>
   b98de:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b98e2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b98e6:	ea58 0302 	orrs.w	r3, r8, r2
   b98ea:	d109      	bne.n	b9900 <__ieee754_pow+0xa8>
   b98ec:	ed9f 0b50 	vldr	d0, [pc, #320]	; b9a30 <__ieee754_pow+0x1d8>
   b98f0:	b007      	add	sp, #28
   b98f2:	ecbd 8b0c 	vpop	{d8-d13}
   b98f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b98fa:	b90c      	cbnz	r4, b9900 <__ieee754_pow+0xa8>
   b98fc:	45c2      	cmp	sl, r8
   b98fe:	ddc7      	ble.n	b9890 <__ieee754_pow+0x38>
   b9900:	4852      	ldr	r0, [pc, #328]	; (b9a4c <__ieee754_pow+0x1f4>)
   b9902:	b007      	add	sp, #28
   b9904:	ecbd 8b0c 	vpop	{d8-d13}
   b9908:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b990c:	f000 be20 	b.w	ba550 <nan>
   b9910:	494f      	ldr	r1, [pc, #316]	; (b9a50 <__ieee754_pow+0x1f8>)
   b9912:	458a      	cmp	sl, r1
   b9914:	f300 8085 	bgt.w	b9a22 <__ieee754_pow+0x1ca>
   b9918:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b991c:	458a      	cmp	sl, r1
   b991e:	dd0f      	ble.n	b9940 <__ieee754_pow+0xe8>
   b9920:	ea4f 512a 	mov.w	r1, sl, asr #20
   b9924:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b9928:	2914      	cmp	r1, #20
   b992a:	f340 849b 	ble.w	ba264 <__ieee754_pow+0xa0c>
   b992e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b9932:	fa23 f001 	lsr.w	r0, r3, r1
   b9936:	fa00 f101 	lsl.w	r1, r0, r1
   b993a:	4299      	cmp	r1, r3
   b993c:	f000 84ed 	beq.w	ba31a <__ieee754_pow+0xac2>
   b9940:	2100      	movs	r1, #0
   b9942:	9100      	str	r1, [sp, #0]
   b9944:	2b00      	cmp	r3, #0
   b9946:	d0b1      	beq.n	b98ac <__ieee754_pow+0x54>
   b9948:	ec45 4b10 	vmov	d0, r4, r5
   b994c:	9202      	str	r2, [sp, #8]
   b994e:	f000 fde9 	bl	ba524 <fabs>
   b9952:	9a02      	ldr	r2, [sp, #8]
   b9954:	bb5a      	cbnz	r2, b99ae <__ieee754_pow+0x156>
   b9956:	f1b8 0f00 	cmp.w	r8, #0
   b995a:	d004      	beq.n	b9966 <__ieee754_pow+0x10e>
   b995c:	4b39      	ldr	r3, [pc, #228]	; (b9a44 <__ieee754_pow+0x1ec>)
   b995e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b9962:	429a      	cmp	r2, r3
   b9964:	d123      	bne.n	b99ae <__ieee754_pow+0x156>
   b9966:	f1bb 0f00 	cmp.w	fp, #0
   b996a:	da07      	bge.n	b997c <__ieee754_pow+0x124>
   b996c:	ec53 2b10 	vmov	r2, r3, d0
   b9970:	4934      	ldr	r1, [pc, #208]	; (b9a44 <__ieee754_pow+0x1ec>)
   b9972:	2000      	movs	r0, #0
   b9974:	f001 fa08 	bl	bad88 <__aeabi_ddiv>
   b9978:	ec41 0b10 	vmov	d0, r0, r1
   b997c:	f1b9 0f00 	cmp.w	r9, #0
   b9980:	dab6      	bge.n	b98f0 <__ieee754_pow+0x98>
   b9982:	9b00      	ldr	r3, [sp, #0]
   b9984:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b9988:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b998c:	ea58 0303 	orrs.w	r3, r8, r3
   b9990:	f040 848d 	bne.w	ba2ae <__ieee754_pow+0xa56>
   b9994:	ec53 2b10 	vmov	r2, r3, d0
   b9998:	4610      	mov	r0, r2
   b999a:	4619      	mov	r1, r3
   b999c:	f000 ff12 	bl	ba7c4 <__aeabi_dsub>
   b99a0:	4602      	mov	r2, r0
   b99a2:	460b      	mov	r3, r1
   b99a4:	f001 f9f0 	bl	bad88 <__aeabi_ddiv>
   b99a8:	ec41 0b10 	vmov	d0, r0, r1
   b99ac:	e7a0      	b.n	b98f0 <__ieee754_pow+0x98>
   b99ae:	9a00      	ldr	r2, [sp, #0]
   b99b0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b99b4:	3b01      	subs	r3, #1
   b99b6:	9304      	str	r3, [sp, #16]
   b99b8:	4313      	orrs	r3, r2
   b99ba:	d035      	beq.n	b9a28 <__ieee754_pow+0x1d0>
   b99bc:	4b25      	ldr	r3, [pc, #148]	; (b9a54 <__ieee754_pow+0x1fc>)
   b99be:	459a      	cmp	sl, r3
   b99c0:	dd4c      	ble.n	b9a5c <__ieee754_pow+0x204>
   b99c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b99c6:	459a      	cmp	sl, r3
   b99c8:	4b23      	ldr	r3, [pc, #140]	; (b9a58 <__ieee754_pow+0x200>)
   b99ca:	f340 83db 	ble.w	ba184 <__ieee754_pow+0x92c>
   b99ce:	4598      	cmp	r8, r3
   b99d0:	f340 8360 	ble.w	ba094 <__ieee754_pow+0x83c>
   b99d4:	f1bb 0f00 	cmp.w	fp, #0
   b99d8:	f340 8360 	ble.w	ba09c <__ieee754_pow+0x844>
   b99dc:	a316      	add	r3, pc, #88	; (adr r3, b9a38 <__ieee754_pow+0x1e0>)
   b99de:	e9d3 2300 	ldrd	r2, r3, [r3]
   b99e2:	4610      	mov	r0, r2
   b99e4:	4619      	mov	r1, r3
   b99e6:	f001 f8a5 	bl	bab34 <__aeabi_dmul>
   b99ea:	ec41 0b10 	vmov	d0, r0, r1
   b99ee:	e77f      	b.n	b98f0 <__ieee754_pow+0x98>
   b99f0:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b99f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b99f8:	4313      	orrs	r3, r2
   b99fa:	f43f af77 	beq.w	b98ec <__ieee754_pow+0x94>
   b99fe:	4b16      	ldr	r3, [pc, #88]	; (b9a58 <__ieee754_pow+0x200>)
   b9a00:	4598      	cmp	r8, r3
   b9a02:	f340 837a 	ble.w	ba0fa <__ieee754_pow+0x8a2>
   b9a06:	f1bb 0f00 	cmp.w	fp, #0
   b9a0a:	f2c0 8347 	blt.w	ba09c <__ieee754_pow+0x844>
   b9a0e:	ec47 6b10 	vmov	d0, r6, r7
   b9a12:	e76d      	b.n	b98f0 <__ieee754_pow+0x98>
   b9a14:	f1bb 0f00 	cmp.w	fp, #0
   b9a18:	f2c0 841a 	blt.w	ba250 <__ieee754_pow+0x9f8>
   b9a1c:	ec45 4b10 	vmov	d0, r4, r5
   b9a20:	e766      	b.n	b98f0 <__ieee754_pow+0x98>
   b9a22:	2102      	movs	r1, #2
   b9a24:	9100      	str	r1, [sp, #0]
   b9a26:	e73b      	b.n	b98a0 <__ieee754_pow+0x48>
   b9a28:	4622      	mov	r2, r4
   b9a2a:	462b      	mov	r3, r5
   b9a2c:	e7b4      	b.n	b9998 <__ieee754_pow+0x140>
   b9a2e:	bf00      	nop
   b9a30:	00000000 	.word	0x00000000
   b9a34:	3ff00000 	.word	0x3ff00000
   b9a38:	8800759c 	.word	0x8800759c
   b9a3c:	7e37e43c 	.word	0x7e37e43c
   b9a40:	7ff00000 	.word	0x7ff00000
   b9a44:	3ff00000 	.word	0x3ff00000
   b9a48:	3fe00000 	.word	0x3fe00000
   b9a4c:	000c0e00 	.word	0x000c0e00
   b9a50:	433fffff 	.word	0x433fffff
   b9a54:	41e00000 	.word	0x41e00000
   b9a58:	3fefffff 	.word	0x3fefffff
   b9a5c:	4be4      	ldr	r3, [pc, #912]	; (b9df0 <__ieee754_pow+0x598>)
   b9a5e:	ea09 0303 	and.w	r3, r9, r3
   b9a62:	2200      	movs	r2, #0
   b9a64:	b953      	cbnz	r3, b9a7c <__ieee754_pow+0x224>
   b9a66:	ec51 0b10 	vmov	r0, r1, d0
   b9a6a:	4be2      	ldr	r3, [pc, #904]	; (b9df4 <__ieee754_pow+0x59c>)
   b9a6c:	f001 f862 	bl	bab34 <__aeabi_dmul>
   b9a70:	ec41 0b10 	vmov	d0, r0, r1
   b9a74:	ee10 8a90 	vmov	r8, s1
   b9a78:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b9a7c:	ea4f 5328 	mov.w	r3, r8, asr #20
   b9a80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b9a84:	189a      	adds	r2, r3, r2
   b9a86:	4bdc      	ldr	r3, [pc, #880]	; (b9df8 <__ieee754_pow+0x5a0>)
   b9a88:	9205      	str	r2, [sp, #20]
   b9a8a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b9a8e:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b9a92:	4598      	cmp	r8, r3
   b9a94:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b9a98:	dd07      	ble.n	b9aaa <__ieee754_pow+0x252>
   b9a9a:	4bd8      	ldr	r3, [pc, #864]	; (b9dfc <__ieee754_pow+0x5a4>)
   b9a9c:	4598      	cmp	r8, r3
   b9a9e:	f340 8414 	ble.w	ba2ca <__ieee754_pow+0xa72>
   b9aa2:	3201      	adds	r2, #1
   b9aa4:	9205      	str	r2, [sp, #20]
   b9aa6:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b9aaa:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b9d90 <__ieee754_pow+0x538>
   b9aae:	ed9f 7bba 	vldr	d7, [pc, #744]	; b9d98 <__ieee754_pow+0x540>
   b9ab2:	ec53 2b16 	vmov	r2, r3, d6
   b9ab6:	eeb0 ca47 	vmov.f32	s24, s14
   b9aba:	eef0 ca67 	vmov.f32	s25, s15
   b9abe:	2500      	movs	r5, #0
   b9ac0:	eeb0 da47 	vmov.f32	s26, s14
   b9ac4:	eef0 da67 	vmov.f32	s27, s15
   b9ac8:	ec5b ab10 	vmov	sl, fp, d0
   b9acc:	46a3      	mov	fp, r4
   b9ace:	4650      	mov	r0, sl
   b9ad0:	4659      	mov	r1, fp
   b9ad2:	ec43 2b1a 	vmov	d10, r2, r3
   b9ad6:	f000 fe75 	bl	ba7c4 <__aeabi_dsub>
   b9ada:	ec53 2b1a 	vmov	r2, r3, d10
   b9ade:	4680      	mov	r8, r0
   b9ae0:	4689      	mov	r9, r1
   b9ae2:	4650      	mov	r0, sl
   b9ae4:	4659      	mov	r1, fp
   b9ae6:	f000 fe6f 	bl	ba7c8 <__adddf3>
   b9aea:	4602      	mov	r2, r0
   b9aec:	460b      	mov	r3, r1
   b9aee:	2000      	movs	r0, #0
   b9af0:	49c3      	ldr	r1, [pc, #780]	; (b9e00 <__ieee754_pow+0x5a8>)
   b9af2:	f001 f949 	bl	bad88 <__aeabi_ddiv>
   b9af6:	ec41 0b1b 	vmov	d11, r0, r1
   b9afa:	4640      	mov	r0, r8
   b9afc:	ec53 2b1b 	vmov	r2, r3, d11
   b9b00:	4649      	mov	r1, r9
   b9b02:	f001 f817 	bl	bab34 <__aeabi_dmul>
   b9b06:	ec41 0b18 	vmov	d8, r0, r1
   b9b0a:	460a      	mov	r2, r1
   b9b0c:	4601      	mov	r1, r0
   b9b0e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b9b12:	2100      	movs	r1, #0
   b9b14:	9102      	str	r1, [sp, #8]
   b9b16:	1064      	asrs	r4, r4, #1
   b9b18:	ec4b ab19 	vmov	d9, sl, fp
   b9b1c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b9b20:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b9b24:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b9b28:	2000      	movs	r0, #0
   b9b2a:	1959      	adds	r1, r3, r5
   b9b2c:	4604      	mov	r4, r0
   b9b2e:	460d      	mov	r5, r1
   b9b30:	4602      	mov	r2, r0
   b9b32:	460b      	mov	r3, r1
   b9b34:	4650      	mov	r0, sl
   b9b36:	4659      	mov	r1, fp
   b9b38:	f000 fffc 	bl	bab34 <__aeabi_dmul>
   b9b3c:	4602      	mov	r2, r0
   b9b3e:	460b      	mov	r3, r1
   b9b40:	4640      	mov	r0, r8
   b9b42:	4649      	mov	r1, r9
   b9b44:	f000 fe3e 	bl	ba7c4 <__aeabi_dsub>
   b9b48:	ec53 2b1a 	vmov	r2, r3, d10
   b9b4c:	4680      	mov	r8, r0
   b9b4e:	4689      	mov	r9, r1
   b9b50:	4620      	mov	r0, r4
   b9b52:	4629      	mov	r1, r5
   b9b54:	f000 fe36 	bl	ba7c4 <__aeabi_dsub>
   b9b58:	4602      	mov	r2, r0
   b9b5a:	460b      	mov	r3, r1
   b9b5c:	ec51 0b19 	vmov	r0, r1, d9
   b9b60:	f000 fe30 	bl	ba7c4 <__aeabi_dsub>
   b9b64:	4652      	mov	r2, sl
   b9b66:	465b      	mov	r3, fp
   b9b68:	f000 ffe4 	bl	bab34 <__aeabi_dmul>
   b9b6c:	4602      	mov	r2, r0
   b9b6e:	460b      	mov	r3, r1
   b9b70:	4640      	mov	r0, r8
   b9b72:	4649      	mov	r1, r9
   b9b74:	f000 fe26 	bl	ba7c4 <__aeabi_dsub>
   b9b78:	ec53 2b1b 	vmov	r2, r3, d11
   b9b7c:	f000 ffda 	bl	bab34 <__aeabi_dmul>
   b9b80:	ec53 2b18 	vmov	r2, r3, d8
   b9b84:	ec41 0b19 	vmov	d9, r0, r1
   b9b88:	ec51 0b18 	vmov	r0, r1, d8
   b9b8c:	f000 ffd2 	bl	bab34 <__aeabi_dmul>
   b9b90:	a383      	add	r3, pc, #524	; (adr r3, b9da0 <__ieee754_pow+0x548>)
   b9b92:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9b96:	4604      	mov	r4, r0
   b9b98:	460d      	mov	r5, r1
   b9b9a:	f000 ffcb 	bl	bab34 <__aeabi_dmul>
   b9b9e:	a382      	add	r3, pc, #520	; (adr r3, b9da8 <__ieee754_pow+0x550>)
   b9ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9ba4:	f000 fe10 	bl	ba7c8 <__adddf3>
   b9ba8:	4622      	mov	r2, r4
   b9baa:	462b      	mov	r3, r5
   b9bac:	f000 ffc2 	bl	bab34 <__aeabi_dmul>
   b9bb0:	a37f      	add	r3, pc, #508	; (adr r3, b9db0 <__ieee754_pow+0x558>)
   b9bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9bb6:	f000 fe07 	bl	ba7c8 <__adddf3>
   b9bba:	4622      	mov	r2, r4
   b9bbc:	462b      	mov	r3, r5
   b9bbe:	f000 ffb9 	bl	bab34 <__aeabi_dmul>
   b9bc2:	a37d      	add	r3, pc, #500	; (adr r3, b9db8 <__ieee754_pow+0x560>)
   b9bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9bc8:	f000 fdfe 	bl	ba7c8 <__adddf3>
   b9bcc:	4622      	mov	r2, r4
   b9bce:	462b      	mov	r3, r5
   b9bd0:	f000 ffb0 	bl	bab34 <__aeabi_dmul>
   b9bd4:	a37a      	add	r3, pc, #488	; (adr r3, b9dc0 <__ieee754_pow+0x568>)
   b9bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9bda:	f000 fdf5 	bl	ba7c8 <__adddf3>
   b9bde:	4622      	mov	r2, r4
   b9be0:	462b      	mov	r3, r5
   b9be2:	f000 ffa7 	bl	bab34 <__aeabi_dmul>
   b9be6:	a378      	add	r3, pc, #480	; (adr r3, b9dc8 <__ieee754_pow+0x570>)
   b9be8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9bec:	f000 fdec 	bl	ba7c8 <__adddf3>
   b9bf0:	4622      	mov	r2, r4
   b9bf2:	4680      	mov	r8, r0
   b9bf4:	4689      	mov	r9, r1
   b9bf6:	462b      	mov	r3, r5
   b9bf8:	4620      	mov	r0, r4
   b9bfa:	4629      	mov	r1, r5
   b9bfc:	f000 ff9a 	bl	bab34 <__aeabi_dmul>
   b9c00:	4602      	mov	r2, r0
   b9c02:	460b      	mov	r3, r1
   b9c04:	4640      	mov	r0, r8
   b9c06:	4649      	mov	r1, r9
   b9c08:	f000 ff94 	bl	bab34 <__aeabi_dmul>
   b9c0c:	4652      	mov	r2, sl
   b9c0e:	4604      	mov	r4, r0
   b9c10:	460d      	mov	r5, r1
   b9c12:	465b      	mov	r3, fp
   b9c14:	ec51 0b18 	vmov	r0, r1, d8
   b9c18:	f000 fdd6 	bl	ba7c8 <__adddf3>
   b9c1c:	ec53 2b19 	vmov	r2, r3, d9
   b9c20:	f000 ff88 	bl	bab34 <__aeabi_dmul>
   b9c24:	4622      	mov	r2, r4
   b9c26:	462b      	mov	r3, r5
   b9c28:	f000 fdce 	bl	ba7c8 <__adddf3>
   b9c2c:	4652      	mov	r2, sl
   b9c2e:	4680      	mov	r8, r0
   b9c30:	4689      	mov	r9, r1
   b9c32:	465b      	mov	r3, fp
   b9c34:	4650      	mov	r0, sl
   b9c36:	4659      	mov	r1, fp
   b9c38:	f000 ff7c 	bl	bab34 <__aeabi_dmul>
   b9c3c:	4602      	mov	r2, r0
   b9c3e:	460b      	mov	r3, r1
   b9c40:	ec43 2b1a 	vmov	d10, r2, r3
   b9c44:	4b6f      	ldr	r3, [pc, #444]	; (b9e04 <__ieee754_pow+0x5ac>)
   b9c46:	2200      	movs	r2, #0
   b9c48:	f000 fdbe 	bl	ba7c8 <__adddf3>
   b9c4c:	4642      	mov	r2, r8
   b9c4e:	464b      	mov	r3, r9
   b9c50:	f000 fdba 	bl	ba7c8 <__adddf3>
   b9c54:	2400      	movs	r4, #0
   b9c56:	460d      	mov	r5, r1
   b9c58:	4622      	mov	r2, r4
   b9c5a:	462b      	mov	r3, r5
   b9c5c:	4650      	mov	r0, sl
   b9c5e:	4659      	mov	r1, fp
   b9c60:	f000 ff68 	bl	bab34 <__aeabi_dmul>
   b9c64:	4b67      	ldr	r3, [pc, #412]	; (b9e04 <__ieee754_pow+0x5ac>)
   b9c66:	4682      	mov	sl, r0
   b9c68:	468b      	mov	fp, r1
   b9c6a:	2200      	movs	r2, #0
   b9c6c:	4620      	mov	r0, r4
   b9c6e:	4629      	mov	r1, r5
   b9c70:	f000 fda8 	bl	ba7c4 <__aeabi_dsub>
   b9c74:	ec53 2b1a 	vmov	r2, r3, d10
   b9c78:	f000 fda4 	bl	ba7c4 <__aeabi_dsub>
   b9c7c:	4602      	mov	r2, r0
   b9c7e:	460b      	mov	r3, r1
   b9c80:	4640      	mov	r0, r8
   b9c82:	4649      	mov	r1, r9
   b9c84:	f000 fd9e 	bl	ba7c4 <__aeabi_dsub>
   b9c88:	ec53 2b18 	vmov	r2, r3, d8
   b9c8c:	f000 ff52 	bl	bab34 <__aeabi_dmul>
   b9c90:	4622      	mov	r2, r4
   b9c92:	462b      	mov	r3, r5
   b9c94:	4604      	mov	r4, r0
   b9c96:	460d      	mov	r5, r1
   b9c98:	ec51 0b19 	vmov	r0, r1, d9
   b9c9c:	f000 ff4a 	bl	bab34 <__aeabi_dmul>
   b9ca0:	4602      	mov	r2, r0
   b9ca2:	460b      	mov	r3, r1
   b9ca4:	4620      	mov	r0, r4
   b9ca6:	4629      	mov	r1, r5
   b9ca8:	f000 fd8e 	bl	ba7c8 <__adddf3>
   b9cac:	4680      	mov	r8, r0
   b9cae:	4689      	mov	r9, r1
   b9cb0:	4642      	mov	r2, r8
   b9cb2:	464b      	mov	r3, r9
   b9cb4:	4650      	mov	r0, sl
   b9cb6:	4659      	mov	r1, fp
   b9cb8:	f000 fd86 	bl	ba7c8 <__adddf3>
   b9cbc:	a344      	add	r3, pc, #272	; (adr r3, b9dd0 <__ieee754_pow+0x578>)
   b9cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9cc2:	2000      	movs	r0, #0
   b9cc4:	4604      	mov	r4, r0
   b9cc6:	460d      	mov	r5, r1
   b9cc8:	f000 ff34 	bl	bab34 <__aeabi_dmul>
   b9ccc:	4652      	mov	r2, sl
   b9cce:	ec41 0b19 	vmov	d9, r0, r1
   b9cd2:	465b      	mov	r3, fp
   b9cd4:	4620      	mov	r0, r4
   b9cd6:	4629      	mov	r1, r5
   b9cd8:	f000 fd74 	bl	ba7c4 <__aeabi_dsub>
   b9cdc:	4602      	mov	r2, r0
   b9cde:	460b      	mov	r3, r1
   b9ce0:	4640      	mov	r0, r8
   b9ce2:	4649      	mov	r1, r9
   b9ce4:	f000 fd6e 	bl	ba7c4 <__aeabi_dsub>
   b9ce8:	a33b      	add	r3, pc, #236	; (adr r3, b9dd8 <__ieee754_pow+0x580>)
   b9cea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9cee:	f000 ff21 	bl	bab34 <__aeabi_dmul>
   b9cf2:	4602      	mov	r2, r0
   b9cf4:	460b      	mov	r3, r1
   b9cf6:	4620      	mov	r0, r4
   b9cf8:	4629      	mov	r1, r5
   b9cfa:	4614      	mov	r4, r2
   b9cfc:	461d      	mov	r5, r3
   b9cfe:	a338      	add	r3, pc, #224	; (adr r3, b9de0 <__ieee754_pow+0x588>)
   b9d00:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9d04:	f000 ff16 	bl	bab34 <__aeabi_dmul>
   b9d08:	4602      	mov	r2, r0
   b9d0a:	460b      	mov	r3, r1
   b9d0c:	4620      	mov	r0, r4
   b9d0e:	4629      	mov	r1, r5
   b9d10:	f000 fd5a 	bl	ba7c8 <__adddf3>
   b9d14:	ec53 2b1d 	vmov	r2, r3, d13
   b9d18:	f000 fd56 	bl	ba7c8 <__adddf3>
   b9d1c:	4680      	mov	r8, r0
   b9d1e:	9805      	ldr	r0, [sp, #20]
   b9d20:	4689      	mov	r9, r1
   b9d22:	f000 fe9d 	bl	baa60 <__aeabi_i2d>
   b9d26:	4642      	mov	r2, r8
   b9d28:	4682      	mov	sl, r0
   b9d2a:	468b      	mov	fp, r1
   b9d2c:	464b      	mov	r3, r9
   b9d2e:	ec51 0b19 	vmov	r0, r1, d9
   b9d32:	f000 fd49 	bl	ba7c8 <__adddf3>
   b9d36:	ec53 2b1c 	vmov	r2, r3, d12
   b9d3a:	f000 fd45 	bl	ba7c8 <__adddf3>
   b9d3e:	4652      	mov	r2, sl
   b9d40:	465b      	mov	r3, fp
   b9d42:	f000 fd41 	bl	ba7c8 <__adddf3>
   b9d46:	4652      	mov	r2, sl
   b9d48:	465b      	mov	r3, fp
   b9d4a:	2000      	movs	r0, #0
   b9d4c:	4604      	mov	r4, r0
   b9d4e:	460d      	mov	r5, r1
   b9d50:	f000 fd38 	bl	ba7c4 <__aeabi_dsub>
   b9d54:	ec53 2b1c 	vmov	r2, r3, d12
   b9d58:	f000 fd34 	bl	ba7c4 <__aeabi_dsub>
   b9d5c:	ec53 2b19 	vmov	r2, r3, d9
   b9d60:	f000 fd30 	bl	ba7c4 <__aeabi_dsub>
   b9d64:	4602      	mov	r2, r0
   b9d66:	460b      	mov	r3, r1
   b9d68:	4640      	mov	r0, r8
   b9d6a:	4649      	mov	r1, r9
   b9d6c:	f000 fd2a 	bl	ba7c4 <__aeabi_dsub>
   b9d70:	9b00      	ldr	r3, [sp, #0]
   b9d72:	9a04      	ldr	r2, [sp, #16]
   b9d74:	3b01      	subs	r3, #1
   b9d76:	4313      	orrs	r3, r2
   b9d78:	4682      	mov	sl, r0
   b9d7a:	468b      	mov	fp, r1
   b9d7c:	f040 81b6 	bne.w	ba0ec <__ieee754_pow+0x894>
   b9d80:	ed9f 7b19 	vldr	d7, [pc, #100]	; b9de8 <__ieee754_pow+0x590>
   b9d84:	eeb0 8a47 	vmov.f32	s16, s14
   b9d88:	eef0 8a67 	vmov.f32	s17, s15
   b9d8c:	e03c      	b.n	b9e08 <__ieee754_pow+0x5b0>
   b9d8e:	bf00      	nop
   b9d90:	00000000 	.word	0x00000000
   b9d94:	3ff00000 	.word	0x3ff00000
	...
   b9da0:	4a454eef 	.word	0x4a454eef
   b9da4:	3fca7e28 	.word	0x3fca7e28
   b9da8:	93c9db65 	.word	0x93c9db65
   b9dac:	3fcd864a 	.word	0x3fcd864a
   b9db0:	a91d4101 	.word	0xa91d4101
   b9db4:	3fd17460 	.word	0x3fd17460
   b9db8:	518f264d 	.word	0x518f264d
   b9dbc:	3fd55555 	.word	0x3fd55555
   b9dc0:	db6fabff 	.word	0xdb6fabff
   b9dc4:	3fdb6db6 	.word	0x3fdb6db6
   b9dc8:	33333303 	.word	0x33333303
   b9dcc:	3fe33333 	.word	0x3fe33333
   b9dd0:	e0000000 	.word	0xe0000000
   b9dd4:	3feec709 	.word	0x3feec709
   b9dd8:	dc3a03fd 	.word	0xdc3a03fd
   b9ddc:	3feec709 	.word	0x3feec709
   b9de0:	145b01f5 	.word	0x145b01f5
   b9de4:	be3e2fe0 	.word	0xbe3e2fe0
   b9de8:	00000000 	.word	0x00000000
   b9dec:	bff00000 	.word	0xbff00000
   b9df0:	7ff00000 	.word	0x7ff00000
   b9df4:	43400000 	.word	0x43400000
   b9df8:	0003988e 	.word	0x0003988e
   b9dfc:	000bb679 	.word	0x000bb679
   b9e00:	3ff00000 	.word	0x3ff00000
   b9e04:	40080000 	.word	0x40080000
   b9e08:	2300      	movs	r3, #0
   b9e0a:	e9cd 6700 	strd	r6, r7, [sp]
   b9e0e:	9300      	str	r3, [sp, #0]
   b9e10:	e9dd 8900 	ldrd	r8, r9, [sp]
   b9e14:	4630      	mov	r0, r6
   b9e16:	4642      	mov	r2, r8
   b9e18:	464b      	mov	r3, r9
   b9e1a:	4639      	mov	r1, r7
   b9e1c:	f000 fcd2 	bl	ba7c4 <__aeabi_dsub>
   b9e20:	4622      	mov	r2, r4
   b9e22:	462b      	mov	r3, r5
   b9e24:	f000 fe86 	bl	bab34 <__aeabi_dmul>
   b9e28:	4632      	mov	r2, r6
   b9e2a:	463b      	mov	r3, r7
   b9e2c:	4606      	mov	r6, r0
   b9e2e:	460f      	mov	r7, r1
   b9e30:	4650      	mov	r0, sl
   b9e32:	4659      	mov	r1, fp
   b9e34:	f000 fe7e 	bl	bab34 <__aeabi_dmul>
   b9e38:	4602      	mov	r2, r0
   b9e3a:	460b      	mov	r3, r1
   b9e3c:	4630      	mov	r0, r6
   b9e3e:	4639      	mov	r1, r7
   b9e40:	f000 fcc2 	bl	ba7c8 <__adddf3>
   b9e44:	4642      	mov	r2, r8
   b9e46:	464b      	mov	r3, r9
   b9e48:	4606      	mov	r6, r0
   b9e4a:	460f      	mov	r7, r1
   b9e4c:	4620      	mov	r0, r4
   b9e4e:	4629      	mov	r1, r5
   b9e50:	f000 fe70 	bl	bab34 <__aeabi_dmul>
   b9e54:	4604      	mov	r4, r0
   b9e56:	460d      	mov	r5, r1
   b9e58:	462b      	mov	r3, r5
   b9e5a:	4630      	mov	r0, r6
   b9e5c:	4639      	mov	r1, r7
   b9e5e:	4622      	mov	r2, r4
   b9e60:	f000 fcb2 	bl	ba7c8 <__adddf3>
   b9e64:	4bc2      	ldr	r3, [pc, #776]	; (ba170 <__ieee754_pow+0x918>)
   b9e66:	4299      	cmp	r1, r3
   b9e68:	4680      	mov	r8, r0
   b9e6a:	4689      	mov	r9, r1
   b9e6c:	468a      	mov	sl, r1
   b9e6e:	f340 8118 	ble.w	ba0a2 <__ieee754_pow+0x84a>
   b9e72:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b9e76:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b9e7a:	4303      	orrs	r3, r0
   b9e7c:	f040 8207 	bne.w	ba28e <__ieee754_pow+0xa36>
   b9e80:	a3a3      	add	r3, pc, #652	; (adr r3, ba110 <__ieee754_pow+0x8b8>)
   b9e82:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9e86:	4630      	mov	r0, r6
   b9e88:	4639      	mov	r1, r7
   b9e8a:	f000 fc9d 	bl	ba7c8 <__adddf3>
   b9e8e:	4602      	mov	r2, r0
   b9e90:	460b      	mov	r3, r1
   b9e92:	4640      	mov	r0, r8
   b9e94:	4649      	mov	r1, r9
   b9e96:	4690      	mov	r8, r2
   b9e98:	4699      	mov	r9, r3
   b9e9a:	4622      	mov	r2, r4
   b9e9c:	462b      	mov	r3, r5
   b9e9e:	f000 fc91 	bl	ba7c4 <__aeabi_dsub>
   b9ea2:	4602      	mov	r2, r0
   b9ea4:	460b      	mov	r3, r1
   b9ea6:	4640      	mov	r0, r8
   b9ea8:	4649      	mov	r1, r9
   b9eaa:	f001 f8d3 	bl	bb054 <__aeabi_dcmpgt>
   b9eae:	2800      	cmp	r0, #0
   b9eb0:	f040 81ed 	bne.w	ba28e <__ieee754_pow+0xa36>
   b9eb4:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b9eb8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b9ebc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b9ec0:	fa42 f303 	asr.w	r3, r2, r3
   b9ec4:	4453      	add	r3, sl
   b9ec6:	49ab      	ldr	r1, [pc, #684]	; (ba174 <__ieee754_pow+0x91c>)
   b9ec8:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b9ecc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b9ed0:	fa41 fc02 	asr.w	ip, r1, r2
   b9ed4:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b9ed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9edc:	f1c2 0214 	rsb	r2, r2, #20
   b9ee0:	fa41 f202 	asr.w	r2, r1, r2
   b9ee4:	2000      	movs	r0, #0
   b9ee6:	ea23 010c 	bic.w	r1, r3, ip
   b9eea:	f1ba 0f00 	cmp.w	sl, #0
   b9eee:	9200      	str	r2, [sp, #0]
   b9ef0:	460b      	mov	r3, r1
   b9ef2:	4602      	mov	r2, r0
   b9ef4:	da02      	bge.n	b9efc <__ieee754_pow+0x6a4>
   b9ef6:	9900      	ldr	r1, [sp, #0]
   b9ef8:	4249      	negs	r1, r1
   b9efa:	9100      	str	r1, [sp, #0]
   b9efc:	4620      	mov	r0, r4
   b9efe:	4629      	mov	r1, r5
   b9f00:	f000 fc60 	bl	ba7c4 <__aeabi_dsub>
   b9f04:	9b00      	ldr	r3, [sp, #0]
   b9f06:	051b      	lsls	r3, r3, #20
   b9f08:	9302      	str	r3, [sp, #8]
   b9f0a:	4602      	mov	r2, r0
   b9f0c:	460b      	mov	r3, r1
   b9f0e:	4604      	mov	r4, r0
   b9f10:	460d      	mov	r5, r1
   b9f12:	4630      	mov	r0, r6
   b9f14:	4639      	mov	r1, r7
   b9f16:	f000 fc57 	bl	ba7c8 <__adddf3>
   b9f1a:	4689      	mov	r9, r1
   b9f1c:	f04f 0800 	mov.w	r8, #0
   b9f20:	a37d      	add	r3, pc, #500	; (adr r3, ba118 <__ieee754_pow+0x8c0>)
   b9f22:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9f26:	4640      	mov	r0, r8
   b9f28:	4649      	mov	r1, r9
   b9f2a:	f000 fe03 	bl	bab34 <__aeabi_dmul>
   b9f2e:	4622      	mov	r2, r4
   b9f30:	462b      	mov	r3, r5
   b9f32:	4682      	mov	sl, r0
   b9f34:	468b      	mov	fp, r1
   b9f36:	4640      	mov	r0, r8
   b9f38:	4649      	mov	r1, r9
   b9f3a:	f000 fc43 	bl	ba7c4 <__aeabi_dsub>
   b9f3e:	4602      	mov	r2, r0
   b9f40:	460b      	mov	r3, r1
   b9f42:	4630      	mov	r0, r6
   b9f44:	4639      	mov	r1, r7
   b9f46:	f000 fc3d 	bl	ba7c4 <__aeabi_dsub>
   b9f4a:	a375      	add	r3, pc, #468	; (adr r3, ba120 <__ieee754_pow+0x8c8>)
   b9f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9f50:	f000 fdf0 	bl	bab34 <__aeabi_dmul>
   b9f54:	a374      	add	r3, pc, #464	; (adr r3, ba128 <__ieee754_pow+0x8d0>)
   b9f56:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9f5a:	4604      	mov	r4, r0
   b9f5c:	460d      	mov	r5, r1
   b9f5e:	4640      	mov	r0, r8
   b9f60:	4649      	mov	r1, r9
   b9f62:	f000 fde7 	bl	bab34 <__aeabi_dmul>
   b9f66:	4602      	mov	r2, r0
   b9f68:	460b      	mov	r3, r1
   b9f6a:	4620      	mov	r0, r4
   b9f6c:	4629      	mov	r1, r5
   b9f6e:	f000 fc2b 	bl	ba7c8 <__adddf3>
   b9f72:	4606      	mov	r6, r0
   b9f74:	460f      	mov	r7, r1
   b9f76:	4632      	mov	r2, r6
   b9f78:	463b      	mov	r3, r7
   b9f7a:	4650      	mov	r0, sl
   b9f7c:	4659      	mov	r1, fp
   b9f7e:	f000 fc23 	bl	ba7c8 <__adddf3>
   b9f82:	4652      	mov	r2, sl
   b9f84:	465b      	mov	r3, fp
   b9f86:	4604      	mov	r4, r0
   b9f88:	460d      	mov	r5, r1
   b9f8a:	f000 fc1b 	bl	ba7c4 <__aeabi_dsub>
   b9f8e:	4602      	mov	r2, r0
   b9f90:	460b      	mov	r3, r1
   b9f92:	4630      	mov	r0, r6
   b9f94:	4639      	mov	r1, r7
   b9f96:	f000 fc15 	bl	ba7c4 <__aeabi_dsub>
   b9f9a:	4622      	mov	r2, r4
   b9f9c:	4680      	mov	r8, r0
   b9f9e:	4689      	mov	r9, r1
   b9fa0:	462b      	mov	r3, r5
   b9fa2:	4620      	mov	r0, r4
   b9fa4:	4629      	mov	r1, r5
   b9fa6:	f000 fdc5 	bl	bab34 <__aeabi_dmul>
   b9faa:	a361      	add	r3, pc, #388	; (adr r3, ba130 <__ieee754_pow+0x8d8>)
   b9fac:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9fb0:	4606      	mov	r6, r0
   b9fb2:	460f      	mov	r7, r1
   b9fb4:	f000 fdbe 	bl	bab34 <__aeabi_dmul>
   b9fb8:	a35f      	add	r3, pc, #380	; (adr r3, ba138 <__ieee754_pow+0x8e0>)
   b9fba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9fbe:	f000 fc01 	bl	ba7c4 <__aeabi_dsub>
   b9fc2:	4632      	mov	r2, r6
   b9fc4:	463b      	mov	r3, r7
   b9fc6:	f000 fdb5 	bl	bab34 <__aeabi_dmul>
   b9fca:	a35d      	add	r3, pc, #372	; (adr r3, ba140 <__ieee754_pow+0x8e8>)
   b9fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9fd0:	f000 fbfa 	bl	ba7c8 <__adddf3>
   b9fd4:	4632      	mov	r2, r6
   b9fd6:	463b      	mov	r3, r7
   b9fd8:	f000 fdac 	bl	bab34 <__aeabi_dmul>
   b9fdc:	a35a      	add	r3, pc, #360	; (adr r3, ba148 <__ieee754_pow+0x8f0>)
   b9fde:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9fe2:	f000 fbef 	bl	ba7c4 <__aeabi_dsub>
   b9fe6:	4632      	mov	r2, r6
   b9fe8:	463b      	mov	r3, r7
   b9fea:	f000 fda3 	bl	bab34 <__aeabi_dmul>
   b9fee:	a358      	add	r3, pc, #352	; (adr r3, ba150 <__ieee754_pow+0x8f8>)
   b9ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9ff4:	f000 fbe8 	bl	ba7c8 <__adddf3>
   b9ff8:	4632      	mov	r2, r6
   b9ffa:	463b      	mov	r3, r7
   b9ffc:	f000 fd9a 	bl	bab34 <__aeabi_dmul>
   ba000:	4602      	mov	r2, r0
   ba002:	460b      	mov	r3, r1
   ba004:	4620      	mov	r0, r4
   ba006:	4629      	mov	r1, r5
   ba008:	f000 fbdc 	bl	ba7c4 <__aeabi_dsub>
   ba00c:	4606      	mov	r6, r0
   ba00e:	460f      	mov	r7, r1
   ba010:	4632      	mov	r2, r6
   ba012:	463b      	mov	r3, r7
   ba014:	4620      	mov	r0, r4
   ba016:	4629      	mov	r1, r5
   ba018:	f000 fd8c 	bl	bab34 <__aeabi_dmul>
   ba01c:	4602      	mov	r2, r0
   ba01e:	460b      	mov	r3, r1
   ba020:	4630      	mov	r0, r6
   ba022:	4639      	mov	r1, r7
   ba024:	4616      	mov	r6, r2
   ba026:	461f      	mov	r7, r3
   ba028:	2200      	movs	r2, #0
   ba02a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ba02e:	f000 fbc9 	bl	ba7c4 <__aeabi_dsub>
   ba032:	4602      	mov	r2, r0
   ba034:	460b      	mov	r3, r1
   ba036:	4630      	mov	r0, r6
   ba038:	4639      	mov	r1, r7
   ba03a:	f000 fea5 	bl	bad88 <__aeabi_ddiv>
   ba03e:	4642      	mov	r2, r8
   ba040:	4606      	mov	r6, r0
   ba042:	460f      	mov	r7, r1
   ba044:	464b      	mov	r3, r9
   ba046:	4620      	mov	r0, r4
   ba048:	4629      	mov	r1, r5
   ba04a:	f000 fd73 	bl	bab34 <__aeabi_dmul>
   ba04e:	4642      	mov	r2, r8
   ba050:	464b      	mov	r3, r9
   ba052:	f000 fbb9 	bl	ba7c8 <__adddf3>
   ba056:	4602      	mov	r2, r0
   ba058:	460b      	mov	r3, r1
   ba05a:	4630      	mov	r0, r6
   ba05c:	4639      	mov	r1, r7
   ba05e:	f000 fbb1 	bl	ba7c4 <__aeabi_dsub>
   ba062:	4622      	mov	r2, r4
   ba064:	462b      	mov	r3, r5
   ba066:	f000 fbad 	bl	ba7c4 <__aeabi_dsub>
   ba06a:	4602      	mov	r2, r0
   ba06c:	460b      	mov	r3, r1
   ba06e:	2000      	movs	r0, #0
   ba070:	4941      	ldr	r1, [pc, #260]	; (ba178 <__ieee754_pow+0x920>)
   ba072:	f000 fba7 	bl	ba7c4 <__aeabi_dsub>
   ba076:	9a02      	ldr	r2, [sp, #8]
   ba078:	460b      	mov	r3, r1
   ba07a:	4413      	add	r3, r2
   ba07c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   ba080:	f2c0 8143 	blt.w	ba30a <__ieee754_pow+0xab2>
   ba084:	4619      	mov	r1, r3
   ba086:	ec53 2b18 	vmov	r2, r3, d8
   ba08a:	f000 fd53 	bl	bab34 <__aeabi_dmul>
   ba08e:	ec41 0b10 	vmov	d0, r0, r1
   ba092:	e42d      	b.n	b98f0 <__ieee754_pow+0x98>
   ba094:	f1bb 0f00 	cmp.w	fp, #0
   ba098:	f6ff aca0 	blt.w	b99dc <__ieee754_pow+0x184>
   ba09c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; ba158 <__ieee754_pow+0x900>
   ba0a0:	e426      	b.n	b98f0 <__ieee754_pow+0x98>
   ba0a2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; ba180 <__ieee754_pow+0x928>
   ba0a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ba0aa:	4563      	cmp	r3, ip
   ba0ac:	f340 80e7 	ble.w	ba27e <__ieee754_pow+0xa26>
   ba0b0:	4b32      	ldr	r3, [pc, #200]	; (ba17c <__ieee754_pow+0x924>)
   ba0b2:	440b      	add	r3, r1
   ba0b4:	4303      	orrs	r3, r0
   ba0b6:	d10a      	bne.n	ba0ce <__ieee754_pow+0x876>
   ba0b8:	4622      	mov	r2, r4
   ba0ba:	462b      	mov	r3, r5
   ba0bc:	f000 fb82 	bl	ba7c4 <__aeabi_dsub>
   ba0c0:	4632      	mov	r2, r6
   ba0c2:	463b      	mov	r3, r7
   ba0c4:	f000 ffbc 	bl	bb040 <__aeabi_dcmpge>
   ba0c8:	2800      	cmp	r0, #0
   ba0ca:	f43f aef3 	beq.w	b9eb4 <__ieee754_pow+0x65c>
   ba0ce:	a324      	add	r3, pc, #144	; (adr r3, ba160 <__ieee754_pow+0x908>)
   ba0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba0d4:	ec51 0b18 	vmov	r0, r1, d8
   ba0d8:	f000 fd2c 	bl	bab34 <__aeabi_dmul>
   ba0dc:	a320      	add	r3, pc, #128	; (adr r3, ba160 <__ieee754_pow+0x908>)
   ba0de:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba0e2:	f000 fd27 	bl	bab34 <__aeabi_dmul>
   ba0e6:	ec41 0b10 	vmov	d0, r0, r1
   ba0ea:	e401      	b.n	b98f0 <__ieee754_pow+0x98>
   ba0ec:	ed9f 7b1e 	vldr	d7, [pc, #120]	; ba168 <__ieee754_pow+0x910>
   ba0f0:	eeb0 8a47 	vmov.f32	s16, s14
   ba0f4:	eef0 8a67 	vmov.f32	s17, s15
   ba0f8:	e686      	b.n	b9e08 <__ieee754_pow+0x5b0>
   ba0fa:	f1bb 0f00 	cmp.w	fp, #0
   ba0fe:	dacd      	bge.n	ba09c <__ieee754_pow+0x844>
   ba100:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   ba104:	ee00 6a10 	vmov	s0, r6
   ba108:	ee00 3a90 	vmov	s1, r3
   ba10c:	f7ff bbf0 	b.w	b98f0 <__ieee754_pow+0x98>
   ba110:	652b82fe 	.word	0x652b82fe
   ba114:	3c971547 	.word	0x3c971547
   ba118:	00000000 	.word	0x00000000
   ba11c:	3fe62e43 	.word	0x3fe62e43
   ba120:	fefa39ef 	.word	0xfefa39ef
   ba124:	3fe62e42 	.word	0x3fe62e42
   ba128:	0ca86c39 	.word	0x0ca86c39
   ba12c:	be205c61 	.word	0xbe205c61
   ba130:	72bea4d0 	.word	0x72bea4d0
   ba134:	3e663769 	.word	0x3e663769
   ba138:	c5d26bf1 	.word	0xc5d26bf1
   ba13c:	3ebbbd41 	.word	0x3ebbbd41
   ba140:	af25de2c 	.word	0xaf25de2c
   ba144:	3f11566a 	.word	0x3f11566a
   ba148:	16bebd93 	.word	0x16bebd93
   ba14c:	3f66c16c 	.word	0x3f66c16c
   ba150:	5555553e 	.word	0x5555553e
   ba154:	3fc55555 	.word	0x3fc55555
	...
   ba160:	c2f8f359 	.word	0xc2f8f359
   ba164:	01a56e1f 	.word	0x01a56e1f
   ba168:	00000000 	.word	0x00000000
   ba16c:	3ff00000 	.word	0x3ff00000
   ba170:	408fffff 	.word	0x408fffff
   ba174:	000fffff 	.word	0x000fffff
   ba178:	3ff00000 	.word	0x3ff00000
   ba17c:	3f6f3400 	.word	0x3f6f3400
   ba180:	4090cbff 	.word	0x4090cbff
   ba184:	4598      	cmp	r8, r3
   ba186:	db85      	blt.n	ba094 <__ieee754_pow+0x83c>
   ba188:	4b7d      	ldr	r3, [pc, #500]	; (ba380 <__ieee754_pow+0xb28>)
   ba18a:	4598      	cmp	r8, r3
   ba18c:	f73f ac22 	bgt.w	b99d4 <__ieee754_pow+0x17c>
   ba190:	ec51 0b10 	vmov	r0, r1, d0
   ba194:	4b7a      	ldr	r3, [pc, #488]	; (ba380 <__ieee754_pow+0xb28>)
   ba196:	2200      	movs	r2, #0
   ba198:	f000 fb14 	bl	ba7c4 <__aeabi_dsub>
   ba19c:	a368      	add	r3, pc, #416	; (adr r3, ba340 <__ieee754_pow+0xae8>)
   ba19e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba1a2:	4604      	mov	r4, r0
   ba1a4:	460d      	mov	r5, r1
   ba1a6:	f000 fcc5 	bl	bab34 <__aeabi_dmul>
   ba1aa:	a367      	add	r3, pc, #412	; (adr r3, ba348 <__ieee754_pow+0xaf0>)
   ba1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba1b0:	4682      	mov	sl, r0
   ba1b2:	468b      	mov	fp, r1
   ba1b4:	4620      	mov	r0, r4
   ba1b6:	4629      	mov	r1, r5
   ba1b8:	f000 fcbc 	bl	bab34 <__aeabi_dmul>
   ba1bc:	4b71      	ldr	r3, [pc, #452]	; (ba384 <__ieee754_pow+0xb2c>)
   ba1be:	ec41 0b18 	vmov	d8, r0, r1
   ba1c2:	2200      	movs	r2, #0
   ba1c4:	4620      	mov	r0, r4
   ba1c6:	4629      	mov	r1, r5
   ba1c8:	f000 fcb4 	bl	bab34 <__aeabi_dmul>
   ba1cc:	4602      	mov	r2, r0
   ba1ce:	460b      	mov	r3, r1
   ba1d0:	a15f      	add	r1, pc, #380	; (adr r1, ba350 <__ieee754_pow+0xaf8>)
   ba1d2:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba1d6:	f000 faf5 	bl	ba7c4 <__aeabi_dsub>
   ba1da:	4622      	mov	r2, r4
   ba1dc:	462b      	mov	r3, r5
   ba1de:	f000 fca9 	bl	bab34 <__aeabi_dmul>
   ba1e2:	4602      	mov	r2, r0
   ba1e4:	460b      	mov	r3, r1
   ba1e6:	2000      	movs	r0, #0
   ba1e8:	4967      	ldr	r1, [pc, #412]	; (ba388 <__ieee754_pow+0xb30>)
   ba1ea:	f000 faeb 	bl	ba7c4 <__aeabi_dsub>
   ba1ee:	4622      	mov	r2, r4
   ba1f0:	4680      	mov	r8, r0
   ba1f2:	4689      	mov	r9, r1
   ba1f4:	462b      	mov	r3, r5
   ba1f6:	4620      	mov	r0, r4
   ba1f8:	4629      	mov	r1, r5
   ba1fa:	f000 fc9b 	bl	bab34 <__aeabi_dmul>
   ba1fe:	4602      	mov	r2, r0
   ba200:	460b      	mov	r3, r1
   ba202:	4640      	mov	r0, r8
   ba204:	4649      	mov	r1, r9
   ba206:	f000 fc95 	bl	bab34 <__aeabi_dmul>
   ba20a:	a353      	add	r3, pc, #332	; (adr r3, ba358 <__ieee754_pow+0xb00>)
   ba20c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba210:	f000 fc90 	bl	bab34 <__aeabi_dmul>
   ba214:	4602      	mov	r2, r0
   ba216:	460b      	mov	r3, r1
   ba218:	ec51 0b18 	vmov	r0, r1, d8
   ba21c:	f000 fad2 	bl	ba7c4 <__aeabi_dsub>
   ba220:	4680      	mov	r8, r0
   ba222:	4689      	mov	r9, r1
   ba224:	4642      	mov	r2, r8
   ba226:	464b      	mov	r3, r9
   ba228:	4650      	mov	r0, sl
   ba22a:	4659      	mov	r1, fp
   ba22c:	f000 facc 	bl	ba7c8 <__adddf3>
   ba230:	2000      	movs	r0, #0
   ba232:	4652      	mov	r2, sl
   ba234:	465b      	mov	r3, fp
   ba236:	4604      	mov	r4, r0
   ba238:	460d      	mov	r5, r1
   ba23a:	e591      	b.n	b9d60 <__ieee754_pow+0x508>
   ba23c:	4622      	mov	r2, r4
   ba23e:	462b      	mov	r3, r5
   ba240:	4620      	mov	r0, r4
   ba242:	4629      	mov	r1, r5
   ba244:	f000 fc76 	bl	bab34 <__aeabi_dmul>
   ba248:	ec41 0b10 	vmov	d0, r0, r1
   ba24c:	f7ff bb50 	b.w	b98f0 <__ieee754_pow+0x98>
   ba250:	494b      	ldr	r1, [pc, #300]	; (ba380 <__ieee754_pow+0xb28>)
   ba252:	2000      	movs	r0, #0
   ba254:	4622      	mov	r2, r4
   ba256:	462b      	mov	r3, r5
   ba258:	f000 fd96 	bl	bad88 <__aeabi_ddiv>
   ba25c:	ec41 0b10 	vmov	d0, r0, r1
   ba260:	f7ff bb46 	b.w	b98f0 <__ieee754_pow+0x98>
   ba264:	2b00      	cmp	r3, #0
   ba266:	d144      	bne.n	ba2f2 <__ieee754_pow+0xa9a>
   ba268:	f1c1 0114 	rsb	r1, r1, #20
   ba26c:	fa4a f001 	asr.w	r0, sl, r1
   ba270:	fa00 f101 	lsl.w	r1, r0, r1
   ba274:	4551      	cmp	r1, sl
   ba276:	d05a      	beq.n	ba32e <__ieee754_pow+0xad6>
   ba278:	9300      	str	r3, [sp, #0]
   ba27a:	f7ff bb17 	b.w	b98ac <__ieee754_pow+0x54>
   ba27e:	4a42      	ldr	r2, [pc, #264]	; (ba388 <__ieee754_pow+0xb30>)
   ba280:	4293      	cmp	r3, r2
   ba282:	dc5b      	bgt.n	ba33c <__ieee754_pow+0xae4>
   ba284:	e9dd 1200 	ldrd	r1, r2, [sp]
   ba288:	9102      	str	r1, [sp, #8]
   ba28a:	9100      	str	r1, [sp, #0]
   ba28c:	e646      	b.n	b9f1c <__ieee754_pow+0x6c4>
   ba28e:	a334      	add	r3, pc, #208	; (adr r3, ba360 <__ieee754_pow+0xb08>)
   ba290:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba294:	ec51 0b18 	vmov	r0, r1, d8
   ba298:	f000 fc4c 	bl	bab34 <__aeabi_dmul>
   ba29c:	a330      	add	r3, pc, #192	; (adr r3, ba360 <__ieee754_pow+0xb08>)
   ba29e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba2a2:	f000 fc47 	bl	bab34 <__aeabi_dmul>
   ba2a6:	ec41 0b10 	vmov	d0, r0, r1
   ba2aa:	f7ff bb21 	b.w	b98f0 <__ieee754_pow+0x98>
   ba2ae:	9b00      	ldr	r3, [sp, #0]
   ba2b0:	2b01      	cmp	r3, #1
   ba2b2:	f47f ab1d 	bne.w	b98f0 <__ieee754_pow+0x98>
   ba2b6:	ee10 1a90 	vmov	r1, s1
   ba2ba:	ee10 2a10 	vmov	r2, s0
   ba2be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba2c2:	ec43 2b10 	vmov	d0, r2, r3
   ba2c6:	f7ff bb13 	b.w	b98f0 <__ieee754_pow+0x98>
   ba2ca:	ed9f 7b27 	vldr	d7, [pc, #156]	; ba368 <__ieee754_pow+0xb10>
   ba2ce:	eeb0 ca47 	vmov.f32	s24, s14
   ba2d2:	eef0 ca67 	vmov.f32	s25, s15
   ba2d6:	ed9f 7b26 	vldr	d7, [pc, #152]	; ba370 <__ieee754_pow+0xb18>
   ba2da:	eeb0 da47 	vmov.f32	s26, s14
   ba2de:	eef0 da67 	vmov.f32	s27, s15
   ba2e2:	ed9f 7b25 	vldr	d7, [pc, #148]	; ba378 <__ieee754_pow+0xb20>
   ba2e6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   ba2ea:	ec53 2b17 	vmov	r2, r3, d7
   ba2ee:	f7ff bbeb 	b.w	b9ac8 <__ieee754_pow+0x270>
   ba2f2:	ec45 4b10 	vmov	d0, r4, r5
   ba2f6:	9200      	str	r2, [sp, #0]
   ba2f8:	f000 f914 	bl	ba524 <fabs>
   ba2fc:	9a00      	ldr	r2, [sp, #0]
   ba2fe:	2a00      	cmp	r2, #0
   ba300:	f47f ab92 	bne.w	b9a28 <__ieee754_pow+0x1d0>
   ba304:	9200      	str	r2, [sp, #0]
   ba306:	f7ff bb26 	b.w	b9956 <__ieee754_pow+0xfe>
   ba30a:	ec41 0b10 	vmov	d0, r0, r1
   ba30e:	9800      	ldr	r0, [sp, #0]
   ba310:	f000 f9c2 	bl	ba698 <scalbn>
   ba314:	ec51 0b10 	vmov	r0, r1, d0
   ba318:	e6b5      	b.n	ba086 <__ieee754_pow+0x82e>
   ba31a:	f000 0001 	and.w	r0, r0, #1
   ba31e:	f1c0 0102 	rsb	r1, r0, #2
   ba322:	9100      	str	r1, [sp, #0]
   ba324:	2b00      	cmp	r3, #0
   ba326:	f43f aac1 	beq.w	b98ac <__ieee754_pow+0x54>
   ba32a:	f7ff bb0d 	b.w	b9948 <__ieee754_pow+0xf0>
   ba32e:	f000 0001 	and.w	r0, r0, #1
   ba332:	f1c0 0302 	rsb	r3, r0, #2
   ba336:	9300      	str	r3, [sp, #0]
   ba338:	f7ff bab8 	b.w	b98ac <__ieee754_pow+0x54>
   ba33c:	151b      	asrs	r3, r3, #20
   ba33e:	e5bb      	b.n	b9eb8 <__ieee754_pow+0x660>
   ba340:	60000000 	.word	0x60000000
   ba344:	3ff71547 	.word	0x3ff71547
   ba348:	f85ddf44 	.word	0xf85ddf44
   ba34c:	3e54ae0b 	.word	0x3e54ae0b
   ba350:	55555555 	.word	0x55555555
   ba354:	3fd55555 	.word	0x3fd55555
   ba358:	652b82fe 	.word	0x652b82fe
   ba35c:	3ff71547 	.word	0x3ff71547
   ba360:	8800759c 	.word	0x8800759c
   ba364:	7e37e43c 	.word	0x7e37e43c
   ba368:	40000000 	.word	0x40000000
   ba36c:	3fe2b803 	.word	0x3fe2b803
   ba370:	43cfd006 	.word	0x43cfd006
   ba374:	3e4cfdeb 	.word	0x3e4cfdeb
   ba378:	00000000 	.word	0x00000000
   ba37c:	3ff80000 	.word	0x3ff80000
   ba380:	3ff00000 	.word	0x3ff00000
   ba384:	3fd00000 	.word	0x3fd00000
   ba388:	3fe00000 	.word	0x3fe00000

000ba38c <__ieee754_sqrt>:
   ba38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba390:	4a63      	ldr	r2, [pc, #396]	; (ba520 <__ieee754_sqrt+0x194>)
   ba392:	ec55 4b10 	vmov	r4, r5, d0
   ba396:	43aa      	bics	r2, r5
   ba398:	f000 809f 	beq.w	ba4da <__ieee754_sqrt+0x14e>
   ba39c:	2d00      	cmp	r5, #0
   ba39e:	ee10 ca10 	vmov	ip, s0
   ba3a2:	462b      	mov	r3, r5
   ba3a4:	dd54      	ble.n	ba450 <__ieee754_sqrt+0xc4>
   ba3a6:	1529      	asrs	r1, r5, #20
   ba3a8:	d063      	beq.n	ba472 <__ieee754_sqrt+0xe6>
   ba3aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba3ae:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   ba3b2:	07c9      	lsls	r1, r1, #31
   ba3b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba3b8:	d404      	bmi.n	ba3c4 <__ieee754_sqrt+0x38>
   ba3ba:	005b      	lsls	r3, r3, #1
   ba3bc:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba3c0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba3c4:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   ba3c8:	2600      	movs	r6, #0
   ba3ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   ba3ce:	107f      	asrs	r7, r7, #1
   ba3d0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba3d4:	f04f 0e16 	mov.w	lr, #22
   ba3d8:	4634      	mov	r4, r6
   ba3da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   ba3de:	18a1      	adds	r1, r4, r2
   ba3e0:	4299      	cmp	r1, r3
   ba3e2:	dc02      	bgt.n	ba3ea <__ieee754_sqrt+0x5e>
   ba3e4:	1a5b      	subs	r3, r3, r1
   ba3e6:	188c      	adds	r4, r1, r2
   ba3e8:	4416      	add	r6, r2
   ba3ea:	005b      	lsls	r3, r3, #1
   ba3ec:	f1be 0e01 	subs.w	lr, lr, #1
   ba3f0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba3f4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba3f8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba3fc:	d1ef      	bne.n	ba3de <__ieee754_sqrt+0x52>
   ba3fe:	4675      	mov	r5, lr
   ba400:	2020      	movs	r0, #32
   ba402:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   ba406:	e00a      	b.n	ba41e <__ieee754_sqrt+0x92>
   ba408:	d044      	beq.n	ba494 <__ieee754_sqrt+0x108>
   ba40a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   ba40e:	3801      	subs	r0, #1
   ba410:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   ba414:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba418:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba41c:	d043      	beq.n	ba4a6 <__ieee754_sqrt+0x11a>
   ba41e:	42a3      	cmp	r3, r4
   ba420:	eb02 010e 	add.w	r1, r2, lr
   ba424:	ddf0      	ble.n	ba408 <__ieee754_sqrt+0x7c>
   ba426:	2900      	cmp	r1, #0
   ba428:	eb01 0e02 	add.w	lr, r1, r2
   ba42c:	db0a      	blt.n	ba444 <__ieee754_sqrt+0xb8>
   ba42e:	46a0      	mov	r8, r4
   ba430:	1b1b      	subs	r3, r3, r4
   ba432:	4561      	cmp	r1, ip
   ba434:	bf88      	it	hi
   ba436:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   ba43a:	ebac 0c01 	sub.w	ip, ip, r1
   ba43e:	4415      	add	r5, r2
   ba440:	4644      	mov	r4, r8
   ba442:	e7e2      	b.n	ba40a <__ieee754_sqrt+0x7e>
   ba444:	f1be 0f00 	cmp.w	lr, #0
   ba448:	dbf1      	blt.n	ba42e <__ieee754_sqrt+0xa2>
   ba44a:	f104 0801 	add.w	r8, r4, #1
   ba44e:	e7ef      	b.n	ba430 <__ieee754_sqrt+0xa4>
   ba450:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   ba454:	4322      	orrs	r2, r4
   ba456:	d038      	beq.n	ba4ca <__ieee754_sqrt+0x13e>
   ba458:	2d00      	cmp	r5, #0
   ba45a:	d14e      	bne.n	ba4fa <__ieee754_sqrt+0x16e>
   ba45c:	4629      	mov	r1, r5
   ba45e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   ba462:	3915      	subs	r1, #21
   ba464:	4613      	mov	r3, r2
   ba466:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   ba46a:	2a00      	cmp	r2, #0
   ba46c:	d0f7      	beq.n	ba45e <__ieee754_sqrt+0xd2>
   ba46e:	02d6      	lsls	r6, r2, #11
   ba470:	d450      	bmi.n	ba514 <__ieee754_sqrt+0x188>
   ba472:	2000      	movs	r0, #0
   ba474:	005b      	lsls	r3, r3, #1
   ba476:	02dd      	lsls	r5, r3, #11
   ba478:	4604      	mov	r4, r0
   ba47a:	f100 0001 	add.w	r0, r0, #1
   ba47e:	d5f9      	bpl.n	ba474 <__ieee754_sqrt+0xe8>
   ba480:	461a      	mov	r2, r3
   ba482:	4663      	mov	r3, ip
   ba484:	fa0c fc00 	lsl.w	ip, ip, r0
   ba488:	f1c0 0020 	rsb	r0, r0, #32
   ba48c:	40c3      	lsrs	r3, r0
   ba48e:	1b09      	subs	r1, r1, r4
   ba490:	4313      	orrs	r3, r2
   ba492:	e78a      	b.n	ba3aa <__ieee754_sqrt+0x1e>
   ba494:	4561      	cmp	r1, ip
   ba496:	d8b8      	bhi.n	ba40a <__ieee754_sqrt+0x7e>
   ba498:	2900      	cmp	r1, #0
   ba49a:	eb01 0e02 	add.w	lr, r1, r2
   ba49e:	dbd1      	blt.n	ba444 <__ieee754_sqrt+0xb8>
   ba4a0:	4698      	mov	r8, r3
   ba4a2:	2300      	movs	r3, #0
   ba4a4:	e7c9      	b.n	ba43a <__ieee754_sqrt+0xae>
   ba4a6:	ea53 030c 	orrs.w	r3, r3, ip
   ba4aa:	d110      	bne.n	ba4ce <__ieee754_sqrt+0x142>
   ba4ac:	0868      	lsrs	r0, r5, #1
   ba4ae:	1071      	asrs	r1, r6, #1
   ba4b0:	07f3      	lsls	r3, r6, #31
   ba4b2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   ba4b6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   ba4ba:	bf48      	it	mi
   ba4bc:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   ba4c0:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   ba4c4:	4602      	mov	r2, r0
   ba4c6:	ec43 2b10 	vmov	d0, r2, r3
   ba4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba4ce:	1c6a      	adds	r2, r5, #1
   ba4d0:	bf16      	itet	ne
   ba4d2:	1c68      	addne	r0, r5, #1
   ba4d4:	3601      	addeq	r6, #1
   ba4d6:	0840      	lsrne	r0, r0, #1
   ba4d8:	e7e9      	b.n	ba4ae <__ieee754_sqrt+0x122>
   ba4da:	ee10 2a10 	vmov	r2, s0
   ba4de:	ee10 0a10 	vmov	r0, s0
   ba4e2:	462b      	mov	r3, r5
   ba4e4:	4629      	mov	r1, r5
   ba4e6:	f000 fb25 	bl	bab34 <__aeabi_dmul>
   ba4ea:	4622      	mov	r2, r4
   ba4ec:	462b      	mov	r3, r5
   ba4ee:	f000 f96b 	bl	ba7c8 <__adddf3>
   ba4f2:	ec41 0b10 	vmov	d0, r0, r1
   ba4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba4fa:	ee10 2a10 	vmov	r2, s0
   ba4fe:	4620      	mov	r0, r4
   ba500:	4629      	mov	r1, r5
   ba502:	f000 f95f 	bl	ba7c4 <__aeabi_dsub>
   ba506:	4602      	mov	r2, r0
   ba508:	460b      	mov	r3, r1
   ba50a:	f000 fc3d 	bl	bad88 <__aeabi_ddiv>
   ba50e:	ec41 0b10 	vmov	d0, r0, r1
   ba512:	e7da      	b.n	ba4ca <__ieee754_sqrt+0x13e>
   ba514:	4663      	mov	r3, ip
   ba516:	2020      	movs	r0, #32
   ba518:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba51c:	e7b6      	b.n	ba48c <__ieee754_sqrt+0x100>
   ba51e:	bf00      	nop
   ba520:	7ff00000 	.word	0x7ff00000

000ba524 <fabs>:
   ba524:	ec51 0b10 	vmov	r0, r1, d0
   ba528:	ee10 2a10 	vmov	r2, s0
   ba52c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ba530:	ec43 2b10 	vmov	d0, r2, r3
   ba534:	4770      	bx	lr
   ba536:	bf00      	nop

000ba538 <finite>:
   ba538:	b082      	sub	sp, #8
   ba53a:	ed8d 0b00 	vstr	d0, [sp]
   ba53e:	9801      	ldr	r0, [sp, #4]
   ba540:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   ba544:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   ba548:	0fc0      	lsrs	r0, r0, #31
   ba54a:	b002      	add	sp, #8
   ba54c:	4770      	bx	lr
   ba54e:	bf00      	nop

000ba550 <nan>:
   ba550:	ed9f 0b01 	vldr	d0, [pc, #4]	; ba558 <nan+0x8>
   ba554:	4770      	bx	lr
   ba556:	bf00      	nop
   ba558:	00000000 	.word	0x00000000
   ba55c:	7ff80000 	.word	0x7ff80000

000ba560 <rint>:
   ba560:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba562:	ec53 2b10 	vmov	r2, r3, d0
   ba566:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   ba56a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   ba56e:	2913      	cmp	r1, #19
   ba570:	ee10 0a10 	vmov	r0, s0
   ba574:	b083      	sub	sp, #12
   ba576:	461c      	mov	r4, r3
   ba578:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   ba57c:	dc3a      	bgt.n	ba5f4 <rint+0x94>
   ba57e:	2900      	cmp	r1, #0
   ba580:	db30      	blt.n	ba5e4 <rint+0x84>
   ba582:	4d42      	ldr	r5, [pc, #264]	; (ba68c <rint+0x12c>)
   ba584:	fa45 fc01 	asr.w	ip, r5, r1
   ba588:	ea03 050c 	and.w	r5, r3, ip
   ba58c:	4315      	orrs	r5, r2
   ba58e:	d02d      	beq.n	ba5ec <rint+0x8c>
   ba590:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   ba594:	4318      	orrs	r0, r3
   ba596:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   ba59a:	d00c      	beq.n	ba5b6 <rint+0x56>
   ba59c:	ea24 0c0c 	bic.w	ip, r4, ip
   ba5a0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   ba5a4:	2913      	cmp	r1, #19
   ba5a6:	fa44 f101 	asr.w	r1, r4, r1
   ba5aa:	bf0c      	ite	eq
   ba5ac:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   ba5b0:	2000      	movne	r0, #0
   ba5b2:	ea4c 0401 	orr.w	r4, ip, r1
   ba5b6:	4936      	ldr	r1, [pc, #216]	; (ba690 <rint+0x130>)
   ba5b8:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   ba5bc:	4623      	mov	r3, r4
   ba5be:	e9de 4500 	ldrd	r4, r5, [lr]
   ba5c2:	4602      	mov	r2, r0
   ba5c4:	4629      	mov	r1, r5
   ba5c6:	4620      	mov	r0, r4
   ba5c8:	f000 f8fe 	bl	ba7c8 <__adddf3>
   ba5cc:	e9cd 0100 	strd	r0, r1, [sp]
   ba5d0:	e9dd 0100 	ldrd	r0, r1, [sp]
   ba5d4:	4622      	mov	r2, r4
   ba5d6:	462b      	mov	r3, r5
   ba5d8:	f000 f8f4 	bl	ba7c4 <__aeabi_dsub>
   ba5dc:	ec41 0b10 	vmov	d0, r0, r1
   ba5e0:	b003      	add	sp, #12
   ba5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba5e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   ba5e8:	4311      	orrs	r1, r2
   ba5ea:	d124      	bne.n	ba636 <rint+0xd6>
   ba5ec:	ec43 2b10 	vmov	d0, r2, r3
   ba5f0:	b003      	add	sp, #12
   ba5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba5f4:	2933      	cmp	r1, #51	; 0x33
   ba5f6:	dd08      	ble.n	ba60a <rint+0xaa>
   ba5f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   ba5fc:	d1f6      	bne.n	ba5ec <rint+0x8c>
   ba5fe:	4619      	mov	r1, r3
   ba600:	f000 f8e2 	bl	ba7c8 <__adddf3>
   ba604:	ec41 0b10 	vmov	d0, r0, r1
   ba608:	e7f2      	b.n	ba5f0 <rint+0x90>
   ba60a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   ba60e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   ba612:	fa21 f10c 	lsr.w	r1, r1, ip
   ba616:	420a      	tst	r2, r1
   ba618:	d0e8      	beq.n	ba5ec <rint+0x8c>
   ba61a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   ba61e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   ba622:	d0c8      	beq.n	ba5b6 <rint+0x56>
   ba624:	ea20 0303 	bic.w	r3, r0, r3
   ba628:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   ba62c:	fa40 fc0c 	asr.w	ip, r0, ip
   ba630:	ea43 000c 	orr.w	r0, r3, ip
   ba634:	e7bf      	b.n	ba5b6 <rint+0x56>
   ba636:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba63a:	4318      	orrs	r0, r3
   ba63c:	4a14      	ldr	r2, [pc, #80]	; (ba690 <rint+0x130>)
   ba63e:	4243      	negs	r3, r0
   ba640:	4303      	orrs	r3, r0
   ba642:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   ba646:	0b1b      	lsrs	r3, r3, #12
   ba648:	0c62      	lsrs	r2, r4, #17
   ba64a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   ba64e:	0452      	lsls	r2, r2, #17
   ba650:	ea43 0702 	orr.w	r7, r3, r2
   ba654:	463b      	mov	r3, r7
   ba656:	e9de 6700 	ldrd	r6, r7, [lr]
   ba65a:	ee10 2a10 	vmov	r2, s0
   ba65e:	4630      	mov	r0, r6
   ba660:	4639      	mov	r1, r7
   ba662:	f000 f8b1 	bl	ba7c8 <__adddf3>
   ba666:	e9cd 0100 	strd	r0, r1, [sp]
   ba66a:	4632      	mov	r2, r6
   ba66c:	463b      	mov	r3, r7
   ba66e:	e9dd 0100 	ldrd	r0, r1, [sp]
   ba672:	f000 f8a7 	bl	ba7c4 <__aeabi_dsub>
   ba676:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   ba67a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba67e:	4602      	mov	r2, r0
   ba680:	ea41 0304 	orr.w	r3, r1, r4
   ba684:	ec43 2b10 	vmov	d0, r2, r3
   ba688:	b003      	add	sp, #12
   ba68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba68c:	000fffff 	.word	0x000fffff
   ba690:	000c0e08 	.word	0x000c0e08
   ba694:	00000000 	.word	0x00000000

000ba698 <scalbn>:
   ba698:	b538      	push	{r3, r4, r5, lr}
   ba69a:	ec53 2b10 	vmov	r2, r3, d0
   ba69e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   ba6a2:	4604      	mov	r4, r0
   ba6a4:	469c      	mov	ip, r3
   ba6a6:	bb89      	cbnz	r1, ba70c <scalbn+0x74>
   ba6a8:	ee10 1a10 	vmov	r1, s0
   ba6ac:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   ba6b0:	ea5c 0101 	orrs.w	r1, ip, r1
   ba6b4:	d029      	beq.n	ba70a <scalbn+0x72>
   ba6b6:	4619      	mov	r1, r3
   ba6b8:	2200      	movs	r2, #0
   ba6ba:	4b3d      	ldr	r3, [pc, #244]	; (ba7b0 <scalbn+0x118>)
   ba6bc:	4d3d      	ldr	r5, [pc, #244]	; (ba7b4 <scalbn+0x11c>)
   ba6be:	ee10 0a10 	vmov	r0, s0
   ba6c2:	f000 fa37 	bl	bab34 <__aeabi_dmul>
   ba6c6:	42ac      	cmp	r4, r5
   ba6c8:	4602      	mov	r2, r0
   ba6ca:	460b      	mov	r3, r1
   ba6cc:	db16      	blt.n	ba6fc <scalbn+0x64>
   ba6ce:	468c      	mov	ip, r1
   ba6d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
   ba6d4:	3936      	subs	r1, #54	; 0x36
   ba6d6:	4421      	add	r1, r4
   ba6d8:	f240 70fe 	movw	r0, #2046	; 0x7fe
   ba6dc:	4281      	cmp	r1, r0
   ba6de:	dc21      	bgt.n	ba724 <scalbn+0x8c>
   ba6e0:	2900      	cmp	r1, #0
   ba6e2:	dc47      	bgt.n	ba774 <scalbn+0xdc>
   ba6e4:	f111 0f35 	cmn.w	r1, #53	; 0x35
   ba6e8:	da34      	bge.n	ba754 <scalbn+0xbc>
   ba6ea:	f24c 3150 	movw	r1, #50000	; 0xc350
   ba6ee:	428c      	cmp	r4, r1
   ba6f0:	dc18      	bgt.n	ba724 <scalbn+0x8c>
   ba6f2:	2b00      	cmp	r3, #0
   ba6f4:	a126      	add	r1, pc, #152	; (adr r1, ba790 <scalbn+0xf8>)
   ba6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba6fa:	db44      	blt.n	ba786 <scalbn+0xee>
   ba6fc:	a324      	add	r3, pc, #144	; (adr r3, ba790 <scalbn+0xf8>)
   ba6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba702:	f000 fa17 	bl	bab34 <__aeabi_dmul>
   ba706:	ec41 0b10 	vmov	d0, r0, r1
   ba70a:	bd38      	pop	{r3, r4, r5, pc}
   ba70c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   ba710:	4281      	cmp	r1, r0
   ba712:	d1e0      	bne.n	ba6d6 <scalbn+0x3e>
   ba714:	ee10 0a10 	vmov	r0, s0
   ba718:	4619      	mov	r1, r3
   ba71a:	f000 f855 	bl	ba7c8 <__adddf3>
   ba71e:	ec41 0b10 	vmov	d0, r0, r1
   ba722:	bd38      	pop	{r3, r4, r5, pc}
   ba724:	2b00      	cmp	r3, #0
   ba726:	a11c      	add	r1, pc, #112	; (adr r1, ba798 <scalbn+0x100>)
   ba728:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba72c:	db07      	blt.n	ba73e <scalbn+0xa6>
   ba72e:	a31a      	add	r3, pc, #104	; (adr r3, ba798 <scalbn+0x100>)
   ba730:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba734:	f000 f9fe 	bl	bab34 <__aeabi_dmul>
   ba738:	ec41 0b10 	vmov	d0, r0, r1
   ba73c:	bd38      	pop	{r3, r4, r5, pc}
   ba73e:	a118      	add	r1, pc, #96	; (adr r1, ba7a0 <scalbn+0x108>)
   ba740:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba744:	a314      	add	r3, pc, #80	; (adr r3, ba798 <scalbn+0x100>)
   ba746:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba74a:	f000 f9f3 	bl	bab34 <__aeabi_dmul>
   ba74e:	ec41 0b10 	vmov	d0, r0, r1
   ba752:	e7f3      	b.n	ba73c <scalbn+0xa4>
   ba754:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   ba758:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   ba75c:	3136      	adds	r1, #54	; 0x36
   ba75e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   ba762:	4610      	mov	r0, r2
   ba764:	4619      	mov	r1, r3
   ba766:	2200      	movs	r2, #0
   ba768:	4b13      	ldr	r3, [pc, #76]	; (ba7b8 <scalbn+0x120>)
   ba76a:	f000 f9e3 	bl	bab34 <__aeabi_dmul>
   ba76e:	ec41 0b10 	vmov	d0, r0, r1
   ba772:	bd38      	pop	{r3, r4, r5, pc}
   ba774:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   ba778:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   ba77c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   ba780:	ec43 2b10 	vmov	d0, r2, r3
   ba784:	bd38      	pop	{r3, r4, r5, pc}
   ba786:	a108      	add	r1, pc, #32	; (adr r1, ba7a8 <scalbn+0x110>)
   ba788:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba78c:	e7b6      	b.n	ba6fc <scalbn+0x64>
   ba78e:	bf00      	nop
   ba790:	c2f8f359 	.word	0xc2f8f359
   ba794:	01a56e1f 	.word	0x01a56e1f
   ba798:	8800759c 	.word	0x8800759c
   ba79c:	7e37e43c 	.word	0x7e37e43c
   ba7a0:	8800759c 	.word	0x8800759c
   ba7a4:	fe37e43c 	.word	0xfe37e43c
   ba7a8:	c2f8f359 	.word	0xc2f8f359
   ba7ac:	81a56e1f 	.word	0x81a56e1f
   ba7b0:	43500000 	.word	0x43500000
   ba7b4:	ffff3cb0 	.word	0xffff3cb0
   ba7b8:	3c900000 	.word	0x3c900000

000ba7bc <__aeabi_drsub>:
   ba7bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba7c0:	e002      	b.n	ba7c8 <__adddf3>
   ba7c2:	bf00      	nop

000ba7c4 <__aeabi_dsub>:
   ba7c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba7c8 <__adddf3>:
   ba7c8:	b530      	push	{r4, r5, lr}
   ba7ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba7ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba7d2:	ea94 0f05 	teq	r4, r5
   ba7d6:	bf08      	it	eq
   ba7d8:	ea90 0f02 	teqeq	r0, r2
   ba7dc:	bf1f      	itttt	ne
   ba7de:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba7e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba7e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba7ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba7ee:	f000 80e2 	beq.w	ba9b6 <__adddf3+0x1ee>
   ba7f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba7f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba7fa:	bfb8      	it	lt
   ba7fc:	426d      	neglt	r5, r5
   ba7fe:	dd0c      	ble.n	ba81a <__adddf3+0x52>
   ba800:	442c      	add	r4, r5
   ba802:	ea80 0202 	eor.w	r2, r0, r2
   ba806:	ea81 0303 	eor.w	r3, r1, r3
   ba80a:	ea82 0000 	eor.w	r0, r2, r0
   ba80e:	ea83 0101 	eor.w	r1, r3, r1
   ba812:	ea80 0202 	eor.w	r2, r0, r2
   ba816:	ea81 0303 	eor.w	r3, r1, r3
   ba81a:	2d36      	cmp	r5, #54	; 0x36
   ba81c:	bf88      	it	hi
   ba81e:	bd30      	pophi	{r4, r5, pc}
   ba820:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba824:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba828:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba82c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba830:	d002      	beq.n	ba838 <__adddf3+0x70>
   ba832:	4240      	negs	r0, r0
   ba834:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba838:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba83c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba840:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba844:	d002      	beq.n	ba84c <__adddf3+0x84>
   ba846:	4252      	negs	r2, r2
   ba848:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba84c:	ea94 0f05 	teq	r4, r5
   ba850:	f000 80a7 	beq.w	ba9a2 <__adddf3+0x1da>
   ba854:	f1a4 0401 	sub.w	r4, r4, #1
   ba858:	f1d5 0e20 	rsbs	lr, r5, #32
   ba85c:	db0d      	blt.n	ba87a <__adddf3+0xb2>
   ba85e:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba862:	fa22 f205 	lsr.w	r2, r2, r5
   ba866:	1880      	adds	r0, r0, r2
   ba868:	f141 0100 	adc.w	r1, r1, #0
   ba86c:	fa03 f20e 	lsl.w	r2, r3, lr
   ba870:	1880      	adds	r0, r0, r2
   ba872:	fa43 f305 	asr.w	r3, r3, r5
   ba876:	4159      	adcs	r1, r3
   ba878:	e00e      	b.n	ba898 <__adddf3+0xd0>
   ba87a:	f1a5 0520 	sub.w	r5, r5, #32
   ba87e:	f10e 0e20 	add.w	lr, lr, #32
   ba882:	2a01      	cmp	r2, #1
   ba884:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba888:	bf28      	it	cs
   ba88a:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba88e:	fa43 f305 	asr.w	r3, r3, r5
   ba892:	18c0      	adds	r0, r0, r3
   ba894:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba898:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba89c:	d507      	bpl.n	ba8ae <__adddf3+0xe6>
   ba89e:	f04f 0e00 	mov.w	lr, #0
   ba8a2:	f1dc 0c00 	rsbs	ip, ip, #0
   ba8a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba8aa:	eb6e 0101 	sbc.w	r1, lr, r1
   ba8ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba8b2:	d31b      	bcc.n	ba8ec <__adddf3+0x124>
   ba8b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba8b8:	d30c      	bcc.n	ba8d4 <__adddf3+0x10c>
   ba8ba:	0849      	lsrs	r1, r1, #1
   ba8bc:	ea5f 0030 	movs.w	r0, r0, rrx
   ba8c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba8c4:	f104 0401 	add.w	r4, r4, #1
   ba8c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba8cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba8d0:	f080 809a 	bcs.w	baa08 <__adddf3+0x240>
   ba8d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba8d8:	bf08      	it	eq
   ba8da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba8de:	f150 0000 	adcs.w	r0, r0, #0
   ba8e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba8e6:	ea41 0105 	orr.w	r1, r1, r5
   ba8ea:	bd30      	pop	{r4, r5, pc}
   ba8ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba8f0:	4140      	adcs	r0, r0
   ba8f2:	eb41 0101 	adc.w	r1, r1, r1
   ba8f6:	3c01      	subs	r4, #1
   ba8f8:	bf28      	it	cs
   ba8fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba8fe:	d2e9      	bcs.n	ba8d4 <__adddf3+0x10c>
   ba900:	f091 0f00 	teq	r1, #0
   ba904:	bf04      	itt	eq
   ba906:	4601      	moveq	r1, r0
   ba908:	2000      	moveq	r0, #0
   ba90a:	fab1 f381 	clz	r3, r1
   ba90e:	bf08      	it	eq
   ba910:	3320      	addeq	r3, #32
   ba912:	f1a3 030b 	sub.w	r3, r3, #11
   ba916:	f1b3 0220 	subs.w	r2, r3, #32
   ba91a:	da0c      	bge.n	ba936 <__adddf3+0x16e>
   ba91c:	320c      	adds	r2, #12
   ba91e:	dd08      	ble.n	ba932 <__adddf3+0x16a>
   ba920:	f102 0c14 	add.w	ip, r2, #20
   ba924:	f1c2 020c 	rsb	r2, r2, #12
   ba928:	fa01 f00c 	lsl.w	r0, r1, ip
   ba92c:	fa21 f102 	lsr.w	r1, r1, r2
   ba930:	e00c      	b.n	ba94c <__adddf3+0x184>
   ba932:	f102 0214 	add.w	r2, r2, #20
   ba936:	bfd8      	it	le
   ba938:	f1c2 0c20 	rsble	ip, r2, #32
   ba93c:	fa01 f102 	lsl.w	r1, r1, r2
   ba940:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba944:	bfdc      	itt	le
   ba946:	ea41 010c 	orrle.w	r1, r1, ip
   ba94a:	4090      	lslle	r0, r2
   ba94c:	1ae4      	subs	r4, r4, r3
   ba94e:	bfa2      	ittt	ge
   ba950:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba954:	4329      	orrge	r1, r5
   ba956:	bd30      	popge	{r4, r5, pc}
   ba958:	ea6f 0404 	mvn.w	r4, r4
   ba95c:	3c1f      	subs	r4, #31
   ba95e:	da1c      	bge.n	ba99a <__adddf3+0x1d2>
   ba960:	340c      	adds	r4, #12
   ba962:	dc0e      	bgt.n	ba982 <__adddf3+0x1ba>
   ba964:	f104 0414 	add.w	r4, r4, #20
   ba968:	f1c4 0220 	rsb	r2, r4, #32
   ba96c:	fa20 f004 	lsr.w	r0, r0, r4
   ba970:	fa01 f302 	lsl.w	r3, r1, r2
   ba974:	ea40 0003 	orr.w	r0, r0, r3
   ba978:	fa21 f304 	lsr.w	r3, r1, r4
   ba97c:	ea45 0103 	orr.w	r1, r5, r3
   ba980:	bd30      	pop	{r4, r5, pc}
   ba982:	f1c4 040c 	rsb	r4, r4, #12
   ba986:	f1c4 0220 	rsb	r2, r4, #32
   ba98a:	fa20 f002 	lsr.w	r0, r0, r2
   ba98e:	fa01 f304 	lsl.w	r3, r1, r4
   ba992:	ea40 0003 	orr.w	r0, r0, r3
   ba996:	4629      	mov	r1, r5
   ba998:	bd30      	pop	{r4, r5, pc}
   ba99a:	fa21 f004 	lsr.w	r0, r1, r4
   ba99e:	4629      	mov	r1, r5
   ba9a0:	bd30      	pop	{r4, r5, pc}
   ba9a2:	f094 0f00 	teq	r4, #0
   ba9a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba9aa:	bf06      	itte	eq
   ba9ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba9b0:	3401      	addeq	r4, #1
   ba9b2:	3d01      	subne	r5, #1
   ba9b4:	e74e      	b.n	ba854 <__adddf3+0x8c>
   ba9b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba9ba:	bf18      	it	ne
   ba9bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba9c0:	d029      	beq.n	baa16 <__adddf3+0x24e>
   ba9c2:	ea94 0f05 	teq	r4, r5
   ba9c6:	bf08      	it	eq
   ba9c8:	ea90 0f02 	teqeq	r0, r2
   ba9cc:	d005      	beq.n	ba9da <__adddf3+0x212>
   ba9ce:	ea54 0c00 	orrs.w	ip, r4, r0
   ba9d2:	bf04      	itt	eq
   ba9d4:	4619      	moveq	r1, r3
   ba9d6:	4610      	moveq	r0, r2
   ba9d8:	bd30      	pop	{r4, r5, pc}
   ba9da:	ea91 0f03 	teq	r1, r3
   ba9de:	bf1e      	ittt	ne
   ba9e0:	2100      	movne	r1, #0
   ba9e2:	2000      	movne	r0, #0
   ba9e4:	bd30      	popne	{r4, r5, pc}
   ba9e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba9ea:	d105      	bne.n	ba9f8 <__adddf3+0x230>
   ba9ec:	0040      	lsls	r0, r0, #1
   ba9ee:	4149      	adcs	r1, r1
   ba9f0:	bf28      	it	cs
   ba9f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba9f6:	bd30      	pop	{r4, r5, pc}
   ba9f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba9fc:	bf3c      	itt	cc
   ba9fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   baa02:	bd30      	popcc	{r4, r5, pc}
   baa04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baa08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   baa0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   baa10:	f04f 0000 	mov.w	r0, #0
   baa14:	bd30      	pop	{r4, r5, pc}
   baa16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   baa1a:	bf1a      	itte	ne
   baa1c:	4619      	movne	r1, r3
   baa1e:	4610      	movne	r0, r2
   baa20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   baa24:	bf1c      	itt	ne
   baa26:	460b      	movne	r3, r1
   baa28:	4602      	movne	r2, r0
   baa2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   baa2e:	bf06      	itte	eq
   baa30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   baa34:	ea91 0f03 	teqeq	r1, r3
   baa38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   baa3c:	bd30      	pop	{r4, r5, pc}
   baa3e:	bf00      	nop

000baa40 <__aeabi_ui2d>:
   baa40:	f090 0f00 	teq	r0, #0
   baa44:	bf04      	itt	eq
   baa46:	2100      	moveq	r1, #0
   baa48:	4770      	bxeq	lr
   baa4a:	b530      	push	{r4, r5, lr}
   baa4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baa50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baa54:	f04f 0500 	mov.w	r5, #0
   baa58:	f04f 0100 	mov.w	r1, #0
   baa5c:	e750      	b.n	ba900 <__adddf3+0x138>
   baa5e:	bf00      	nop

000baa60 <__aeabi_i2d>:
   baa60:	f090 0f00 	teq	r0, #0
   baa64:	bf04      	itt	eq
   baa66:	2100      	moveq	r1, #0
   baa68:	4770      	bxeq	lr
   baa6a:	b530      	push	{r4, r5, lr}
   baa6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baa70:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baa74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   baa78:	bf48      	it	mi
   baa7a:	4240      	negmi	r0, r0
   baa7c:	f04f 0100 	mov.w	r1, #0
   baa80:	e73e      	b.n	ba900 <__adddf3+0x138>
   baa82:	bf00      	nop

000baa84 <__aeabi_f2d>:
   baa84:	0042      	lsls	r2, r0, #1
   baa86:	ea4f 01e2 	mov.w	r1, r2, asr #3
   baa8a:	ea4f 0131 	mov.w	r1, r1, rrx
   baa8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   baa92:	bf1f      	itttt	ne
   baa94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   baa98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   baa9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   baaa0:	4770      	bxne	lr
   baaa2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   baaa6:	bf08      	it	eq
   baaa8:	4770      	bxeq	lr
   baaaa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   baaae:	bf04      	itt	eq
   baab0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   baab4:	4770      	bxeq	lr
   baab6:	b530      	push	{r4, r5, lr}
   baab8:	f44f 7460 	mov.w	r4, #896	; 0x380
   baabc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baac0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   baac4:	e71c      	b.n	ba900 <__adddf3+0x138>
   baac6:	bf00      	nop

000baac8 <__aeabi_ul2d>:
   baac8:	ea50 0201 	orrs.w	r2, r0, r1
   baacc:	bf08      	it	eq
   baace:	4770      	bxeq	lr
   baad0:	b530      	push	{r4, r5, lr}
   baad2:	f04f 0500 	mov.w	r5, #0
   baad6:	e00a      	b.n	baaee <__aeabi_l2d+0x16>

000baad8 <__aeabi_l2d>:
   baad8:	ea50 0201 	orrs.w	r2, r0, r1
   baadc:	bf08      	it	eq
   baade:	4770      	bxeq	lr
   baae0:	b530      	push	{r4, r5, lr}
   baae2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   baae6:	d502      	bpl.n	baaee <__aeabi_l2d+0x16>
   baae8:	4240      	negs	r0, r0
   baaea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   baaee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baaf2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baaf6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   baafa:	f43f aed8 	beq.w	ba8ae <__adddf3+0xe6>
   baafe:	f04f 0203 	mov.w	r2, #3
   bab02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bab06:	bf18      	it	ne
   bab08:	3203      	addne	r2, #3
   bab0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bab0e:	bf18      	it	ne
   bab10:	3203      	addne	r2, #3
   bab12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bab16:	f1c2 0320 	rsb	r3, r2, #32
   bab1a:	fa00 fc03 	lsl.w	ip, r0, r3
   bab1e:	fa20 f002 	lsr.w	r0, r0, r2
   bab22:	fa01 fe03 	lsl.w	lr, r1, r3
   bab26:	ea40 000e 	orr.w	r0, r0, lr
   bab2a:	fa21 f102 	lsr.w	r1, r1, r2
   bab2e:	4414      	add	r4, r2
   bab30:	e6bd      	b.n	ba8ae <__adddf3+0xe6>
   bab32:	bf00      	nop

000bab34 <__aeabi_dmul>:
   bab34:	b570      	push	{r4, r5, r6, lr}
   bab36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bab3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bab3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bab42:	bf1d      	ittte	ne
   bab44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bab48:	ea94 0f0c 	teqne	r4, ip
   bab4c:	ea95 0f0c 	teqne	r5, ip
   bab50:	f000 f8de 	bleq	bad10 <__aeabi_dmul+0x1dc>
   bab54:	442c      	add	r4, r5
   bab56:	ea81 0603 	eor.w	r6, r1, r3
   bab5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bab5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bab62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bab66:	bf18      	it	ne
   bab68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bab6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bab70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bab74:	d038      	beq.n	babe8 <__aeabi_dmul+0xb4>
   bab76:	fba0 ce02 	umull	ip, lr, r0, r2
   bab7a:	f04f 0500 	mov.w	r5, #0
   bab7e:	fbe1 e502 	umlal	lr, r5, r1, r2
   bab82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bab86:	fbe0 e503 	umlal	lr, r5, r0, r3
   bab8a:	f04f 0600 	mov.w	r6, #0
   bab8e:	fbe1 5603 	umlal	r5, r6, r1, r3
   bab92:	f09c 0f00 	teq	ip, #0
   bab96:	bf18      	it	ne
   bab98:	f04e 0e01 	orrne.w	lr, lr, #1
   bab9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   baba0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   baba4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   baba8:	d204      	bcs.n	babb4 <__aeabi_dmul+0x80>
   babaa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   babae:	416d      	adcs	r5, r5
   babb0:	eb46 0606 	adc.w	r6, r6, r6
   babb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   babb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   babbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   babc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   babc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   babc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   babcc:	bf88      	it	hi
   babce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   babd2:	d81e      	bhi.n	bac12 <__aeabi_dmul+0xde>
   babd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   babd8:	bf08      	it	eq
   babda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   babde:	f150 0000 	adcs.w	r0, r0, #0
   babe2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   babe6:	bd70      	pop	{r4, r5, r6, pc}
   babe8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   babec:	ea46 0101 	orr.w	r1, r6, r1
   babf0:	ea40 0002 	orr.w	r0, r0, r2
   babf4:	ea81 0103 	eor.w	r1, r1, r3
   babf8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   babfc:	bfc2      	ittt	gt
   babfe:	ebd4 050c 	rsbsgt	r5, r4, ip
   bac02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bac06:	bd70      	popgt	{r4, r5, r6, pc}
   bac08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bac0c:	f04f 0e00 	mov.w	lr, #0
   bac10:	3c01      	subs	r4, #1
   bac12:	f300 80ab 	bgt.w	bad6c <__aeabi_dmul+0x238>
   bac16:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bac1a:	bfde      	ittt	le
   bac1c:	2000      	movle	r0, #0
   bac1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bac22:	bd70      	pople	{r4, r5, r6, pc}
   bac24:	f1c4 0400 	rsb	r4, r4, #0
   bac28:	3c20      	subs	r4, #32
   bac2a:	da35      	bge.n	bac98 <__aeabi_dmul+0x164>
   bac2c:	340c      	adds	r4, #12
   bac2e:	dc1b      	bgt.n	bac68 <__aeabi_dmul+0x134>
   bac30:	f104 0414 	add.w	r4, r4, #20
   bac34:	f1c4 0520 	rsb	r5, r4, #32
   bac38:	fa00 f305 	lsl.w	r3, r0, r5
   bac3c:	fa20 f004 	lsr.w	r0, r0, r4
   bac40:	fa01 f205 	lsl.w	r2, r1, r5
   bac44:	ea40 0002 	orr.w	r0, r0, r2
   bac48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bac4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bac50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bac54:	fa21 f604 	lsr.w	r6, r1, r4
   bac58:	eb42 0106 	adc.w	r1, r2, r6
   bac5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bac60:	bf08      	it	eq
   bac62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac66:	bd70      	pop	{r4, r5, r6, pc}
   bac68:	f1c4 040c 	rsb	r4, r4, #12
   bac6c:	f1c4 0520 	rsb	r5, r4, #32
   bac70:	fa00 f304 	lsl.w	r3, r0, r4
   bac74:	fa20 f005 	lsr.w	r0, r0, r5
   bac78:	fa01 f204 	lsl.w	r2, r1, r4
   bac7c:	ea40 0002 	orr.w	r0, r0, r2
   bac80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bac84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bac88:	f141 0100 	adc.w	r1, r1, #0
   bac8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bac90:	bf08      	it	eq
   bac92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac96:	bd70      	pop	{r4, r5, r6, pc}
   bac98:	f1c4 0520 	rsb	r5, r4, #32
   bac9c:	fa00 f205 	lsl.w	r2, r0, r5
   baca0:	ea4e 0e02 	orr.w	lr, lr, r2
   baca4:	fa20 f304 	lsr.w	r3, r0, r4
   baca8:	fa01 f205 	lsl.w	r2, r1, r5
   bacac:	ea43 0302 	orr.w	r3, r3, r2
   bacb0:	fa21 f004 	lsr.w	r0, r1, r4
   bacb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bacb8:	fa21 f204 	lsr.w	r2, r1, r4
   bacbc:	ea20 0002 	bic.w	r0, r0, r2
   bacc0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bacc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bacc8:	bf08      	it	eq
   bacca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bacce:	bd70      	pop	{r4, r5, r6, pc}
   bacd0:	f094 0f00 	teq	r4, #0
   bacd4:	d10f      	bne.n	bacf6 <__aeabi_dmul+0x1c2>
   bacd6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bacda:	0040      	lsls	r0, r0, #1
   bacdc:	eb41 0101 	adc.w	r1, r1, r1
   bace0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bace4:	bf08      	it	eq
   bace6:	3c01      	subeq	r4, #1
   bace8:	d0f7      	beq.n	bacda <__aeabi_dmul+0x1a6>
   bacea:	ea41 0106 	orr.w	r1, r1, r6
   bacee:	f095 0f00 	teq	r5, #0
   bacf2:	bf18      	it	ne
   bacf4:	4770      	bxne	lr
   bacf6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bacfa:	0052      	lsls	r2, r2, #1
   bacfc:	eb43 0303 	adc.w	r3, r3, r3
   bad00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bad04:	bf08      	it	eq
   bad06:	3d01      	subeq	r5, #1
   bad08:	d0f7      	beq.n	bacfa <__aeabi_dmul+0x1c6>
   bad0a:	ea43 0306 	orr.w	r3, r3, r6
   bad0e:	4770      	bx	lr
   bad10:	ea94 0f0c 	teq	r4, ip
   bad14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bad18:	bf18      	it	ne
   bad1a:	ea95 0f0c 	teqne	r5, ip
   bad1e:	d00c      	beq.n	bad3a <__aeabi_dmul+0x206>
   bad20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bad24:	bf18      	it	ne
   bad26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bad2a:	d1d1      	bne.n	bacd0 <__aeabi_dmul+0x19c>
   bad2c:	ea81 0103 	eor.w	r1, r1, r3
   bad30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bad34:	f04f 0000 	mov.w	r0, #0
   bad38:	bd70      	pop	{r4, r5, r6, pc}
   bad3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bad3e:	bf06      	itte	eq
   bad40:	4610      	moveq	r0, r2
   bad42:	4619      	moveq	r1, r3
   bad44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bad48:	d019      	beq.n	bad7e <__aeabi_dmul+0x24a>
   bad4a:	ea94 0f0c 	teq	r4, ip
   bad4e:	d102      	bne.n	bad56 <__aeabi_dmul+0x222>
   bad50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bad54:	d113      	bne.n	bad7e <__aeabi_dmul+0x24a>
   bad56:	ea95 0f0c 	teq	r5, ip
   bad5a:	d105      	bne.n	bad68 <__aeabi_dmul+0x234>
   bad5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bad60:	bf1c      	itt	ne
   bad62:	4610      	movne	r0, r2
   bad64:	4619      	movne	r1, r3
   bad66:	d10a      	bne.n	bad7e <__aeabi_dmul+0x24a>
   bad68:	ea81 0103 	eor.w	r1, r1, r3
   bad6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bad70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bad74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bad78:	f04f 0000 	mov.w	r0, #0
   bad7c:	bd70      	pop	{r4, r5, r6, pc}
   bad7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bad82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bad86:	bd70      	pop	{r4, r5, r6, pc}

000bad88 <__aeabi_ddiv>:
   bad88:	b570      	push	{r4, r5, r6, lr}
   bad8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bad8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bad92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bad96:	bf1d      	ittte	ne
   bad98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bad9c:	ea94 0f0c 	teqne	r4, ip
   bada0:	ea95 0f0c 	teqne	r5, ip
   bada4:	f000 f8a7 	bleq	baef6 <__aeabi_ddiv+0x16e>
   bada8:	eba4 0405 	sub.w	r4, r4, r5
   badac:	ea81 0e03 	eor.w	lr, r1, r3
   badb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   badb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   badb8:	f000 8088 	beq.w	baecc <__aeabi_ddiv+0x144>
   badbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   badc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   badc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   badc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   badcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   badd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   badd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   badd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   baddc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bade0:	429d      	cmp	r5, r3
   bade2:	bf08      	it	eq
   bade4:	4296      	cmpeq	r6, r2
   bade6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   badea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   badee:	d202      	bcs.n	badf6 <__aeabi_ddiv+0x6e>
   badf0:	085b      	lsrs	r3, r3, #1
   badf2:	ea4f 0232 	mov.w	r2, r2, rrx
   badf6:	1ab6      	subs	r6, r6, r2
   badf8:	eb65 0503 	sbc.w	r5, r5, r3
   badfc:	085b      	lsrs	r3, r3, #1
   badfe:	ea4f 0232 	mov.w	r2, r2, rrx
   bae02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bae06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bae0a:	ebb6 0e02 	subs.w	lr, r6, r2
   bae0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bae12:	bf22      	ittt	cs
   bae14:	1ab6      	subcs	r6, r6, r2
   bae16:	4675      	movcs	r5, lr
   bae18:	ea40 000c 	orrcs.w	r0, r0, ip
   bae1c:	085b      	lsrs	r3, r3, #1
   bae1e:	ea4f 0232 	mov.w	r2, r2, rrx
   bae22:	ebb6 0e02 	subs.w	lr, r6, r2
   bae26:	eb75 0e03 	sbcs.w	lr, r5, r3
   bae2a:	bf22      	ittt	cs
   bae2c:	1ab6      	subcs	r6, r6, r2
   bae2e:	4675      	movcs	r5, lr
   bae30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bae34:	085b      	lsrs	r3, r3, #1
   bae36:	ea4f 0232 	mov.w	r2, r2, rrx
   bae3a:	ebb6 0e02 	subs.w	lr, r6, r2
   bae3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bae42:	bf22      	ittt	cs
   bae44:	1ab6      	subcs	r6, r6, r2
   bae46:	4675      	movcs	r5, lr
   bae48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bae4c:	085b      	lsrs	r3, r3, #1
   bae4e:	ea4f 0232 	mov.w	r2, r2, rrx
   bae52:	ebb6 0e02 	subs.w	lr, r6, r2
   bae56:	eb75 0e03 	sbcs.w	lr, r5, r3
   bae5a:	bf22      	ittt	cs
   bae5c:	1ab6      	subcs	r6, r6, r2
   bae5e:	4675      	movcs	r5, lr
   bae60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bae64:	ea55 0e06 	orrs.w	lr, r5, r6
   bae68:	d018      	beq.n	bae9c <__aeabi_ddiv+0x114>
   bae6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bae6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bae72:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bae76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bae7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bae7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bae82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bae86:	d1c0      	bne.n	bae0a <__aeabi_ddiv+0x82>
   bae88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bae8c:	d10b      	bne.n	baea6 <__aeabi_ddiv+0x11e>
   bae8e:	ea41 0100 	orr.w	r1, r1, r0
   bae92:	f04f 0000 	mov.w	r0, #0
   bae96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bae9a:	e7b6      	b.n	bae0a <__aeabi_ddiv+0x82>
   bae9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   baea0:	bf04      	itt	eq
   baea2:	4301      	orreq	r1, r0
   baea4:	2000      	moveq	r0, #0
   baea6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   baeaa:	bf88      	it	hi
   baeac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   baeb0:	f63f aeaf 	bhi.w	bac12 <__aeabi_dmul+0xde>
   baeb4:	ebb5 0c03 	subs.w	ip, r5, r3
   baeb8:	bf04      	itt	eq
   baeba:	ebb6 0c02 	subseq.w	ip, r6, r2
   baebe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   baec2:	f150 0000 	adcs.w	r0, r0, #0
   baec6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   baeca:	bd70      	pop	{r4, r5, r6, pc}
   baecc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   baed0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   baed4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   baed8:	bfc2      	ittt	gt
   baeda:	ebd4 050c 	rsbsgt	r5, r4, ip
   baede:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   baee2:	bd70      	popgt	{r4, r5, r6, pc}
   baee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baee8:	f04f 0e00 	mov.w	lr, #0
   baeec:	3c01      	subs	r4, #1
   baeee:	e690      	b.n	bac12 <__aeabi_dmul+0xde>
   baef0:	ea45 0e06 	orr.w	lr, r5, r6
   baef4:	e68d      	b.n	bac12 <__aeabi_dmul+0xde>
   baef6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   baefa:	ea94 0f0c 	teq	r4, ip
   baefe:	bf08      	it	eq
   baf00:	ea95 0f0c 	teqeq	r5, ip
   baf04:	f43f af3b 	beq.w	bad7e <__aeabi_dmul+0x24a>
   baf08:	ea94 0f0c 	teq	r4, ip
   baf0c:	d10a      	bne.n	baf24 <__aeabi_ddiv+0x19c>
   baf0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   baf12:	f47f af34 	bne.w	bad7e <__aeabi_dmul+0x24a>
   baf16:	ea95 0f0c 	teq	r5, ip
   baf1a:	f47f af25 	bne.w	bad68 <__aeabi_dmul+0x234>
   baf1e:	4610      	mov	r0, r2
   baf20:	4619      	mov	r1, r3
   baf22:	e72c      	b.n	bad7e <__aeabi_dmul+0x24a>
   baf24:	ea95 0f0c 	teq	r5, ip
   baf28:	d106      	bne.n	baf38 <__aeabi_ddiv+0x1b0>
   baf2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   baf2e:	f43f aefd 	beq.w	bad2c <__aeabi_dmul+0x1f8>
   baf32:	4610      	mov	r0, r2
   baf34:	4619      	mov	r1, r3
   baf36:	e722      	b.n	bad7e <__aeabi_dmul+0x24a>
   baf38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   baf3c:	bf18      	it	ne
   baf3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   baf42:	f47f aec5 	bne.w	bacd0 <__aeabi_dmul+0x19c>
   baf46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   baf4a:	f47f af0d 	bne.w	bad68 <__aeabi_dmul+0x234>
   baf4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   baf52:	f47f aeeb 	bne.w	bad2c <__aeabi_dmul+0x1f8>
   baf56:	e712      	b.n	bad7e <__aeabi_dmul+0x24a>

000baf58 <__gedf2>:
   baf58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   baf5c:	e006      	b.n	baf6c <__cmpdf2+0x4>
   baf5e:	bf00      	nop

000baf60 <__ledf2>:
   baf60:	f04f 0c01 	mov.w	ip, #1
   baf64:	e002      	b.n	baf6c <__cmpdf2+0x4>
   baf66:	bf00      	nop

000baf68 <__cmpdf2>:
   baf68:	f04f 0c01 	mov.w	ip, #1
   baf6c:	f84d cd04 	str.w	ip, [sp, #-4]!
   baf70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baf74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baf7c:	bf18      	it	ne
   baf7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   baf82:	d01b      	beq.n	bafbc <__cmpdf2+0x54>
   baf84:	b001      	add	sp, #4
   baf86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   baf8a:	bf0c      	ite	eq
   baf8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   baf90:	ea91 0f03 	teqne	r1, r3
   baf94:	bf02      	ittt	eq
   baf96:	ea90 0f02 	teqeq	r0, r2
   baf9a:	2000      	moveq	r0, #0
   baf9c:	4770      	bxeq	lr
   baf9e:	f110 0f00 	cmn.w	r0, #0
   bafa2:	ea91 0f03 	teq	r1, r3
   bafa6:	bf58      	it	pl
   bafa8:	4299      	cmppl	r1, r3
   bafaa:	bf08      	it	eq
   bafac:	4290      	cmpeq	r0, r2
   bafae:	bf2c      	ite	cs
   bafb0:	17d8      	asrcs	r0, r3, #31
   bafb2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bafb6:	f040 0001 	orr.w	r0, r0, #1
   bafba:	4770      	bx	lr
   bafbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bafc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bafc4:	d102      	bne.n	bafcc <__cmpdf2+0x64>
   bafc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bafca:	d107      	bne.n	bafdc <__cmpdf2+0x74>
   bafcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bafd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bafd4:	d1d6      	bne.n	baf84 <__cmpdf2+0x1c>
   bafd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bafda:	d0d3      	beq.n	baf84 <__cmpdf2+0x1c>
   bafdc:	f85d 0b04 	ldr.w	r0, [sp], #4
   bafe0:	4770      	bx	lr
   bafe2:	bf00      	nop

000bafe4 <__aeabi_cdrcmple>:
   bafe4:	4684      	mov	ip, r0
   bafe6:	4610      	mov	r0, r2
   bafe8:	4662      	mov	r2, ip
   bafea:	468c      	mov	ip, r1
   bafec:	4619      	mov	r1, r3
   bafee:	4663      	mov	r3, ip
   baff0:	e000      	b.n	baff4 <__aeabi_cdcmpeq>
   baff2:	bf00      	nop

000baff4 <__aeabi_cdcmpeq>:
   baff4:	b501      	push	{r0, lr}
   baff6:	f7ff ffb7 	bl	baf68 <__cmpdf2>
   baffa:	2800      	cmp	r0, #0
   baffc:	bf48      	it	mi
   baffe:	f110 0f00 	cmnmi.w	r0, #0
   bb002:	bd01      	pop	{r0, pc}

000bb004 <__aeabi_dcmpeq>:
   bb004:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb008:	f7ff fff4 	bl	baff4 <__aeabi_cdcmpeq>
   bb00c:	bf0c      	ite	eq
   bb00e:	2001      	moveq	r0, #1
   bb010:	2000      	movne	r0, #0
   bb012:	f85d fb08 	ldr.w	pc, [sp], #8
   bb016:	bf00      	nop

000bb018 <__aeabi_dcmplt>:
   bb018:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb01c:	f7ff ffea 	bl	baff4 <__aeabi_cdcmpeq>
   bb020:	bf34      	ite	cc
   bb022:	2001      	movcc	r0, #1
   bb024:	2000      	movcs	r0, #0
   bb026:	f85d fb08 	ldr.w	pc, [sp], #8
   bb02a:	bf00      	nop

000bb02c <__aeabi_dcmple>:
   bb02c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb030:	f7ff ffe0 	bl	baff4 <__aeabi_cdcmpeq>
   bb034:	bf94      	ite	ls
   bb036:	2001      	movls	r0, #1
   bb038:	2000      	movhi	r0, #0
   bb03a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb03e:	bf00      	nop

000bb040 <__aeabi_dcmpge>:
   bb040:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb044:	f7ff ffce 	bl	bafe4 <__aeabi_cdrcmple>
   bb048:	bf94      	ite	ls
   bb04a:	2001      	movls	r0, #1
   bb04c:	2000      	movhi	r0, #0
   bb04e:	f85d fb08 	ldr.w	pc, [sp], #8
   bb052:	bf00      	nop

000bb054 <__aeabi_dcmpgt>:
   bb054:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb058:	f7ff ffc4 	bl	bafe4 <__aeabi_cdrcmple>
   bb05c:	bf34      	ite	cc
   bb05e:	2001      	movcc	r0, #1
   bb060:	2000      	movcs	r0, #0
   bb062:	f85d fb08 	ldr.w	pc, [sp], #8
   bb066:	bf00      	nop

000bb068 <__aeabi_dcmpun>:
   bb068:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb06c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb070:	d102      	bne.n	bb078 <__aeabi_dcmpun+0x10>
   bb072:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb076:	d10a      	bne.n	bb08e <__aeabi_dcmpun+0x26>
   bb078:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb07c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb080:	d102      	bne.n	bb088 <__aeabi_dcmpun+0x20>
   bb082:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb086:	d102      	bne.n	bb08e <__aeabi_dcmpun+0x26>
   bb088:	f04f 0000 	mov.w	r0, #0
   bb08c:	4770      	bx	lr
   bb08e:	f04f 0001 	mov.w	r0, #1
   bb092:	4770      	bx	lr

000bb094 <__aeabi_d2f>:
   bb094:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb098:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb09c:	bf24      	itt	cs
   bb09e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb0a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb0a6:	d90d      	bls.n	bb0c4 <__aeabi_d2f+0x30>
   bb0a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb0ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb0b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb0b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb0b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb0bc:	bf08      	it	eq
   bb0be:	f020 0001 	biceq.w	r0, r0, #1
   bb0c2:	4770      	bx	lr
   bb0c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb0c8:	d121      	bne.n	bb10e <__aeabi_d2f+0x7a>
   bb0ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb0ce:	bfbc      	itt	lt
   bb0d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb0d4:	4770      	bxlt	lr
   bb0d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb0da:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb0de:	f1c2 0218 	rsb	r2, r2, #24
   bb0e2:	f1c2 0c20 	rsb	ip, r2, #32
   bb0e6:	fa10 f30c 	lsls.w	r3, r0, ip
   bb0ea:	fa20 f002 	lsr.w	r0, r0, r2
   bb0ee:	bf18      	it	ne
   bb0f0:	f040 0001 	orrne.w	r0, r0, #1
   bb0f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb0f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb0fc:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb100:	ea40 000c 	orr.w	r0, r0, ip
   bb104:	fa23 f302 	lsr.w	r3, r3, r2
   bb108:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb10c:	e7cc      	b.n	bb0a8 <__aeabi_d2f+0x14>
   bb10e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb112:	d107      	bne.n	bb124 <__aeabi_d2f+0x90>
   bb114:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb118:	bf1e      	ittt	ne
   bb11a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb11e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb122:	4770      	bxne	lr
   bb124:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb128:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb12c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb130:	4770      	bx	lr
   bb132:	bf00      	nop

000bb134 <atexit>:
   bb134:	2300      	movs	r3, #0
   bb136:	4601      	mov	r1, r0
   bb138:	461a      	mov	r2, r3
   bb13a:	4618      	mov	r0, r3
   bb13c:	f000 b89c 	b.w	bb278 <__register_exitproc>

000bb140 <memcpy>:
   bb140:	440a      	add	r2, r1
   bb142:	4291      	cmp	r1, r2
   bb144:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb148:	d100      	bne.n	bb14c <memcpy+0xc>
   bb14a:	4770      	bx	lr
   bb14c:	b510      	push	{r4, lr}
   bb14e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb152:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb156:	4291      	cmp	r1, r2
   bb158:	d1f9      	bne.n	bb14e <memcpy+0xe>
   bb15a:	bd10      	pop	{r4, pc}

000bb15c <memset>:
   bb15c:	4402      	add	r2, r0
   bb15e:	4603      	mov	r3, r0
   bb160:	4293      	cmp	r3, r2
   bb162:	d100      	bne.n	bb166 <memset+0xa>
   bb164:	4770      	bx	lr
   bb166:	f803 1b01 	strb.w	r1, [r3], #1
   bb16a:	e7f9      	b.n	bb160 <memset+0x4>

000bb16c <srand>:
   bb16c:	b538      	push	{r3, r4, r5, lr}
   bb16e:	4b10      	ldr	r3, [pc, #64]	; (bb1b0 <srand+0x44>)
   bb170:	681d      	ldr	r5, [r3, #0]
   bb172:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb174:	4604      	mov	r4, r0
   bb176:	b9b3      	cbnz	r3, bb1a6 <srand+0x3a>
   bb178:	2018      	movs	r0, #24
   bb17a:	f7fc fecb 	bl	b7f14 <malloc>
   bb17e:	4602      	mov	r2, r0
   bb180:	63a8      	str	r0, [r5, #56]	; 0x38
   bb182:	b920      	cbnz	r0, bb18e <srand+0x22>
   bb184:	4b0b      	ldr	r3, [pc, #44]	; (bb1b4 <srand+0x48>)
   bb186:	480c      	ldr	r0, [pc, #48]	; (bb1b8 <srand+0x4c>)
   bb188:	2142      	movs	r1, #66	; 0x42
   bb18a:	f7fc feeb 	bl	b7f64 <__assert_func>
   bb18e:	490b      	ldr	r1, [pc, #44]	; (bb1bc <srand+0x50>)
   bb190:	4b0b      	ldr	r3, [pc, #44]	; (bb1c0 <srand+0x54>)
   bb192:	e9c0 1300 	strd	r1, r3, [r0]
   bb196:	4b0b      	ldr	r3, [pc, #44]	; (bb1c4 <srand+0x58>)
   bb198:	6083      	str	r3, [r0, #8]
   bb19a:	230b      	movs	r3, #11
   bb19c:	8183      	strh	r3, [r0, #12]
   bb19e:	2100      	movs	r1, #0
   bb1a0:	2001      	movs	r0, #1
   bb1a2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb1a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb1a8:	2200      	movs	r2, #0
   bb1aa:	611c      	str	r4, [r3, #16]
   bb1ac:	615a      	str	r2, [r3, #20]
   bb1ae:	bd38      	pop	{r3, r4, r5, pc}
   bb1b0:	2003e568 	.word	0x2003e568
   bb1b4:	000c0e18 	.word	0x000c0e18
   bb1b8:	000c0e2f 	.word	0x000c0e2f
   bb1bc:	abcd330e 	.word	0xabcd330e
   bb1c0:	e66d1234 	.word	0xe66d1234
   bb1c4:	0005deec 	.word	0x0005deec

000bb1c8 <rand>:
   bb1c8:	4b16      	ldr	r3, [pc, #88]	; (bb224 <rand+0x5c>)
   bb1ca:	b510      	push	{r4, lr}
   bb1cc:	681c      	ldr	r4, [r3, #0]
   bb1ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bb1d0:	b9b3      	cbnz	r3, bb200 <rand+0x38>
   bb1d2:	2018      	movs	r0, #24
   bb1d4:	f7fc fe9e 	bl	b7f14 <malloc>
   bb1d8:	63a0      	str	r0, [r4, #56]	; 0x38
   bb1da:	b928      	cbnz	r0, bb1e8 <rand+0x20>
   bb1dc:	4602      	mov	r2, r0
   bb1de:	4b12      	ldr	r3, [pc, #72]	; (bb228 <rand+0x60>)
   bb1e0:	4812      	ldr	r0, [pc, #72]	; (bb22c <rand+0x64>)
   bb1e2:	214e      	movs	r1, #78	; 0x4e
   bb1e4:	f7fc febe 	bl	b7f64 <__assert_func>
   bb1e8:	4a11      	ldr	r2, [pc, #68]	; (bb230 <rand+0x68>)
   bb1ea:	4b12      	ldr	r3, [pc, #72]	; (bb234 <rand+0x6c>)
   bb1ec:	e9c0 2300 	strd	r2, r3, [r0]
   bb1f0:	4b11      	ldr	r3, [pc, #68]	; (bb238 <rand+0x70>)
   bb1f2:	6083      	str	r3, [r0, #8]
   bb1f4:	230b      	movs	r3, #11
   bb1f6:	8183      	strh	r3, [r0, #12]
   bb1f8:	2201      	movs	r2, #1
   bb1fa:	2300      	movs	r3, #0
   bb1fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bb200:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bb202:	4a0e      	ldr	r2, [pc, #56]	; (bb23c <rand+0x74>)
   bb204:	6920      	ldr	r0, [r4, #16]
   bb206:	6963      	ldr	r3, [r4, #20]
   bb208:	490d      	ldr	r1, [pc, #52]	; (bb240 <rand+0x78>)
   bb20a:	4342      	muls	r2, r0
   bb20c:	fb01 2203 	mla	r2, r1, r3, r2
   bb210:	fba0 0101 	umull	r0, r1, r0, r1
   bb214:	1c43      	adds	r3, r0, #1
   bb216:	eb42 0001 	adc.w	r0, r2, r1
   bb21a:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bb21e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bb222:	bd10      	pop	{r4, pc}
   bb224:	2003e568 	.word	0x2003e568
   bb228:	000c0e18 	.word	0x000c0e18
   bb22c:	000c0e2f 	.word	0x000c0e2f
   bb230:	abcd330e 	.word	0xabcd330e
   bb234:	e66d1234 	.word	0xe66d1234
   bb238:	0005deec 	.word	0x0005deec
   bb23c:	5851f42d 	.word	0x5851f42d
   bb240:	4c957f2d 	.word	0x4c957f2d

000bb244 <strcmp>:
   bb244:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb248:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb24c:	2a01      	cmp	r2, #1
   bb24e:	bf28      	it	cs
   bb250:	429a      	cmpcs	r2, r3
   bb252:	d0f7      	beq.n	bb244 <strcmp>
   bb254:	1ad0      	subs	r0, r2, r3
   bb256:	4770      	bx	lr

000bb258 <strcpy>:
   bb258:	4603      	mov	r3, r0
   bb25a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb25e:	f803 2b01 	strb.w	r2, [r3], #1
   bb262:	2a00      	cmp	r2, #0
   bb264:	d1f9      	bne.n	bb25a <strcpy+0x2>
   bb266:	4770      	bx	lr

000bb268 <strlen>:
   bb268:	4603      	mov	r3, r0
   bb26a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb26e:	2a00      	cmp	r2, #0
   bb270:	d1fb      	bne.n	bb26a <strlen+0x2>
   bb272:	1a18      	subs	r0, r3, r0
   bb274:	3801      	subs	r0, #1
   bb276:	4770      	bx	lr

000bb278 <__register_exitproc>:
   bb278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb27c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb338 <__register_exitproc+0xc0>
   bb280:	4606      	mov	r6, r0
   bb282:	f8d8 0000 	ldr.w	r0, [r8]
   bb286:	461f      	mov	r7, r3
   bb288:	460d      	mov	r5, r1
   bb28a:	4691      	mov	r9, r2
   bb28c:	f000 f856 	bl	bb33c <__retarget_lock_acquire_recursive>
   bb290:	4b25      	ldr	r3, [pc, #148]	; (bb328 <__register_exitproc+0xb0>)
   bb292:	681c      	ldr	r4, [r3, #0]
   bb294:	b934      	cbnz	r4, bb2a4 <__register_exitproc+0x2c>
   bb296:	4c25      	ldr	r4, [pc, #148]	; (bb32c <__register_exitproc+0xb4>)
   bb298:	601c      	str	r4, [r3, #0]
   bb29a:	4b25      	ldr	r3, [pc, #148]	; (bb330 <__register_exitproc+0xb8>)
   bb29c:	b113      	cbz	r3, bb2a4 <__register_exitproc+0x2c>
   bb29e:	681b      	ldr	r3, [r3, #0]
   bb2a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb2a4:	6863      	ldr	r3, [r4, #4]
   bb2a6:	2b1f      	cmp	r3, #31
   bb2a8:	dd07      	ble.n	bb2ba <__register_exitproc+0x42>
   bb2aa:	f8d8 0000 	ldr.w	r0, [r8]
   bb2ae:	f000 f847 	bl	bb340 <__retarget_lock_release_recursive>
   bb2b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb2ba:	b34e      	cbz	r6, bb310 <__register_exitproc+0x98>
   bb2bc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb2c0:	b988      	cbnz	r0, bb2e6 <__register_exitproc+0x6e>
   bb2c2:	4b1c      	ldr	r3, [pc, #112]	; (bb334 <__register_exitproc+0xbc>)
   bb2c4:	b923      	cbnz	r3, bb2d0 <__register_exitproc+0x58>
   bb2c6:	f8d8 0000 	ldr.w	r0, [r8]
   bb2ca:	f000 f838 	bl	bb33e <__retarget_lock_release>
   bb2ce:	e7f0      	b.n	bb2b2 <__register_exitproc+0x3a>
   bb2d0:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb2d4:	f7fc fe1e 	bl	b7f14 <malloc>
   bb2d8:	2800      	cmp	r0, #0
   bb2da:	d0f4      	beq.n	bb2c6 <__register_exitproc+0x4e>
   bb2dc:	2300      	movs	r3, #0
   bb2de:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb2e2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb2e6:	6863      	ldr	r3, [r4, #4]
   bb2e8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb2ec:	2201      	movs	r2, #1
   bb2ee:	409a      	lsls	r2, r3
   bb2f0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb2f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb2f8:	4313      	orrs	r3, r2
   bb2fa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb2fe:	2e02      	cmp	r6, #2
   bb300:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb304:	bf02      	ittt	eq
   bb306:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb30a:	4313      	orreq	r3, r2
   bb30c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb310:	6863      	ldr	r3, [r4, #4]
   bb312:	f8d8 0000 	ldr.w	r0, [r8]
   bb316:	1c5a      	adds	r2, r3, #1
   bb318:	3302      	adds	r3, #2
   bb31a:	6062      	str	r2, [r4, #4]
   bb31c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb320:	f000 f80e 	bl	bb340 <__retarget_lock_release_recursive>
   bb324:	2000      	movs	r0, #0
   bb326:	e7c6      	b.n	bb2b6 <__register_exitproc+0x3e>
   bb328:	2003e7e8 	.word	0x2003e7e8
   bb32c:	2003e75c 	.word	0x2003e75c
   bb330:	00000000 	.word	0x00000000
   bb334:	000b7f15 	.word	0x000b7f15
   bb338:	2003e5cc 	.word	0x2003e5cc

000bb33c <__retarget_lock_acquire_recursive>:
   bb33c:	4770      	bx	lr

000bb33e <__retarget_lock_release>:
   bb33e:	4770      	bx	lr

000bb340 <__retarget_lock_release_recursive>:
   bb340:	4770      	bx	lr

000bb342 <link_code_end>:
	...

000bb344 <dynalib_user>:
   bb344:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bb354:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bb364:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   bb374:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   bb384:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   bb394:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   bb3a4:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   bb3b4:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   bb3c4:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   bb3d4:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   bb3e4:	6174 6574 4820 5454 2f50 2e31 0031 656b     tate HTTP/1.1.ke
   bb3f4:	7065 612d 696c 6576 4800 736f 3a74 0020     ep-alive.Host: .
   bb404:	6f43 746e 6e65 2d74 654c 676e 6874 203a     Content-Length: 
   bb414:	4300 6e6f 6574 746e 542d 7079 3a65 7420     .Content-Type: t
   bb424:	7865 2f74 6c70 6961 3b6e 6863 7261 6573     ext/plain;charse
   bb434:	3d74 5455 2d46 0038 7246 6d6f 4820 6575     t=UTF-8.From Hue
   bb444:	5300 6163 696c 676e 4620 6361 6f74 2072     .Scaling Factor 
   bb454:	7369 203a 3025 382e 0a66 4900 546f 654e     is: %0.8f..IoTNe
   bb464:	7774 726f 006b 002e 0a0a 4100 6363 6c65     twork......Accel
   bb474:	7265 7461 6f69 206e 6144 6174 2820 6e69     eration Data (in
   bb484:	4720 7327 3a29 7820 253d 2e30 6633 202c      G's): x=%0.3f, 
   bb494:	3d79 3025 332e 2c66 7a20 253d 2e30 6633     y=%0.3f, z=%0.3f
   bb4a4:	000a 3d58 2520 2e30 6633 200a 3d59 2520     ..X= %0.3f. Y= %
   bb4b4:	2e30 6633 200a 3d5a 2520 2e30 6633 000a     0.3f. Z= %0.3f..
   bb4c4:	7574 6e72 6e69 2067 6e6f 7420 6568 6c20     turning on the l
   bb4d4:	6769 7468 000a 7574 6e72 6e69 2067 666f     ight..turning of
   bb4e4:	2066 6874 2065 696c 6867 0074 696c 6867     f the light.ligh
   bb4f4:	2074 2c31 7220 203d 6925 000a 696c 6867     t 1, r= %i..ligh
   bb504:	2074 2c32 7220 203d 6925 000a 696c 6867     t 2, r= %i..ligh
   bb514:	2074 2c33 7220 203d 6925 000a 696c 6867     t 3, r= %i..ligh
   bb524:	2074 2c34 7220 203d 6925 000a 696c 6867     t 4, r= %i..ligh
   bb534:	2074 2c35 7220 203d 6925 000a 696c 6867     t 5, r= %i..ligh
   bb544:	2074 2c36 7220 203d 6925 000a               t 6, r= %i..

000bb550 <_ZL11hueUsername>:
   bb550:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   bb560:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   bb570:	7438 334d 4637 5433                          8tM37F3T.

000bb579 <_ZL13maybeNextTime>:
	...
   bb641:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   bb651:	3800 0000 0000 0000 0000 0000 0000 0000     .8..............
   bb661:	5800 0000 0000 0000 0000 0000 0000 0000     .X..............
   bb671:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   bb681:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   bb691:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   bb6a1:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   bb6b1:	1800 0000 0000 0000 0000 1f00 0378 3ce0     ............x..<
   bb6c1:	1f3c 3e80 0000 0000 0000 3b00 02dc 1cf0     <..>.......;....
   bb6d1:	1810 63c0 0000 0000 0000 1900 018c 0eb8     ...c............
   bb6e1:	1830 ff60 0000 0000 0000 1900 03ce 061c     0.`.............
   bb6f1:	1820 c060 0000 0000 0000 1800 03c7 070e      .`.............
   bb701:	1860 c060 0000 0000 0000 1800 03c3 038f     `.`.............
   bb711:	7cc0 61c0 0080 0000 0000 3c00 c1f7 81f1     .|.a.......<....
   bb721:	3f80 3ec0 0000 0000 0000 0000 0000 0100     .?.>............
   bb731:	0880 0000 0000 0000 0000 0000 0000 fb00     ................
	...
   bb74d:	0000 1f01 0010 0000 0000 0000 0000 0000     ................
   bb75d:	0000 0f01 00e0 0000 0000 0000 0000 0000     ................
   bb76d:	0000 b000 0000 0000 0000 0000 0000 0000     ................
	...
   bb81d:	0000 0008 4000 0060 0000 0000 0000 0000     .....@`.........
   bb82d:	0000 0008 c000 0060 0000 0000 0000 0000     ......`.........
   bb83d:	0000 0018 c000 0010 0000 0000 3e00 7c00     .............>.|
   bb84d:	1c07 007c e003 1f70 0078 00f8 7300 c300     ..|...p.x....s..
   bb85d:	9807 0018 c000 3b30 01dc 0086 3300 ff01     ......0;.....3..
   bb86d:	f001 0018 c000 1930 038c 00fe 3100 8081     ......0......1..
   bb87d:	e000 0018 c000 1930 03ce 0000 3100 8181     ......0......1..
   bb88d:	e000 0018 c000 1830 03c7 0002 3100 c3c0     ......0......1..
   bb89d:	fc01 001b d000 1830 01c3 0086 7900 7ee0     ......0......y.~
   bb8ad:	3c07 001d d000 3c78 c0f7 00fc 0000 0000     .<....x<........
	...

000bb979 <_ZL13youNeededThat>:
	...
   bba0d:	0300 0fcf 6087 0000 0000 0000 0000 0000     .....`..........
   bba1d:	0100 1ec6 e08e 0000 0000 0000 0000 0000     ................
   bba2d:	0000 39cc 6086 0000 0000 0000 0000 0000     ...9.`..........
   bba3d:	0000 33ec 6086 0000 0000 0000 0000 0000     ...3.`..........
   bba4d:	0000 3f78 7807 0000 0000 0000 0000 0000     ..x?.x..........
   bba5d:	0000 1e38 f003 0000 0000 0000 0000 0000     ..8.............
   bba6d:	0000 0030 0000 0000 0000 0000 0000 0000     ..0.............
   bba7d:	0f00 00e4 0000 0000 0000 0000 0000 0000     ................
   bba8d:	0800 00fc 0000 0000 0000 0000 0000 0000     ................
   bba9d:	0f00 0080 0000 0000 0000 0000 0000 0000     ................
	...
   bbaf1:	0018 7000 0000 0000 0000 0000 0000 0000     ...p............
   bbb01:	0078 f000 0000 0000 0000 0000 0000 0000     x...............
   bbb11:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   bbb21:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   bbb31:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   bbb41:	0018 3000 0000 0000 0000 0300 7ec0 810f     ...0.........~..
   bbb51:	1ff8 f003 0000 0000 0000 0700 e7e0 c31c     ................
   bbb61:	3998 7086 0000 0000 0000 0300 ff60 c31f     .9.p........`...
   bbb71:	3f18 308c 0000 0000 0000 0300 c070 0318     .?.0........p...
   bbb81:	3018 300c 0000 0000 0000 0300 e330 631c     .0.0........0..c
   bbb91:	383e 78ce 0000 0000 0000 0700 7e3c c10f     >8.x........<~..
   bbba1:	1ff8 f087 0000 0000 0000 0000 0000 0000     ................
	...
   bbc2d:	0000 0004 0000 0000 0000 0000 0000 0000     ................
   bbc3d:	0000 000c 0000 0000 0000 0000 0000 0000     ................
   bbc4d:	0000 001c 0000 0000 0000 0000 0000 0000     ................
   bbc5d:	0000 000c 0000 0000 0000 0000 0000 0000     ................
   bbc6d:	0400 000c 1800 0000 0000 0000 0000 0000     ................
   bbc7d:	0c00 000c 1800 0000 0000 0000 0000 0000     ................
   bbc8d:	1e00 830f 78c0 0000 0000 0000 0000 0000     .....x..........
   bbc9d:	0c00 830f 18e0 0000 0000 0000 0000 0000     ................
   bbcad:	0c00 c10d 1830 0000 0000 0000 0000 0000     ....0...........
   bbcbd:	0c00 c30c 1818 0000 0000 0000 0000 0000     ................
   bbccd:	0f00 e30c 1cdc 0000 0000 0000 0000 0000     ................
   bbcdd:	0f00 f11e 1cf6 0000 0000 0000 0000 0000     ................
	...

000bbd79 <_ZL14niceKnowingYou>:
	...
   bbebd:	0000 8001 0000 0000 0000 0000 381c 0000     .............8..
   bbecd:	0000 8003 0000 0000 0000 0000 100e 0000     ................
   bbedd:	0000 8001 0000 0000 0000 0000 100e 0000     ................
   bbeed:	0000 8001 0000 0000 0000 0000 100b 0020     .............. .
   bbefd:	0000 8001 0000 0000 0002 0000 900b 0060     ..............`.
   bbf0d:	0000 8001 0000 0000 0003 1000 9009 3c30     ..............0<
   bbf1d:	8007 f001 0378 fdc3 83c1 78c0 d008 6670     ....x......x..pf
   bbf2d:	c018 c001 076c 9821 8783 e460 7008 c230     ....l.!...`..p0.
   bbf3d:	c01f e001 0c66 d920 8301 c460 7008 c030     ....f. ...`..p0.
   bbf4d:	0018 a001 0c66 dd60 8301 8c30 3008 c630     ....f.`...0..00.
   bbf5d:	401c b001 0967 76c0 8301 dc30 101c 7c38     .@..g..v..0...8|
   bbf6d:	800f b803 8777 2680 8703 7838 0000 0000     ....w..&..8x....
	...
   bbf85:	0000 3880 0000 0000 0000 0000 0000 0000     ...8............
   bbf95:	0100 1000 0000 0000 0000 0000 0000 0000     ................
   bbfa5:	0000 e080 0000 0000 0000 0000 0000 0000     ................
   bbfb5:	0000 c07f 0000 0000 0000 0000 0000 0000     ................
   bbfc5:	0000 0008 0000 0000 0000 0000 0000 0000     ................
	...
   bc00d:	e301 0080 0000 0000 0000 0000 0000 0000     ................
   bc01d:	c300 0000 0000 0000 0000 0000 0000 0000     ................
   bc02d:	6600 0000 0000 0000 0000 0000 0000 0000     .f..............
   bc03d:	7400 0000 0000 0000 0000 0000 0000 0000     .t..............
   bc04d:	3800 0000 0000 0000 0000 0000 0000 0000     .8..............
   bc05d:	1800 020f 0030 0000 0000 0000 0000 0000     ....0...........
   bc06d:	1800 861c 0070 0000 0000 0000 0000 0000     ....p...........
   bc07d:	1800 8630 0030 0000 0000 0000 0000 0000     ..0.0...........
   bc08d:	1800 8631 0030 0000 0000 0000 0000 0000     ..1.0...........
   bc09d:	1800 0627 6038 80c1 0000 0000 0000 0000     ..'.8`..........
   bc0ad:	1e00 031e 60f0 80c1 0000 0000 0000 0000     .....`..........
	...

000bc179 <_ZL3rip>:
	...
   bc29d:	0000 0700 00fc 0000 0000 0000 0000 0f00     ................
   bc2ad:	00f8 0300 00fc c0ff 0000 0000 0000 0f00     ................
   bc2bd:	80ff 0000 00f0 fcff 0000 0000 0000 0100     ................
   bc2cd:	e0ff 0000 00f0 3f1f 0000 0000 0000 0100     .......?........
   bc2dd:	f8e0 0000 00f0 071c 0080 0000 0000 0100     ................
   bc2ed:	3ce0 0000 00f0 031c 00c0 0000 0000 0100     .<..............
   bc2fd:	1ce0 0000 00f0 011c 00e0 0000 0000 0100     ................
   bc30d:	1ee0 0000 00f0 011c 00e0 0000 0000 0100     ................
   bc31d:	1ee0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bc32d:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bc33d:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bc34d:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bc35d:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bc36d:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bc37d:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bc38d:	1ff0 0000 00f0 011e 00f0 0000 0000 0100     ................
   bc39d:	1ef8 0000 00f0 011f 00e0 0000 0000 0100     ................
   bc3ad:	3efc 0000 00f0 c31f 00e0 0000 0000 0100     .>..............
   bc3bd:	fcef 0000 00f0 e71c 00c0 0000 0000 0100     ................
   bc3cd:	f8e3 0000 00f0 7f1c 00c0 0000 0000 0100     ................
   bc3dd:	f0e1 0000 00f0 1f1c 0000 0000 0000 0100     ................
   bc3ed:	f0e1 0000 00f0 001c 0000 0000 0000 0100     ................
   bc3fd:	f0e0 0000 00f0 001c 0000 0000 0000 0100     ................
   bc40d:	78e0 0000 00f0 001c 0000 0000 0000 0100     .x..............
   bc41d:	3ce0 0000 00f0 001c 0000 0000 0000 0100     .<..............
   bc42d:	1fe0 00c0 00f0 001e 0000 0000 0000 0700     ................
   bc43d:	1ff8 03e0 00f8 807f 0000 0000 0000 0700     ................
   bc44d:	07fc 07c0 00fc 807f 0000 0000 0000 0000     ................
   bc45d:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

000bc579 <_ZL4lame>:
	...
   bc71d:	c003 8001 3838 807f 0000 0000 0000 0000     ....88..........
   bc72d:	8001 8001 701c 8030 0000 0000 0000 0000     .....p0.........
   bc73d:	8001 c001 701e 0032 0000 0000 0000 0000     .....p2.........
   bc74d:	8001 c003 b036 003e 0000 0000 0000 0000     ....6.>.........
   bc75d:	8001 c002 b033 0032 0000 0000 0000 0000     ....3.2.........
   bc76d:	8001 7c06 3033 0030 0000 0000 0000 0000     ...|300.........
   bc77d:	8001 e004 1821 0030 0000 0000 0000 0000     ....!.0.........
   bc78d:	8001 f00d 1820 0030 0000 0000 0000 0000     .... .0.........
   bc79d:	8001 300f 1820 0030 0000 0000 0000 0000     ...0 .0.........
   bc7ad:	8c01 3818 1820 8030 0000 0000 0000 0000     ...8 .0.........
   bc7bd:	f803 3c38 3c70 807f 0000 0000 0000 0000     ..8<p<..........
	...

000bc979 <_ZL4pray>:
	...
   bca4d:	0000 0100 00f8 0000 0000 0000 0000 0000     ................
   bca5d:	0000 0f00 00f8 0000 0000 0000 0000 0000     ................
   bca6d:	0000 3e00 0078 0000 0000 0000 0000 0000     ...>x...........
   bca7d:	0000 f000 0030 0000 0000 0000 0000 0000     ....0...........
   bca8d:	0000 8003 0000 0000 0000 0000 0000 0000     ................
   bca9d:	0000 0006 0000 0000 0000 0000 0000 0060     ..............`.
   bcaad:	0000 009c 0000 0000 0000 0000 0100 f0e3     ................
   bcabd:	0300 00b8 007f 7f00 0ff0 00f0 0300 fcef     ................
   bcacd:	0f00 00f0 c0ff 3f00 07e0 00f0 0f00 3efc     .......?.......>
   bcadd:	1f00 00e0 e0e3 0f00 01c0 0080 1f00 0ff8     ................
   bcaed:	0300 00e0 f007 0700 03c0 0000 0000 0ff0     ................
   bcafd:	0380 00c0 f80e 0300 07e0 0000 0000 07e0     ................
   bcb0d:	0380 00c0 7c38 0100 06f0 0000 0000 07e0     ....8|..........
   bcb1d:	0380 00c0 3e38 0100 0ef0 0000 0000 07e0     ....8>..........
   bcb2d:	0380 00c0 1f70 0000 0cf8 0000 0000 07e0     ....p...........
   bcb3d:	0380 00c0 0f70 0080 1c7c 0000 0000 07e0     ....p...|.......
   bcb4d:	0380 00c0 07f0 00c0 183e 0000 0000 0fe0     ........>.......
   bcb5d:	0380 00c0 03f8 00c0 383e 0000 0000 0ff0     ........>8......
   bcb6d:	0300 00c0 037c 00e0 701f 0000 0000 1ff0     ....|....p......
   bcb7d:	0300 00c0 037e 00f0 e00f 0000 0000 3efc     ....~..........>
   bcb8d:	0300 00c0 ff3f 00f8 e007 0000 0000 fcff     ....?...........
   bcb9d:	0f00 00e0 fc3f 001c c007 0000 0000 f0ff     ....?...........
   bcbad:	1f00 00f0 f00f 0006 c003 0000 0000 00f0     ................
	...
   bcbc5:	8007 0000 0000 00f0 0000 0000 0000 0000     ................
   bcbd5:	8007 0000 0000 00f0 0000 0000 0000 fe00     ................
   bcbe5:	000f 0000 0000 00f0 0000 0000 0000 ff03     ................
   bcbf5:	02ce 0000 0000 00f0 0000 0000 0000 0f07     ................
   bcc05:	07dc 0000 0000 00f0 0000 0000 0000 030c     ................
   bcc15:	03b8 0000 0000 00f0 0000 0000 0000 0008     ................
   bcc25:	8277 0000 0000 00f0 0000 0000 0000 0008     w...............
   bcc35:	fcef 0000 0000 00f0 0000 0000 0000 030c     ................
   bcc45:	e0c3 0000 0000 00f0 0000 0000 0000 0f06     ................
   bcc55:	0000 0000 0000 00f0 0000 0000 0000 f803     ................
   bcc65:	0000 0000 0000 00f0 0000 0000 0000 0000     ................
   bcc75:	0000 0000 0000 00f0 0000 0000 0000 0000     ................
   bcc85:	0000 0000 0100 00f8 0000 0000 0000 0000     ................
   bcc95:	0000 0000 0100 00f8 0000 0000 0000 0000     ................
   bcca5:	0000 0000 0300 00e0 0000 0000 0000 0000     ................
   bccb5:	0000 0000 0f00 0080 0000 0000 0000 0000     ................
   bccc5:	0000 0000 1e00 0000 0000 0000 0000 0000     ................
   bccd5:	0000 0000 1800 0000 0000 0000 0000 0000     ................
	...

000bcd79 <_ZL4uhOh>:
	...
   bcf09:	0000 3c00 041e 0000 0000 0010 0000 0000     ...<............
   bcf19:	0000 3800 1c0c 0000 0000 0070 0000 0000     ...8......p.....
   bcf29:	0000 1800 0c08 0000 0000 0030 0000 0000     ..........0.....
   bcf39:	0000 1800 0c18 0000 0000 0030 0000 0000     ..........0.....
   bcf49:	0000 1800 0c18 0000 0000 0030 0000 0000     ..........0.....
   bcf59:	0000 1800 0c10 0000 0000 0030 0000 0000     ..........0.....
   bcf69:	0000 1800 0c10 0000 0000 0030 0000 0000     ..........0.....
   bcf79:	0000 1800 0f30 0080 f001 003e 0000 0000     ....0.....>.....
   bcf89:	0000 0c00 0e30 00c0 8807 003b 0000 0000     ....0.....;.....
   bcf99:	0000 0c00 0c20 00c0 180e 0033 0000 0000     .... .....3.....
   bcfa9:	0000 0c00 0c20 0060 180c 8031 0000 0000     .... .`...1.....
   bcfb9:	0000 0e00 0c60 0060 3008 8031 0000 0000     ....`.`..01.....
   bcfc9:	0000 0700 0cc0 0070 f009 c031 0000 0000     ......p...1.....
   bcfd9:	0000 0300 1e80 0078 c007 e079 0000 0000     ......x...y.....
	...

000bd179 <_ZL4welp>:
	...
   bd2c9:	0000 0080 0000 0000 0000 0c00 3c00 0000     .............<..
   bd2d9:	0100 0080 0000 0000 0000 0e00 ff00 0080     ................
   bd2e9:	0100 00c0 0000 0000 0000 1e00 8701 00e0     ................
   bd2f9:	0300 00c0 0000 0000 0000 0e00 c001 00e0     ................
   bd309:	0300 00c0 0000 0000 0000 0e00 c001 0070     ..............p.
   bd319:	0200 00e0 0000 0000 0000 0e00 8000 0070     ..............p.
   bd329:	0600 00e0 0020 0100 00c0 0c00 0000 00e0     .... ...........
   bd339:	0400 0070 0030 0100 0080 0c00 0300 00c0     ..p.0...........
   bd349:	0c00 807f 07f0 00c0 1f60 0c00 1f00 0000     ........`.......
   bd359:	0800 0178 06fc 01e0 7fe0 0c80 7000 0000     ..x..........p..
   bd369:	1800 0378 01c4 00f0 19e0 0cc0 7000 0000     ..x..........p..
   bd379:	1800 03f8 0386 0038 1860 0cc0 7e00 0000     ......8.`....~..
   bd389:	1300 03dc 060e 001c 1860 04e0 3e00 0000     ........`....>..
   bd399:	3f00 031c 070e 000e 1860 0460 1e00 0000     .?......`.`.....
   bd3a9:	2000 010e 073c 0007 1860 0070 0800 0000     . ..<...`.p.....
   bd3b9:	6000 010f 03f8 80ff 18e0 0e70 1c00 0000     .`........p.....
   bd3c9:	f001 801f 017c c1f0 7cf0 0efc 1c00 0000     ....|....|......
   bd3d9:	0000 0000 0078 0000 0000 0000 0000 0000     ....x...........
   bd3e9:	0000 0030 0018 0000 0000 0000 0000 0000     ..0.............
   bd3f9:	0000 0040 0030 0000 0000 0000 0000 0000     ..@.0...........
   bd409:	0000 0330 00e0 0000 0000 0000 0000 0000     ..0.............
   bd419:	0000 ff1f 0080 0000 0000 0000 0000 0000     ................
   bd429:	0000 fc07 0000 0000 0000 0000 0000 0000     ................
	...

000bd579 <_ZL5again>:
	...
   bd6c9:	0000 0080 0000 0000 0000 0c00 3c00 0000     .............<..
   bd6d9:	0100 0080 0000 0000 0000 0e00 ff00 0080     ................
   bd6e9:	0100 00c0 0000 0000 0000 1e00 8701 00e0     ................
   bd6f9:	0300 00c0 0000 0000 0000 0e00 c001 00e0     ................
   bd709:	0300 00c0 0000 0000 0000 0e00 c001 0070     ..............p.
   bd719:	0200 00e0 0000 0000 0000 0e00 8000 0070     ..............p.
   bd729:	0600 00e0 0020 0100 00c0 0c00 0000 00e0     .... ...........
   bd739:	0400 0070 0030 0100 0080 0c00 0300 00c0     ..p.0...........
   bd749:	0c00 807f 07f0 00c0 1f60 0c00 1f00 0000     ........`.......
   bd759:	0800 0178 06fc 01e0 7fe0 0c80 7000 0000     ..x..........p..
   bd769:	1800 0378 01c4 00f0 19e0 0cc0 7000 0000     ..x..........p..
   bd779:	1800 03f8 0386 0038 1860 0cc0 7e00 0000     ......8.`....~..
   bd789:	1300 03dc 060e 001c 1860 04e0 3e00 0000     ........`....>..
   bd799:	3f00 031c 070e 000e 1860 0460 1e00 0000     .?......`.`.....
   bd7a9:	2000 010e 073c 0007 1860 0070 0800 0000     . ..<...`.p.....
   bd7b9:	6000 010f 03f8 80ff 18e0 0e70 1c00 0000     .`........p.....
   bd7c9:	f001 801f 017c c1f0 7cf0 0efc 1c00 0000     ....|....|......
   bd7d9:	0000 0000 0078 0000 0000 0000 0000 0000     ....x...........
   bd7e9:	0000 0030 0018 0000 0000 0000 0000 0000     ..0.............
   bd7f9:	0000 0040 0030 0000 0000 0000 0000 0000     ..@.0...........
   bd809:	0000 0330 00e0 0000 0000 0000 0000 0000     ..0.............
   bd819:	0000 ff1f 0080 0000 0000 0000 0000 0000     ................
   bd829:	0000 fc07 0000 0000 0000 0000 0000 0000     ................
	...

000bd979 <_ZL5fight>:
	...
   bdaf9:	0000 80ff 00fc 20ff 0000 3f00 01fc 0080     ....... ...?....
   bdb09:	0100 c0ff 0178 f0ff 871f 7ff0 03fe 00c0     ....x...........
   bdb19:	0000 c0f1 0370 f080 0107 61c0 03c7 00c0     ....p......a....
   bdb29:	0000 c072 0670 7000 0107 41c0 03c3 00c0     ..r.p..p...A....
   bdb39:	0000 0072 0e70 3000 ff07 01c0 03c0 00c0     ..r.p..0........
   bdb49:	0000 007f 0c70 3000 ff07 01c0 03c0 0080     ....p..0........
   bdb59:	0000 007f 0c70 0000 0107 01c0 01c0 0080     ....p...........
   bdb69:	0000 0073 1c70 0000 0107 01c0 01c0 0080     ..s.p...........
   bdb79:	0000 0072 1c70 fc01 0107 01c0 01c0 0080     ..r.p...........
   bdb89:	0000 0070 1e70 7800 0107 01c0 01c0 0080     ..p.p..x........
   bdb99:	0000 0070 0e70 3800 0107 01c0 01c0 0080     ..p.p..8........
   bdba9:	0000 0070 0f70 3800 0107 01c0 01c0 0080     ..p.p..8........
   bdbb9:	0000 0070 0770 3800 0107 01c0 01c0 0080     ..p.p..8........
   bdbc9:	0000 0070 0770 7880 0107 01c0 01c0 0080     ..p.p..x........
   bdbd9:	0000 0070 0370 f8e1 0107 01c0 01c0 0000     ..p.p...........
   bdbe9:	0000 00f8 0178 c0ff 010f 03c0 03c0 0080     ....x...........
   bdbf9:	0100 00fc 00fc 807f c71f 07f0 03e0 0080     ................
	...

000bdd79 <_ZL5lucky>:
	...
   bdf1d:	1cf0 1f38 e341 8e87 0000 0000 0000 0000     ..8.A...........
   bdf2d:	0c60 3110 c6c0 0c03 0000 0000 0000 0000     `..1............
   bdf3d:	0c60 4030 d8c0 9801 0000 0000 0000 0000     `.0@............
   bdf4d:	0c60 c020 f040 d001 0000 0000 0000 0000     `. .@...........
   bdf5d:	0c60 c020 d840 e000 0000 0000 0000 0000     `. .@...........
   bdf6d:	0c60 c020 dc00 6000 0000 0000 0000 0000     `. ....`........
   bdf7d:	0c60 c060 cc00 6000 0000 0000 0000 0000     `.`....`........
   bdf8d:	0460 c040 ce00 6000 0000 0000 0000 0000     `.@....`........
   bdf9d:	0660 6040 c640 6000 0000 0000 0000 0000     `.@`@..`........
   bdfad:	0763 39c0 c380 6000 0000 0000 0000 0000     c..9...`........
   bdfbd:	03fe 1f80 e701 7880 0000 0000 0000 0000     .......x........
	...

000be179 <_ZL5skull>:
   be179:	0000 0000 0000 6002 3100 0000 0000 0000     .......`.1......
   be189:	0002 0000 8021 6002 1c00 001c 0000 0000     ....!..`........
   be199:	0003 0000 c661 c002 df00 f03f 0000 0000     ....a.....?.....
   be1a9:	801b 0000 cf01 eec6 7f00 f8ff 0000 0000     ................
   be1b9:	e009 4000 fc01 ff7e 370c f0ff 0000 0000     ...@..~..7......
   be1c9:	7800 0000 fd01 9f01 bfbf f0ff 8000 0006     .x..............
   be1d9:	0800 4002 ff01 0fc0 febf f801 0000 0000     ...@............
   be1e9:	2000 0000 f001 0f00 f83f 3800 4000 1820     . ......?..8.@ .
   be1f9:	0000 0000 c001 0d00 f0ef 1800 8002 0e10     ................
   be209:	0000 0000 0002 0100 e0e3 0c00 0000 0708     ................
   be219:	0801 0000 0040 0100 e0ff 0400 0000 0f0c     ....@...........
   be229:	1f02 0000 0040 0100 c0ff 0400 0000 0700     ....@...........
   be239:	1700 0000 0040 0100 c0ff 0400 0000 0000     ....@...........
   be249:	2910 0400 0060 0100 c0ff 0600 0100 ccc0     .)..`...........
   be259:	1824 0600 00a0 0d00 c0ff 0e00 0000 e0bc     $...............
   be269:	da24 61c0 0080 0f00 c0ff 0e00 0600 e0f7     $..a............
   be279:	b124 e580 0080 0f00 e0ff 0e00 0100 8003     $...............
   be289:	6109 0d10 0000 0f00 e0ff 0e00 0080 0001     .a..............
   be299:	6709 8916 0010 0f00 c2ff 1e00 0080 0000     .g..............
   be2a9:	4601 8a44 8013 0f00 c0ff 3f00 0400 0000     .FD........?....
   be2b9:	4812 0843 b093 0f00 c0ff 7f00 8f00 00c0     .HC.............
   be2c9:	c812 0201 f01b 0f00 e0ff fe00 8701 00c0     ................
   be2d9:	ce12 0000 f803 0f00 f8ff fe00 0707 00e0     ................
   be2e9:	cc12 0044 fc87 1f07 ffff feff 238e 00f0     ..D..........#..
   be2f9:	d012 0cce ff07 3ffc ffff ffff 019f 00e3     .......?........
   be309:	d012 00cf ff03 77ee ff83 fffe 83bf 00ff     .......w........
   be319:	c112 a0cc ff03 efef ff01 ffff 87ff 20ff     ............... 
   be329:	c332 920c ff03 faff ff00 ffff 2fff f8ff     2............/..
   be339:	8626 3259 ff01 b0ff 7f00 ffff ffff f8ff     &.Y2............
   be349:	9424 6012 ff01 d0ff 7b00 ffff ffff f8ff     $..`.....{......
   be359:	2465 e014 bc00 886f 3b00 ffff ffff fcff     e$....o..;......
   be369:	414c c035 0000 0003 3900 ffff ffff fcff     LA5......9......
   be379:	c3c8 c07f 0000 4000 3f00 ff9f ffff fcff     .......@.?......
   be389:	929e 80df 0000 4000 3f00 ffff ffff 7efc     .......@.?.....~
   be399:	3086 00bd 0000 4800 3f00 ffff ffff 7eff     .0.....H.?.....~
   be3a9:	3142 10fc 0000 7800 3f00 ffff ffff feff     B1.....x.?......
   be3b9:	2179 00fc 0000 7c00 3f00 dfff ffff feff     y!.....|.?......
   be3c9:	820c 20f8 0000 fc0d 7f00 fff7 ffff feff     ... ............
   be3d9:	0201 00f0 6000 ff04 7f80 ffe7 ffff feff     .....`..........
   be3e9:	0303 0070 2000 ff02 7fff 7fc6 ffff feff     ..p.. ..........
   be3f9:	8602 00e0 2000 ff00 ffff ffc7 ffff feff     ..... ..........
   be409:	0504 00c0 6000 ff02 ffff ff86 ffff feff     .....`..........
   be419:	0d08 00c0 1000 ff03 ffff ff86 ffff feff     ................
   be429:	0900 00c0 1000 ff01 ffff ff8d ffff feff     ................
   be439:	1b12 0080 1000 ff01 ffdf ff8d ffff feff     ................
   be449:	1320 0080 5002 ff03 ffdf ff8d ffff fef7      ....P..........
   be459:	1300 0000 7000 ff01 ffff ff9f ffff fef7     .....p..........
   be469:	0310 0000 f004 ff01 ffff ff3f ffff fcf7     ..........?.....
   be479:	2700 0000 e10e ff81 ffff ffbf ffff fcff     .'..............
   be489:	2600 0000 e809 ffe4 ffff fffb feff f8ff     .&..............
   be499:	4600 0000 c811 1ff0 ffff ffff ffff f9ff     .F..............
   be4a9:	0600 0000 8831 43fe 6fff ffff ffff f1ff     ....1..C.o......
   be4b9:	0400 0000 a461 6cfe 7f43 ffff ffff f37f     ....a..lC.......
   be4c9:	0c00 0000 c843 6ef9 ffe7 ffff ffff e33f     ....C..n......?.
   be4d9:	0c00 0000 d087 8ef8 ffff ffff ffff e73f     ..............?.
   be4e9:	0800 0300 820f 0e7e 77ff ffff ffff ce3f     ......~..w....?.
   be4f9:	0800 0400 001f 4e7e 77e6 ffff ffff cc7f     ......~N.w......
   be509:	0880 0800 001e 1a3d ff64 ffff feff 9d7f     ......=.d.......
   be519:	0002 1000 003c 1b0e ff3e ffff feff 9b7f     ....<...>.......
   be529:	1004 2000 0038 2303 ff26 ffff feff 37ff     ... 8..#&......7
   be539:	1008 4000 0038 1100 ff26 ffff feff 36ff     ...@8...&......6
   be549:	0000 8000 0070 0d00 ff93 ffff feff 6cfe     ....p..........l
   be559:	0000 0001 00f0 0000 ff94 ffff ffff dcfe     ................
   be569:	0000 0002 00e0 0000 ff00 ffff ffff d8fc     ................

000be579 <_ZL6cheers>:
	...
   be719:	0000 7e00 cf83 f00f 0fff 1fc0 8081 0000     ...~............
   be729:	0000 e700 8681 3006 0763 3be0 c081 0000     .......0c..;....
   be739:	0000 c101 fe81 5006 0665 3c70 c0c1 0000     .......Pe.p<....
   be749:	0000 8101 fe81 c007 067c 1f30 c0c1 0000     ........|.0.....
   be759:	0000 8001 86c1 4006 066c 1f30 c0c1 0000     .......@l.0.....
   be769:	0000 8001 8681 0006 0660 4130 80c1 0000     ........`.0A....
   be779:	0000 8001 8601 0006 0760 40f0 80e1 0000     ........`..@....
   be789:	0000 c001 8601 0006 0760 60e0 8060 0000     ........`..``...
   be799:	0000 e100 8681 1006 0661 60e0 80e0 0000     ........a..`....
   be7a9:	0000 ff00 8681 3807 0663 7b78 80c1 0000     .......8c.x{....
   be7b9:	0000 3f00 cf03 f00f 0fff 7f38 8081 0000     ...?......8.....
	...

000be979 <_ZL6gentle>:
	...
   bea19:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bea29:	0e00 0000 0000 0000 0000 0000 000e 0000     ................
   bea39:	1600 0000 0000 0000 0000 0000 0006 0000     ................
   bea49:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bea59:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bea69:	0600 0000 0000 0000 0000 0800 0006 0000     ................
   bea79:	0600 0000 0000 0000 0000 1800 0006 0000     ................
   bea89:	0600 0000 0000 0002 0000 1800 0006 0000     ................
   bea99:	0700 0fe0 0080 000f 07f8 7cc0 0306 00e0     ...........|....
   beaa9:	0600 1830 00c0 811f 0e86 18e0 0606 0018     ..0.............
   beab9:	0600 3f18 00c0 8338 06fe 1860 0f06 00f8     ...?..8...`.....
   beac9:	0600 3018 0000 8330 0600 1870 0c06 0000     ...0..0...p.....
   bead9:	0600 3018 0000 8321 0602 1830 0c06 0008     ...0..!...0.....
   beae9:	1f00 1838 0060 8117 0686 1e38 0606 0018     ..8.`.....8.....
   beaf9:	0f00 0ff0 0080 000f 0efc 1a3c 030f 00f0     ..........<.....
   beb09:	0200 0000 0000 0007 0000 0000 0000 0000     ................
   beb19:	0000 0000 8000 0003 0000 0000 0000 0000     ................
   beb29:	0000 0000 0001 0006 0000 0000 0000 0000     ................
   beb39:	0000 0000 c000 003c 0000 0000 0000 0000     ......<.........
   beb49:	0000 0000 7f00 00f0 0000 0000 0000 0000     ................
   beb59:	0000 0000 0f00 0000 0000 0000 0000 0000     ................
	...
   bebbd:	0000 2000 0000 0000 0000 0000 0000 0000     ... ............
   bebcd:	0000 e000 0000 0000 0000 0000 0000 0000     ................
   bebdd:	0000 6000 0000 0000 0000 0000 0000 0000     ...`............
   bebed:	0000 6000 0000 0000 0000 0000 0000 0000     ...`............
   bebfd:	0003 6080 0000 0000 0000 0000 0000 0000     ...`............
   bec0d:	0007 6080 0000 0000 0000 0000 0000 0000     ...`............
   bec1d:	8100 6080 0000 0000 0000 0000 0000 f33d     ...`..........=.
   bec2d:	8787 7cc0 0000 703e f801 0000 0000 e20c     ...|..>p........
   bec3d:	8101 6e80 0000 b873 0c03 0000 0000 620c     ...n..s........b
   bec4d:	8101 6680 0000 9c33 fc07 0000 0000 e406     ...f..3.........
   bec5d:	8101 6780 0000 8c31 0006 0000 0000 b407     ...g..1.........
   bec6d:	8101 6380 0000 8e31 0006 0000 0000 3803     ...c..1........8
   bec7d:	8101 63a0 0080 c731 0603 0000 0000 1003     ...c..1.........
   bec8d:	c103 e3e0 00c0 e779 f8c1 0000 0000 0000     ......y.........
	...

000bed79 <_ZL8goodIdea>:
	...
   bee01:	0000 0700 0000 0000 0000 0000 0000 0000     ................
   bee11:	0000 1f00 0000 0000 0000 0000 0000 0000     ................
   bee21:	0000 1300 0000 0000 0000 0000 0000 0000     ................
   bee31:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bee41:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bee51:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bee61:	0000 0300 0000 0000 0000 0000 0800 0000     ................
   bee71:	0000 0300 0000 0000 0000 0000 1800 0000     ................
   bee81:	0000 0300 0000 0000 0000 0000 3c00 3e00     .............<.>
   bee91:	7e00 ff00 0000 0000 0000 0000 fe00 fb00     .~..............
   beea1:	fb00 cf01 0000 0000 0000 0000 e300 e101     ................
   beeb1:	e101 8703 0000 0000 0000 0000 c301 8301     ................
   beec1:	8303 0303 0000 0000 0000 0000 8301 0303     ................
   beed1:	0703 0307 0000 0000 0000 0000 8700 0703     ................
   beee1:	0e03 0303 0000 0000 0000 0000 8e00 1e02     ................
   beef1:	1e02 0703 00c0 0000 0000 0000 7e00 fc03     .............~..
   bef01:	fc03 df03 0080 0000 0000 0000 1a00 f001     ................
   bef11:	f001 f201 0000 0000 0000 0000 1e00 0000     ................
	...
   bef29:	0000 1800 0400 0000 0000 0000 0000 0000     ................
   bef39:	0000 1000 1800 0000 0000 0000 0000 0000     ................
   bef49:	0000 0c00 f000 0000 0000 0000 0000 0000     ................
   bef59:	0000 0700 e0ff 0000 0000 0000 0000 0000     ................
   bef69:	0000 0100 00ff 0000 0000 0000 0000 0000     ................
	...
   befcd:	0000 0100 0000 0000 0000 0000 0000 0000     ................
   befdd:	0000 0700 0000 0000 0000 0000 0000 0000     ................
   befed:	0000 0f00 0000 0000 0000 0000 0000 0000     ................
   beffd:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf00d:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf01d:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf02d:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf03d:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf04d:	0e00 0300 0000 0000 0000 0000 0000 0000     ................
   bf05d:	0c00 0300 0000 0000 0000 0000 0000 0000     ................
   bf06d:	0300 7f00 1f00 7800 0000 0000 0000 0000     .......x........
   bf07d:	0f00 c700 7300 fe80 0000 0000 0000 0000     .....s..........
   bf08d:	0700 8301 e100 1fc0 0000 0000 0000 0000     ................
   bf09d:	0300 8303 c100 23c0 0000 0000 0000 0000     .......#........
   bf0ad:	0300 8303 ff01 61c0 0080 0000 0000 0000     .......a........
   bf0bd:	0300 8303 c001 6000 00c0 0000 0000 0000     .......`........
   bf0cd:	0300 8703 c0e0 7040 00e0 0000 0000 0000     ......@p........
   bf0dd:	0700 cf01 f0c0 7fc0 00f0 0000 0000 0000     ................
   bf0ed:	0f00 fb80 3f00 3f00 0018 0000 0000 0000     .....?.?........
	...

000bf179 <_ZL8goodLuck>:
	...
   bf2cd:	0000 3800 0100 0080 0000 0010 3f00 00a0     ...8.........?..
   bf2dd:	0000 7800 0300 0080 0000 0070 e000 00e0     ...x......p.....
   bf2ed:	0000 1800 0100 0080 0000 0030 8000 0060     ..........0...`.
   bf2fd:	0000 1800 0100 0080 0000 0030 8001 0030     ..........0...0.
   bf30d:	0000 1800 0100 0080 0000 0030 0003 0010     ..........0.....
   bf31d:	0000 1800 0100 0080 0000 0030 0003 0000     ..........0.....
   bf32d:	0000 1800 0100 0080 0000 0030 0003 0000     ..........0.....
   bf33d:	0000 1800 0100 0080 0000 0030 8003 0778     ..........0...x.
   bf34d:	3ec0 f803 0100 8c80 f003 8037 8003 1f30     .>........7...0.
   bf35d:	7920 3806 0100 9c83 1006 0036 8001 1830      y.8......6...0.
   bf36d:	e120 180c 0100 8c81 080c 003e c001 3030      .........>...00
   bf37d:	8361 180c 0100 8c81 000c 003b e000 2070     a.........;...p 
   bf38d:	87c1 180c 0100 8c81 080c 8033 7900 23e0     ..........3..y.#
   bf39d:	1ec1 3e0e 0100 8f81 1806 8031 3f00 1f80     ...>......1..?..
   bf3ad:	f800 d807 0300 fcc0 f003 c039 0000 0000     ..........9.....
	...

000bf579 <_ZL8heroTime>:
	...
   bf60d:	0e00 0078 0000 fc03 0000 0000 0000 e107     ..x.............
   bf61d:	1ff8 0ffc 00f0 ff0f 0000 0000 0000 8003     ................
   bf62d:	0ef0 0f0e 00fc 831f 0080 0000 0000 8003     ................
   bf63d:	0e70 0316 008f 013e 0080 0000 0000 ff03     p.....>.........
   bf64d:	0ff0 03f0 0087 017c 00c0 0000 0000 ff03     ......|.........
   bf65d:	0ff0 03f0 8083 0078 00c0 0000 0000 8003     ......x.........
   bf66d:	0e70 0330 8083 00f0 00e0 0000 0000 8003     p.0.............
   bf67d:	0e70 0330 8083 00e0 00e0 0000 0000 8003     p.0.............
   bf68d:	0e70 0300 8083 01e0 00e0 0000 0000 8003     p...............
   bf69d:	0e70 0300 8083 01e0 00c0 0000 0000 8003     p...............
   bf6ad:	0e70 0300 80e7 03e0 00c0 0000 0000 8003     p...............
   bf6bd:	0e70 0300 00ff 03e0 00c0 0000 0000 8003     p...............
   bf6cd:	0e70 0300 009e 07e0 0080 0000 0000 8003     p...............
   bf6dd:	0e70 0302 008e 1f60 0000 0000 0000 8003     p.....`.........
   bf6ed:	0e70 0306 008f 3e38 0000 0000 0000 c003     p.....8>........
   bf6fd:	1ff0 03fe e087 fc1f 0000 0000 0000 e107     ................
   bf70d:	1ff8 07fc e0e3 f007 0000 0000 0000 0000     ................
	...
   bf7e9:	0000 3f00 07fe 7ce0 c003 e039 0000 0000     ...?...|..9.....
   bf7f9:	0000 3f00 03ff 7ec0 c007 f87f 0000 0000     ...?...~........
   bf809:	0000 6100 01c3 1ec0 8007 383c 0000 0000     ...a......<8....
   bf819:	0000 4100 01c1 1fc0 800f 581c 0000 0000     ...A.......X....
   bf829:	0000 0100 01c0 17c0 800b c01f 0000 0000     ................
   bf839:	0000 0100 01c0 17c0 809b c01f 0000 0000     ................
   bf849:	0000 0100 01c0 1bc0 80f3 c01c 0000 0000     ................
   bf859:	0000 0100 01c0 19c0 80f3 401c 0000 0000     ...........@....
   bf869:	0000 0100 01c0 19c0 80e3 001c 0000 0000     ................
   bf879:	0000 0100 01c0 18c0 80e3 001c 0000 0000     ................
   bf889:	0000 0100 01c0 18c0 80c3 001c 0000 0000     ................
   bf899:	0000 0100 01c0 10c0 8003 001c 0000 0000     ................
   bf8a9:	0000 0100 01c0 30c0 c001 001c 0000 0000     .......0........
   bf8b9:	0000 0100 01c0 30c0 c001 081c 0000 0000     .......0........
   bf8c9:	0000 0100 01c0 30c0 c001 1c1c 0000 0000     .......0........
   bf8d9:	0000 0100 03e0 30c0 e003 f87f 0000 0000     .......0........
   bf8e9:	0000 0300 07f0 78e0 f007 f87f 0000 0000     .......x........
	...

000bf979 <_ZL8hueHubIP>:
   bf979:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000bf985 <_ZL9killUmAll>:
	...
   bfb15:	0000 0200 0002 0000 0000 0000 2000 0040     ............. @.
   bfb25:	0000 0600 000e 0000 0000 0000 e100 00c0     ................
   bfb35:	f300 0ec0 001e 0000 0000 0600 e301 80c1     ................
   bfb45:	6700 0600 0006 0000 0000 0600 6000 c0c1     .g...........`..
   bfb55:	6c00 0600 0006 0000 0000 0f00 6000 c0c1     .l...........`..
   bfb65:	7c00 0603 0006 0000 0000 0f00 6000 c0c1     .|...........`..
   bfb75:	6c00 0607 0006 0000 0000 0b00 6080 c0c1     .l...........`..
   bfb85:	6e00 8603 0006 c10e 00f7 1900 60f0 80c1     .n...........`..
   bfb95:	6600 8603 0006 c11d 80ff 1300 60c0 80c1     .f...........`..
   bfba5:	6700 8601 0006 c00c c0dd 3700 60c0 80c0     .g.........7.`..
   bfbb5:	6300 8601 0006 c00c c0dc 3e00 60e0 80c0     .c.........>.`..
   bfbc5:	6300 8681 0006 f00e e0cc 6000 60e0 80c1     .c.........`.`..
   bfbd5:	fb00 8fe3 000f e107 f8ef f100 f1f0 80e1     ................
	...

000bfd85 <_ZL9messenger>:
	...
   bfeb5:	0000 0300 0080 0000 0001 0000 0000 0000     ................
   bfec5:	0000 0100 0080 0006 0003 0000 0000 0000     ................
   bfed5:	0000 0100 0080 0002 0003 0000 0000 0000     ................
   bfee5:	0000 0100 0080 1004 0003 8000 0000 0000     ................
   bfef5:	0000 0f00 8e87 3000 c303 8381 0080 0000     .......0........
   bff05:	0000 1900 8f8c 3000 6303 86c1 00c0 0000     .......0.c......
   bff15:	0000 1900 8d89 3000 6203 8f61 00c0 0000     .......0.ba.....
   bff25:	0000 1900 8d8b 3880 2303 c471 0000 0000     .......8.#q.....
   bff35:	0000 0f00 1d8f 18c0 3303 c7d0 00c0 0000     .........3......
	...
   bffa5:	0000 0020 0000 0000 0000 0000 0000 0000     .. .............
   bffb5:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bffc5:	0000 0060 0000 0000 0000 0000 0000 0070     ..`...........p.
   bffd5:	0c00 0060 0000 0000 0000 0100 0100 0080     ..`.............
   bffe5:	1c00 1c78 7600 8007 c370 8387 8687 0000     ..x..v..p.......
   bfff5:	0c00 366c db00 800c 46d3 c6c6 864c 0000     ..l6.....F..L...
   c0005:	0c00 7e6c 6900 c10f 0f83 c4c6 c64f 0000     ..l~.i......O...
   c0015:	0e00 2064 4d00 058c 0406 4506 06cc 0000     ..d .M.....E....
   c0025:	0e00 3e66 ef00 86c7 071c 63c7 8ec7 0000     ..f>.......c....
	...
   c003d:	0000 0101 0080 0000 0000 0000 0000 0000     ................
   c004d:	0000 0301 0000 0000 0000 0000 0000 0000     ................
   c005d:	0000 fe00 0000 0000 0000 0000 0000 0000     ................
	...

000c0185 <_ZL9mushrooms>:
   c0185:	0000 0000 0f00 80ff 0000 0000 0000 0000     ................
   c0195:	0000 0000 7f00 f8ff 0000 0000 0000 0000     ................
   c01a5:	0000 0000 ff03 ffff 0000 0000 0000 0000     ................
   c01b5:	0000 0000 ff0f ffff 00c0 0000 0000 0000     ................
   c01c5:	0000 0000 ee3f ffff 00f0 0000 0000 0000     ....?...........
   c01d5:	0000 0000 00f0 ff3f 00fc 0000 0000 0000     ......?.........
   c01e5:	0000 0100 00e0 ff7f 00ff 0000 0000 0000     ................
   c01f5:	0000 0300 00c0 ff3f c0ff 0000 0000 0000     ......?.........
   c0205:	0000 0700 0000 ff07 f0ff 0000 0000 0000     ................
   c0215:	0000 0e00 0000 ff0f f8ff 0000 0000 0000     ................
   c0225:	0000 1e00 0000 ff1f fcff 0000 0000 0000     ................
   c0235:	0000 1c00 0000 ff8f feff 0000 0000 0000     ................
   c0245:	0000 3c00 0000 ff9f ffff 0000 0000 0000     ...<............
   c0255:	0000 7e00 0100 ffff ffff 0080 0000 0000     ...~............
   c0265:	0000 7e00 ff00 ffff ffff fcff 0000 0000     ...~............
   c0275:	0000 ff00 ffff 00f8 0700 ffff 0000 0000     ................
   c0285:	0000 ff00 00fe 0000 0100 ffff 00c0 0000     ................
   c0295:	0000 ff01 0080 0000 0800 ffff 00e0 0000     ................
   c02a5:	0000 f801 0000 0000 0300 3fff 00f0 0000     ...........?....
   c02b5:	0000 e001 0f00 c0ff 1f00 0ffe 00f0 0000     ................
   c02c5:	0000 b001 3f00 ffff ff04 8ffd 00f8 0000     .....?..........
   c02d5:	0000 e201 fe01 ff5f ff83 07fc 00fc 0000     ......_.........
   c02e5:	0000 f000 ed0b ff9f ffc3 ffff 00fc 0000     ................
   c02f5:	0000 3b00 e10f fba7 ff07 fbff 00fe 0000     ...;............
   c0305:	0000 0000 c227 e011 ff0f fbff 00ff 0000     ....'...........
   c0315:	0000 0000 0000 f013 ff0f ffff 00ff 0000     ................
   c0325:	0000 0000 4400 f012 ff1f ffff 80ff 0000     .....D..........
   c0335:	0000 0000 c000 7800 ff1f ffff 80ff 0000     .......x........
   c0345:	0000 0000 0000 7802 ff1f 0fe0 80ff 0000     .......x........
   c0355:	0000 0000 0000 fc00 801f 0000 800f 0000     ................
   c0365:	0000 0000 0000 fc00 0018 8037 8009 0000     ..........7.....
   c0375:	0000 0000 0001 be00 0118 f0ef 8000 0000     ................
   c0385:	0000 0000 0002 5c00 070c fccd 8001 0000     .......\........
   c0395:	0000 0000 0000 0600 0703 ffc0 008f 0000     ................
   c03a5:	0000 0000 0000 6700 e201 7b04 00e0 0000     .......g...{....
   c03b5:	0000 0000 0006 6d00 0200 7c04 0000 0000     .......m...|....
   c03c5:	0000 0000 0002 6502 0480 fe08 0000 0000     .......e........
   c03d5:	0000 0000 0008 0700 0c00 1f00 0000 0000     ................
   c03e5:	0000 0000 000c b700 1080 0f00 0080 0000     ................
   c03f5:	0000 0000 0008 9700 2080 2300 0080 0000     ......... .#....
   c0405:	0000 0000 0018 6f03 6080 3630 00c0 0000     .......o.`06....
   c0415:	0000 0000 1818 3b00 40c0 2800 00c0 0000     .......;.@.(....
   c0425:	0000 0000 1c08 9100 80c0 4b00 0060 0000     ...........K`...
   c0435:	0000 0000 1c00 2d41 8080 2700 00e0 0000     ......A-...'....
   c0445:	0000 0000 300c 6dc0 00c1 0e00 00e0 0000     .....0.m........
   c0455:	0000 0000 3108 cf80 0041 b900 0020 0000     .....1..A... ...
   c0465:	0000 0000 3100 ff80 00c1 0100 00e0 0000     .....1..........
   c0475:	0000 0000 1900 fd81 0081 0400 00e0 0000     ................
   c0485:	0000 0000 0708 fff1 00c0 0600 0000 0000     ................
   c0495:	0000 0000 070e eff2 00c0 4300 00e0 0000     ...........C....
   c04a5:	0000 0000 0f07 8fc1 4080 4d00 00c0 0000     .........@.M....
   c04b5:	0000 0000 2e07 7f01 0080 8dc0 00c0 0000     ................
   c04c5:	0000 0000 6c03 ff30 0cc1 8fc0 00c0 0000     .....l0.........
   c04d5:	0000 0000 e7cb bff3 0de3 3f80 00c0 0000     ...........?....
   c04e5:	0000 0100 e7ff ff0f 9ffb ff11 00c0 0000     ................
   c04f5:	0000 0100 e7ff 7f0f d3ff ff03 00c0 0000     ................
   c0505:	0000 0000 dfaf ff8f eff3 ff3f 00c0 0000     ..........?.....
   c0515:	0000 0000 7399 ff3f 6fe1 ffdf 0080 0000     .....s?..o......
   c0525:	0000 0100 e7e2 ffbf f3c3 fcdf 0000 0000     ................
   c0535:	0000 0000 de0e ff7f 2181 ecb7 0000 0000     .........!......
   c0545:	0000 0000 9e0d f87f 0000 e000 0000 0000     ................
   c0555:	0000 0000 3d01 800d 0000 6002 0000 0000     .....=.....`....
   c0565:	0000 0000 fc00 0000 0000 0000 0000 0000     ................
   c0575:	0000 0000 ec00 0000 0000 0000 0000 0000     ................
   c0585:	0000                                         ...

000c0588 <CSWTCH.88>:
   c0588:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   c0598:	0050 0000                                   P...

000c059c <_ZL4font>:
   c059c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c05ac:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c05bc:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c05cc:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c05dc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c05ec:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c05fc:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c060c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c061c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c062c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c063c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c064c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c065c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c066c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c067c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c068c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c069c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c06ac:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c06bc:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c06cc:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c06dc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c06ec:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c06fc:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c070c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c071c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c072c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c073c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c074c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c075c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c076c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c077c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c078c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c079c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c07ac:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c07bc:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c07cc:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c07dc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c07ec:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c07fc:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c080c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c081c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c082c:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   c083c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c084c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c085c:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   c086c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c087c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   c088c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   c089c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   c08ac:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c08bc:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c08cc:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c08dc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c08ec:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c08fc:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c090c:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   c091c:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   c092c:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   c093c:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   c094c:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   c095c:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   c096c:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   c097c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   c098c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   c099c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   c09ac:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   c09bc:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   c09cc:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   c09dc:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   c09ec:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   c09fc:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   c0a0c:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   c0a1c:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   c0a2c:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   c0a3c:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   c0a4c:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   c0a5c:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   c0a6c:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   c0a7c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   c0a8c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000c0a98 <_ZTV12Adafruit_GFX>:
	...
   c0aa8:	7235 000b 83b9 000b 40a5 000b 6eb9 000b     5r.......@...n..
   c0ab8:	6fdf 000b 6ffb 000b 6f77 000b 7015 000b     .o...o..wo...p..
   c0ac8:	704b 000b 7067 000b                         Kp..gp..

000c0ad0 <_ZTV16Adafruit_SSD1306>:
	...
   c0ad8:	75c1 000b 7651 000b 7235 000b 83b9 000b     .u..Qv..5r......
   c0ae8:	75c5 000b 6eb9 000b 744d 000b 72dd 000b     .u...n..Mt...r..
   c0af8:	6f77 000b 7015 000b 704b 000b 7067 000b     wo...p..Kp..gp..

000c0b08 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000c0b10 <_ZTVN5spark13EthernetClassE>:
	...
   c0b18:	7ffb 000b 7ff1 000b 7fe7 000b 7fdd 000b     ................
   c0b28:	7fd1 000b 7fc5 000b 8295 000b 829d 000b     ................
   c0b38:	7fb9 000b 7fb1 000b 7fa7 000b 7f9d 000b     ................
   c0b48:	82cd 000b                                   ....

000c0b4c <_ZTV7TwoWire>:
	...
   c0b54:	8019 000b 8063 000b 803b 000b 801b 000b     ....c...;.......
   c0b64:	8043 000b 804b 000b 8053 000b 805b 000b     C...K...S...[...

000c0b74 <_ZTV9IPAddress>:
	...
   c0b7c:	8137 000b 8127 000b 8129 000b 7061 0070     7...'...)...app.

000c0b8c <_ZTVN5spark12NetworkClassE>:
	...
   c0b94:	8255 000b 825f 000b 8269 000b 8273 000b     U..._...i...s...
   c0ba4:	827d 000b 8289 000b 8295 000b 829d 000b     }...............
   c0bb4:	82a5 000b 82b1 000b 82b9 000b 82c3 000b     ................
   c0bc4:	82cd 000b                                   ....

000c0bc8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c0bc8:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   c0bd8:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000c0be8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0bf0:	8949 000b 896d 000b 8e57 000b 897b 000b     I...m...W...{...
   c0c00:	894d 000b                                   M...

000c0c04 <_ZTV9TCPClient>:
	...
   c0c0c:	4119 000b 414d 000b 88c5 000b 88df 000b     .A..MA..........
   c0c1c:	8ced 000b 8909 000b 8b63 000b 893d 000b     ........c...=...
   c0c2c:	8bf5 000b 8a35 000b 8b91 000b 8da1 000b     ....5...........
   c0c3c:	8b31 000b 893f 000b 88f1 000b 8981 000b     1...?...........
   c0c4c:	8a15 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   c0c5c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000c0c6c <_ZTV11USARTSerial>:
	...
   c0c74:	8e71 000b 8edd 000b 8eb5 000b 83b9 000b     q...............
   c0c84:	8e85 000b 8ea1 000b 8e93 000b 8eaf 000b     ................
   c0c94:	8e73 000b 8e77 000b                         s...w...

000c0c9c <_ZTV9USBSerial>:
	...
   c0ca4:	8f1b 000b 8f83 000b 8f59 000b 83b9 000b     ........Y.......
   c0cb4:	8f4b 000b 8f1d 000b 8f2d 000b 8f7d 000b     K.......-...}...
   c0cc4:	8f3d 000b 8f15 000b                         =.......

000c0ccc <_ZTVN5spark9WiFiClassE>:
	...
   c0cd4:	9083 000b 9079 000b 906f 000b 9025 000b     ....y...o...%...
   c0ce4:	9063 000b 9057 000b 8295 000b 829d 000b     c...W...........
   c0cf4:	904b 000b 9043 000b 9039 000b 902f 000b     K...C...9.../...
   c0d04:	82cd 000b                                   ....

000c0d08 <_ZSt7nothrow>:
	...

000c0d09 <_ZTSSt19_Sp_make_shared_tag>:
   c0d09:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c0d19:	6572 5f64 6174 0067 0000                     red_tag....

000c0d24 <_ZTISt19_Sp_make_shared_tag>:
   c0d24:	0d64 000c 0d09 000c                         d.......

000c0d2c <_ZTIN10__cxxabiv117__class_type_infoE>:
   c0d2c:	0dc4 000c 0d38 000c 0de8 000c               ....8.......

000c0d38 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c0d38:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c0d48:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c0d58:	0045 0000                                   E...

000c0d5c <_ZTVN10__cxxabiv117__class_type_infoE>:
   c0d5c:	0000 0000 0d2c 000c 94d5 000b 94e9 000b     ....,...........
   c0d6c:	967d 000b 967d 000b 9553 000b 9495 000b     }...}...S.......
   c0d7c:	953b 000b 94fd 000b 94c7 000b               ;...........

000c0d88 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c0d88:	0dc4 000c 0d94 000c 0d2c 000c               ........,...

000c0d94 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c0d94:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c0da4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c0db4:	666e 456f 0000 0000                         nfoE....

000c0dbc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c0dbc:	0000 0000 0d88 000c 957d 000b 9591 000b     ........}.......
   c0dcc:	967d 000b 967d 000b 9553 000b 9495 000b     }...}...S.......
   c0ddc:	9651 000b 95dd 000b 95a5 000b               Q...........

000c0de8 <_ZTISt9type_info>:
   c0de8:	0d64 000c 0df0 000c                         d.......

000c0df0 <_ZTSSt9type_info>:
   c0df0:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
	...

000c0e08 <TWO52>:
   c0e08:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   c0e18:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c0e28:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   c0e38:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   c0e48:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   c0e58:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   c0e68:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   c0e78:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000c0e88 <link_const_variable_data_end>:
   c0e88:	000b69f9 	.word	0x000b69f9
   c0e8c:	000b6ea9 	.word	0x000b6ea9
   c0e90:	000b7f8d 	.word	0x000b7f8d
   c0e94:	000b8005 	.word	0x000b8005
   c0e98:	000b8245 	.word	0x000b8245
   c0e9c:	000b83a5 	.word	0x000b83a5
   c0ea0:	000b84f9 	.word	0x000b84f9
   c0ea4:	000b88a1 	.word	0x000b88a1
   c0ea8:	000b8e5d 	.word	0x000b8e5d
   c0eac:	000b908d 	.word	0x000b908d
