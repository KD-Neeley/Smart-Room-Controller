
/Users/kdneeley/Documents/IoT/Smart-Room-Controller/smart-room-controller-DnD-20-sided-die-KD-Neeley/target/4.0.2/argon/smart-room-controller-DnD-20-sided-die-KD-Neeley.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d840  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c1860  000c1860  00011860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c1884  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004b0  2003e0a4  000c1888  0002e0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000029c  2003e554  2003e554  0003e554  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000c1d38  000c1d38  00031d38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c1d60  000c1d60  00031d60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012d693  00000000  00000000  00031d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014df0  00000000  00000000  0015f3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003eb70  00000000  00000000  001741e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003120  00000000  00000000  001b2d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ac40  00000000  00000000  001b5e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cefd  00000000  00000000  001c0ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004911b  00000000  00000000  001fd9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00137e77  00000000  00000000  00246acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008f24  00000000  00000000  0037e948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fb35 	bl	bb6a0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fb3d 	bl	bb6bc <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e0a4 	.word	0x2003e0a4
   b404c:	000c1888 	.word	0x000c1888
   b4050:	2003e554 	.word	0x2003e554
   b4054:	2003e554 	.word	0x2003e554
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 fb83 	bl	b976c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c1838 	.word	0x000c1838
   b4080:	000c1860 	.word	0x000c1860

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bb1e 	b.w	b46c4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fb91 	bl	b47b0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 bb23 	b.w	b96dc <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 b9dd 	b.w	b8454 <malloc>

000b409a <_Znaj>:
   b409a:	f004 b9db 	b.w	b8454 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 b9e1 	b.w	b8464 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 f92e 	bl	b830c <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b7f7d 	.word	0x000b7f7d
   b40b8:	000bb8b8 	.word	0x000bb8b8

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40cc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ce:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40d0:	4606      	mov	r6, r0
   b40d2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d4:	da0b      	bge.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d6:	2a0a      	cmp	r2, #10
   b40d8:	d109      	bne.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40da:	212d      	movs	r1, #45	; 0x2d
   b40dc:	f004 fc38 	bl	b8950 <_ZN5Print5printEc>
            val = -n;
   b40e0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40e2:	b2ea      	uxtb	r2, r5
   b40e4:	4630      	mov	r0, r6
    }
}
   b40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40ea:	f004 bc4a 	b.w	b8982 <_ZN5Print11printNumberEmh>
            val = n;
   b40ee:	4621      	mov	r1, r4
   b40f0:	e7f7      	b.n	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40f2 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b40f2:	6803      	ldr	r3, [r0, #0]
   b40f4:	b2c9      	uxtb	r1, r1
   b40f6:	689b      	ldr	r3, [r3, #8]
   b40f8:	4718      	bx	r3

000b40fa <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40fa:	b40e      	push	{r1, r2, r3}
   b40fc:	b503      	push	{r0, r1, lr}
   b40fe:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4100:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4102:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4106:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4108:	f004 fc59 	bl	b89be <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b410c:	b002      	add	sp, #8
   b410e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4112:	b003      	add	sp, #12
   b4114:	4770      	bx	lr
	...

000b4118 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4118:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b411a:	6984      	ldr	r4, [r0, #24]
   b411c:	4b0a      	ldr	r3, [pc, #40]	; (b4148 <_ZN9TCPClientD1Ev+0x30>)
   b411e:	6003      	str	r3, [r0, #0]
   b4120:	4605      	mov	r5, r0
   b4122:	b17c      	cbz	r4, b4144 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4124:	6863      	ldr	r3, [r4, #4]
   b4126:	3b01      	subs	r3, #1
   b4128:	6063      	str	r3, [r4, #4]
   b412a:	b95b      	cbnz	r3, b4144 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b412c:	6823      	ldr	r3, [r4, #0]
   b412e:	4620      	mov	r0, r4
   b4130:	689b      	ldr	r3, [r3, #8]
   b4132:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4134:	68a3      	ldr	r3, [r4, #8]
   b4136:	3b01      	subs	r3, #1
   b4138:	60a3      	str	r3, [r4, #8]
   b413a:	b91b      	cbnz	r3, b4144 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b413c:	6823      	ldr	r3, [r4, #0]
   b413e:	4620      	mov	r0, r4
   b4140:	68db      	ldr	r3, [r3, #12]
   b4142:	4798      	blx	r3
   b4144:	4628      	mov	r0, r5
   b4146:	bd38      	pop	{r3, r4, r5, pc}
   b4148:	000c15bc 	.word	0x000c15bc

000b414c <_ZN9TCPClientD0Ev>:
   b414c:	b510      	push	{r4, lr}
   b414e:	4604      	mov	r4, r0
   b4150:	f7ff ffe2 	bl	b4118 <_ZN9TCPClientD1Ev>
   b4154:	4620      	mov	r0, r4
   b4156:	211c      	movs	r1, #28
   b4158:	f7ff ffa1 	bl	b409e <_ZdlPvj>
   b415c:	4620      	mov	r0, r4
   b415e:	bd10      	pop	{r4, pc}

000b4160 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4164:	b08c      	sub	sp, #48	; 0x30
   b4166:	4605      	mov	r5, r0
   b4168:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b416a:	4668      	mov	r0, sp
   b416c:	4977      	ldr	r1, [pc, #476]	; (b434c <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b416e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b4172:	4614      	mov	r4, r2
   b4174:	461e      	mov	r6, r3
  String command = "";  
   b4176:	f004 fd9a 	bl	b8cae <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b417a:	f8df e228 	ldr.w	lr, [pc, #552]	; b43a4 <_Z6setHueibiii+0x244>
   b417e:	4974      	ldr	r1, [pc, #464]	; (b4350 <_Z6setHueibiii+0x1f0>)
   b4180:	f8de 3000 	ldr.w	r3, [lr]
   b4184:	4873      	ldr	r0, [pc, #460]	; (b4354 <_Z6setHueibiii+0x1f4>)
   b4186:	4a74      	ldr	r2, [pc, #464]	; (b4358 <_Z6setHueibiii+0x1f8>)
   b4188:	f8df c21c 	ldr.w	ip, [pc, #540]	; b43a8 <_Z6setHueibiii+0x248>
   b418c:	42ab      	cmp	r3, r5
   b418e:	d119      	bne.n	b41c4 <_Z6setHueibiii+0x64>
   b4190:	680b      	ldr	r3, [r1, #0]
   b4192:	42bb      	cmp	r3, r7
   b4194:	d116      	bne.n	b41c4 <_Z6setHueibiii+0x64>
   b4196:	6803      	ldr	r3, [r0, #0]
   b4198:	42a3      	cmp	r3, r4
   b419a:	d113      	bne.n	b41c4 <_Z6setHueibiii+0x64>
   b419c:	6813      	ldr	r3, [r2, #0]
   b419e:	42b3      	cmp	r3, r6
   b41a0:	d110      	bne.n	b41c4 <_Z6setHueibiii+0x64>
   b41a2:	f8dc 3000 	ldr.w	r3, [ip]
   b41a6:	4543      	cmp	r3, r8
   b41a8:	d10c      	bne.n	b41c4 <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b41aa:	f005 f9c5 	bl	b9538 <_Z16_fetch_usbserialv>
   b41ae:	496b      	ldr	r1, [pc, #428]	; (b435c <_Z6setHueibiii+0x1fc>)
   b41b0:	f7ff ffa3 	bl	b40fa <_ZN5Print6printfEPKcz>
    return false;
   b41b4:	2400      	movs	r4, #0
  String command = "";  
   b41b6:	4668      	mov	r0, sp
   b41b8:	f004 fd2e 	bl	b8c18 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b41bc:	4620      	mov	r0, r4
   b41be:	b00c      	add	sp, #48	; 0x30
   b41c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b41c4:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41c8:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41ca:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41cc:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41ce:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41d2:	2f00      	cmp	r7, #0
   b41d4:	f000 80b5 	beq.w	b4342 <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41d8:	4961      	ldr	r1, [pc, #388]	; (b4360 <_Z6setHueibiii+0x200>)
   b41da:	4668      	mov	r0, sp
   b41dc:	f004 fd95 	bl	b8d0a <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41e0:	4669      	mov	r1, sp
   b41e2:	a808      	add	r0, sp, #32
   b41e4:	f004 fd86 	bl	b8cf4 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41e8:	220a      	movs	r2, #10
   b41ea:	4641      	mov	r1, r8
   b41ec:	a804      	add	r0, sp, #16
   b41ee:	f004 fd9e 	bl	b8d2e <_ZN6StringC1Eih>
   b41f2:	a904      	add	r1, sp, #16
   b41f4:	a808      	add	r0, sp, #32
   b41f6:	f004 fde2 	bl	b8dbe <_ZplRK15StringSumHelperRK6String>
   b41fa:	495a      	ldr	r1, [pc, #360]	; (b4364 <_Z6setHueibiii+0x204>)
   b41fc:	f004 fdeb 	bl	b8dd6 <_ZplRK15StringSumHelperPKc>
   b4200:	4601      	mov	r1, r0
   b4202:	4668      	mov	r0, sp
   b4204:	f004 fd67 	bl	b8cd6 <_ZN6StringaSERKS_>
   b4208:	a804      	add	r0, sp, #16
   b420a:	f004 fd05 	bl	b8c18 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b420e:	a808      	add	r0, sp, #32
   b4210:	f004 fd02 	bl	b8c18 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4214:	4669      	mov	r1, sp
   b4216:	a808      	add	r0, sp, #32
   b4218:	f004 fd6c 	bl	b8cf4 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b421c:	220a      	movs	r2, #10
   b421e:	4631      	mov	r1, r6
   b4220:	a804      	add	r0, sp, #16
   b4222:	f004 fd84 	bl	b8d2e <_ZN6StringC1Eih>
   b4226:	a904      	add	r1, sp, #16
   b4228:	a808      	add	r0, sp, #32
   b422a:	f004 fdc8 	bl	b8dbe <_ZplRK15StringSumHelperRK6String>
   b422e:	494e      	ldr	r1, [pc, #312]	; (b4368 <_Z6setHueibiii+0x208>)
   b4230:	f004 fdd1 	bl	b8dd6 <_ZplRK15StringSumHelperPKc>
   b4234:	4601      	mov	r1, r0
   b4236:	4668      	mov	r0, sp
   b4238:	f004 fd4d 	bl	b8cd6 <_ZN6StringaSERKS_>
   b423c:	a804      	add	r0, sp, #16
   b423e:	f004 fceb 	bl	b8c18 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4242:	a808      	add	r0, sp, #32
   b4244:	f004 fce8 	bl	b8c18 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4248:	4669      	mov	r1, sp
   b424a:	a808      	add	r0, sp, #32
   b424c:	f004 fd52 	bl	b8cf4 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4250:	220a      	movs	r2, #10
   b4252:	4621      	mov	r1, r4
   b4254:	a804      	add	r0, sp, #16
   b4256:	f004 fd6a 	bl	b8d2e <_ZN6StringC1Eih>
   b425a:	a904      	add	r1, sp, #16
   b425c:	a808      	add	r0, sp, #32
   b425e:	f004 fdae 	bl	b8dbe <_ZplRK15StringSumHelperRK6String>
   b4262:	4942      	ldr	r1, [pc, #264]	; (b436c <_Z6setHueibiii+0x20c>)
   b4264:	f004 fdb7 	bl	b8dd6 <_ZplRK15StringSumHelperPKc>
   b4268:	4601      	mov	r1, r0
   b426a:	4668      	mov	r0, sp
   b426c:	f004 fd33 	bl	b8cd6 <_ZN6StringaSERKS_>
   b4270:	a804      	add	r0, sp, #16
   b4272:	f004 fcd1 	bl	b8c18 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4276:	a808      	add	r0, sp, #32
   b4278:	f004 fcce 	bl	b8c18 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b427c:	493c      	ldr	r1, [pc, #240]	; (b4370 <_Z6setHueibiii+0x210>)
   b427e:	483d      	ldr	r0, [pc, #244]	; (b4374 <_Z6setHueibiii+0x214>)
   b4280:	2300      	movs	r3, #0
   b4282:	2250      	movs	r2, #80	; 0x50
   b4284:	f004 fe86 	bl	b8f94 <_ZN9TCPClient7connectEPKctm>
   b4288:	4604      	mov	r4, r0
   b428a:	2800      	cmp	r0, #0
   b428c:	d093      	beq.n	b41b6 <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b428e:	f005 f953 	bl	b9538 <_Z16_fetch_usbserialv>
   b4292:	4939      	ldr	r1, [pc, #228]	; (b4378 <_Z6setHueibiii+0x218>)
   b4294:	f004 fb6b 	bl	b896e <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4298:	f005 f94e 	bl	b9538 <_Z16_fetch_usbserialv>
   b429c:	9900      	ldr	r1, [sp, #0]
   b429e:	f004 fb66 	bl	b896e <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b42a2:	4936      	ldr	r1, [pc, #216]	; (b437c <_Z6setHueibiii+0x21c>)
   b42a4:	4833      	ldr	r0, [pc, #204]	; (b4374 <_Z6setHueibiii+0x214>)
   b42a6:	f004 fb4f 	bl	b8948 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b42aa:	4935      	ldr	r1, [pc, #212]	; (b4380 <_Z6setHueibiii+0x220>)
   b42ac:	4831      	ldr	r0, [pc, #196]	; (b4374 <_Z6setHueibiii+0x214>)
   b42ae:	f004 fb4b 	bl	b8948 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b42b2:	4934      	ldr	r1, [pc, #208]	; (b4384 <_Z6setHueibiii+0x224>)
   b42b4:	482f      	ldr	r0, [pc, #188]	; (b4374 <_Z6setHueibiii+0x214>)
   b42b6:	f004 fb47 	bl	b8948 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b42ba:	220a      	movs	r2, #10
   b42bc:	482d      	ldr	r0, [pc, #180]	; (b4374 <_Z6setHueibiii+0x214>)
   b42be:	4629      	mov	r1, r5
   b42c0:	f7ff ff04 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b42c4:	4930      	ldr	r1, [pc, #192]	; (b4388 <_Z6setHueibiii+0x228>)
   b42c6:	482b      	ldr	r0, [pc, #172]	; (b4374 <_Z6setHueibiii+0x214>)
   b42c8:	f004 fb51 	bl	b896e <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42cc:	492f      	ldr	r1, [pc, #188]	; (b438c <_Z6setHueibiii+0x22c>)
   b42ce:	4829      	ldr	r0, [pc, #164]	; (b4374 <_Z6setHueibiii+0x214>)
   b42d0:	f004 fb4d 	bl	b896e <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42d4:	492e      	ldr	r1, [pc, #184]	; (b4390 <_Z6setHueibiii+0x230>)
   b42d6:	4827      	ldr	r0, [pc, #156]	; (b4374 <_Z6setHueibiii+0x214>)
   b42d8:	f004 fb36 	bl	b8948 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42dc:	4924      	ldr	r1, [pc, #144]	; (b4370 <_Z6setHueibiii+0x210>)
   b42de:	4825      	ldr	r0, [pc, #148]	; (b4374 <_Z6setHueibiii+0x214>)
   b42e0:	f004 fb45 	bl	b896e <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42e4:	492b      	ldr	r1, [pc, #172]	; (b4394 <_Z6setHueibiii+0x234>)
   b42e6:	4823      	ldr	r0, [pc, #140]	; (b4374 <_Z6setHueibiii+0x214>)
   b42e8:	f004 fb2e 	bl	b8948 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42ec:	220a      	movs	r2, #10
   b42ee:	9902      	ldr	r1, [sp, #8]
   b42f0:	4820      	ldr	r0, [pc, #128]	; (b4374 <_Z6setHueibiii+0x214>)
   b42f2:	f004 fb46 	bl	b8982 <_ZN5Print11printNumberEmh>
        n += println();
   b42f6:	481f      	ldr	r0, [pc, #124]	; (b4374 <_Z6setHueibiii+0x214>)
   b42f8:	f004 fb2d 	bl	b8956 <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42fc:	4926      	ldr	r1, [pc, #152]	; (b4398 <_Z6setHueibiii+0x238>)
   b42fe:	481d      	ldr	r0, [pc, #116]	; (b4374 <_Z6setHueibiii+0x214>)
   b4300:	f004 fb35 	bl	b896e <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b4304:	481b      	ldr	r0, [pc, #108]	; (b4374 <_Z6setHueibiii+0x214>)
   b4306:	f004 fb26 	bl	b8956 <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b430a:	9900      	ldr	r1, [sp, #0]
   b430c:	4819      	ldr	r0, [pc, #100]	; (b4374 <_Z6setHueibiii+0x214>)
   b430e:	f004 fb2e 	bl	b896e <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b4312:	f005 f911 	bl	b9538 <_Z16_fetch_usbserialv>
   b4316:	4921      	ldr	r1, [pc, #132]	; (b439c <_Z6setHueibiii+0x23c>)
   b4318:	f004 fb29 	bl	b896e <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b431c:	f005 f90c 	bl	b9538 <_Z16_fetch_usbserialv>
   b4320:	4914      	ldr	r1, [pc, #80]	; (b4374 <_Z6setHueibiii+0x214>)
   b4322:	4604      	mov	r4, r0
   b4324:	a808      	add	r0, sp, #32
   b4326:	f004 fc63 	bl	b8bf0 <_ZN6Stream10readStringEv>
   b432a:	9908      	ldr	r1, [sp, #32]
   b432c:	4620      	mov	r0, r4
   b432e:	f004 fb1e 	bl	b896e <_ZN5Print7printlnEPKc>
   b4332:	a808      	add	r0, sp, #32
   b4334:	f004 fc70 	bl	b8c18 <_ZN6StringD1Ev>
    HueClient.stop();
   b4338:	480e      	ldr	r0, [pc, #56]	; (b4374 <_Z6setHueibiii+0x214>)
   b433a:	f004 ffe1 	bl	b9300 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b433e:	2401      	movs	r4, #1
   b4340:	e739      	b.n	b41b6 <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b4342:	4917      	ldr	r1, [pc, #92]	; (b43a0 <_Z6setHueibiii+0x240>)
   b4344:	4668      	mov	r0, sp
   b4346:	f004 fce0 	bl	b8d0a <_ZN6StringaSEPKc>
   b434a:	e797      	b.n	b427c <_Z6setHueibiii+0x11c>
   b434c:	000bbb84 	.word	0x000bbb84
   b4350:	2003e5c0 	.word	0x2003e5c0
   b4354:	2003e5c8 	.word	0x2003e5c8
   b4358:	2003e5b8 	.word	0x2003e5b8
   b435c:	000bb8cd 	.word	0x000bb8cd
   b4360:	000bb8e9 	.word	0x000bb8e9
   b4364:	000bb8fb 	.word	0x000bb8fb
   b4368:	000bb903 	.word	0x000bb903
   b436c:	000bb916 	.word	0x000bb916
   b4370:	000c032c 	.word	0x000c032c
   b4374:	2003e554 	.word	0x2003e554
   b4378:	000bb918 	.word	0x000bb918
   b437c:	000bb92f 	.word	0x000bb92f
   b4380:	000bbe13 	.word	0x000bbe13
   b4384:	000bb939 	.word	0x000bb939
   b4388:	000bb942 	.word	0x000bb942
   b438c:	000bbb6b 	.word	0x000bbb6b
   b4390:	000bb952 	.word	0x000bb952
   b4394:	000bb959 	.word	0x000bb959
   b4398:	000bb96a 	.word	0x000bb96a
   b439c:	000bb991 	.word	0x000bb991
   b43a0:	000bb90b 	.word	0x000bb90b
   b43a4:	2003e5bc 	.word	0x2003e5bc
   b43a8:	2003e5c4 	.word	0x2003e5c4

000b43ac <_Z8switchONi>:
TCPClient WemoClient;

int wemoPort = 49153;
const char *wemoIP[5] = {"192.168.1.30","192.168.1.31","192.168.1.32","192.168.1.33","192.168.1.34"};

void switchON(int wemo) {
   b43ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  
  String data1;
   b43ae:	4925      	ldr	r1, [pc, #148]	; (b4444 <_Z8switchONi+0x98>)
void switchON(int wemo) {
   b43b0:	4604      	mov	r4, r0
  String data1;
   b43b2:	4668      	mov	r0, sp
   b43b4:	f004 fc7b 	bl	b8cae <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("SwitchON %i \n",wemo);
   b43b8:	f005 f8be 	bl	b9538 <_Z16_fetch_usbserialv>
   b43bc:	4622      	mov	r2, r4
   b43be:	4922      	ldr	r1, [pc, #136]	; (b4448 <_Z8switchONi+0x9c>)
   b43c0:	f7ff fe9b 	bl	b40fa <_ZN5Print6printfEPKcz>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b43c4:	4921      	ldr	r1, [pc, #132]	; (b444c <_Z8switchONi+0xa0>)
   b43c6:	4668      	mov	r0, sp
   b43c8:	f004 fcdb 	bl	b8d82 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b43cc:	4a20      	ldr	r2, [pc, #128]	; (b4450 <_Z8switchONi+0xa4>)
   b43ce:	4921      	ldr	r1, [pc, #132]	; (b4454 <_Z8switchONi+0xa8>)
   b43d0:	8812      	ldrh	r2, [r2, #0]
   b43d2:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b43d6:	4820      	ldr	r0, [pc, #128]	; (b4458 <_Z8switchONi+0xac>)
   b43d8:	2300      	movs	r3, #0
   b43da:	f004 fddb 	bl	b8f94 <_ZN9TCPClient7connectEPKctm>
   b43de:	b328      	cbz	r0, b442c <_Z8switchONi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b43e0:	491e      	ldr	r1, [pc, #120]	; (b445c <_Z8switchONi+0xb0>)
   b43e2:	481d      	ldr	r0, [pc, #116]	; (b4458 <_Z8switchONi+0xac>)
   b43e4:	f004 fac3 	bl	b896e <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b43e8:	491d      	ldr	r1, [pc, #116]	; (b4460 <_Z8switchONi+0xb4>)
   b43ea:	481b      	ldr	r0, [pc, #108]	; (b4458 <_Z8switchONi+0xac>)
   b43ec:	f004 fabf 	bl	b896e <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b43f0:	491c      	ldr	r1, [pc, #112]	; (b4464 <_Z8switchONi+0xb8>)
   b43f2:	4819      	ldr	r0, [pc, #100]	; (b4458 <_Z8switchONi+0xac>)
   b43f4:	f004 fabb 	bl	b896e <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b43f8:	491b      	ldr	r1, [pc, #108]	; (b4468 <_Z8switchONi+0xbc>)
   b43fa:	4817      	ldr	r0, [pc, #92]	; (b4458 <_Z8switchONi+0xac>)
   b43fc:	f004 fab7 	bl	b896e <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b4400:	491a      	ldr	r1, [pc, #104]	; (b446c <_Z8switchONi+0xc0>)
   b4402:	4815      	ldr	r0, [pc, #84]	; (b4458 <_Z8switchONi+0xac>)
   b4404:	f004 faa0 	bl	b8948 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b4408:	9902      	ldr	r1, [sp, #8]
   b440a:	4813      	ldr	r0, [pc, #76]	; (b4458 <_Z8switchONi+0xac>)
   b440c:	220a      	movs	r2, #10
   b440e:	f004 fab8 	bl	b8982 <_ZN5Print11printNumberEmh>
        n += println();
   b4412:	4811      	ldr	r0, [pc, #68]	; (b4458 <_Z8switchONi+0xac>)
   b4414:	f004 fa9f 	bl	b8956 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b4418:	480f      	ldr	r0, [pc, #60]	; (b4458 <_Z8switchONi+0xac>)
   b441a:	f004 fa9c 	bl	b8956 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b441e:	9900      	ldr	r1, [sp, #0]
   b4420:	480d      	ldr	r0, [pc, #52]	; (b4458 <_Z8switchONi+0xac>)
   b4422:	f004 fa91 	bl	b8948 <_ZN5Print5printEPKc>
        WemoClient.println();
   b4426:	480c      	ldr	r0, [pc, #48]	; (b4458 <_Z8switchONi+0xac>)
   b4428:	f004 fa95 	bl	b8956 <_ZN5Print7printlnEv>
    }

  if (WemoClient.connected()) {
   b442c:	480a      	ldr	r0, [pc, #40]	; (b4458 <_Z8switchONi+0xac>)
   b442e:	f004 fe2f 	bl	b9090 <_ZN9TCPClient9connectedEv>
   b4432:	b110      	cbz	r0, b443a <_Z8switchONi+0x8e>
     WemoClient.stop();
   b4434:	4808      	ldr	r0, [pc, #32]	; (b4458 <_Z8switchONi+0xac>)
   b4436:	f004 ff63 	bl	b9300 <_ZN9TCPClient4stopEv>
  String data1;
   b443a:	4668      	mov	r0, sp
   b443c:	f004 fbec 	bl	b8c18 <_ZN6StringD1Ev>
  }
}
   b4440:	b004      	add	sp, #16
   b4442:	bd10      	pop	{r4, pc}
   b4444:	000bbb84 	.word	0x000bbb84
   b4448:	000bb99a 	.word	0x000bb99a
   b444c:	000bb9a8 	.word	0x000bb9a8
   b4450:	2003e0d0 	.word	0x2003e0d0
   b4454:	2003e0bc 	.word	0x2003e0bc
   b4458:	2003e59c 	.word	0x2003e59c
   b445c:	000bbad4 	.word	0x000bbad4
   b4460:	000bbafc 	.word	0x000bbafc
   b4464:	000bbb22 	.word	0x000bbb22
   b4468:	000bbb5f 	.word	0x000bbb5f
   b446c:	000bb959 	.word	0x000bb959

000b4470 <_Z9switchOFFi>:

void switchOFF(int wemo){
   b4470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String data1;
   b4472:	4925      	ldr	r1, [pc, #148]	; (b4508 <_Z9switchOFFi+0x98>)
void switchOFF(int wemo){
   b4474:	4604      	mov	r4, r0
  String data1;
   b4476:	4668      	mov	r0, sp
   b4478:	f004 fc19 	bl	b8cae <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("switchOFF %i \n",wemo);
   b447c:	f005 f85c 	bl	b9538 <_Z16_fetch_usbserialv>
   b4480:	4622      	mov	r2, r4
   b4482:	4922      	ldr	r1, [pc, #136]	; (b450c <_Z9switchOFFi+0x9c>)
   b4484:	f7ff fe39 	bl	b40fa <_ZN5Print6printfEPKcz>
   b4488:	4921      	ldr	r1, [pc, #132]	; (b4510 <_Z9switchOFFi+0xa0>)
   b448a:	4668      	mov	r0, sp
   b448c:	f004 fc79 	bl	b8d82 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b4490:	4a20      	ldr	r2, [pc, #128]	; (b4514 <_Z9switchOFFi+0xa4>)
   b4492:	4921      	ldr	r1, [pc, #132]	; (b4518 <_Z9switchOFFi+0xa8>)
   b4494:	8812      	ldrh	r2, [r2, #0]
   b4496:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b449a:	4820      	ldr	r0, [pc, #128]	; (b451c <_Z9switchOFFi+0xac>)
   b449c:	2300      	movs	r3, #0
   b449e:	f004 fd79 	bl	b8f94 <_ZN9TCPClient7connectEPKctm>
   b44a2:	b328      	cbz	r0, b44f0 <_Z9switchOFFi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b44a4:	491e      	ldr	r1, [pc, #120]	; (b4520 <_Z9switchOFFi+0xb0>)
   b44a6:	481d      	ldr	r0, [pc, #116]	; (b451c <_Z9switchOFFi+0xac>)
   b44a8:	f004 fa61 	bl	b896e <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b44ac:	491d      	ldr	r1, [pc, #116]	; (b4524 <_Z9switchOFFi+0xb4>)
   b44ae:	481b      	ldr	r0, [pc, #108]	; (b451c <_Z9switchOFFi+0xac>)
   b44b0:	f004 fa5d 	bl	b896e <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b44b4:	491c      	ldr	r1, [pc, #112]	; (b4528 <_Z9switchOFFi+0xb8>)
   b44b6:	4819      	ldr	r0, [pc, #100]	; (b451c <_Z9switchOFFi+0xac>)
   b44b8:	f004 fa59 	bl	b896e <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b44bc:	491b      	ldr	r1, [pc, #108]	; (b452c <_Z9switchOFFi+0xbc>)
   b44be:	4817      	ldr	r0, [pc, #92]	; (b451c <_Z9switchOFFi+0xac>)
   b44c0:	f004 fa55 	bl	b896e <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b44c4:	491a      	ldr	r1, [pc, #104]	; (b4530 <_Z9switchOFFi+0xc0>)
   b44c6:	4815      	ldr	r0, [pc, #84]	; (b451c <_Z9switchOFFi+0xac>)
   b44c8:	f004 fa3e 	bl	b8948 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b44cc:	9902      	ldr	r1, [sp, #8]
   b44ce:	4813      	ldr	r0, [pc, #76]	; (b451c <_Z9switchOFFi+0xac>)
   b44d0:	220a      	movs	r2, #10
   b44d2:	f004 fa56 	bl	b8982 <_ZN5Print11printNumberEmh>
        n += println();
   b44d6:	4811      	ldr	r0, [pc, #68]	; (b451c <_Z9switchOFFi+0xac>)
   b44d8:	f004 fa3d 	bl	b8956 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b44dc:	480f      	ldr	r0, [pc, #60]	; (b451c <_Z9switchOFFi+0xac>)
   b44de:	f004 fa3a 	bl	b8956 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b44e2:	9900      	ldr	r1, [sp, #0]
   b44e4:	480d      	ldr	r0, [pc, #52]	; (b451c <_Z9switchOFFi+0xac>)
   b44e6:	f004 fa2f 	bl	b8948 <_ZN5Print5printEPKc>
        WemoClient.println();
   b44ea:	480c      	ldr	r0, [pc, #48]	; (b451c <_Z9switchOFFi+0xac>)
   b44ec:	f004 fa33 	bl	b8956 <_ZN5Print7printlnEv>
    }
   
  if (WemoClient.connected()) {
   b44f0:	480a      	ldr	r0, [pc, #40]	; (b451c <_Z9switchOFFi+0xac>)
   b44f2:	f004 fdcd 	bl	b9090 <_ZN9TCPClient9connectedEv>
   b44f6:	b110      	cbz	r0, b44fe <_Z9switchOFFi+0x8e>
     WemoClient.stop();
   b44f8:	4808      	ldr	r0, [pc, #32]	; (b451c <_Z9switchOFFi+0xac>)
   b44fa:	f004 ff01 	bl	b9300 <_ZN9TCPClient4stopEv>
  String data1;
   b44fe:	4668      	mov	r0, sp
   b4500:	f004 fb8a 	bl	b8c18 <_ZN6StringD1Ev>
  }
}
   b4504:	b004      	add	sp, #16
   b4506:	bd10      	pop	{r4, pc}
   b4508:	000bbb84 	.word	0x000bbb84
   b450c:	000bbb76 	.word	0x000bbb76
   b4510:	000bbb85 	.word	0x000bbb85
   b4514:	2003e0d0 	.word	0x2003e0d0
   b4518:	2003e0bc 	.word	0x2003e0bc
   b451c:	2003e59c 	.word	0x2003e59c
   b4520:	000bbad4 	.word	0x000bbad4
   b4524:	000bbafc 	.word	0x000bbafc
   b4528:	000bbb22 	.word	0x000bbb22
   b452c:	000bbb5f 	.word	0x000bbb5f
   b4530:	000bb959 	.word	0x000bb959
   b4534:	00000000 	.word	0x00000000

000b4538 <_Z5setFShh>:
  _scaleFactor = scaleFactor;
  return scaleFactor;
}

// Set Full Scale of MPU
float setFS(byte addr, byte fullscale) {
   b4538:	b538      	push	{r3, r4, r5, lr}
   b453a:	460c      	mov	r4, r1
   b453c:	4605      	mov	r5, r0
  float scaling;

  Wire.begin();  
   b453e:	f005 f9ed 	bl	b991c <_Z19__fetch_global_Wirev>
   b4542:	f004 f853 	bl	b85ec <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(addr); 
   b4546:	f005 f9e9 	bl	b991c <_Z19__fetch_global_Wirev>
   b454a:	4629      	mov	r1, r5
   b454c:	f004 f87d 	bl	b864a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x1C);
   b4550:	f005 f9e4 	bl	b991c <_Z19__fetch_global_Wirev>
   b4554:	211c      	movs	r1, #28
   b4556:	f7ff fdcc 	bl	b40f2 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(fullscale << 3); 
   b455a:	f005 f9df 	bl	b991c <_Z19__fetch_global_Wirev>
   b455e:	00e1      	lsls	r1, r4, #3
   b4560:	f7ff fdc7 	bl	b40f2 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(true);
   b4564:	f005 f9da 	bl	b991c <_Z19__fetch_global_Wirev>
   b4568:	2101      	movs	r1, #1
   b456a:	f004 f875 	bl	b8658 <_ZN7TwoWire15endTransmissionEh>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b456e:	4620      	mov	r0, r4
   b4570:	f006 fd16 	bl	bafa0 <__aeabi_ui2d>
   b4574:	ed9f 0b12 	vldr	d0, [pc, #72]	; b45c0 <_Z5setFShh+0x88>
   b4578:	ec41 0b11 	vmov	d1, r0, r1
   b457c:	f005 fb48 	bl	b9c10 <pow>

  scaling = 1 / (16384.0 / pow(2,fullscale));
   b4580:	4911      	ldr	r1, [pc, #68]	; (b45c8 <_Z5setFShh+0x90>)
   b4582:	ec53 2b10 	vmov	r2, r3, d0
   b4586:	2000      	movs	r0, #0
   b4588:	f006 feae 	bl	bb2e8 <__aeabi_ddiv>
   b458c:	4602      	mov	r2, r0
   b458e:	460b      	mov	r3, r1
   b4590:	2000      	movs	r0, #0
   b4592:	490e      	ldr	r1, [pc, #56]	; (b45cc <_Z5setFShh+0x94>)
   b4594:	f006 fea8 	bl	bb2e8 <__aeabi_ddiv>
   b4598:	f007 f82c 	bl	bb5f4 <__aeabi_d2f>
   b459c:	4604      	mov	r4, r0
  Serial.printf("Scaling Factor is: %0.8f\n",scaling);
   b459e:	f004 ffcb 	bl	b9538 <_Z16_fetch_usbserialv>
   b45a2:	4605      	mov	r5, r0
   b45a4:	4620      	mov	r0, r4
   b45a6:	f006 fd1d 	bl	bafe4 <__aeabi_f2d>
   b45aa:	4602      	mov	r2, r0
   b45ac:	460b      	mov	r3, r1
   b45ae:	4628      	mov	r0, r5
   b45b0:	4907      	ldr	r1, [pc, #28]	; (b45d0 <_Z5setFShh+0x98>)
   b45b2:	f7ff fda2 	bl	b40fa <_ZN5Print6printfEPKcz>
  return scaling;
}
   b45b6:	ee00 4a10 	vmov	s0, r4
   b45ba:	bd38      	pop	{r3, r4, r5, pc}
   b45bc:	f3af 8000 	nop.w
   b45c0:	00000000 	.word	0x00000000
   b45c4:	40000000 	.word	0x40000000
   b45c8:	40d00000 	.word	0x40d00000
   b45cc:	3ff00000 	.word	0x3ff00000
   b45d0:	000bbcb1 	.word	0x000bbcb1

000b45d4 <_Z8mpuBeginhh>:
float mpuBegin(byte addr, byte fullscale) {
   b45d4:	b538      	push	{r3, r4, r5, lr}
   b45d6:	460d      	mov	r5, r1
   b45d8:	4604      	mov	r4, r0
  Wire.begin();  
   b45da:	f005 f99f 	bl	b991c <_Z19__fetch_global_Wirev>
   b45de:	f004 f805 	bl	b85ec <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(addr); 
   b45e2:	f005 f99b 	bl	b991c <_Z19__fetch_global_Wirev>
   b45e6:	4621      	mov	r1, r4
   b45e8:	f004 f82f 	bl	b864a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x6B);
   b45ec:	f005 f996 	bl	b991c <_Z19__fetch_global_Wirev>
   b45f0:	216b      	movs	r1, #107	; 0x6b
   b45f2:	f7ff fd7e 	bl	b40f2 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(0x00); // set to 0 (wakes up MPU-6050)
   b45f6:	f005 f991 	bl	b991c <_Z19__fetch_global_Wirev>
   b45fa:	2100      	movs	r1, #0
   b45fc:	f7ff fd79 	bl	b40f2 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(true);
   b4600:	f005 f98c 	bl	b991c <_Z19__fetch_global_Wirev>
   b4604:	2101      	movs	r1, #1
   b4606:	f004 f827 	bl	b8658 <_ZN7TwoWire15endTransmissionEh>
  scaleFactor = setFS(addr, fullscale);
   b460a:	4629      	mov	r1, r5
   b460c:	4620      	mov	r0, r4
   b460e:	f7ff ff93 	bl	b4538 <_Z5setFShh>
  _scaleFactor = scaleFactor;
   b4612:	4b02      	ldr	r3, [pc, #8]	; (b461c <_Z8mpuBeginhh+0x48>)
   b4614:	ed83 0a00 	vstr	s0, [r3]
}
   b4618:	bd38      	pop	{r3, r4, r5, pc}
   b461a:	bf00      	nop
   b461c:	2003e5cc 	.word	0x2003e5cc

000b4620 <_Z5get16hh>:


// Return signed 16 bit number from big endian registers
float get16(byte addr, byte reg) {
   b4620:	b538      	push	{r3, r4, r5, lr}
   b4622:	4604      	mov	r4, r0
   b4624:	460d      	mov	r5, r1
  byte msb, lsb;
  int16_t value16;

  Wire.beginTransmission(addr);
   b4626:	f005 f979 	bl	b991c <_Z19__fetch_global_Wirev>
   b462a:	4621      	mov	r1, r4
   b462c:	f004 f80d 	bl	b864a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg); 
   b4630:	f005 f974 	bl	b991c <_Z19__fetch_global_Wirev>
   b4634:	6803      	ldr	r3, [r0, #0]
   b4636:	4629      	mov	r1, r5
   b4638:	689b      	ldr	r3, [r3, #8]
   b463a:	4798      	blx	r3
  Wire.endTransmission(false); // keep active.
   b463c:	f005 f96e 	bl	b991c <_Z19__fetch_global_Wirev>
   b4640:	2100      	movs	r1, #0
   b4642:	f004 f809 	bl	b8658 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(addr, 2, true);
   b4646:	f005 f969 	bl	b991c <_Z19__fetch_global_Wirev>
   b464a:	4621      	mov	r1, r4
   b464c:	2202      	movs	r2, #2
   b464e:	2301      	movs	r3, #1
   b4650:	f003 ffe9 	bl	b8626 <_ZN7TwoWire11requestFromEhjh>
  msb = Wire.read(); 
   b4654:	f005 f962 	bl	b991c <_Z19__fetch_global_Wirev>
   b4658:	6803      	ldr	r3, [r0, #0]
   b465a:	695b      	ldr	r3, [r3, #20]
   b465c:	4798      	blx	r3
   b465e:	4604      	mov	r4, r0
  lsb = Wire.read(); 
   b4660:	f005 f95c 	bl	b991c <_Z19__fetch_global_Wirev>
   b4664:	6803      	ldr	r3, [r0, #0]
   b4666:	695b      	ldr	r3, [r3, #20]
   b4668:	4798      	blx	r3

  value16 = msb << 8 | lsb;
   b466a:	b2c3      	uxtb	r3, r0
   b466c:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
  //Serial.printf("MSB = %02X, LSB = %02X, Value = %04X (%i)\n",msb, lsb, value16, value16);

  return value16;
   b4670:	b203      	sxth	r3, r0
   b4672:	ee00 3a10 	vmov	s0, r3

}
   b4676:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b467a:	bd38      	pop	{r3, r4, r5, pc}

000b467c <_Z11getAccArrayhPf>:


void getAccArray(byte addr, float *accelArray) {
   b467c:	b570      	push	{r4, r5, r6, lr}
   b467e:	460c      	mov	r4, r1
    accelArray[0] = get16(addr,AX_ADDR)*_scaleFactor;
   b4680:	4e0f      	ldr	r6, [pc, #60]	; (b46c0 <_Z11getAccArrayhPf+0x44>)
   b4682:	213b      	movs	r1, #59	; 0x3b
void getAccArray(byte addr, float *accelArray) {
   b4684:	4605      	mov	r5, r0
    accelArray[0] = get16(addr,AX_ADDR)*_scaleFactor;
   b4686:	f7ff ffcb 	bl	b4620 <_Z5get16hh>
   b468a:	edd6 7a00 	vldr	s15, [r6]
   b468e:	ee27 0a80 	vmul.f32	s0, s15, s0
    accelArray[1] = get16(addr,AY_ADDR)*_scaleFactor;
   b4692:	213d      	movs	r1, #61	; 0x3d
   b4694:	4628      	mov	r0, r5
    accelArray[0] = get16(addr,AX_ADDR)*_scaleFactor;
   b4696:	ed84 0a00 	vstr	s0, [r4]
    accelArray[1] = get16(addr,AY_ADDR)*_scaleFactor;
   b469a:	f7ff ffc1 	bl	b4620 <_Z5get16hh>
   b469e:	edd6 7a00 	vldr	s15, [r6]
   b46a2:	ee27 0a80 	vmul.f32	s0, s15, s0
    accelArray[2] = get16(addr,AZ_ADDR)*_scaleFactor;
   b46a6:	213f      	movs	r1, #63	; 0x3f
    accelArray[1] = get16(addr,AY_ADDR)*_scaleFactor;
   b46a8:	ed84 0a01 	vstr	s0, [r4, #4]
    accelArray[2] = get16(addr,AZ_ADDR)*_scaleFactor;
   b46ac:	4628      	mov	r0, r5
   b46ae:	f7ff ffb7 	bl	b4620 <_Z5get16hh>
   b46b2:	edd6 7a00 	vldr	s15, [r6]
   b46b6:	ee27 0a80 	vmul.f32	s0, s15, s0
   b46ba:	ed84 0a02 	vstr	s0, [r4, #8]
}
   b46be:	bd70      	pop	{r4, r5, r6, pc}
   b46c0:	2003e5cc 	.word	0x2003e5cc

000b46c4 <setup>:
// SYSTEM_MODE(MANUAL);
SYSTEM_MODE(SEMI_AUTOMATIC);

//////////SETUP//////////

void setup() {
   b46c4:	b538      	push	{r3, r4, r5, lr}
    Serial.begin(9600);
   b46c6:	f004 ff37 	bl	b9538 <_Z16_fetch_usbserialv>
   b46ca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b46ce:	f004 ff23 	bl	b9518 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b46d2:	2000      	movs	r0, #0
   b46d4:	f003 fc6a 	bl	b7fac <hal_timer_millis>
        while (_while() && !_condition()) {
   b46d8:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b46dc:	4604      	mov	r4, r0
   b46de:	2000      	movs	r0, #0
   b46e0:	f003 fc64 	bl	b7fac <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b46e4:	1b00      	subs	r0, r0, r4
   b46e6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b46ea:	42a8      	cmp	r0, r5
   b46ec:	f171 0300 	sbcs.w	r3, r1, #0
   b46f0:	d207      	bcs.n	b4702 <setup+0x3e>
    waitFor(Serial.isConnected, 10000);
   b46f2:	f004 ff21 	bl	b9538 <_Z16_fetch_usbserialv>
   b46f6:	f004 ff13 	bl	b9520 <_ZN9USBSerial11isConnectedEv>
   b46fa:	b910      	cbnz	r0, b4702 <setup+0x3e>
            spark_process();
   b46fc:	f003 fe3a 	bl	b8374 <spark_process>
        while (_while() && !_condition()) {
   b4700:	e7ed      	b.n	b46de <setup+0x1a>
   b4702:	f004 ff19 	bl	b9538 <_Z16_fetch_usbserialv>
   b4706:	f004 ff0b 	bl	b9520 <_ZN9USBSerial11isConnectedEv>

//MPU6050 ACCELEROMETER
	scalingFactor = mpuBegin(MPUADDRESS, FS);
   b470a:	2100      	movs	r1, #0
   b470c:	2068      	movs	r0, #104	; 0x68
   b470e:	f7ff ff61 	bl	b45d4 <_Z8mpuBeginhh>
   b4712:	4b09      	ldr	r3, [pc, #36]	; (b4738 <setup+0x74>)
    // }
    // delay(1000);
    // Serial.printf("\n\n");

//NEOPIXEL
    pixel.begin();
   b4714:	4809      	ldr	r0, [pc, #36]	; (b473c <setup+0x78>)
	scalingFactor = mpuBegin(MPUADDRESS, FS);
   b4716:	ed83 0a00 	vstr	s0, [r3]
    pixel.begin();
   b471a:	f002 fc20 	bl	b6f5e <_ZN17Adafruit_NeoPixel5beginEv>
    pixel.show();
   b471e:	4807      	ldr	r0, [pc, #28]	; (b473c <setup+0x78>)
   b4720:	f002 fc56 	bl	b6fd0 <_ZN17Adafruit_NeoPixel4showEv>

//OLED
    myDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4724:	4806      	ldr	r0, [pc, #24]	; (b4740 <setup+0x7c>)
   b4726:	223c      	movs	r2, #60	; 0x3c
   b4728:	2102      	movs	r1, #2
   b472a:	f003 fb3f 	bl	b7dac <_ZN16Adafruit_SSD13065beginEhh>
	myDisplay.clearDisplay();
}
   b472e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	myDisplay.clearDisplay();
   b4732:	4803      	ldr	r0, [pc, #12]	; (b4740 <setup+0x7c>)
   b4734:	f003 ba52 	b.w	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
   b4738:	2003e6b0 	.word	0x2003e6b0
   b473c:	2003e680 	.word	0x2003e680
   b4740:	2003e658 	.word	0x2003e658

000b4744 <_Z13getSideRolledi>:
}

}

//FUNCTION DEFINITIONS
char getSideRolled (int cell) {
   b4744:	b5f0      	push	{r4, r5, r6, r7, lr}
	char letterValue[20]={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T'};
   b4746:	4b18      	ldr	r3, [pc, #96]	; (b47a8 <_Z13getSideRolledi+0x64>)
char getSideRolled (int cell) {
   b4748:	b087      	sub	sp, #28
   b474a:	4606      	mov	r6, r0
	char letterValue[20]={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T'};
   b474c:	aa01      	add	r2, sp, #4
   b474e:	f103 0710 	add.w	r7, r3, #16
   b4752:	6818      	ldr	r0, [r3, #0]
   b4754:	6859      	ldr	r1, [r3, #4]
   b4756:	4615      	mov	r5, r2
   b4758:	c503      	stmia	r5!, {r0, r1}
   b475a:	3308      	adds	r3, #8
   b475c:	42bb      	cmp	r3, r7
   b475e:	462a      	mov	r2, r5
   b4760:	d1f7      	bne.n	b4752 <_Z13getSideRolledi+0xe>
   b4762:	6818      	ldr	r0, [r3, #0]
   b4764:	6028      	str	r0, [r5, #0]
	int sideRolled;
	for(int v=0; v<NUMSIDES; v++) {
   b4766:	2300      	movs	r3, #0
		if(cell==v) {
   b4768:	429e      	cmp	r6, r3
   b476a:	bf08      	it	eq
   b476c:	461c      	moveq	r4, r3
	for(int v=0; v<NUMSIDES; v++) {
   b476e:	3301      	adds	r3, #1
   b4770:	2b14      	cmp	r3, #20
   b4772:	d1f9      	bne.n	b4768 <_Z13getSideRolledi+0x24>
		// Serial.printf("%c\n", letter);
		// myDisplay.display();
		// delay(3000);
		// myDisplay.clearDisplay();
		//set NeoPixel light indicator to flash green indicating ready for next roll
		pixel.setBrightness(100);
   b4774:	480d      	ldr	r0, [pc, #52]	; (b47ac <_Z13getSideRolledi+0x68>)
   b4776:	2164      	movs	r1, #100	; 0x64
   b4778:	f002 fe19 	bl	b73ae <_ZN17Adafruit_NeoPixel13setBrightnessEh>
		pixel.setPixelColor(0, green);
   b477c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   b4780:	2100      	movs	r1, #0
   b4782:	480a      	ldr	r0, [pc, #40]	; (b47ac <_Z13getSideRolledi+0x68>)
   b4784:	f002 fdd0 	bl	b7328 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
		pixel.show();
   b4788:	4808      	ldr	r0, [pc, #32]	; (b47ac <_Z13getSideRolledi+0x68>)
   b478a:	f002 fc21 	bl	b6fd0 <_ZN17Adafruit_NeoPixel4showEv>
		delay(3000);
   b478e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4792:	f003 fe97 	bl	b84c4 <delay>
		pixel.clear();
   b4796:	4805      	ldr	r0, [pc, #20]	; (b47ac <_Z13getSideRolledi+0x68>)
   b4798:	f002 fe30 	bl	b73fc <_ZN17Adafruit_NeoPixel5clearEv>

	return(letterValue[sideRolled]);
   b479c:	ab06      	add	r3, sp, #24
   b479e:	441c      	add	r4, r3
   b47a0:	f814 0c14 	ldrb.w	r0, [r4, #-20]
   b47a4:	b007      	add	sp, #28
   b47a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b47a8:	000bbccb 	.word	0x000bbccb
   b47ac:	2003e680 	.word	0x2003e680

000b47b0 <loop>:
void loop() {
   b47b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (now - before > 2500) {
   b47b4:	f8df 913c 	ldr.w	r9, [pc, #316]	; b48f4 <loop+0x144>
	now = millis();
   b47b8:	f8df a13c 	ldr.w	sl, [pc, #316]	; b48f8 <loop+0x148>
void loop() {
   b47bc:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b47be:	f003 fbed 	bl	b7f9c <HAL_Timer_Get_Milli_Seconds>
	if (now - before > 2500) {
   b47c2:	f8d9 3000 	ldr.w	r3, [r9]
	now = millis();
   b47c6:	f8ca 0000 	str.w	r0, [sl]
	if (now - before > 2500) {
   b47ca:	1ac0      	subs	r0, r0, r3
   b47cc:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b47d0:	4298      	cmp	r0, r3
   b47d2:	f240 80d6 	bls.w	b4982 <loop+0x1d2>
		getAccArray(MPUADDRESS, acceleration);
   b47d6:	4c38      	ldr	r4, [pc, #224]	; (b48b8 <loop+0x108>)
   b47d8:	4e38      	ldr	r6, [pc, #224]	; (b48bc <loop+0x10c>)
   b47da:	4621      	mov	r1, r4
   b47dc:	2068      	movs	r0, #104	; 0x68
   b47de:	f7ff ff4d 	bl	b467c <_Z11getAccArrayhPf>
		rollArray[0]={acceleration[0]};
   b47e2:	4b37      	ldr	r3, [pc, #220]	; (b48c0 <loop+0x110>)
   b47e4:	ed94 3a00 	vldr	s6, [r4]
		rollArray[1]={acceleration[1]};
   b47e8:	edd4 3a01 	vldr	s7, [r4, #4]
		rollArray[2]={acceleration[2]};
   b47ec:	ed94 4a02 	vldr	s8, [r4, #8]
		rollArray[0]={acceleration[0]};
   b47f0:	ed83 3a00 	vstr	s6, [r3]
		rollArray[1]={acceleration[1]};
   b47f4:	edc3 3a01 	vstr	s7, [r3, #4]
		rollArray[2]={acceleration[2]};
   b47f8:	ed83 4a02 	vstr	s8, [r3, #8]
		for(int i=0; i<NUMSIDES; i++) {
   b47fc:	4b31      	ldr	r3, [pc, #196]	; (b48c4 <loop+0x114>)
		rollArray[2]={acceleration[2]};
   b47fe:	4631      	mov	r1, r6
		for(int i=0; i<NUMSIDES; i++) {
   b4800:	2200      	movs	r2, #0
			errX = rollArray[0]-DIE[i][0];
   b4802:	edd3 6a00 	vldr	s13, [r3]
			errY = rollArray[1]-DIE[i][1];
   b4806:	ed93 7a01 	vldr	s14, [r3, #4]
			errZ = rollArray[2]-DIE[i][2];
   b480a:	edd3 7a02 	vldr	s15, [r3, #8]
			errX = rollArray[0]-DIE[i][0];
   b480e:	ee73 6a66 	vsub.f32	s13, s6, s13
			errY = rollArray[1]-DIE[i][1];
   b4812:	ee33 7ac7 	vsub.f32	s14, s7, s14
			errZ = rollArray[2]-DIE[i][2];
   b4816:	ee74 7a67 	vsub.f32	s15, s8, s15
			powX = pow(errX, 2);
   b481a:	ee66 4aa6 	vmul.f32	s9, s13, s13
			powY = pow(errY, 2);
   b481e:	ee27 5a07 	vmul.f32	s10, s14, s14
			powZ = pow(errZ, 2);
   b4822:	ee67 5aa7 	vmul.f32	s11, s15, s15
			error[i]={(powX+powY+powZ)};
   b4826:	ee35 6a24 	vadd.f32	s12, s10, s9
		for(int i=0; i<NUMSIDES; i++) {
   b482a:	3201      	adds	r2, #1
			error[i]={(powX+powY+powZ)};
   b482c:	ee36 6a25 	vadd.f32	s12, s12, s11
		for(int i=0; i<NUMSIDES; i++) {
   b4830:	2a14      	cmp	r2, #20
			error[i]={(powX+powY+powZ)};
   b4832:	eca1 6a01 	vstmia	r1!, {s12}
		for(int i=0; i<NUMSIDES; i++) {
   b4836:	f103 030c 	add.w	r3, r3, #12
   b483a:	d1e2      	bne.n	b4802 <loop+0x52>
   b483c:	4b22      	ldr	r3, [pc, #136]	; (b48c8 <loop+0x118>)
		minRoll = 100;
   b483e:	4d23      	ldr	r5, [pc, #140]	; (b48cc <loop+0x11c>)
   b4840:	edc3 6a00 	vstr	s13, [r3]
   b4844:	4b22      	ldr	r3, [pc, #136]	; (b48d0 <loop+0x120>)
				minCell = i;
   b4846:	4f23      	ldr	r7, [pc, #140]	; (b48d4 <loop+0x124>)
   b4848:	ed83 7a00 	vstr	s14, [r3]
   b484c:	4b22      	ldr	r3, [pc, #136]	; (b48d8 <loop+0x128>)
				Serial.printf("minRoll is %0.3f at cell %i\n", minRoll, minCell);
   b484e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; b48fc <loop+0x14c>
   b4852:	edc3 7a00 	vstr	s15, [r3]
   b4856:	4b21      	ldr	r3, [pc, #132]	; (b48dc <loop+0x12c>)
   b4858:	edc3 4a00 	vstr	s9, [r3]
   b485c:	4b20      	ldr	r3, [pc, #128]	; (b48e0 <loop+0x130>)
   b485e:	ed83 5a00 	vstr	s10, [r3]
   b4862:	4b20      	ldr	r3, [pc, #128]	; (b48e4 <loop+0x134>)
   b4864:	edc3 5a00 	vstr	s11, [r3]
		minRoll = 100;
   b4868:	4b1f      	ldr	r3, [pc, #124]	; (b48e8 <loop+0x138>)
   b486a:	602b      	str	r3, [r5, #0]
		for(int i=0; i<NUMSIDES; i++) {
   b486c:	2400      	movs	r4, #0
			if(minRoll > error[i]) {
   b486e:	ecf6 7a01 	vldmia	r6!, {s15}
   b4872:	ed95 7a00 	vldr	s14, [r5]
   b4876:	eef4 7ac7 	vcmpe.f32	s15, s14
   b487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b487e:	d578      	bpl.n	b4972 <loop+0x1c2>
				minRoll = error[i];
   b4880:	edc5 7a00 	vstr	s15, [r5]
				minCell = i;
   b4884:	603c      	str	r4, [r7, #0]
				Serial.printf("minRoll is %0.3f at cell %i\n", minRoll, minCell);
   b4886:	f004 fe57 	bl	b9538 <_Z16_fetch_usbserialv>
   b488a:	4680      	mov	r8, r0
   b488c:	6828      	ldr	r0, [r5, #0]
   b488e:	f006 fba9 	bl	bafe4 <__aeabi_f2d>
   b4892:	460b      	mov	r3, r1
   b4894:	6839      	ldr	r1, [r7, #0]
   b4896:	9100      	str	r1, [sp, #0]
   b4898:	4602      	mov	r2, r0
   b489a:	4659      	mov	r1, fp
   b489c:	4640      	mov	r0, r8
   b489e:	f7ff fc2c 	bl	b40fa <_ZN5Print6printfEPKcz>
				letter = getSideRolled(minCell);
   b48a2:	6838      	ldr	r0, [r7, #0]
   b48a4:	f7ff ff4e 	bl	b4744 <_Z13getSideRolledi>
   b48a8:	4b10      	ldr	r3, [pc, #64]	; (b48ec <loop+0x13c>)
				if(letter=='A') {
   b48aa:	2841      	cmp	r0, #65	; 0x41
				letter = getSideRolled(minCell);
   b48ac:	7018      	strb	r0, [r3, #0]
				if(letter=='A') {
   b48ae:	d127      	bne.n	b4900 <loop+0x150>
					roll = 1;
   b48b0:	4b0f      	ldr	r3, [pc, #60]	; (b48f0 <loop+0x140>)
   b48b2:	2201      	movs	r2, #1
					roll = 9;
   b48b4:	601a      	str	r2, [r3, #0]
   b48b6:	e05c      	b.n	b4972 <loop+0x1c2>
   b48b8:	2003e5d0 	.word	0x2003e5d0
   b48bc:	2003e5ec 	.word	0x2003e5ec
   b48c0:	2003e6a4 	.word	0x2003e6a4
   b48c4:	000bca3c 	.word	0x000bca3c
   b48c8:	2003e5e0 	.word	0x2003e5e0
   b48cc:	2003e654 	.word	0x2003e654
   b48d0:	2003e5e4 	.word	0x2003e5e4
   b48d4:	2003e650 	.word	0x2003e650
   b48d8:	2003e5e8 	.word	0x2003e5e8
   b48dc:	2003e694 	.word	0x2003e694
   b48e0:	2003e698 	.word	0x2003e698
   b48e4:	2003e69c 	.word	0x2003e69c
   b48e8:	42c80000 	.word	0x42c80000
   b48ec:	2003e64d 	.word	0x2003e64d
   b48f0:	2003e6a0 	.word	0x2003e6a0
   b48f4:	2003e5dc 	.word	0x2003e5dc
   b48f8:	2003e67c 	.word	0x2003e67c
   b48fc:	000bbce0 	.word	0x000bbce0
				if(letter=='B') {
   b4900:	2842      	cmp	r0, #66	; 0x42
   b4902:	f000 8583 	beq.w	b540c <loop+0xc5c>
				if(letter=='C') {
   b4906:	2843      	cmp	r0, #67	; 0x43
   b4908:	f000 8584 	beq.w	b5414 <loop+0xc64>
				if(letter=='D') {
   b490c:	2844      	cmp	r0, #68	; 0x44
   b490e:	f000 8585 	beq.w	b541c <loop+0xc6c>
				if(letter=='E') {
   b4912:	2845      	cmp	r0, #69	; 0x45
   b4914:	f000 8586 	beq.w	b5424 <loop+0xc74>
				if(letter=='F') {
   b4918:	2846      	cmp	r0, #70	; 0x46
   b491a:	f000 8587 	beq.w	b542c <loop+0xc7c>
				if(letter=='G') {
   b491e:	2847      	cmp	r0, #71	; 0x47
   b4920:	f000 8588 	beq.w	b5434 <loop+0xc84>
				if(letter=='H') {
   b4924:	2848      	cmp	r0, #72	; 0x48
   b4926:	f000 8589 	beq.w	b543c <loop+0xc8c>
				if(letter=='I') {
   b492a:	2849      	cmp	r0, #73	; 0x49
   b492c:	f000 858a 	beq.w	b5444 <loop+0xc94>
				if(letter=='J') {
   b4930:	284a      	cmp	r0, #74	; 0x4a
   b4932:	f000 858b 	beq.w	b544c <loop+0xc9c>
				if(letter=='K') {
   b4936:	284b      	cmp	r0, #75	; 0x4b
   b4938:	f000 858c 	beq.w	b5454 <loop+0xca4>
				if(letter=='L') {
   b493c:	284c      	cmp	r0, #76	; 0x4c
   b493e:	f000 858d 	beq.w	b545c <loop+0xcac>
				if(letter=='M') {
   b4942:	284d      	cmp	r0, #77	; 0x4d
   b4944:	f000 858e 	beq.w	b5464 <loop+0xcb4>
				if(letter=='N') {
   b4948:	284e      	cmp	r0, #78	; 0x4e
   b494a:	f000 858f 	beq.w	b546c <loop+0xcbc>
				if(letter=='O') {
   b494e:	284f      	cmp	r0, #79	; 0x4f
   b4950:	f000 8590 	beq.w	b5474 <loop+0xcc4>
				if(letter=='P') {
   b4954:	2850      	cmp	r0, #80	; 0x50
   b4956:	f000 8591 	beq.w	b547c <loop+0xccc>
				if(letter=='Q') {
   b495a:	2851      	cmp	r0, #81	; 0x51
   b495c:	f000 8592 	beq.w	b5484 <loop+0xcd4>
				if(letter=='R') {
   b4960:	2852      	cmp	r0, #82	; 0x52
   b4962:	f000 8593 	beq.w	b548c <loop+0xcdc>
				if(letter=='S') {
   b4966:	2853      	cmp	r0, #83	; 0x53
   b4968:	f000 8594 	beq.w	b5494 <loop+0xce4>
				if(letter=='T') {
   b496c:	2854      	cmp	r0, #84	; 0x54
   b496e:	f000 8595 	beq.w	b549c <loop+0xcec>
		for(int i=0; i<NUMSIDES; i++) {
   b4972:	3401      	adds	r4, #1
   b4974:	2c14      	cmp	r4, #20
   b4976:	f47f af7a 	bne.w	b486e <loop+0xbe>
		before = now;
   b497a:	f8da 3000 	ldr.w	r3, [sl]
   b497e:	f8c9 3000 	str.w	r3, [r9]
    if(roll==1) {
   b4982:	4dab      	ldr	r5, [pc, #684]	; (b4c30 <loop+0x480>)
   b4984:	682e      	ldr	r6, [r5, #0]
   b4986:	2e01      	cmp	r6, #1
   b4988:	f000 858c 	beq.w	b54a4 <loop+0xcf4>
    if(roll==2) {
   b498c:	682c      	ldr	r4, [r5, #0]
   b498e:	2c02      	cmp	r4, #2
   b4990:	f040 80dd 	bne.w	b4b4e <loop+0x39e>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b4994:	f004 fdd0 	bl	b9538 <_Z16_fetch_usbserialv>
   b4998:	2203      	movs	r2, #3
   b499a:	49a6      	ldr	r1, [pc, #664]	; (b4c34 <loop+0x484>)
            Serial.printf("turning on the light\n");
   b499c:	f8df a2b4 	ldr.w	sl, [pc, #692]	; b4c54 <loop+0x4a4>
            setHue(1, hueOnOff, HueRed, i, 255);
   b49a0:	4fa5      	ldr	r7, [pc, #660]	; (b4c38 <loop+0x488>)
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b49a2:	f7ff fbaa 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b49a6:	2003      	movs	r0, #3
   b49a8:	f7ff fd62 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b49ac:	f242 7010 	movw	r0, #10000	; 0x2710
   b49b0:	f003 fd88 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b49b4:	4621      	mov	r1, r4
   b49b6:	48a1      	ldr	r0, [pc, #644]	; (b4c3c <loop+0x48c>)
		 hueOnOff = true;
   b49b8:	4ca1      	ldr	r4, [pc, #644]	; (b4c40 <loop+0x490>)
        myDisplay.setRotation(2); //0-3
   b49ba:	f002 ff22 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b49be:	2200      	movs	r2, #0
   b49c0:	4611      	mov	r1, r2
   b49c2:	489e      	ldr	r0, [pc, #632]	; (b4c3c <loop+0x48c>)
   b49c4:	f002 ff18 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, uhOh, 128, 64, WHITE);
   b49c8:	2601      	movs	r6, #1
   b49ca:	2340      	movs	r3, #64	; 0x40
   b49cc:	2200      	movs	r2, #0
   b49ce:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b49d2:	2380      	movs	r3, #128	; 0x80
   b49d4:	4611      	mov	r1, r2
   b49d6:	4899      	ldr	r0, [pc, #612]	; (b4c3c <loop+0x48c>)
   b49d8:	9300      	str	r3, [sp, #0]
   b49da:	4b9a      	ldr	r3, [pc, #616]	; (b4c44 <loop+0x494>)
   b49dc:	f002 fe08 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b49e0:	4896      	ldr	r0, [pc, #600]	; (b4c3c <loop+0x48c>)
   b49e2:	f003 f973 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b49e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b49ea:	f003 fd6b 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b49ee:	4893      	ldr	r0, [pc, #588]	; (b4c3c <loop+0x48c>)
   b49f0:	f003 f8f4 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b49f4:	f04f 08ff 	mov.w	r8, #255	; 0xff
		 hueOnOff = true;
   b49f8:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueRed, i, 255);
   b49fa:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b49fc:	f004 fd9c 	bl	b9538 <_Z16_fetch_usbserialv>
   b4a00:	4651      	mov	r1, sl
   b4a02:	f7ff fb7a 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b4a06:	9600      	str	r6, [sp, #0]
            setHue(2, hueOnOff, HueOrange, i, 255);
   b4a08:	f8df 924c 	ldr.w	r9, [pc, #588]	; b4c58 <loop+0x4a8>
            setHue(1, hueOnOff, HueRed, i, 255);
   b4a0c:	683a      	ldr	r2, [r7, #0]
   b4a0e:	7821      	ldrb	r1, [r4, #0]
   b4a10:	4643      	mov	r3, r8
   b4a12:	2001      	movs	r0, #1
   b4a14:	f7ff fba4 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueOrange, i, 255);
   b4a18:	9600      	str	r6, [sp, #0]
   b4a1a:	4643      	mov	r3, r8
   b4a1c:	f8d9 2000 	ldr.w	r2, [r9]
   b4a20:	7821      	ldrb	r1, [r4, #0]
   b4a22:	2002      	movs	r0, #2
   b4a24:	f7ff fb9c 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b4a28:	9600      	str	r6, [sp, #0]
   b4a2a:	4643      	mov	r3, r8
   b4a2c:	683a      	ldr	r2, [r7, #0]
   b4a2e:	7821      	ldrb	r1, [r4, #0]
   b4a30:	2003      	movs	r0, #3
   b4a32:	f7ff fb95 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueOrange, i, 255);
   b4a36:	9600      	str	r6, [sp, #0]
   b4a38:	4643      	mov	r3, r8
   b4a3a:	f8d9 2000 	ldr.w	r2, [r9]
   b4a3e:	7821      	ldrb	r1, [r4, #0]
   b4a40:	2004      	movs	r0, #4
   b4a42:	f7ff fb8d 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b4a46:	9600      	str	r6, [sp, #0]
   b4a48:	4643      	mov	r3, r8
   b4a4a:	683a      	ldr	r2, [r7, #0]
   b4a4c:	7821      	ldrb	r1, [r4, #0]
   b4a4e:	2005      	movs	r0, #5
   b4a50:	f7ff fb86 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueOrange, i, 255);
   b4a54:	9600      	str	r6, [sp, #0]
   b4a56:	4643      	mov	r3, r8
   b4a58:	f8d9 2000 	ldr.w	r2, [r9]
   b4a5c:	7821      	ldrb	r1, [r4, #0]
   b4a5e:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b4a60:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueOrange, i, 255);
   b4a64:	f7ff fb7c 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b4a68:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b4a6c:	d1c5      	bne.n	b49fa <loop+0x24a>
            Serial.printf("turning on the light\n");
   b4a6e:	f8df a1e4 	ldr.w	sl, [pc, #484]	; b4c54 <loop+0x4a4>
        for(int i=0; i<=255; i=i+100) {
   b4a72:	f04f 0800 	mov.w	r8, #0
            Serial.printf("turning on the light\n");
   b4a76:	f004 fd5f 	bl	b9538 <_Z16_fetch_usbserialv>
   b4a7a:	4651      	mov	r1, sl
   b4a7c:	f7ff fb3d 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b4a80:	9600      	str	r6, [sp, #0]
   b4a82:	4643      	mov	r3, r8
   b4a84:	f8d9 2000 	ldr.w	r2, [r9]
   b4a88:	7821      	ldrb	r1, [r4, #0]
   b4a8a:	2001      	movs	r0, #1
   b4a8c:	f7ff fb68 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b4a90:	9600      	str	r6, [sp, #0]
   b4a92:	4643      	mov	r3, r8
   b4a94:	683a      	ldr	r2, [r7, #0]
   b4a96:	7821      	ldrb	r1, [r4, #0]
   b4a98:	2002      	movs	r0, #2
   b4a9a:	f7ff fb61 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueOrange, i, 255);
   b4a9e:	9600      	str	r6, [sp, #0]
   b4aa0:	4643      	mov	r3, r8
   b4aa2:	f8d9 2000 	ldr.w	r2, [r9]
   b4aa6:	7821      	ldrb	r1, [r4, #0]
   b4aa8:	2003      	movs	r0, #3
   b4aaa:	f7ff fb59 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b4aae:	9600      	str	r6, [sp, #0]
   b4ab0:	4643      	mov	r3, r8
   b4ab2:	683a      	ldr	r2, [r7, #0]
   b4ab4:	7821      	ldrb	r1, [r4, #0]
   b4ab6:	2004      	movs	r0, #4
   b4ab8:	f7ff fb52 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueOrange, i, 255);
   b4abc:	9600      	str	r6, [sp, #0]
   b4abe:	4643      	mov	r3, r8
   b4ac0:	f8d9 2000 	ldr.w	r2, [r9]
   b4ac4:	7821      	ldrb	r1, [r4, #0]
   b4ac6:	2005      	movs	r0, #5
   b4ac8:	f7ff fb4a 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b4acc:	9600      	str	r6, [sp, #0]
   b4ace:	4643      	mov	r3, r8
   b4ad0:	683a      	ldr	r2, [r7, #0]
   b4ad2:	7821      	ldrb	r1, [r4, #0]
   b4ad4:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b4ad6:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b4ada:	f7ff fb41 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b4ade:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b4ae2:	d1c8      	bne.n	b4a76 <loop+0x2c6>
        hueOnOff = false;
   b4ae4:	2300      	movs	r3, #0
   b4ae6:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b4ae8:	f004 fd26 	bl	b9538 <_Z16_fetch_usbserialv>
   b4aec:	4956      	ldr	r1, [pc, #344]	; (b4c48 <loop+0x498>)
   b4aee:	f7ff fb04 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b4af2:	9600      	str	r6, [sp, #0]
   b4af4:	683a      	ldr	r2, [r7, #0]
   b4af6:	7821      	ldrb	r1, [r4, #0]
   b4af8:	23ff      	movs	r3, #255	; 0xff
   b4afa:	2001      	movs	r0, #1
   b4afc:	f7ff fb30 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b4b00:	9600      	str	r6, [sp, #0]
   b4b02:	683a      	ldr	r2, [r7, #0]
   b4b04:	7821      	ldrb	r1, [r4, #0]
   b4b06:	23ff      	movs	r3, #255	; 0xff
   b4b08:	2002      	movs	r0, #2
   b4b0a:	f7ff fb29 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b4b0e:	9600      	str	r6, [sp, #0]
   b4b10:	683a      	ldr	r2, [r7, #0]
   b4b12:	7821      	ldrb	r1, [r4, #0]
   b4b14:	23ff      	movs	r3, #255	; 0xff
   b4b16:	2003      	movs	r0, #3
   b4b18:	f7ff fb22 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b4b1c:	9600      	str	r6, [sp, #0]
   b4b1e:	683a      	ldr	r2, [r7, #0]
   b4b20:	7821      	ldrb	r1, [r4, #0]
   b4b22:	23ff      	movs	r3, #255	; 0xff
   b4b24:	2004      	movs	r0, #4
   b4b26:	f7ff fb1b 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b4b2a:	9600      	str	r6, [sp, #0]
   b4b2c:	683a      	ldr	r2, [r7, #0]
   b4b2e:	7821      	ldrb	r1, [r4, #0]
   b4b30:	23ff      	movs	r3, #255	; 0xff
   b4b32:	2005      	movs	r0, #5
   b4b34:	f7ff fb14 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b4b38:	9600      	str	r6, [sp, #0]
   b4b3a:	683a      	ldr	r2, [r7, #0]
   b4b3c:	7821      	ldrb	r1, [r4, #0]
   b4b3e:	23ff      	movs	r3, #255	; 0xff
   b4b40:	2006      	movs	r0, #6
   b4b42:	f7ff fb0d 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b4b46:	f242 7010 	movw	r0, #10000	; 0x2710
   b4b4a:	f003 fcbb 	bl	b84c4 <delay>
    if(roll==3) {
   b4b4e:	682c      	ldr	r4, [r5, #0]
   b4b50:	2c03      	cmp	r4, #3
   b4b52:	f040 80b9 	bne.w	b4cc8 <loop+0x518>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b4b56:	f004 fcef 	bl	b9538 <_Z16_fetch_usbserialv>
   b4b5a:	4622      	mov	r2, r4
   b4b5c:	4935      	ldr	r1, [pc, #212]	; (b4c34 <loop+0x484>)
            Serial.printf("turning on the light\n");
   b4b5e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; b4c54 <loop+0x4a4>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b4b62:	f7ff faca 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b4b66:	4620      	mov	r0, r4
   b4b68:	f7ff fc82 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b4b6c:	f242 7010 	movw	r0, #10000	; 0x2710
   b4b70:	f003 fca8 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b4b74:	4831      	ldr	r0, [pc, #196]	; (b4c3c <loop+0x48c>)
 hueOnOff = true;
   b4b76:	4c32      	ldr	r4, [pc, #200]	; (b4c40 <loop+0x490>)
        myDisplay.setRotation(2); //0-3
   b4b78:	2102      	movs	r1, #2
   b4b7a:	f002 fe42 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4b7e:	2200      	movs	r2, #0
   b4b80:	4611      	mov	r1, r2
   b4b82:	482e      	ldr	r0, [pc, #184]	; (b4c3c <loop+0x48c>)
   b4b84:	f002 fe38 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, messenger, 128, 64, WHITE);
   b4b88:	2601      	movs	r6, #1
   b4b8a:	2340      	movs	r3, #64	; 0x40
   b4b8c:	2200      	movs	r2, #0
   b4b8e:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b4b92:	2380      	movs	r3, #128	; 0x80
   b4b94:	4611      	mov	r1, r2
   b4b96:	4829      	ldr	r0, [pc, #164]	; (b4c3c <loop+0x48c>)
   b4b98:	9300      	str	r3, [sp, #0]
   b4b9a:	4b2c      	ldr	r3, [pc, #176]	; (b4c4c <loop+0x49c>)
   b4b9c:	f002 fd28 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4ba0:	4826      	ldr	r0, [pc, #152]	; (b4c3c <loop+0x48c>)
   b4ba2:	f003 f893 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4ba6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4baa:	f003 fc8b 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b4bae:	4823      	ldr	r0, [pc, #140]	; (b4c3c <loop+0x48c>)
   b4bb0:	f003 f814 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
 hueOnOff = true;
   b4bb4:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4bb6:	4e26      	ldr	r6, [pc, #152]	; (b4c50 <loop+0x4a0>)
        for(int i=255; i>=0; i=i-100) {
   b4bb8:	f04f 08ff 	mov.w	r8, #255	; 0xff
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4bbc:	27ff      	movs	r7, #255	; 0xff
            Serial.printf("turning on the light\n");
   b4bbe:	f004 fcbb 	bl	b9538 <_Z16_fetch_usbserialv>
   b4bc2:	4649      	mov	r1, r9
   b4bc4:	f7ff fa99 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4bc8:	9700      	str	r7, [sp, #0]
   b4bca:	4643      	mov	r3, r8
   b4bcc:	6832      	ldr	r2, [r6, #0]
   b4bce:	7821      	ldrb	r1, [r4, #0]
   b4bd0:	2001      	movs	r0, #1
   b4bd2:	f7ff fac5 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b4bd6:	9700      	str	r7, [sp, #0]
   b4bd8:	4643      	mov	r3, r8
   b4bda:	6832      	ldr	r2, [r6, #0]
   b4bdc:	7821      	ldrb	r1, [r4, #0]
   b4bde:	2002      	movs	r0, #2
   b4be0:	f7ff fabe 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueYellow, i, 255);
   b4be4:	9700      	str	r7, [sp, #0]
   b4be6:	4643      	mov	r3, r8
   b4be8:	6832      	ldr	r2, [r6, #0]
   b4bea:	7821      	ldrb	r1, [r4, #0]
   b4bec:	2003      	movs	r0, #3
   b4bee:	f7ff fab7 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b4bf2:	9700      	str	r7, [sp, #0]
   b4bf4:	4643      	mov	r3, r8
   b4bf6:	6832      	ldr	r2, [r6, #0]
   b4bf8:	7821      	ldrb	r1, [r4, #0]
   b4bfa:	2004      	movs	r0, #4
   b4bfc:	f7ff fab0 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueYellow, i, 255);
   b4c00:	9700      	str	r7, [sp, #0]
   b4c02:	4643      	mov	r3, r8
   b4c04:	6832      	ldr	r2, [r6, #0]
   b4c06:	7821      	ldrb	r1, [r4, #0]
   b4c08:	2005      	movs	r0, #5
   b4c0a:	f7ff faa9 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4c0e:	9700      	str	r7, [sp, #0]
   b4c10:	4643      	mov	r3, r8
   b4c12:	6832      	ldr	r2, [r6, #0]
   b4c14:	7821      	ldrb	r1, [r4, #0]
   b4c16:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b4c18:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4c1c:	f7ff faa0 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b4c20:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b4c24:	d1ca      	bne.n	b4bbc <loop+0x40c>
            Serial.printf("turning on the light\n");
   b4c26:	f8df 902c 	ldr.w	r9, [pc, #44]	; b4c54 <loop+0x4a4>
        for(int i=0; i<=255; i=i+100) {
   b4c2a:	f04f 0800 	mov.w	r8, #0
   b4c2e:	e015      	b.n	b4c5c <loop+0x4ac>
   b4c30:	2003e6a0 	.word	0x2003e6a0
   b4c34:	000bbd2b 	.word	0x000bbd2b
   b4c38:	2003e58c 	.word	0x2003e58c
   b4c3c:	2003e658 	.word	0x2003e658
   b4c40:	2003e64c 	.word	0x2003e64c
   b4c44:	000bd72c 	.word	0x000bd72c
   b4c48:	000bbd44 	.word	0x000bbd44
   b4c4c:	000c0738 	.word	0x000c0738
   b4c50:	2003e0b8 	.word	0x2003e0b8
   b4c54:	000bbd15 	.word	0x000bbd15
   b4c58:	2003e0b0 	.word	0x2003e0b0
            Serial.printf("turning on the light\n");
   b4c5c:	f004 fc6c 	bl	b9538 <_Z16_fetch_usbserialv>
   b4c60:	4649      	mov	r1, r9
   b4c62:	f7ff fa4a 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4c66:	9700      	str	r7, [sp, #0]
   b4c68:	4643      	mov	r3, r8
   b4c6a:	6832      	ldr	r2, [r6, #0]
   b4c6c:	7821      	ldrb	r1, [r4, #0]
   b4c6e:	2001      	movs	r0, #1
   b4c70:	f7ff fa76 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b4c74:	9700      	str	r7, [sp, #0]
   b4c76:	4643      	mov	r3, r8
   b4c78:	6832      	ldr	r2, [r6, #0]
   b4c7a:	7821      	ldrb	r1, [r4, #0]
   b4c7c:	2002      	movs	r0, #2
   b4c7e:	f7ff fa6f 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueYellow, i, 255);
   b4c82:	9700      	str	r7, [sp, #0]
   b4c84:	4643      	mov	r3, r8
   b4c86:	6832      	ldr	r2, [r6, #0]
   b4c88:	7821      	ldrb	r1, [r4, #0]
   b4c8a:	2003      	movs	r0, #3
   b4c8c:	f7ff fa68 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b4c90:	9700      	str	r7, [sp, #0]
   b4c92:	4643      	mov	r3, r8
   b4c94:	6832      	ldr	r2, [r6, #0]
   b4c96:	7821      	ldrb	r1, [r4, #0]
   b4c98:	2004      	movs	r0, #4
   b4c9a:	f7ff fa61 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueYellow, i, 255);
   b4c9e:	9700      	str	r7, [sp, #0]
   b4ca0:	4643      	mov	r3, r8
   b4ca2:	6832      	ldr	r2, [r6, #0]
   b4ca4:	7821      	ldrb	r1, [r4, #0]
   b4ca6:	2005      	movs	r0, #5
   b4ca8:	f7ff fa5a 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4cac:	9700      	str	r7, [sp, #0]
   b4cae:	4643      	mov	r3, r8
   b4cb0:	6832      	ldr	r2, [r6, #0]
   b4cb2:	7821      	ldrb	r1, [r4, #0]
   b4cb4:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b4cb6:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4cba:	f7ff fa51 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b4cbe:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b4cc2:	d1cb      	bne.n	b4c5c <loop+0x4ac>
        hueOnOff = false;
   b4cc4:	2300      	movs	r3, #0
   b4cc6:	7023      	strb	r3, [r4, #0]
    if(roll==4) {
   b4cc8:	682b      	ldr	r3, [r5, #0]
   b4cca:	2b04      	cmp	r3, #4
   b4ccc:	f040 80d9 	bne.w	b4e82 <loop+0x6d2>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b4cd0:	f004 fc32 	bl	b9538 <_Z16_fetch_usbserialv>
   b4cd4:	2203      	movs	r2, #3
   b4cd6:	49c6      	ldr	r1, [pc, #792]	; (b4ff0 <loop+0x840>)
 hueOnOff = true;
   b4cd8:	4cc6      	ldr	r4, [pc, #792]	; (b4ff4 <loop+0x844>)
            setHue(2, hueOnOff, HueRed, i, 255);
   b4cda:	4fc7      	ldr	r7, [pc, #796]	; (b4ff8 <loop+0x848>)
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b4cdc:	f7ff fa0d 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b4ce0:	2003      	movs	r0, #3
   b4ce2:	f7ff fbc5 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b4ce6:	f242 7010 	movw	r0, #10000	; 0x2710
   b4cea:	f003 fbeb 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b4cee:	48c3      	ldr	r0, [pc, #780]	; (b4ffc <loop+0x84c>)
   b4cf0:	2102      	movs	r1, #2
   b4cf2:	f002 fd86 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4cf6:	2200      	movs	r2, #0
   b4cf8:	4611      	mov	r1, r2
   b4cfa:	48c0      	ldr	r0, [pc, #768]	; (b4ffc <loop+0x84c>)
   b4cfc:	f002 fd7c 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, niceKnowingYou, 128, 64, WHITE);
   b4d00:	2601      	movs	r6, #1
   b4d02:	2340      	movs	r3, #64	; 0x40
   b4d04:	2200      	movs	r2, #0
   b4d06:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b4d0a:	2380      	movs	r3, #128	; 0x80
   b4d0c:	4611      	mov	r1, r2
   b4d0e:	48bb      	ldr	r0, [pc, #748]	; (b4ffc <loop+0x84c>)
   b4d10:	9300      	str	r3, [sp, #0]
   b4d12:	4bbb      	ldr	r3, [pc, #748]	; (b5000 <loop+0x850>)
   b4d14:	f002 fc6c 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4d18:	48b8      	ldr	r0, [pc, #736]	; (b4ffc <loop+0x84c>)
   b4d1a:	f002 ffd7 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4d1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4d22:	f003 fbcf 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b4d26:	48b5      	ldr	r0, [pc, #724]	; (b4ffc <loop+0x84c>)
   b4d28:	f002 ff58 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b4d2c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 hueOnOff = true;
   b4d30:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, 31500, i, 255);
   b4d32:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b4d34:	f004 fc00 	bl	b9538 <_Z16_fetch_usbserialv>
   b4d38:	49b2      	ldr	r1, [pc, #712]	; (b5004 <loop+0x854>)
   b4d3a:	f7ff f9de 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 31500, i, 255);
   b4d3e:	9600      	str	r6, [sp, #0]
   b4d40:	4643      	mov	r3, r8
   b4d42:	7821      	ldrb	r1, [r4, #0]
   b4d44:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4d48:	2001      	movs	r0, #1
   b4d4a:	f7ff fa09 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b4d4e:	9600      	str	r6, [sp, #0]
   b4d50:	4643      	mov	r3, r8
   b4d52:	683a      	ldr	r2, [r7, #0]
   b4d54:	7821      	ldrb	r1, [r4, #0]
   b4d56:	2002      	movs	r0, #2
   b4d58:	f7ff fa02 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 31500, i, 255);
   b4d5c:	9600      	str	r6, [sp, #0]
   b4d5e:	4643      	mov	r3, r8
   b4d60:	7821      	ldrb	r1, [r4, #0]
   b4d62:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4d66:	2003      	movs	r0, #3
   b4d68:	f7ff f9fa 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b4d6c:	9600      	str	r6, [sp, #0]
   b4d6e:	4643      	mov	r3, r8
   b4d70:	683a      	ldr	r2, [r7, #0]
   b4d72:	7821      	ldrb	r1, [r4, #0]
   b4d74:	2004      	movs	r0, #4
   b4d76:	f7ff f9f3 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 31500, i, 255);
   b4d7a:	9600      	str	r6, [sp, #0]
   b4d7c:	4643      	mov	r3, r8
   b4d7e:	7821      	ldrb	r1, [r4, #0]
   b4d80:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4d84:	2005      	movs	r0, #5
   b4d86:	f7ff f9eb 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b4d8a:	9600      	str	r6, [sp, #0]
   b4d8c:	4643      	mov	r3, r8
   b4d8e:	683a      	ldr	r2, [r7, #0]
   b4d90:	7821      	ldrb	r1, [r4, #0]
   b4d92:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b4d94:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b4d98:	f7ff f9e2 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b4d9c:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b4da0:	d1c7      	bne.n	b4d32 <loop+0x582>
            Serial.printf("turning on the light\n");
   b4da2:	f8df 9260 	ldr.w	r9, [pc, #608]	; b5004 <loop+0x854>
        for(int i=0; i<=255; i=i+100) {
   b4da6:	f04f 0800 	mov.w	r8, #0
            Serial.printf("turning on the light\n");
   b4daa:	f004 fbc5 	bl	b9538 <_Z16_fetch_usbserialv>
   b4dae:	4649      	mov	r1, r9
   b4db0:	f7ff f9a3 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b4db4:	9600      	str	r6, [sp, #0]
   b4db6:	4643      	mov	r3, r8
   b4db8:	683a      	ldr	r2, [r7, #0]
   b4dba:	7821      	ldrb	r1, [r4, #0]
   b4dbc:	2001      	movs	r0, #1
   b4dbe:	f7ff f9cf 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 31500, i, 255);
   b4dc2:	9600      	str	r6, [sp, #0]
   b4dc4:	4643      	mov	r3, r8
   b4dc6:	7821      	ldrb	r1, [r4, #0]
   b4dc8:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4dcc:	2002      	movs	r0, #2
   b4dce:	f7ff f9c7 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b4dd2:	9600      	str	r6, [sp, #0]
   b4dd4:	4643      	mov	r3, r8
   b4dd6:	683a      	ldr	r2, [r7, #0]
   b4dd8:	7821      	ldrb	r1, [r4, #0]
   b4dda:	2003      	movs	r0, #3
   b4ddc:	f7ff f9c0 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 31500, i, 255);
   b4de0:	9600      	str	r6, [sp, #0]
   b4de2:	4643      	mov	r3, r8
   b4de4:	7821      	ldrb	r1, [r4, #0]
   b4de6:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4dea:	2004      	movs	r0, #4
   b4dec:	f7ff f9b8 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b4df0:	9600      	str	r6, [sp, #0]
   b4df2:	4643      	mov	r3, r8
   b4df4:	683a      	ldr	r2, [r7, #0]
   b4df6:	7821      	ldrb	r1, [r4, #0]
   b4df8:	2005      	movs	r0, #5
   b4dfa:	f7ff f9b1 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 31500, i, 255);
   b4dfe:	9600      	str	r6, [sp, #0]
   b4e00:	4643      	mov	r3, r8
   b4e02:	7821      	ldrb	r1, [r4, #0]
   b4e04:	f647 320c 	movw	r2, #31500	; 0x7b0c
   b4e08:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b4e0a:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, 31500, i, 255);
   b4e0e:	f7ff f9a7 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b4e12:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b4e16:	d1c8      	bne.n	b4daa <loop+0x5fa>
        hueOnOff = false;
   b4e18:	2300      	movs	r3, #0
   b4e1a:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b4e1c:	f004 fb8c 	bl	b9538 <_Z16_fetch_usbserialv>
   b4e20:	4979      	ldr	r1, [pc, #484]	; (b5008 <loop+0x858>)
   b4e22:	f7ff f96a 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b4e26:	9600      	str	r6, [sp, #0]
   b4e28:	683a      	ldr	r2, [r7, #0]
   b4e2a:	7821      	ldrb	r1, [r4, #0]
   b4e2c:	23ff      	movs	r3, #255	; 0xff
   b4e2e:	2001      	movs	r0, #1
   b4e30:	f7ff f996 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b4e34:	9600      	str	r6, [sp, #0]
   b4e36:	683a      	ldr	r2, [r7, #0]
   b4e38:	7821      	ldrb	r1, [r4, #0]
   b4e3a:	23ff      	movs	r3, #255	; 0xff
   b4e3c:	2002      	movs	r0, #2
   b4e3e:	f7ff f98f 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b4e42:	9600      	str	r6, [sp, #0]
   b4e44:	683a      	ldr	r2, [r7, #0]
   b4e46:	7821      	ldrb	r1, [r4, #0]
   b4e48:	23ff      	movs	r3, #255	; 0xff
   b4e4a:	2003      	movs	r0, #3
   b4e4c:	f7ff f988 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b4e50:	9600      	str	r6, [sp, #0]
   b4e52:	683a      	ldr	r2, [r7, #0]
   b4e54:	7821      	ldrb	r1, [r4, #0]
   b4e56:	23ff      	movs	r3, #255	; 0xff
   b4e58:	2004      	movs	r0, #4
   b4e5a:	f7ff f981 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b4e5e:	9600      	str	r6, [sp, #0]
   b4e60:	683a      	ldr	r2, [r7, #0]
   b4e62:	7821      	ldrb	r1, [r4, #0]
   b4e64:	23ff      	movs	r3, #255	; 0xff
   b4e66:	2005      	movs	r0, #5
   b4e68:	f7ff f97a 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b4e6c:	9600      	str	r6, [sp, #0]
   b4e6e:	683a      	ldr	r2, [r7, #0]
   b4e70:	7821      	ldrb	r1, [r4, #0]
   b4e72:	23ff      	movs	r3, #255	; 0xff
   b4e74:	2006      	movs	r0, #6
   b4e76:	f7ff f973 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b4e7a:	f242 7010 	movw	r0, #10000	; 0x2710
   b4e7e:	f003 fb21 	bl	b84c4 <delay>
    if(roll==5) {
   b4e82:	682b      	ldr	r3, [r5, #0]
   b4e84:	2b05      	cmp	r3, #5
   b4e86:	f040 80f1 	bne.w	b506c <loop+0x8bc>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b4e8a:	f004 fb55 	bl	b9538 <_Z16_fetch_usbserialv>
   b4e8e:	2203      	movs	r2, #3
   b4e90:	4957      	ldr	r1, [pc, #348]	; (b4ff0 <loop+0x840>)
 hueOnOff = true;
   b4e92:	4c58      	ldr	r4, [pc, #352]	; (b4ff4 <loop+0x844>)
            Serial.printf("turning on the light\n");
   b4e94:	f8df a16c 	ldr.w	sl, [pc, #364]	; b5004 <loop+0x854>
            setHue(2, hueOnOff, HueRed, i, 255);
   b4e98:	4f57      	ldr	r7, [pc, #348]	; (b4ff8 <loop+0x848>)
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b4e9a:	f7ff f92e 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b4e9e:	2003      	movs	r0, #3
   b4ea0:	f7ff fae6 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b4ea4:	f242 7010 	movw	r0, #10000	; 0x2710
   b4ea8:	f003 fb0c 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b4eac:	4853      	ldr	r0, [pc, #332]	; (b4ffc <loop+0x84c>)
   b4eae:	2102      	movs	r1, #2
   b4eb0:	f002 fca7 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b4eb4:	2200      	movs	r2, #0
   b4eb6:	4611      	mov	r1, r2
   b4eb8:	4850      	ldr	r0, [pc, #320]	; (b4ffc <loop+0x84c>)
   b4eba:	f002 fc9d 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, maybeNextTime, 128, 64, WHITE);
   b4ebe:	2601      	movs	r6, #1
   b4ec0:	2340      	movs	r3, #64	; 0x40
   b4ec2:	2200      	movs	r2, #0
   b4ec4:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b4ec8:	2380      	movs	r3, #128	; 0x80
   b4eca:	4611      	mov	r1, r2
   b4ecc:	484b      	ldr	r0, [pc, #300]	; (b4ffc <loop+0x84c>)
   b4ece:	9300      	str	r3, [sp, #0]
   b4ed0:	4b4e      	ldr	r3, [pc, #312]	; (b500c <loop+0x85c>)
   b4ed2:	f002 fb8d 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4ed6:	4849      	ldr	r0, [pc, #292]	; (b4ffc <loop+0x84c>)
   b4ed8:	f002 fef8 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b4edc:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4ee0:	f003 faf0 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b4ee4:	4845      	ldr	r0, [pc, #276]	; (b4ffc <loop+0x84c>)
   b4ee6:	f002 fe79 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b4eea:	f04f 08ff 	mov.w	r8, #255	; 0xff
 hueOnOff = true;
   b4eee:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4ef0:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b4ef2:	f004 fb21 	bl	b9538 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4ef6:	f8df 9118 	ldr.w	r9, [pc, #280]	; b5010 <loop+0x860>
            Serial.printf("turning on the light\n");
   b4efa:	4651      	mov	r1, sl
   b4efc:	f7ff f8fd 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b4f00:	9600      	str	r6, [sp, #0]
   b4f02:	4643      	mov	r3, r8
   b4f04:	f8d9 2000 	ldr.w	r2, [r9]
   b4f08:	7821      	ldrb	r1, [r4, #0]
   b4f0a:	2001      	movs	r0, #1
   b4f0c:	f7ff f928 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b4f10:	9600      	str	r6, [sp, #0]
   b4f12:	4643      	mov	r3, r8
   b4f14:	683a      	ldr	r2, [r7, #0]
   b4f16:	7821      	ldrb	r1, [r4, #0]
   b4f18:	2002      	movs	r0, #2
   b4f1a:	f7ff f921 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueYellow, i, 255);
   b4f1e:	9600      	str	r6, [sp, #0]
   b4f20:	4643      	mov	r3, r8
   b4f22:	f8d9 2000 	ldr.w	r2, [r9]
   b4f26:	7821      	ldrb	r1, [r4, #0]
   b4f28:	2003      	movs	r0, #3
   b4f2a:	f7ff f919 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b4f2e:	9600      	str	r6, [sp, #0]
   b4f30:	4643      	mov	r3, r8
   b4f32:	683a      	ldr	r2, [r7, #0]
   b4f34:	7821      	ldrb	r1, [r4, #0]
   b4f36:	2004      	movs	r0, #4
   b4f38:	f7ff f912 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueYellow, i, 255);
   b4f3c:	9600      	str	r6, [sp, #0]
   b4f3e:	4643      	mov	r3, r8
   b4f40:	f8d9 2000 	ldr.w	r2, [r9]
   b4f44:	7821      	ldrb	r1, [r4, #0]
   b4f46:	2005      	movs	r0, #5
   b4f48:	f7ff f90a 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b4f4c:	9600      	str	r6, [sp, #0]
   b4f4e:	4643      	mov	r3, r8
   b4f50:	683a      	ldr	r2, [r7, #0]
   b4f52:	7821      	ldrb	r1, [r4, #0]
   b4f54:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b4f56:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b4f5a:	f7ff f901 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b4f5e:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b4f62:	d1c5      	bne.n	b4ef0 <loop+0x740>
            Serial.printf("turning on the light\n");
   b4f64:	f8df a09c 	ldr.w	sl, [pc, #156]	; b5004 <loop+0x854>
        for(int i=0; i<=255; i=i+100) {
   b4f68:	f04f 0800 	mov.w	r8, #0
            Serial.printf("turning on the light\n");
   b4f6c:	f004 fae4 	bl	b9538 <_Z16_fetch_usbserialv>
   b4f70:	4651      	mov	r1, sl
   b4f72:	f7ff f8c2 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b4f76:	9600      	str	r6, [sp, #0]
   b4f78:	4643      	mov	r3, r8
   b4f7a:	683a      	ldr	r2, [r7, #0]
   b4f7c:	7821      	ldrb	r1, [r4, #0]
   b4f7e:	2001      	movs	r0, #1
   b4f80:	f7ff f8ee 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b4f84:	9600      	str	r6, [sp, #0]
   b4f86:	4643      	mov	r3, r8
   b4f88:	f8d9 2000 	ldr.w	r2, [r9]
   b4f8c:	7821      	ldrb	r1, [r4, #0]
   b4f8e:	2002      	movs	r0, #2
   b4f90:	f7ff f8e6 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b4f94:	9600      	str	r6, [sp, #0]
   b4f96:	4643      	mov	r3, r8
   b4f98:	683a      	ldr	r2, [r7, #0]
   b4f9a:	7821      	ldrb	r1, [r4, #0]
   b4f9c:	2003      	movs	r0, #3
   b4f9e:	f7ff f8df 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b4fa2:	9600      	str	r6, [sp, #0]
   b4fa4:	4643      	mov	r3, r8
   b4fa6:	f8d9 2000 	ldr.w	r2, [r9]
   b4faa:	7821      	ldrb	r1, [r4, #0]
   b4fac:	2004      	movs	r0, #4
   b4fae:	f7ff f8d7 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b4fb2:	9600      	str	r6, [sp, #0]
   b4fb4:	4643      	mov	r3, r8
   b4fb6:	683a      	ldr	r2, [r7, #0]
   b4fb8:	7821      	ldrb	r1, [r4, #0]
   b4fba:	2005      	movs	r0, #5
   b4fbc:	f7ff f8d0 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4fc0:	9600      	str	r6, [sp, #0]
   b4fc2:	4643      	mov	r3, r8
   b4fc4:	f8d9 2000 	ldr.w	r2, [r9]
   b4fc8:	7821      	ldrb	r1, [r4, #0]
   b4fca:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b4fcc:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b4fd0:	f7ff f8c6 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b4fd4:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b4fd8:	d1c8      	bne.n	b4f6c <loop+0x7bc>
        hueOnOff = false;
   b4fda:	2300      	movs	r3, #0
   b4fdc:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b4fde:	f004 faab 	bl	b9538 <_Z16_fetch_usbserialv>
   b4fe2:	4909      	ldr	r1, [pc, #36]	; (b5008 <loop+0x858>)
   b4fe4:	f7ff f889 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b4fe8:	9600      	str	r6, [sp, #0]
   b4fea:	683a      	ldr	r2, [r7, #0]
   b4fec:	e012      	b.n	b5014 <loop+0x864>
   b4fee:	bf00      	nop
   b4ff0:	000bbd2b 	.word	0x000bbd2b
   b4ff4:	2003e64c 	.word	0x2003e64c
   b4ff8:	2003e58c 	.word	0x2003e58c
   b4ffc:	2003e658 	.word	0x2003e658
   b5000:	000bc63c 	.word	0x000bc63c
   b5004:	000bbd15 	.word	0x000bbd15
   b5008:	000bbd44 	.word	0x000bbd44
   b500c:	000bbe3c 	.word	0x000bbe3c
   b5010:	2003e0b8 	.word	0x2003e0b8
   b5014:	7821      	ldrb	r1, [r4, #0]
   b5016:	23ff      	movs	r3, #255	; 0xff
   b5018:	2001      	movs	r0, #1
   b501a:	f7ff f8a1 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b501e:	9600      	str	r6, [sp, #0]
   b5020:	683a      	ldr	r2, [r7, #0]
   b5022:	7821      	ldrb	r1, [r4, #0]
   b5024:	23ff      	movs	r3, #255	; 0xff
   b5026:	2002      	movs	r0, #2
   b5028:	f7ff f89a 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b502c:	9600      	str	r6, [sp, #0]
   b502e:	683a      	ldr	r2, [r7, #0]
   b5030:	7821      	ldrb	r1, [r4, #0]
   b5032:	23ff      	movs	r3, #255	; 0xff
   b5034:	2003      	movs	r0, #3
   b5036:	f7ff f893 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b503a:	9600      	str	r6, [sp, #0]
   b503c:	683a      	ldr	r2, [r7, #0]
   b503e:	7821      	ldrb	r1, [r4, #0]
   b5040:	23ff      	movs	r3, #255	; 0xff
   b5042:	2004      	movs	r0, #4
   b5044:	f7ff f88c 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b5048:	9600      	str	r6, [sp, #0]
   b504a:	683a      	ldr	r2, [r7, #0]
   b504c:	7821      	ldrb	r1, [r4, #0]
   b504e:	23ff      	movs	r3, #255	; 0xff
   b5050:	2005      	movs	r0, #5
   b5052:	f7ff f885 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b5056:	9600      	str	r6, [sp, #0]
   b5058:	683a      	ldr	r2, [r7, #0]
   b505a:	7821      	ldrb	r1, [r4, #0]
   b505c:	23ff      	movs	r3, #255	; 0xff
   b505e:	2006      	movs	r0, #6
   b5060:	f7ff f87e 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5064:	f242 7010 	movw	r0, #10000	; 0x2710
   b5068:	f003 fa2c 	bl	b84c4 <delay>
    if(roll==6) {
   b506c:	682b      	ldr	r3, [r5, #0]
   b506e:	2b06      	cmp	r3, #6
   b5070:	f040 82e0 	bne.w	b5634 <loop+0xe84>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5074:	f004 fa60 	bl	b9538 <_Z16_fetch_usbserialv>
   b5078:	2203      	movs	r2, #3
   b507a:	49c7      	ldr	r1, [pc, #796]	; (b5398 <loop+0xbe8>)
 hueOnOff = true;
   b507c:	4cc7      	ldr	r4, [pc, #796]	; (b539c <loop+0xbec>)
            setHue(2, hueOnOff, HueRed, i, 255);
   b507e:	4fc8      	ldr	r7, [pc, #800]	; (b53a0 <loop+0xbf0>)
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5080:	f7ff f83b 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b5084:	2003      	movs	r0, #3
   b5086:	f7ff f9f3 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b508a:	f242 7010 	movw	r0, #10000	; 0x2710
   b508e:	f003 fa19 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b5092:	48c4      	ldr	r0, [pc, #784]	; (b53a4 <loop+0xbf4>)
   b5094:	2102      	movs	r1, #2
   b5096:	f002 fbb4 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b509a:	2200      	movs	r2, #0
   b509c:	4611      	mov	r1, r2
   b509e:	48c1      	ldr	r0, [pc, #772]	; (b53a4 <loop+0xbf4>)
   b50a0:	f002 fbaa 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, again, 128, 64, WHITE);
   b50a4:	2601      	movs	r6, #1
   b50a6:	2340      	movs	r3, #64	; 0x40
   b50a8:	2200      	movs	r2, #0
   b50aa:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b50ae:	2380      	movs	r3, #128	; 0x80
   b50b0:	4611      	mov	r1, r2
   b50b2:	48bc      	ldr	r0, [pc, #752]	; (b53a4 <loop+0xbf4>)
   b50b4:	9300      	str	r3, [sp, #0]
   b50b6:	4bbc      	ldr	r3, [pc, #752]	; (b53a8 <loop+0xbf8>)
   b50b8:	f002 fa9a 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b50bc:	48b9      	ldr	r0, [pc, #740]	; (b53a4 <loop+0xbf4>)
   b50be:	f002 fe05 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b50c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b50c6:	f003 f9fd 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b50ca:	48b6      	ldr	r0, [pc, #728]	; (b53a4 <loop+0xbf4>)
   b50cc:	f002 fd86 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b50d0:	f04f 08ff 	mov.w	r8, #255	; 0xff
 hueOnOff = true;
   b50d4:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, 180, i, 255);
   b50d6:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b50d8:	f004 fa2e 	bl	b9538 <_Z16_fetch_usbserialv>
   b50dc:	49b3      	ldr	r1, [pc, #716]	; (b53ac <loop+0xbfc>)
   b50de:	f7ff f80c 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 180, i, 255);
   b50e2:	9600      	str	r6, [sp, #0]
   b50e4:	4643      	mov	r3, r8
   b50e6:	7821      	ldrb	r1, [r4, #0]
   b50e8:	22b4      	movs	r2, #180	; 0xb4
   b50ea:	2001      	movs	r0, #1
   b50ec:	f7ff f838 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b50f0:	9600      	str	r6, [sp, #0]
   b50f2:	4643      	mov	r3, r8
   b50f4:	683a      	ldr	r2, [r7, #0]
   b50f6:	7821      	ldrb	r1, [r4, #0]
   b50f8:	2002      	movs	r0, #2
   b50fa:	f7ff f831 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 180, i, 255);
   b50fe:	9600      	str	r6, [sp, #0]
   b5100:	4643      	mov	r3, r8
   b5102:	7821      	ldrb	r1, [r4, #0]
   b5104:	22b4      	movs	r2, #180	; 0xb4
   b5106:	2003      	movs	r0, #3
   b5108:	f7ff f82a 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b510c:	9600      	str	r6, [sp, #0]
   b510e:	4643      	mov	r3, r8
   b5110:	683a      	ldr	r2, [r7, #0]
   b5112:	7821      	ldrb	r1, [r4, #0]
   b5114:	2004      	movs	r0, #4
   b5116:	f7ff f823 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 180, i, 255);
   b511a:	9600      	str	r6, [sp, #0]
   b511c:	4643      	mov	r3, r8
   b511e:	7821      	ldrb	r1, [r4, #0]
   b5120:	22b4      	movs	r2, #180	; 0xb4
   b5122:	2005      	movs	r0, #5
   b5124:	f7ff f81c 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b5128:	9600      	str	r6, [sp, #0]
   b512a:	4643      	mov	r3, r8
   b512c:	683a      	ldr	r2, [r7, #0]
   b512e:	7821      	ldrb	r1, [r4, #0]
   b5130:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5132:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b5136:	f7ff f813 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b513a:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b513e:	d1ca      	bne.n	b50d6 <loop+0x926>
            Serial.printf("turning on the light\n");
   b5140:	f8df 9268 	ldr.w	r9, [pc, #616]	; b53ac <loop+0xbfc>
        for(int i=0; i<=255; i=i+100) {
   b5144:	f04f 0800 	mov.w	r8, #0
            Serial.printf("turning on the light\n");
   b5148:	f004 f9f6 	bl	b9538 <_Z16_fetch_usbserialv>
   b514c:	4649      	mov	r1, r9
   b514e:	f7fe ffd4 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b5152:	9600      	str	r6, [sp, #0]
   b5154:	4643      	mov	r3, r8
   b5156:	683a      	ldr	r2, [r7, #0]
   b5158:	7821      	ldrb	r1, [r4, #0]
   b515a:	2001      	movs	r0, #1
   b515c:	f7ff f800 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 180, i, 255);
   b5160:	9600      	str	r6, [sp, #0]
   b5162:	4643      	mov	r3, r8
   b5164:	7821      	ldrb	r1, [r4, #0]
   b5166:	22b4      	movs	r2, #180	; 0xb4
   b5168:	2002      	movs	r0, #2
   b516a:	f7fe fff9 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b516e:	9600      	str	r6, [sp, #0]
   b5170:	4643      	mov	r3, r8
   b5172:	683a      	ldr	r2, [r7, #0]
   b5174:	7821      	ldrb	r1, [r4, #0]
   b5176:	2003      	movs	r0, #3
   b5178:	f7fe fff2 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 180, i, 255);
   b517c:	9600      	str	r6, [sp, #0]
   b517e:	4643      	mov	r3, r8
   b5180:	7821      	ldrb	r1, [r4, #0]
   b5182:	22b4      	movs	r2, #180	; 0xb4
   b5184:	2004      	movs	r0, #4
   b5186:	f7fe ffeb 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b518a:	9600      	str	r6, [sp, #0]
   b518c:	4643      	mov	r3, r8
   b518e:	683a      	ldr	r2, [r7, #0]
   b5190:	7821      	ldrb	r1, [r4, #0]
   b5192:	2005      	movs	r0, #5
   b5194:	f7fe ffe4 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 180, i, 255);
   b5198:	9600      	str	r6, [sp, #0]
   b519a:	4643      	mov	r3, r8
   b519c:	7821      	ldrb	r1, [r4, #0]
   b519e:	22b4      	movs	r2, #180	; 0xb4
   b51a0:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b51a2:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, 180, i, 255);
   b51a6:	f7fe ffdb 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b51aa:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b51ae:	d1cb      	bne.n	b5148 <loop+0x998>
        hueOnOff = false;
   b51b0:	2300      	movs	r3, #0
   b51b2:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b51b4:	f004 f9c0 	bl	b9538 <_Z16_fetch_usbserialv>
   b51b8:	497d      	ldr	r1, [pc, #500]	; (b53b0 <loop+0xc00>)
   b51ba:	f7fe ff9e 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b51be:	9600      	str	r6, [sp, #0]
   b51c0:	683a      	ldr	r2, [r7, #0]
   b51c2:	7821      	ldrb	r1, [r4, #0]
   b51c4:	23ff      	movs	r3, #255	; 0xff
   b51c6:	2001      	movs	r0, #1
   b51c8:	f7fe ffca 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b51cc:	9600      	str	r6, [sp, #0]
   b51ce:	683a      	ldr	r2, [r7, #0]
   b51d0:	7821      	ldrb	r1, [r4, #0]
   b51d2:	23ff      	movs	r3, #255	; 0xff
   b51d4:	2002      	movs	r0, #2
   b51d6:	f7fe ffc3 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b51da:	9600      	str	r6, [sp, #0]
   b51dc:	683a      	ldr	r2, [r7, #0]
   b51de:	7821      	ldrb	r1, [r4, #0]
   b51e0:	23ff      	movs	r3, #255	; 0xff
   b51e2:	2003      	movs	r0, #3
   b51e4:	f7fe ffbc 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b51e8:	9600      	str	r6, [sp, #0]
   b51ea:	683a      	ldr	r2, [r7, #0]
   b51ec:	7821      	ldrb	r1, [r4, #0]
   b51ee:	23ff      	movs	r3, #255	; 0xff
   b51f0:	2004      	movs	r0, #4
   b51f2:	f7fe ffb5 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b51f6:	9600      	str	r6, [sp, #0]
   b51f8:	683a      	ldr	r2, [r7, #0]
   b51fa:	7821      	ldrb	r1, [r4, #0]
   b51fc:	23ff      	movs	r3, #255	; 0xff
   b51fe:	2005      	movs	r0, #5
   b5200:	f7fe ffae 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b5204:	9600      	str	r6, [sp, #0]
   b5206:	23ff      	movs	r3, #255	; 0xff
   b5208:	683a      	ldr	r2, [r7, #0]
   b520a:	7821      	ldrb	r1, [r4, #0]
   b520c:	2006      	movs	r0, #6
   b520e:	f7fe ffa7 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5212:	f242 7010 	movw	r0, #10000	; 0x2710
   b5216:	f003 f955 	bl	b84c4 <delay>
        roll=7;
   b521a:	2307      	movs	r3, #7
   b521c:	602b      	str	r3, [r5, #0]
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b521e:	f004 f98b 	bl	b9538 <_Z16_fetch_usbserialv>
   b5222:	2203      	movs	r2, #3
   b5224:	495c      	ldr	r1, [pc, #368]	; (b5398 <loop+0xbe8>)
 hueOnOff = true;
   b5226:	4c5d      	ldr	r4, [pc, #372]	; (b539c <loop+0xbec>)
            Serial.printf("turning on the light\n");
   b5228:	f8df a180 	ldr.w	sl, [pc, #384]	; b53ac <loop+0xbfc>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b522c:	f8df 8188 	ldr.w	r8, [pc, #392]	; b53b8 <loop+0xc08>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5230:	f7fe ff63 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b5234:	2003      	movs	r0, #3
   b5236:	f7ff f91b 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b523a:	f242 7010 	movw	r0, #10000	; 0x2710
   b523e:	f003 f941 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b5242:	4858      	ldr	r0, [pc, #352]	; (b53a4 <loop+0xbf4>)
   b5244:	2102      	movs	r1, #2
   b5246:	f002 fadc 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b524a:	2200      	movs	r2, #0
   b524c:	4611      	mov	r1, r2
   b524e:	4855      	ldr	r0, [pc, #340]	; (b53a4 <loop+0xbf4>)
   b5250:	f002 fad2 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, welp, 128, 64, WHITE);
   b5254:	2601      	movs	r6, #1
   b5256:	2340      	movs	r3, #64	; 0x40
   b5258:	2200      	movs	r2, #0
   b525a:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b525e:	2380      	movs	r3, #128	; 0x80
   b5260:	4611      	mov	r1, r2
   b5262:	4850      	ldr	r0, [pc, #320]	; (b53a4 <loop+0xbf4>)
   b5264:	9300      	str	r3, [sp, #0]
   b5266:	4b53      	ldr	r3, [pc, #332]	; (b53b4 <loop+0xc04>)
   b5268:	f002 f9c2 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b526c:	484d      	ldr	r0, [pc, #308]	; (b53a4 <loop+0xbf4>)
   b526e:	f002 fd2d 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5272:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5276:	f003 f925 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b527a:	484a      	ldr	r0, [pc, #296]	; (b53a4 <loop+0xbf4>)
   b527c:	f002 fcae 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b5280:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5282:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueGreen, i, 255);
   b5284:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5286:	f004 f957 	bl	b9538 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b528a:	f8df 9130 	ldr.w	r9, [pc, #304]	; b53bc <loop+0xc0c>
            Serial.printf("turning on the light\n");
   b528e:	4651      	mov	r1, sl
   b5290:	f7fe ff33 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b5294:	9600      	str	r6, [sp, #0]
   b5296:	463b      	mov	r3, r7
   b5298:	f8d9 2000 	ldr.w	r2, [r9]
   b529c:	7821      	ldrb	r1, [r4, #0]
   b529e:	2001      	movs	r0, #1
   b52a0:	f7fe ff5e 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b52a4:	9600      	str	r6, [sp, #0]
   b52a6:	463b      	mov	r3, r7
   b52a8:	f8d8 2000 	ldr.w	r2, [r8]
   b52ac:	7821      	ldrb	r1, [r4, #0]
   b52ae:	2002      	movs	r0, #2
   b52b0:	f7fe ff56 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b52b4:	9600      	str	r6, [sp, #0]
   b52b6:	463b      	mov	r3, r7
   b52b8:	f8d9 2000 	ldr.w	r2, [r9]
   b52bc:	7821      	ldrb	r1, [r4, #0]
   b52be:	2003      	movs	r0, #3
   b52c0:	f7fe ff4e 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b52c4:	9600      	str	r6, [sp, #0]
   b52c6:	463b      	mov	r3, r7
   b52c8:	f8d8 2000 	ldr.w	r2, [r8]
   b52cc:	7821      	ldrb	r1, [r4, #0]
   b52ce:	2004      	movs	r0, #4
   b52d0:	f7fe ff46 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b52d4:	9600      	str	r6, [sp, #0]
   b52d6:	463b      	mov	r3, r7
   b52d8:	f8d9 2000 	ldr.w	r2, [r9]
   b52dc:	7821      	ldrb	r1, [r4, #0]
   b52de:	2005      	movs	r0, #5
   b52e0:	f7fe ff3e 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b52e4:	9600      	str	r6, [sp, #0]
   b52e6:	463b      	mov	r3, r7
   b52e8:	f8d8 2000 	ldr.w	r2, [r8]
   b52ec:	7821      	ldrb	r1, [r4, #0]
   b52ee:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b52f0:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b52f2:	f7fe ff35 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b52f6:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b52fa:	d1c3      	bne.n	b5284 <loop+0xad4>
            Serial.printf("turning on the light\n");
   b52fc:	f8df a0ac 	ldr.w	sl, [pc, #172]	; b53ac <loop+0xbfc>
        for(int i=0; i<=255; i=i+100) {
   b5300:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b5302:	f004 f919 	bl	b9538 <_Z16_fetch_usbserialv>
   b5306:	4651      	mov	r1, sl
   b5308:	f7fe fef7 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b530c:	9600      	str	r6, [sp, #0]
   b530e:	463b      	mov	r3, r7
   b5310:	f8d9 2000 	ldr.w	r2, [r9]
   b5314:	7821      	ldrb	r1, [r4, #0]
   b5316:	2001      	movs	r0, #1
   b5318:	f7fe ff22 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b531c:	9600      	str	r6, [sp, #0]
   b531e:	463b      	mov	r3, r7
   b5320:	f8d8 2000 	ldr.w	r2, [r8]
   b5324:	7821      	ldrb	r1, [r4, #0]
   b5326:	2002      	movs	r0, #2
   b5328:	f7fe ff1a 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b532c:	9600      	str	r6, [sp, #0]
   b532e:	463b      	mov	r3, r7
   b5330:	f8d9 2000 	ldr.w	r2, [r9]
   b5334:	7821      	ldrb	r1, [r4, #0]
   b5336:	2003      	movs	r0, #3
   b5338:	f7fe ff12 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b533c:	9600      	str	r6, [sp, #0]
   b533e:	463b      	mov	r3, r7
   b5340:	f8d8 2000 	ldr.w	r2, [r8]
   b5344:	7821      	ldrb	r1, [r4, #0]
   b5346:	2004      	movs	r0, #4
   b5348:	f7fe ff0a 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b534c:	9600      	str	r6, [sp, #0]
   b534e:	463b      	mov	r3, r7
   b5350:	f8d9 2000 	ldr.w	r2, [r9]
   b5354:	7821      	ldrb	r1, [r4, #0]
   b5356:	2005      	movs	r0, #5
   b5358:	f7fe ff02 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b535c:	9600      	str	r6, [sp, #0]
   b535e:	463b      	mov	r3, r7
   b5360:	f8d8 2000 	ldr.w	r2, [r8]
   b5364:	7821      	ldrb	r1, [r4, #0]
   b5366:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5368:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b536a:	f7fe fef9 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b536e:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b5372:	d1c6      	bne.n	b5302 <loop+0xb52>
        hueOnOff = false;
   b5374:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5376:	4f0a      	ldr	r7, [pc, #40]	; (b53a0 <loop+0xbf0>)
        hueOnOff = false;
   b5378:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b537a:	f004 f8dd 	bl	b9538 <_Z16_fetch_usbserialv>
   b537e:	490c      	ldr	r1, [pc, #48]	; (b53b0 <loop+0xc00>)
   b5380:	f7fe febb 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5384:	9600      	str	r6, [sp, #0]
   b5386:	683a      	ldr	r2, [r7, #0]
   b5388:	7821      	ldrb	r1, [r4, #0]
   b538a:	23ff      	movs	r3, #255	; 0xff
   b538c:	2001      	movs	r0, #1
   b538e:	f7fe fee7 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b5392:	9600      	str	r6, [sp, #0]
   b5394:	683a      	ldr	r2, [r7, #0]
   b5396:	e013      	b.n	b53c0 <loop+0xc10>
   b5398:	000bbd2b 	.word	0x000bbd2b
   b539c:	2003e64c 	.word	0x2003e64c
   b53a0:	2003e58c 	.word	0x2003e58c
   b53a4:	2003e658 	.word	0x2003e658
   b53a8:	000bdf2c 	.word	0x000bdf2c
   b53ac:	000bbd15 	.word	0x000bbd15
   b53b0:	000bbd44 	.word	0x000bbd44
   b53b4:	000bdb2c 	.word	0x000bdb2c
   b53b8:	2003e0b8 	.word	0x2003e0b8
   b53bc:	2003e0a8 	.word	0x2003e0a8
   b53c0:	7821      	ldrb	r1, [r4, #0]
   b53c2:	23ff      	movs	r3, #255	; 0xff
   b53c4:	2002      	movs	r0, #2
   b53c6:	f7fe fecb 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b53ca:	9600      	str	r6, [sp, #0]
   b53cc:	683a      	ldr	r2, [r7, #0]
   b53ce:	7821      	ldrb	r1, [r4, #0]
   b53d0:	23ff      	movs	r3, #255	; 0xff
   b53d2:	2003      	movs	r0, #3
   b53d4:	f7fe fec4 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b53d8:	9600      	str	r6, [sp, #0]
   b53da:	683a      	ldr	r2, [r7, #0]
   b53dc:	7821      	ldrb	r1, [r4, #0]
   b53de:	23ff      	movs	r3, #255	; 0xff
   b53e0:	2004      	movs	r0, #4
   b53e2:	f7fe febd 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b53e6:	9600      	str	r6, [sp, #0]
   b53e8:	683a      	ldr	r2, [r7, #0]
   b53ea:	7821      	ldrb	r1, [r4, #0]
   b53ec:	23ff      	movs	r3, #255	; 0xff
   b53ee:	2005      	movs	r0, #5
   b53f0:	f7fe feb6 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b53f4:	9600      	str	r6, [sp, #0]
   b53f6:	683a      	ldr	r2, [r7, #0]
   b53f8:	7821      	ldrb	r1, [r4, #0]
   b53fa:	23ff      	movs	r3, #255	; 0xff
   b53fc:	2006      	movs	r0, #6
   b53fe:	f7fe feaf 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5402:	f242 7010 	movw	r0, #10000	; 0x2710
   b5406:	f003 f85d 	bl	b84c4 <delay>
   b540a:	e116      	b.n	b563a <loop+0xe8a>
					roll = 7;
   b540c:	4b81      	ldr	r3, [pc, #516]	; (b5614 <loop+0xe64>)
   b540e:	2207      	movs	r2, #7
   b5410:	f7ff ba50 	b.w	b48b4 <loop+0x104>
					roll = 17;
   b5414:	4b7f      	ldr	r3, [pc, #508]	; (b5614 <loop+0xe64>)
   b5416:	2211      	movs	r2, #17
   b5418:	f7ff ba4c 	b.w	b48b4 <loop+0x104>
					roll = 3;
   b541c:	4b7d      	ldr	r3, [pc, #500]	; (b5614 <loop+0xe64>)
   b541e:	2203      	movs	r2, #3
   b5420:	f7ff ba48 	b.w	b48b4 <loop+0x104>
					roll = 19;
   b5424:	4b7b      	ldr	r3, [pc, #492]	; (b5614 <loop+0xe64>)
   b5426:	2213      	movs	r2, #19
   b5428:	f7ff ba44 	b.w	b48b4 <loop+0x104>
					roll = 18;
   b542c:	4b79      	ldr	r3, [pc, #484]	; (b5614 <loop+0xe64>)
   b542e:	2212      	movs	r2, #18
   b5430:	f7ff ba40 	b.w	b48b4 <loop+0x104>
					roll = 2;
   b5434:	4b77      	ldr	r3, [pc, #476]	; (b5614 <loop+0xe64>)
   b5436:	2202      	movs	r2, #2
   b5438:	f7ff ba3c 	b.w	b48b4 <loop+0x104>
					roll = 20;
   b543c:	4b75      	ldr	r3, [pc, #468]	; (b5614 <loop+0xe64>)
   b543e:	2214      	movs	r2, #20
   b5440:	f7ff ba38 	b.w	b48b4 <loop+0x104>
					roll = 14;
   b5444:	4b73      	ldr	r3, [pc, #460]	; (b5614 <loop+0xe64>)
   b5446:	220e      	movs	r2, #14
   b5448:	f7ff ba34 	b.w	b48b4 <loop+0x104>
					roll = 4;
   b544c:	4b71      	ldr	r3, [pc, #452]	; (b5614 <loop+0xe64>)
   b544e:	2204      	movs	r2, #4
   b5450:	f7ff ba30 	b.w	b48b4 <loop+0x104>
					roll = 11;
   b5454:	4b6f      	ldr	r3, [pc, #444]	; (b5614 <loop+0xe64>)
   b5456:	220b      	movs	r2, #11
   b5458:	f7ff ba2c 	b.w	b48b4 <loop+0x104>
					roll = 13;
   b545c:	4b6d      	ldr	r3, [pc, #436]	; (b5614 <loop+0xe64>)
   b545e:	220d      	movs	r2, #13
   b5460:	f7ff ba28 	b.w	b48b4 <loop+0x104>
					roll = 5;
   b5464:	4b6b      	ldr	r3, [pc, #428]	; (b5614 <loop+0xe64>)
   b5466:	2205      	movs	r2, #5
   b5468:	f7ff ba24 	b.w	b48b4 <loop+0x104>
					roll = 15;
   b546c:	4b69      	ldr	r3, [pc, #420]	; (b5614 <loop+0xe64>)
   b546e:	220f      	movs	r2, #15
   b5470:	f7ff ba20 	b.w	b48b4 <loop+0x104>
					roll = 12;
   b5474:	4b67      	ldr	r3, [pc, #412]	; (b5614 <loop+0xe64>)
   b5476:	220c      	movs	r2, #12
   b5478:	f7ff ba1c 	b.w	b48b4 <loop+0x104>
					roll = 10;
   b547c:	4b65      	ldr	r3, [pc, #404]	; (b5614 <loop+0xe64>)
   b547e:	220a      	movs	r2, #10
   b5480:	f7ff ba18 	b.w	b48b4 <loop+0x104>
					roll = 8;
   b5484:	4b63      	ldr	r3, [pc, #396]	; (b5614 <loop+0xe64>)
   b5486:	2208      	movs	r2, #8
   b5488:	f7ff ba14 	b.w	b48b4 <loop+0x104>
					roll = 16;
   b548c:	4b61      	ldr	r3, [pc, #388]	; (b5614 <loop+0xe64>)
   b548e:	2210      	movs	r2, #16
   b5490:	f7ff ba10 	b.w	b48b4 <loop+0x104>
					roll = 6;
   b5494:	4b5f      	ldr	r3, [pc, #380]	; (b5614 <loop+0xe64>)
   b5496:	2206      	movs	r2, #6
   b5498:	f7ff ba0c 	b.w	b48b4 <loop+0x104>
					roll = 9;
   b549c:	4b5d      	ldr	r3, [pc, #372]	; (b5614 <loop+0xe64>)
   b549e:	2209      	movs	r2, #9
   b54a0:	f7ff ba08 	b.w	b48b4 <loop+0x104>
		myDisplay.clearDisplay();
   b54a4:	485c      	ldr	r0, [pc, #368]	; (b5618 <loop+0xe68>)
        hueOnOff = true;
   b54a6:	4c5d      	ldr	r4, [pc, #372]	; (b561c <loop+0xe6c>)
            Serial.printf("turning on the light\n");
   b54a8:	f8df 9184 	ldr.w	r9, [pc, #388]	; b5630 <loop+0xe80>
		myDisplay.clearDisplay();
   b54ac:	f002 fb96 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        myDisplay.setRotation(2); //0-3
   b54b0:	4859      	ldr	r0, [pc, #356]	; (b5618 <loop+0xe68>)
   b54b2:	2102      	movs	r1, #2
   b54b4:	f002 f9a5 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b54b8:	2200      	movs	r2, #0
   b54ba:	4611      	mov	r1, r2
   b54bc:	4856      	ldr	r0, [pc, #344]	; (b5618 <loop+0xe68>)
   b54be:	f002 f99b 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, rip, 128, 64, WHITE);
   b54c2:	2380      	movs	r3, #128	; 0x80
   b54c4:	2240      	movs	r2, #64	; 0x40
   b54c6:	e9cd 3200 	strd	r3, r2, [sp]
   b54ca:	2200      	movs	r2, #0
   b54cc:	4b54      	ldr	r3, [pc, #336]	; (b5620 <loop+0xe70>)
   b54ce:	4852      	ldr	r0, [pc, #328]	; (b5618 <loop+0xe68>)
   b54d0:	9602      	str	r6, [sp, #8]
   b54d2:	4611      	mov	r1, r2
   b54d4:	f002 f88c 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b54d8:	484f      	ldr	r0, [pc, #316]	; (b5618 <loop+0xe68>)
   b54da:	f002 fbf7 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b54de:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b54e2:	f002 ffef 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b54e6:	484c      	ldr	r0, [pc, #304]	; (b5618 <loop+0xe68>)
   b54e8:	f002 fb78 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
		pixel.setBrightness(100);
   b54ec:	484d      	ldr	r0, [pc, #308]	; (b5624 <loop+0xe74>)
   b54ee:	2164      	movs	r1, #100	; 0x64
   b54f0:	f001 ff5d 	bl	b73ae <_ZN17Adafruit_NeoPixel13setBrightnessEh>
		pixel.setPixelColor(0, red);
   b54f4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   b54f8:	2100      	movs	r1, #0
   b54fa:	484a      	ldr	r0, [pc, #296]	; (b5624 <loop+0xe74>)
   b54fc:	f001 ff14 	bl	b7328 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
		pixel.show();
   b5500:	4848      	ldr	r0, [pc, #288]	; (b5624 <loop+0xe74>)
   b5502:	f001 fd65 	bl	b6fd0 <_ZN17Adafruit_NeoPixel4showEv>
		delay(3000);
   b5506:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b550a:	f002 ffdb 	bl	b84c4 <delay>
		pixel.clear();
   b550e:	4845      	ldr	r0, [pc, #276]	; (b5624 <loop+0xe74>)
   b5510:	f001 ff74 	bl	b73fc <_ZN17Adafruit_NeoPixel5clearEv>
		pixel.show();
   b5514:	4843      	ldr	r0, [pc, #268]	; (b5624 <loop+0xe74>)
   b5516:	f001 fd5b 	bl	b6fd0 <_ZN17Adafruit_NeoPixel4showEv>
        Serial.printf("Turniing on MRWEMO #%i\n", MRWEMO);
   b551a:	f004 f80d 	bl	b9538 <_Z16_fetch_usbserialv>
   b551e:	4942      	ldr	r1, [pc, #264]	; (b5628 <loop+0xe78>)
   b5520:	2203      	movs	r2, #3
   b5522:	f7fe fdea 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchON(MRWEMO);
   b5526:	2003      	movs	r0, #3
   b5528:	f7fe ff40 	bl	b43ac <_Z8switchONi>
        hueOnOff = true;
   b552c:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueRed, i, 255);
   b552e:	4e3f      	ldr	r6, [pc, #252]	; (b562c <loop+0xe7c>)
        for(int i=255; i>=0; i=i-100) {
   b5530:	f04f 08ff 	mov.w	r8, #255	; 0xff
            setHue(1, hueOnOff, HueRed, i, 255);
   b5534:	27ff      	movs	r7, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5536:	f003 ffff 	bl	b9538 <_Z16_fetch_usbserialv>
   b553a:	4649      	mov	r1, r9
   b553c:	f7fe fddd 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b5540:	9700      	str	r7, [sp, #0]
   b5542:	4643      	mov	r3, r8
   b5544:	6832      	ldr	r2, [r6, #0]
   b5546:	7821      	ldrb	r1, [r4, #0]
   b5548:	2001      	movs	r0, #1
   b554a:	f7fe fe09 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b554e:	9700      	str	r7, [sp, #0]
   b5550:	4643      	mov	r3, r8
   b5552:	6832      	ldr	r2, [r6, #0]
   b5554:	7821      	ldrb	r1, [r4, #0]
   b5556:	2002      	movs	r0, #2
   b5558:	f7fe fe02 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b555c:	9700      	str	r7, [sp, #0]
   b555e:	4643      	mov	r3, r8
   b5560:	6832      	ldr	r2, [r6, #0]
   b5562:	7821      	ldrb	r1, [r4, #0]
   b5564:	2003      	movs	r0, #3
   b5566:	f7fe fdfb 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b556a:	9700      	str	r7, [sp, #0]
   b556c:	4643      	mov	r3, r8
   b556e:	6832      	ldr	r2, [r6, #0]
   b5570:	7821      	ldrb	r1, [r4, #0]
   b5572:	2004      	movs	r0, #4
   b5574:	f7fe fdf4 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b5578:	9700      	str	r7, [sp, #0]
   b557a:	4643      	mov	r3, r8
   b557c:	6832      	ldr	r2, [r6, #0]
   b557e:	7821      	ldrb	r1, [r4, #0]
   b5580:	2005      	movs	r0, #5
   b5582:	f7fe fded 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b5586:	9700      	str	r7, [sp, #0]
   b5588:	4643      	mov	r3, r8
   b558a:	6832      	ldr	r2, [r6, #0]
   b558c:	7821      	ldrb	r1, [r4, #0]
   b558e:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5590:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b5594:	f7fe fde4 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b5598:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b559c:	d1ca      	bne.n	b5534 <loop+0xd84>
            Serial.printf("turning on the light\n");
   b559e:	f8df 9090 	ldr.w	r9, [pc, #144]	; b5630 <loop+0xe80>
        for(int i=0; i<=255; i=i+100) {
   b55a2:	f04f 0800 	mov.w	r8, #0
            Serial.printf("turning on the light\n");
   b55a6:	f003 ffc7 	bl	b9538 <_Z16_fetch_usbserialv>
   b55aa:	4649      	mov	r1, r9
   b55ac:	f7fe fda5 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, i, 255);
   b55b0:	9700      	str	r7, [sp, #0]
   b55b2:	4643      	mov	r3, r8
   b55b4:	6832      	ldr	r2, [r6, #0]
   b55b6:	7821      	ldrb	r1, [r4, #0]
   b55b8:	2001      	movs	r0, #1
   b55ba:	f7fe fdd1 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, i, 255);
   b55be:	9700      	str	r7, [sp, #0]
   b55c0:	4643      	mov	r3, r8
   b55c2:	6832      	ldr	r2, [r6, #0]
   b55c4:	7821      	ldrb	r1, [r4, #0]
   b55c6:	2002      	movs	r0, #2
   b55c8:	f7fe fdca 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, i, 255);
   b55cc:	9700      	str	r7, [sp, #0]
   b55ce:	4643      	mov	r3, r8
   b55d0:	6832      	ldr	r2, [r6, #0]
   b55d2:	7821      	ldrb	r1, [r4, #0]
   b55d4:	2003      	movs	r0, #3
   b55d6:	f7fe fdc3 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, i, 255);
   b55da:	9700      	str	r7, [sp, #0]
   b55dc:	4643      	mov	r3, r8
   b55de:	6832      	ldr	r2, [r6, #0]
   b55e0:	7821      	ldrb	r1, [r4, #0]
   b55e2:	2004      	movs	r0, #4
   b55e4:	f7fe fdbc 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, i, 255);
   b55e8:	9700      	str	r7, [sp, #0]
   b55ea:	4643      	mov	r3, r8
   b55ec:	6832      	ldr	r2, [r6, #0]
   b55ee:	7821      	ldrb	r1, [r4, #0]
   b55f0:	2005      	movs	r0, #5
   b55f2:	f7fe fdb5 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, i, 255);
   b55f6:	9700      	str	r7, [sp, #0]
   b55f8:	4643      	mov	r3, r8
   b55fa:	6832      	ldr	r2, [r6, #0]
   b55fc:	7821      	ldrb	r1, [r4, #0]
   b55fe:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5600:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueRed, i, 255);
   b5604:	f7fe fdac 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b5608:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b560c:	d1cb      	bne.n	b55a6 <loop+0xdf6>
   b560e:	f7ff b9bd 	b.w	b498c <loop+0x1dc>
   b5612:	bf00      	nop
   b5614:	2003e6a0 	.word	0x2003e6a0
   b5618:	2003e658 	.word	0x2003e658
   b561c:	2003e64c 	.word	0x2003e64c
   b5620:	000bcb2c 	.word	0x000bcb2c
   b5624:	2003e680 	.word	0x2003e680
   b5628:	000bbcfd 	.word	0x000bbcfd
   b562c:	2003e58c 	.word	0x2003e58c
   b5630:	000bbd15 	.word	0x000bbd15
    if(roll==7) {
   b5634:	2b07      	cmp	r3, #7
   b5636:	f43f adf2 	beq.w	b521e <loop+0xa6e>
    if(roll==8) {
   b563a:	682b      	ldr	r3, [r5, #0]
   b563c:	2b08      	cmp	r3, #8
   b563e:	f040 80e1 	bne.w	b5804 <loop+0x1054>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5642:	f003 ff79 	bl	b9538 <_Z16_fetch_usbserialv>
   b5646:	2203      	movs	r2, #3
   b5648:	49cb      	ldr	r1, [pc, #812]	; (b5978 <loop+0x11c8>)
 hueOnOff = true;
   b564a:	4ccc      	ldr	r4, [pc, #816]	; (b597c <loop+0x11cc>)
            Serial.printf("turning on the light\n");
   b564c:	f8df a344 	ldr.w	sl, [pc, #836]	; b5994 <loop+0x11e4>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b5650:	f8df 8344 	ldr.w	r8, [pc, #836]	; b5998 <loop+0x11e8>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5654:	f7fe fd51 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b5658:	2003      	movs	r0, #3
   b565a:	f7fe ff09 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b565e:	f242 7010 	movw	r0, #10000	; 0x2710
   b5662:	f002 ff2f 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b5666:	48c6      	ldr	r0, [pc, #792]	; (b5980 <loop+0x11d0>)
   b5668:	2102      	movs	r1, #2
   b566a:	f002 f8ca 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b566e:	2200      	movs	r2, #0
   b5670:	4611      	mov	r1, r2
   b5672:	48c3      	ldr	r0, [pc, #780]	; (b5980 <loop+0x11d0>)
   b5674:	f002 f8c0 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, lame, 128, 64, WHITE);
   b5678:	2601      	movs	r6, #1
   b567a:	2340      	movs	r3, #64	; 0x40
   b567c:	2200      	movs	r2, #0
   b567e:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b5682:	2380      	movs	r3, #128	; 0x80
   b5684:	4611      	mov	r1, r2
   b5686:	48be      	ldr	r0, [pc, #760]	; (b5980 <loop+0x11d0>)
   b5688:	9300      	str	r3, [sp, #0]
   b568a:	4bbe      	ldr	r3, [pc, #760]	; (b5984 <loop+0x11d4>)
   b568c:	f001 ffb0 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b5690:	48bb      	ldr	r0, [pc, #748]	; (b5980 <loop+0x11d0>)
   b5692:	f002 fb1b 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5696:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b569a:	f002 ff13 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b569e:	48b8      	ldr	r0, [pc, #736]	; (b5980 <loop+0x11d0>)
   b56a0:	f002 fa9c 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b56a4:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b56a6:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueYellow, i, 255);
   b56a8:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b56aa:	f003 ff45 	bl	b9538 <_Z16_fetch_usbserialv>
   b56ae:	4651      	mov	r1, sl
   b56b0:	f7fe fd23 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b56b4:	9600      	str	r6, [sp, #0]
            setHue(2, hueOnOff, HueGreen, i, 255);
   b56b6:	f8df 92e4 	ldr.w	r9, [pc, #740]	; b599c <loop+0x11ec>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b56ba:	f8d8 2000 	ldr.w	r2, [r8]
   b56be:	7821      	ldrb	r1, [r4, #0]
   b56c0:	463b      	mov	r3, r7
   b56c2:	2001      	movs	r0, #1
   b56c4:	f7fe fd4c 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b56c8:	9600      	str	r6, [sp, #0]
   b56ca:	463b      	mov	r3, r7
   b56cc:	f8d9 2000 	ldr.w	r2, [r9]
   b56d0:	7821      	ldrb	r1, [r4, #0]
   b56d2:	2002      	movs	r0, #2
   b56d4:	f7fe fd44 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueYellow, i, 255);
   b56d8:	9600      	str	r6, [sp, #0]
   b56da:	463b      	mov	r3, r7
   b56dc:	f8d8 2000 	ldr.w	r2, [r8]
   b56e0:	7821      	ldrb	r1, [r4, #0]
   b56e2:	2003      	movs	r0, #3
   b56e4:	f7fe fd3c 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b56e8:	9600      	str	r6, [sp, #0]
   b56ea:	463b      	mov	r3, r7
   b56ec:	f8d9 2000 	ldr.w	r2, [r9]
   b56f0:	7821      	ldrb	r1, [r4, #0]
   b56f2:	2004      	movs	r0, #4
   b56f4:	f7fe fd34 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueYellow, i, 255);
   b56f8:	9600      	str	r6, [sp, #0]
   b56fa:	463b      	mov	r3, r7
   b56fc:	f8d8 2000 	ldr.w	r2, [r8]
   b5700:	7821      	ldrb	r1, [r4, #0]
   b5702:	2005      	movs	r0, #5
   b5704:	f7fe fd2c 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b5708:	9600      	str	r6, [sp, #0]
   b570a:	463b      	mov	r3, r7
   b570c:	f8d9 2000 	ldr.w	r2, [r9]
   b5710:	7821      	ldrb	r1, [r4, #0]
   b5712:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5714:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b5716:	f7fe fd23 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b571a:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b571e:	d1c3      	bne.n	b56a8 <loop+0xef8>
            Serial.printf("turning on the light\n");
   b5720:	f8df a270 	ldr.w	sl, [pc, #624]	; b5994 <loop+0x11e4>
        for(int i=0; i<=255; i=i+100) {
   b5724:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b5726:	f003 ff07 	bl	b9538 <_Z16_fetch_usbserialv>
   b572a:	4651      	mov	r1, sl
   b572c:	f7fe fce5 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b5730:	9600      	str	r6, [sp, #0]
   b5732:	463b      	mov	r3, r7
   b5734:	f8d9 2000 	ldr.w	r2, [r9]
   b5738:	7821      	ldrb	r1, [r4, #0]
   b573a:	2001      	movs	r0, #1
   b573c:	f7fe fd10 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b5740:	9600      	str	r6, [sp, #0]
   b5742:	463b      	mov	r3, r7
   b5744:	f8d8 2000 	ldr.w	r2, [r8]
   b5748:	7821      	ldrb	r1, [r4, #0]
   b574a:	2002      	movs	r0, #2
   b574c:	f7fe fd08 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b5750:	9600      	str	r6, [sp, #0]
   b5752:	463b      	mov	r3, r7
   b5754:	f8d9 2000 	ldr.w	r2, [r9]
   b5758:	7821      	ldrb	r1, [r4, #0]
   b575a:	2003      	movs	r0, #3
   b575c:	f7fe fd00 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b5760:	9600      	str	r6, [sp, #0]
   b5762:	463b      	mov	r3, r7
   b5764:	f8d8 2000 	ldr.w	r2, [r8]
   b5768:	7821      	ldrb	r1, [r4, #0]
   b576a:	2004      	movs	r0, #4
   b576c:	f7fe fcf8 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b5770:	9600      	str	r6, [sp, #0]
   b5772:	463b      	mov	r3, r7
   b5774:	f8d9 2000 	ldr.w	r2, [r9]
   b5778:	7821      	ldrb	r1, [r4, #0]
   b577a:	2005      	movs	r0, #5
   b577c:	f7fe fcf0 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b5780:	9600      	str	r6, [sp, #0]
   b5782:	463b      	mov	r3, r7
   b5784:	f8d8 2000 	ldr.w	r2, [r8]
   b5788:	7821      	ldrb	r1, [r4, #0]
   b578a:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b578c:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b578e:	f7fe fce7 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b5792:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b5796:	d1c6      	bne.n	b5726 <loop+0xf76>
        hueOnOff = false;
   b5798:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b579a:	4f7b      	ldr	r7, [pc, #492]	; (b5988 <loop+0x11d8>)
        hueOnOff = false;
   b579c:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b579e:	f003 fecb 	bl	b9538 <_Z16_fetch_usbserialv>
   b57a2:	497a      	ldr	r1, [pc, #488]	; (b598c <loop+0x11dc>)
   b57a4:	f7fe fca9 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b57a8:	9600      	str	r6, [sp, #0]
   b57aa:	683a      	ldr	r2, [r7, #0]
   b57ac:	7821      	ldrb	r1, [r4, #0]
   b57ae:	23ff      	movs	r3, #255	; 0xff
   b57b0:	2001      	movs	r0, #1
   b57b2:	f7fe fcd5 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b57b6:	9600      	str	r6, [sp, #0]
   b57b8:	683a      	ldr	r2, [r7, #0]
   b57ba:	7821      	ldrb	r1, [r4, #0]
   b57bc:	23ff      	movs	r3, #255	; 0xff
   b57be:	2002      	movs	r0, #2
   b57c0:	f7fe fcce 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b57c4:	9600      	str	r6, [sp, #0]
   b57c6:	683a      	ldr	r2, [r7, #0]
   b57c8:	7821      	ldrb	r1, [r4, #0]
   b57ca:	23ff      	movs	r3, #255	; 0xff
   b57cc:	2003      	movs	r0, #3
   b57ce:	f7fe fcc7 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b57d2:	9600      	str	r6, [sp, #0]
   b57d4:	683a      	ldr	r2, [r7, #0]
   b57d6:	7821      	ldrb	r1, [r4, #0]
   b57d8:	23ff      	movs	r3, #255	; 0xff
   b57da:	2004      	movs	r0, #4
   b57dc:	f7fe fcc0 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b57e0:	9600      	str	r6, [sp, #0]
   b57e2:	683a      	ldr	r2, [r7, #0]
   b57e4:	7821      	ldrb	r1, [r4, #0]
   b57e6:	23ff      	movs	r3, #255	; 0xff
   b57e8:	2005      	movs	r0, #5
   b57ea:	f7fe fcb9 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b57ee:	9600      	str	r6, [sp, #0]
   b57f0:	683a      	ldr	r2, [r7, #0]
   b57f2:	7821      	ldrb	r1, [r4, #0]
   b57f4:	23ff      	movs	r3, #255	; 0xff
   b57f6:	2006      	movs	r0, #6
   b57f8:	f7fe fcb2 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b57fc:	f242 7010 	movw	r0, #10000	; 0x2710
   b5800:	f002 fe60 	bl	b84c4 <delay>
    if(roll==9) {
   b5804:	682b      	ldr	r3, [r5, #0]
   b5806:	2b09      	cmp	r3, #9
   b5808:	f040 80f8 	bne.w	b59fc <loop+0x124c>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b580c:	f003 fe94 	bl	b9538 <_Z16_fetch_usbserialv>
   b5810:	2203      	movs	r2, #3
   b5812:	4959      	ldr	r1, [pc, #356]	; (b5978 <loop+0x11c8>)
 hueOnOff = true;
   b5814:	4c59      	ldr	r4, [pc, #356]	; (b597c <loop+0x11cc>)
            Serial.printf("turning on the light\n");
   b5816:	f8df a17c 	ldr.w	sl, [pc, #380]	; b5994 <loop+0x11e4>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b581a:	f8df 9184 	ldr.w	r9, [pc, #388]	; b59a0 <loop+0x11f0>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b581e:	f7fe fc6c 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b5822:	2003      	movs	r0, #3
   b5824:	f7fe fe24 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b5828:	f242 7010 	movw	r0, #10000	; 0x2710
   b582c:	f002 fe4a 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b5830:	4853      	ldr	r0, [pc, #332]	; (b5980 <loop+0x11d0>)
   b5832:	2102      	movs	r1, #2
   b5834:	f001 ffe5 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b5838:	2200      	movs	r2, #0
   b583a:	4611      	mov	r1, r2
   b583c:	4850      	ldr	r0, [pc, #320]	; (b5980 <loop+0x11d0>)
   b583e:	f001 ffdb 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, pray, 128, 64, WHITE);
   b5842:	2601      	movs	r6, #1
   b5844:	2340      	movs	r3, #64	; 0x40
   b5846:	2200      	movs	r2, #0
   b5848:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b584c:	2380      	movs	r3, #128	; 0x80
   b584e:	4611      	mov	r1, r2
   b5850:	484b      	ldr	r0, [pc, #300]	; (b5980 <loop+0x11d0>)
   b5852:	9300      	str	r3, [sp, #0]
   b5854:	4b4e      	ldr	r3, [pc, #312]	; (b5990 <loop+0x11e0>)
   b5856:	f001 fecb 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b585a:	4849      	ldr	r0, [pc, #292]	; (b5980 <loop+0x11d0>)
   b585c:	f002 fa36 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5860:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5864:	f002 fe2e 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b5868:	4845      	ldr	r0, [pc, #276]	; (b5980 <loop+0x11d0>)
   b586a:	f002 f9b7 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b586e:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5870:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueOrange, i, 255);
   b5872:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5874:	f003 fe60 	bl	b9538 <_Z16_fetch_usbserialv>
   b5878:	4651      	mov	r1, sl
   b587a:	f7fe fc3e 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b587e:	9600      	str	r6, [sp, #0]
            setHue(2, hueOnOff, HueGreen, i, 255);
   b5880:	f8df 8118 	ldr.w	r8, [pc, #280]	; b599c <loop+0x11ec>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b5884:	f8d9 2000 	ldr.w	r2, [r9]
   b5888:	7821      	ldrb	r1, [r4, #0]
   b588a:	463b      	mov	r3, r7
   b588c:	2001      	movs	r0, #1
   b588e:	f7fe fc67 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b5892:	9600      	str	r6, [sp, #0]
   b5894:	463b      	mov	r3, r7
   b5896:	f8d8 2000 	ldr.w	r2, [r8]
   b589a:	7821      	ldrb	r1, [r4, #0]
   b589c:	2002      	movs	r0, #2
   b589e:	f7fe fc5f 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueOrange, i, 255);
   b58a2:	9600      	str	r6, [sp, #0]
   b58a4:	463b      	mov	r3, r7
   b58a6:	f8d9 2000 	ldr.w	r2, [r9]
   b58aa:	7821      	ldrb	r1, [r4, #0]
   b58ac:	2003      	movs	r0, #3
   b58ae:	f7fe fc57 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b58b2:	9600      	str	r6, [sp, #0]
   b58b4:	463b      	mov	r3, r7
   b58b6:	f8d8 2000 	ldr.w	r2, [r8]
   b58ba:	7821      	ldrb	r1, [r4, #0]
   b58bc:	2004      	movs	r0, #4
   b58be:	f7fe fc4f 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueOrange, i, 255);
   b58c2:	9600      	str	r6, [sp, #0]
   b58c4:	463b      	mov	r3, r7
   b58c6:	f8d9 2000 	ldr.w	r2, [r9]
   b58ca:	7821      	ldrb	r1, [r4, #0]
   b58cc:	2005      	movs	r0, #5
   b58ce:	f7fe fc47 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b58d2:	9600      	str	r6, [sp, #0]
   b58d4:	463b      	mov	r3, r7
   b58d6:	f8d8 2000 	ldr.w	r2, [r8]
   b58da:	7821      	ldrb	r1, [r4, #0]
   b58dc:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b58de:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b58e0:	f7fe fc3e 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b58e4:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b58e8:	d1c3      	bne.n	b5872 <loop+0x10c2>
            Serial.printf("turning on the light\n");
   b58ea:	f8df a0a8 	ldr.w	sl, [pc, #168]	; b5994 <loop+0x11e4>
        for(int i=0; i<=255; i=i+100) {
   b58ee:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b58f0:	f003 fe22 	bl	b9538 <_Z16_fetch_usbserialv>
   b58f4:	4651      	mov	r1, sl
   b58f6:	f7fe fc00 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b58fa:	9600      	str	r6, [sp, #0]
   b58fc:	463b      	mov	r3, r7
   b58fe:	f8d9 2000 	ldr.w	r2, [r9]
   b5902:	7821      	ldrb	r1, [r4, #0]
   b5904:	2001      	movs	r0, #1
   b5906:	f7fe fc2b 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b590a:	9600      	str	r6, [sp, #0]
   b590c:	463b      	mov	r3, r7
   b590e:	f8d8 2000 	ldr.w	r2, [r8]
   b5912:	7821      	ldrb	r1, [r4, #0]
   b5914:	2002      	movs	r0, #2
   b5916:	f7fe fc23 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueOrange, i, 255);
   b591a:	9600      	str	r6, [sp, #0]
   b591c:	463b      	mov	r3, r7
   b591e:	f8d9 2000 	ldr.w	r2, [r9]
   b5922:	7821      	ldrb	r1, [r4, #0]
   b5924:	2003      	movs	r0, #3
   b5926:	f7fe fc1b 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b592a:	9600      	str	r6, [sp, #0]
   b592c:	463b      	mov	r3, r7
   b592e:	f8d8 2000 	ldr.w	r2, [r8]
   b5932:	7821      	ldrb	r1, [r4, #0]
   b5934:	2004      	movs	r0, #4
   b5936:	f7fe fc13 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueOrange, i, 255);
   b593a:	9600      	str	r6, [sp, #0]
   b593c:	463b      	mov	r3, r7
   b593e:	f8d9 2000 	ldr.w	r2, [r9]
   b5942:	7821      	ldrb	r1, [r4, #0]
   b5944:	2005      	movs	r0, #5
   b5946:	f7fe fc0b 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b594a:	9600      	str	r6, [sp, #0]
   b594c:	463b      	mov	r3, r7
   b594e:	f8d8 2000 	ldr.w	r2, [r8]
   b5952:	7821      	ldrb	r1, [r4, #0]
   b5954:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5956:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b5958:	f7fe fc02 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b595c:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b5960:	d1c6      	bne.n	b58f0 <loop+0x1140>
        hueOnOff = false;
   b5962:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5964:	4f08      	ldr	r7, [pc, #32]	; (b5988 <loop+0x11d8>)
        hueOnOff = false;
   b5966:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b5968:	f003 fde6 	bl	b9538 <_Z16_fetch_usbserialv>
   b596c:	4907      	ldr	r1, [pc, #28]	; (b598c <loop+0x11dc>)
   b596e:	f7fe fbc4 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5972:	9600      	str	r6, [sp, #0]
   b5974:	683a      	ldr	r2, [r7, #0]
   b5976:	e015      	b.n	b59a4 <loop+0x11f4>
   b5978:	000bbd2b 	.word	0x000bbd2b
   b597c:	2003e64c 	.word	0x2003e64c
   b5980:	2003e658 	.word	0x2003e658
   b5984:	000bcf2c 	.word	0x000bcf2c
   b5988:	2003e58c 	.word	0x2003e58c
   b598c:	000bbd44 	.word	0x000bbd44
   b5990:	000bd32c 	.word	0x000bd32c
   b5994:	000bbd15 	.word	0x000bbd15
   b5998:	2003e0b8 	.word	0x2003e0b8
   b599c:	2003e0a8 	.word	0x2003e0a8
   b59a0:	2003e0b0 	.word	0x2003e0b0
   b59a4:	7821      	ldrb	r1, [r4, #0]
   b59a6:	23ff      	movs	r3, #255	; 0xff
   b59a8:	2001      	movs	r0, #1
   b59aa:	f7fe fbd9 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b59ae:	9600      	str	r6, [sp, #0]
   b59b0:	683a      	ldr	r2, [r7, #0]
   b59b2:	7821      	ldrb	r1, [r4, #0]
   b59b4:	23ff      	movs	r3, #255	; 0xff
   b59b6:	2002      	movs	r0, #2
   b59b8:	f7fe fbd2 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b59bc:	9600      	str	r6, [sp, #0]
   b59be:	683a      	ldr	r2, [r7, #0]
   b59c0:	7821      	ldrb	r1, [r4, #0]
   b59c2:	23ff      	movs	r3, #255	; 0xff
   b59c4:	2003      	movs	r0, #3
   b59c6:	f7fe fbcb 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b59ca:	9600      	str	r6, [sp, #0]
   b59cc:	683a      	ldr	r2, [r7, #0]
   b59ce:	7821      	ldrb	r1, [r4, #0]
   b59d0:	23ff      	movs	r3, #255	; 0xff
   b59d2:	2004      	movs	r0, #4
   b59d4:	f7fe fbc4 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b59d8:	9600      	str	r6, [sp, #0]
   b59da:	683a      	ldr	r2, [r7, #0]
   b59dc:	7821      	ldrb	r1, [r4, #0]
   b59de:	23ff      	movs	r3, #255	; 0xff
   b59e0:	2005      	movs	r0, #5
   b59e2:	f7fe fbbd 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b59e6:	9600      	str	r6, [sp, #0]
   b59e8:	683a      	ldr	r2, [r7, #0]
   b59ea:	7821      	ldrb	r1, [r4, #0]
   b59ec:	23ff      	movs	r3, #255	; 0xff
   b59ee:	2006      	movs	r0, #6
   b59f0:	f7fe fbb6 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b59f4:	f242 7010 	movw	r0, #10000	; 0x2710
   b59f8:	f002 fd64 	bl	b84c4 <delay>
    if(roll==10) {
   b59fc:	682b      	ldr	r3, [r5, #0]
   b59fe:	2b0a      	cmp	r3, #10
   b5a00:	f040 80d7 	bne.w	b5bb2 <loop+0x1402>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5a04:	f003 fd98 	bl	b9538 <_Z16_fetch_usbserialv>
   b5a08:	2203      	movs	r2, #3
   b5a0a:	49c8      	ldr	r1, [pc, #800]	; (b5d2c <loop+0x157c>)
 hueOnOff = true;
   b5a0c:	4cc8      	ldr	r4, [pc, #800]	; (b5d30 <loop+0x1580>)
            setHue(1, hueOnOff, HueBlue, i, 255);
   b5a0e:	f8df 833c 	ldr.w	r8, [pc, #828]	; b5d4c <loop+0x159c>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5a12:	f7fe fb72 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b5a16:	2003      	movs	r0, #3
   b5a18:	f7fe fd2a 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b5a1c:	f242 7010 	movw	r0, #10000	; 0x2710
   b5a20:	f002 fd50 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b5a24:	48c3      	ldr	r0, [pc, #780]	; (b5d34 <loop+0x1584>)
   b5a26:	2102      	movs	r1, #2
   b5a28:	f001 feeb 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b5a2c:	2200      	movs	r2, #0
   b5a2e:	4611      	mov	r1, r2
   b5a30:	48c0      	ldr	r0, [pc, #768]	; (b5d34 <loop+0x1584>)
   b5a32:	f001 fee1 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, gentle, 128, 64, WHITE);
   b5a36:	2601      	movs	r6, #1
   b5a38:	2340      	movs	r3, #64	; 0x40
   b5a3a:	2200      	movs	r2, #0
   b5a3c:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b5a40:	2380      	movs	r3, #128	; 0x80
   b5a42:	4611      	mov	r1, r2
   b5a44:	48bb      	ldr	r0, [pc, #748]	; (b5d34 <loop+0x1584>)
   b5a46:	9300      	str	r3, [sp, #0]
   b5a48:	4bbb      	ldr	r3, [pc, #748]	; (b5d38 <loop+0x1588>)
   b5a4a:	f001 fdd1 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b5a4e:	48b9      	ldr	r0, [pc, #740]	; (b5d34 <loop+0x1584>)
   b5a50:	f002 f93c 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5a54:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5a58:	f002 fd34 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b5a5c:	48b5      	ldr	r0, [pc, #724]	; (b5d34 <loop+0x1584>)
   b5a5e:	f002 f8bd 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b5a62:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5a64:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueBlue, i, 255);
   b5a66:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5a68:	f003 fd66 	bl	b9538 <_Z16_fetch_usbserialv>
   b5a6c:	49b3      	ldr	r1, [pc, #716]	; (b5d3c <loop+0x158c>)
   b5a6e:	f7fe fb44 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueBlue, i, 255);
   b5a72:	9600      	str	r6, [sp, #0]
   b5a74:	463b      	mov	r3, r7
   b5a76:	f8d8 2000 	ldr.w	r2, [r8]
   b5a7a:	7821      	ldrb	r1, [r4, #0]
   b5a7c:	2001      	movs	r0, #1
   b5a7e:	f7fe fb6f 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 175, i, 255);
   b5a82:	9600      	str	r6, [sp, #0]
   b5a84:	463b      	mov	r3, r7
   b5a86:	7821      	ldrb	r1, [r4, #0]
   b5a88:	22af      	movs	r2, #175	; 0xaf
   b5a8a:	2002      	movs	r0, #2
   b5a8c:	f7fe fb68 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueBlue, i, 255);
   b5a90:	9600      	str	r6, [sp, #0]
   b5a92:	463b      	mov	r3, r7
   b5a94:	f8d8 2000 	ldr.w	r2, [r8]
   b5a98:	7821      	ldrb	r1, [r4, #0]
   b5a9a:	2003      	movs	r0, #3
   b5a9c:	f7fe fb60 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 175, i, 255);
   b5aa0:	9600      	str	r6, [sp, #0]
   b5aa2:	463b      	mov	r3, r7
   b5aa4:	7821      	ldrb	r1, [r4, #0]
   b5aa6:	22af      	movs	r2, #175	; 0xaf
   b5aa8:	2004      	movs	r0, #4
   b5aaa:	f7fe fb59 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueBlue, i, 255);
   b5aae:	9600      	str	r6, [sp, #0]
   b5ab0:	463b      	mov	r3, r7
   b5ab2:	f8d8 2000 	ldr.w	r2, [r8]
   b5ab6:	7821      	ldrb	r1, [r4, #0]
   b5ab8:	2005      	movs	r0, #5
   b5aba:	f7fe fb51 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 175, i, 255);
   b5abe:	9600      	str	r6, [sp, #0]
   b5ac0:	463b      	mov	r3, r7
   b5ac2:	7821      	ldrb	r1, [r4, #0]
   b5ac4:	22af      	movs	r2, #175	; 0xaf
   b5ac6:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5ac8:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, 175, i, 255);
   b5aca:	f7fe fb49 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b5ace:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b5ad2:	d1c8      	bne.n	b5a66 <loop+0x12b6>
            Serial.printf("turning on the light\n");
   b5ad4:	f8df 9264 	ldr.w	r9, [pc, #612]	; b5d3c <loop+0x158c>
        for(int i=0; i<=255; i=i+100) {
   b5ad8:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b5ada:	f003 fd2d 	bl	b9538 <_Z16_fetch_usbserialv>
   b5ade:	4649      	mov	r1, r9
   b5ae0:	f7fe fb0b 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 175, i, 255);
   b5ae4:	9600      	str	r6, [sp, #0]
   b5ae6:	463b      	mov	r3, r7
   b5ae8:	7821      	ldrb	r1, [r4, #0]
   b5aea:	22af      	movs	r2, #175	; 0xaf
   b5aec:	2001      	movs	r0, #1
   b5aee:	f7fe fb37 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueBlue, i, 255);
   b5af2:	9600      	str	r6, [sp, #0]
   b5af4:	463b      	mov	r3, r7
   b5af6:	f8d8 2000 	ldr.w	r2, [r8]
   b5afa:	7821      	ldrb	r1, [r4, #0]
   b5afc:	2002      	movs	r0, #2
   b5afe:	f7fe fb2f 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 175, i, 255);
   b5b02:	9600      	str	r6, [sp, #0]
   b5b04:	463b      	mov	r3, r7
   b5b06:	7821      	ldrb	r1, [r4, #0]
   b5b08:	22af      	movs	r2, #175	; 0xaf
   b5b0a:	2003      	movs	r0, #3
   b5b0c:	f7fe fb28 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueBlue, i, 255);
   b5b10:	9600      	str	r6, [sp, #0]
   b5b12:	463b      	mov	r3, r7
   b5b14:	f8d8 2000 	ldr.w	r2, [r8]
   b5b18:	7821      	ldrb	r1, [r4, #0]
   b5b1a:	2004      	movs	r0, #4
   b5b1c:	f7fe fb20 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 175, i, 255);
   b5b20:	9600      	str	r6, [sp, #0]
   b5b22:	463b      	mov	r3, r7
   b5b24:	7821      	ldrb	r1, [r4, #0]
   b5b26:	22af      	movs	r2, #175	; 0xaf
   b5b28:	2005      	movs	r0, #5
   b5b2a:	f7fe fb19 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueBlue, i, 255);
   b5b2e:	9600      	str	r6, [sp, #0]
   b5b30:	463b      	mov	r3, r7
   b5b32:	f8d8 2000 	ldr.w	r2, [r8]
   b5b36:	7821      	ldrb	r1, [r4, #0]
   b5b38:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5b3a:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueBlue, i, 255);
   b5b3c:	f7fe fb10 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b5b40:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b5b44:	d1c9      	bne.n	b5ada <loop+0x132a>
        hueOnOff = false;
   b5b46:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5b48:	4f7d      	ldr	r7, [pc, #500]	; (b5d40 <loop+0x1590>)
        hueOnOff = false;
   b5b4a:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b5b4c:	f003 fcf4 	bl	b9538 <_Z16_fetch_usbserialv>
   b5b50:	497c      	ldr	r1, [pc, #496]	; (b5d44 <loop+0x1594>)
   b5b52:	f7fe fad2 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5b56:	9600      	str	r6, [sp, #0]
   b5b58:	683a      	ldr	r2, [r7, #0]
   b5b5a:	7821      	ldrb	r1, [r4, #0]
   b5b5c:	23ff      	movs	r3, #255	; 0xff
   b5b5e:	2001      	movs	r0, #1
   b5b60:	f7fe fafe 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b5b64:	9600      	str	r6, [sp, #0]
   b5b66:	683a      	ldr	r2, [r7, #0]
   b5b68:	7821      	ldrb	r1, [r4, #0]
   b5b6a:	23ff      	movs	r3, #255	; 0xff
   b5b6c:	2002      	movs	r0, #2
   b5b6e:	f7fe faf7 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b5b72:	9600      	str	r6, [sp, #0]
   b5b74:	683a      	ldr	r2, [r7, #0]
   b5b76:	7821      	ldrb	r1, [r4, #0]
   b5b78:	23ff      	movs	r3, #255	; 0xff
   b5b7a:	2003      	movs	r0, #3
   b5b7c:	f7fe faf0 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b5b80:	9600      	str	r6, [sp, #0]
   b5b82:	683a      	ldr	r2, [r7, #0]
   b5b84:	7821      	ldrb	r1, [r4, #0]
   b5b86:	23ff      	movs	r3, #255	; 0xff
   b5b88:	2004      	movs	r0, #4
   b5b8a:	f7fe fae9 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b5b8e:	9600      	str	r6, [sp, #0]
   b5b90:	683a      	ldr	r2, [r7, #0]
   b5b92:	7821      	ldrb	r1, [r4, #0]
   b5b94:	23ff      	movs	r3, #255	; 0xff
   b5b96:	2005      	movs	r0, #5
   b5b98:	f7fe fae2 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b5b9c:	9600      	str	r6, [sp, #0]
   b5b9e:	683a      	ldr	r2, [r7, #0]
   b5ba0:	7821      	ldrb	r1, [r4, #0]
   b5ba2:	23ff      	movs	r3, #255	; 0xff
   b5ba4:	2006      	movs	r0, #6
   b5ba6:	f7fe fadb 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5baa:	f242 7010 	movw	r0, #10000	; 0x2710
   b5bae:	f002 fc89 	bl	b84c4 <delay>
    if(roll==11) {
   b5bb2:	682b      	ldr	r3, [r5, #0]
   b5bb4:	2b0b      	cmp	r3, #11
   b5bb6:	f040 80ec 	bne.w	b5d92 <loop+0x15e2>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5bba:	f003 fcbd 	bl	b9538 <_Z16_fetch_usbserialv>
   b5bbe:	2203      	movs	r2, #3
   b5bc0:	495a      	ldr	r1, [pc, #360]	; (b5d2c <loop+0x157c>)
 hueOnOff = true;
   b5bc2:	4c5b      	ldr	r4, [pc, #364]	; (b5d30 <loop+0x1580>)
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5bc4:	f8df 8188 	ldr.w	r8, [pc, #392]	; b5d50 <loop+0x15a0>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5bc8:	f7fe fa97 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b5bcc:	2003      	movs	r0, #3
   b5bce:	f7fe fc4f 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b5bd2:	f242 7010 	movw	r0, #10000	; 0x2710
   b5bd6:	f002 fc75 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b5bda:	4856      	ldr	r0, [pc, #344]	; (b5d34 <loop+0x1584>)
   b5bdc:	2102      	movs	r1, #2
   b5bde:	f001 fe10 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b5be2:	2200      	movs	r2, #0
   b5be4:	4611      	mov	r1, r2
   b5be6:	4853      	ldr	r0, [pc, #332]	; (b5d34 <loop+0x1584>)
   b5be8:	f001 fe06 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, goodLuck, 128, 64, WHITE);
   b5bec:	2601      	movs	r6, #1
   b5bee:	2340      	movs	r3, #64	; 0x40
   b5bf0:	2200      	movs	r2, #0
   b5bf2:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b5bf6:	2380      	movs	r3, #128	; 0x80
   b5bf8:	4611      	mov	r1, r2
   b5bfa:	484e      	ldr	r0, [pc, #312]	; (b5d34 <loop+0x1584>)
   b5bfc:	9300      	str	r3, [sp, #0]
   b5bfe:	4b52      	ldr	r3, [pc, #328]	; (b5d48 <loop+0x1598>)
   b5c00:	f001 fcf6 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b5c04:	484b      	ldr	r0, [pc, #300]	; (b5d34 <loop+0x1584>)
   b5c06:	f002 f861 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5c0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5c0e:	f002 fc59 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b5c12:	4848      	ldr	r0, [pc, #288]	; (b5d34 <loop+0x1584>)
   b5c14:	f001 ffe2 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b5c18:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5c1a:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5c1c:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5c1e:	f003 fc8b 	bl	b9538 <_Z16_fetch_usbserialv>
   b5c22:	4946      	ldr	r1, [pc, #280]	; (b5d3c <loop+0x158c>)
   b5c24:	f7fe fa69 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5c28:	9600      	str	r6, [sp, #0]
   b5c2a:	463b      	mov	r3, r7
   b5c2c:	f8d8 2000 	ldr.w	r2, [r8]
   b5c30:	7821      	ldrb	r1, [r4, #0]
   b5c32:	2001      	movs	r0, #1
   b5c34:	f7fe fa94 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 195, i, 255);
   b5c38:	9600      	str	r6, [sp, #0]
   b5c3a:	463b      	mov	r3, r7
   b5c3c:	7821      	ldrb	r1, [r4, #0]
   b5c3e:	22c3      	movs	r2, #195	; 0xc3
   b5c40:	2002      	movs	r0, #2
   b5c42:	f7fe fa8d 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueViolet, i, 255);
   b5c46:	9600      	str	r6, [sp, #0]
   b5c48:	463b      	mov	r3, r7
   b5c4a:	f8d8 2000 	ldr.w	r2, [r8]
   b5c4e:	7821      	ldrb	r1, [r4, #0]
   b5c50:	2003      	movs	r0, #3
   b5c52:	f7fe fa85 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 195, i, 255);
   b5c56:	9600      	str	r6, [sp, #0]
   b5c58:	463b      	mov	r3, r7
   b5c5a:	7821      	ldrb	r1, [r4, #0]
   b5c5c:	22c3      	movs	r2, #195	; 0xc3
   b5c5e:	2004      	movs	r0, #4
   b5c60:	f7fe fa7e 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueViolet, i, 255);
   b5c64:	9600      	str	r6, [sp, #0]
   b5c66:	463b      	mov	r3, r7
   b5c68:	f8d8 2000 	ldr.w	r2, [r8]
   b5c6c:	7821      	ldrb	r1, [r4, #0]
   b5c6e:	2005      	movs	r0, #5
   b5c70:	f7fe fa76 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 195, i, 255);
   b5c74:	9600      	str	r6, [sp, #0]
   b5c76:	463b      	mov	r3, r7
   b5c78:	7821      	ldrb	r1, [r4, #0]
   b5c7a:	22c3      	movs	r2, #195	; 0xc3
   b5c7c:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5c7e:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, 195, i, 255);
   b5c80:	f7fe fa6e 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b5c84:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b5c88:	d1c8      	bne.n	b5c1c <loop+0x146c>
            Serial.printf("turning on the light\n");
   b5c8a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; b5d3c <loop+0x158c>
        for(int i=0; i<=255; i=i+100) {
   b5c8e:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b5c90:	f003 fc52 	bl	b9538 <_Z16_fetch_usbserialv>
   b5c94:	4649      	mov	r1, r9
   b5c96:	f7fe fa30 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 195, i, 255);
   b5c9a:	9600      	str	r6, [sp, #0]
   b5c9c:	463b      	mov	r3, r7
   b5c9e:	7821      	ldrb	r1, [r4, #0]
   b5ca0:	22c3      	movs	r2, #195	; 0xc3
   b5ca2:	2001      	movs	r0, #1
   b5ca4:	f7fe fa5c 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueViolet, i, 255);
   b5ca8:	9600      	str	r6, [sp, #0]
   b5caa:	463b      	mov	r3, r7
   b5cac:	f8d8 2000 	ldr.w	r2, [r8]
   b5cb0:	7821      	ldrb	r1, [r4, #0]
   b5cb2:	2002      	movs	r0, #2
   b5cb4:	f7fe fa54 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 195, i, 255);
   b5cb8:	9600      	str	r6, [sp, #0]
   b5cba:	463b      	mov	r3, r7
   b5cbc:	7821      	ldrb	r1, [r4, #0]
   b5cbe:	22c3      	movs	r2, #195	; 0xc3
   b5cc0:	2003      	movs	r0, #3
   b5cc2:	f7fe fa4d 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueViolet, i, 255);
   b5cc6:	9600      	str	r6, [sp, #0]
   b5cc8:	463b      	mov	r3, r7
   b5cca:	f8d8 2000 	ldr.w	r2, [r8]
   b5cce:	7821      	ldrb	r1, [r4, #0]
   b5cd0:	2004      	movs	r0, #4
   b5cd2:	f7fe fa45 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 195, i, 255);
   b5cd6:	9600      	str	r6, [sp, #0]
   b5cd8:	463b      	mov	r3, r7
   b5cda:	7821      	ldrb	r1, [r4, #0]
   b5cdc:	22c3      	movs	r2, #195	; 0xc3
   b5cde:	2005      	movs	r0, #5
   b5ce0:	f7fe fa3e 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueViolet, i, 255);
   b5ce4:	9600      	str	r6, [sp, #0]
   b5ce6:	463b      	mov	r3, r7
   b5ce8:	f8d8 2000 	ldr.w	r2, [r8]
   b5cec:	7821      	ldrb	r1, [r4, #0]
   b5cee:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5cf0:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueViolet, i, 255);
   b5cf2:	f7fe fa35 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b5cf6:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b5cfa:	d1c9      	bne.n	b5c90 <loop+0x14e0>
        hueOnOff = false;
   b5cfc:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5cfe:	4f10      	ldr	r7, [pc, #64]	; (b5d40 <loop+0x1590>)
        hueOnOff = false;
   b5d00:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b5d02:	f003 fc19 	bl	b9538 <_Z16_fetch_usbserialv>
   b5d06:	490f      	ldr	r1, [pc, #60]	; (b5d44 <loop+0x1594>)
   b5d08:	f7fe f9f7 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5d0c:	9600      	str	r6, [sp, #0]
   b5d0e:	683a      	ldr	r2, [r7, #0]
   b5d10:	7821      	ldrb	r1, [r4, #0]
   b5d12:	23ff      	movs	r3, #255	; 0xff
   b5d14:	2001      	movs	r0, #1
   b5d16:	f7fe fa23 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b5d1a:	9600      	str	r6, [sp, #0]
   b5d1c:	683a      	ldr	r2, [r7, #0]
   b5d1e:	7821      	ldrb	r1, [r4, #0]
   b5d20:	23ff      	movs	r3, #255	; 0xff
   b5d22:	2002      	movs	r0, #2
   b5d24:	f7fe fa1c 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b5d28:	9600      	str	r6, [sp, #0]
   b5d2a:	e013      	b.n	b5d54 <loop+0x15a4>
   b5d2c:	000bbd2b 	.word	0x000bbd2b
   b5d30:	2003e64c 	.word	0x2003e64c
   b5d34:	2003e658 	.word	0x2003e658
   b5d38:	000bf32c 	.word	0x000bf32c
   b5d3c:	000bbd15 	.word	0x000bbd15
   b5d40:	2003e58c 	.word	0x2003e58c
   b5d44:	000bbd44 	.word	0x000bbd44
   b5d48:	000bfb2c 	.word	0x000bfb2c
   b5d4c:	2003e0a4 	.word	0x2003e0a4
   b5d50:	2003e0b4 	.word	0x2003e0b4
   b5d54:	683a      	ldr	r2, [r7, #0]
   b5d56:	7821      	ldrb	r1, [r4, #0]
   b5d58:	23ff      	movs	r3, #255	; 0xff
   b5d5a:	2003      	movs	r0, #3
   b5d5c:	f7fe fa00 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b5d60:	9600      	str	r6, [sp, #0]
   b5d62:	683a      	ldr	r2, [r7, #0]
   b5d64:	7821      	ldrb	r1, [r4, #0]
   b5d66:	23ff      	movs	r3, #255	; 0xff
   b5d68:	2004      	movs	r0, #4
   b5d6a:	f7fe f9f9 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b5d6e:	9600      	str	r6, [sp, #0]
   b5d70:	683a      	ldr	r2, [r7, #0]
   b5d72:	7821      	ldrb	r1, [r4, #0]
   b5d74:	23ff      	movs	r3, #255	; 0xff
   b5d76:	2005      	movs	r0, #5
   b5d78:	f7fe f9f2 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b5d7c:	9600      	str	r6, [sp, #0]
   b5d7e:	683a      	ldr	r2, [r7, #0]
   b5d80:	7821      	ldrb	r1, [r4, #0]
   b5d82:	23ff      	movs	r3, #255	; 0xff
   b5d84:	2006      	movs	r0, #6
   b5d86:	f7fe f9eb 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5d8a:	f242 7010 	movw	r0, #10000	; 0x2710
   b5d8e:	f002 fb99 	bl	b84c4 <delay>
    if(roll==12) {
   b5d92:	682b      	ldr	r3, [r5, #0]
   b5d94:	2b0c      	cmp	r3, #12
   b5d96:	f040 80dd 	bne.w	b5f54 <loop+0x17a4>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5d9a:	f003 fbcd 	bl	b9538 <_Z16_fetch_usbserialv>
   b5d9e:	2203      	movs	r2, #3
   b5da0:	49ca      	ldr	r1, [pc, #808]	; (b60cc <loop+0x191c>)
 hueOnOff = true;
   b5da2:	4ccb      	ldr	r4, [pc, #812]	; (b60d0 <loop+0x1920>)
            setHue(1, hueOnOff, HueGreen, i, 255);
   b5da4:	f8df 8344 	ldr.w	r8, [pc, #836]	; b60ec <loop+0x193c>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5da8:	f7fe f9a7 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b5dac:	2003      	movs	r0, #3
   b5dae:	f7fe fb5f 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b5db2:	f242 7010 	movw	r0, #10000	; 0x2710
   b5db6:	f002 fb85 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b5dba:	48c6      	ldr	r0, [pc, #792]	; (b60d4 <loop+0x1924>)
   b5dbc:	2102      	movs	r1, #2
   b5dbe:	f001 fd20 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b5dc2:	2200      	movs	r2, #0
   b5dc4:	4611      	mov	r1, r2
   b5dc6:	48c3      	ldr	r0, [pc, #780]	; (b60d4 <loop+0x1924>)
   b5dc8:	f001 fd16 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, skull, 128, 64, WHITE);
   b5dcc:	2601      	movs	r6, #1
   b5dce:	2340      	movs	r3, #64	; 0x40
   b5dd0:	2200      	movs	r2, #0
   b5dd2:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b5dd6:	2380      	movs	r3, #128	; 0x80
   b5dd8:	4611      	mov	r1, r2
   b5dda:	48be      	ldr	r0, [pc, #760]	; (b60d4 <loop+0x1924>)
   b5ddc:	9300      	str	r3, [sp, #0]
   b5dde:	4bbe      	ldr	r3, [pc, #760]	; (b60d8 <loop+0x1928>)
   b5de0:	f001 fc06 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b5de4:	48bb      	ldr	r0, [pc, #748]	; (b60d4 <loop+0x1924>)
   b5de6:	f001 ff71 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5dea:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5dee:	f002 fb69 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b5df2:	48b8      	ldr	r0, [pc, #736]	; (b60d4 <loop+0x1924>)
   b5df4:	f001 fef2 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b5df8:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5dfa:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueGreen, i, 255);
   b5dfc:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5dfe:	f003 fb9b 	bl	b9538 <_Z16_fetch_usbserialv>
   b5e02:	49b6      	ldr	r1, [pc, #728]	; (b60dc <loop+0x192c>)
   b5e04:	f7fe f979 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b5e08:	9600      	str	r6, [sp, #0]
   b5e0a:	463b      	mov	r3, r7
   b5e0c:	f8d8 2000 	ldr.w	r2, [r8]
   b5e10:	7821      	ldrb	r1, [r4, #0]
   b5e12:	2001      	movs	r0, #1
   b5e14:	f7fe f9a4 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 315, i, 255);
   b5e18:	9600      	str	r6, [sp, #0]
   b5e1a:	463b      	mov	r3, r7
   b5e1c:	7821      	ldrb	r1, [r4, #0]
   b5e1e:	f240 123b 	movw	r2, #315	; 0x13b
   b5e22:	2002      	movs	r0, #2
   b5e24:	f7fe f99c 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b5e28:	9600      	str	r6, [sp, #0]
   b5e2a:	463b      	mov	r3, r7
   b5e2c:	f8d8 2000 	ldr.w	r2, [r8]
   b5e30:	7821      	ldrb	r1, [r4, #0]
   b5e32:	2003      	movs	r0, #3
   b5e34:	f7fe f994 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 315, i, 255);
   b5e38:	9600      	str	r6, [sp, #0]
   b5e3a:	463b      	mov	r3, r7
   b5e3c:	7821      	ldrb	r1, [r4, #0]
   b5e3e:	f240 123b 	movw	r2, #315	; 0x13b
   b5e42:	2004      	movs	r0, #4
   b5e44:	f7fe f98c 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b5e48:	9600      	str	r6, [sp, #0]
   b5e4a:	463b      	mov	r3, r7
   b5e4c:	f8d8 2000 	ldr.w	r2, [r8]
   b5e50:	7821      	ldrb	r1, [r4, #0]
   b5e52:	2005      	movs	r0, #5
   b5e54:	f7fe f984 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 315, i, 255);
   b5e58:	9600      	str	r6, [sp, #0]
   b5e5a:	463b      	mov	r3, r7
   b5e5c:	7821      	ldrb	r1, [r4, #0]
   b5e5e:	f240 123b 	movw	r2, #315	; 0x13b
   b5e62:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b5e64:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, 315, i, 255);
   b5e66:	f7fe f97b 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b5e6a:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b5e6e:	d1c5      	bne.n	b5dfc <loop+0x164c>
            Serial.printf("turning on the light\n");
   b5e70:	f8df 9268 	ldr.w	r9, [pc, #616]	; b60dc <loop+0x192c>
        for(int i=0; i<=255; i=i+100) {
   b5e74:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b5e76:	f003 fb5f 	bl	b9538 <_Z16_fetch_usbserialv>
   b5e7a:	4649      	mov	r1, r9
   b5e7c:	f7fe f93d 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 315, i, 255);
   b5e80:	9600      	str	r6, [sp, #0]
   b5e82:	463b      	mov	r3, r7
   b5e84:	7821      	ldrb	r1, [r4, #0]
   b5e86:	f240 123b 	movw	r2, #315	; 0x13b
   b5e8a:	2001      	movs	r0, #1
   b5e8c:	f7fe f968 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b5e90:	9600      	str	r6, [sp, #0]
   b5e92:	463b      	mov	r3, r7
   b5e94:	f8d8 2000 	ldr.w	r2, [r8]
   b5e98:	7821      	ldrb	r1, [r4, #0]
   b5e9a:	2002      	movs	r0, #2
   b5e9c:	f7fe f960 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 315, i, 255);
   b5ea0:	9600      	str	r6, [sp, #0]
   b5ea2:	463b      	mov	r3, r7
   b5ea4:	7821      	ldrb	r1, [r4, #0]
   b5ea6:	f240 123b 	movw	r2, #315	; 0x13b
   b5eaa:	2003      	movs	r0, #3
   b5eac:	f7fe f958 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b5eb0:	9600      	str	r6, [sp, #0]
   b5eb2:	463b      	mov	r3, r7
   b5eb4:	f8d8 2000 	ldr.w	r2, [r8]
   b5eb8:	7821      	ldrb	r1, [r4, #0]
   b5eba:	2004      	movs	r0, #4
   b5ebc:	f7fe f950 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 315, i, 255);
   b5ec0:	9600      	str	r6, [sp, #0]
   b5ec2:	463b      	mov	r3, r7
   b5ec4:	7821      	ldrb	r1, [r4, #0]
   b5ec6:	f240 123b 	movw	r2, #315	; 0x13b
   b5eca:	2005      	movs	r0, #5
   b5ecc:	f7fe f948 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b5ed0:	9600      	str	r6, [sp, #0]
   b5ed2:	463b      	mov	r3, r7
   b5ed4:	f8d8 2000 	ldr.w	r2, [r8]
   b5ed8:	7821      	ldrb	r1, [r4, #0]
   b5eda:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b5edc:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b5ede:	f7fe f93f 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b5ee2:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b5ee6:	d1c6      	bne.n	b5e76 <loop+0x16c6>
        hueOnOff = false;
   b5ee8:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5eea:	4f7d      	ldr	r7, [pc, #500]	; (b60e0 <loop+0x1930>)
        hueOnOff = false;
   b5eec:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b5eee:	f003 fb23 	bl	b9538 <_Z16_fetch_usbserialv>
   b5ef2:	497c      	ldr	r1, [pc, #496]	; (b60e4 <loop+0x1934>)
   b5ef4:	f7fe f901 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b5ef8:	9600      	str	r6, [sp, #0]
   b5efa:	683a      	ldr	r2, [r7, #0]
   b5efc:	7821      	ldrb	r1, [r4, #0]
   b5efe:	23ff      	movs	r3, #255	; 0xff
   b5f00:	2001      	movs	r0, #1
   b5f02:	f7fe f92d 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b5f06:	9600      	str	r6, [sp, #0]
   b5f08:	683a      	ldr	r2, [r7, #0]
   b5f0a:	7821      	ldrb	r1, [r4, #0]
   b5f0c:	23ff      	movs	r3, #255	; 0xff
   b5f0e:	2002      	movs	r0, #2
   b5f10:	f7fe f926 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b5f14:	9600      	str	r6, [sp, #0]
   b5f16:	683a      	ldr	r2, [r7, #0]
   b5f18:	7821      	ldrb	r1, [r4, #0]
   b5f1a:	23ff      	movs	r3, #255	; 0xff
   b5f1c:	2003      	movs	r0, #3
   b5f1e:	f7fe f91f 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b5f22:	9600      	str	r6, [sp, #0]
   b5f24:	683a      	ldr	r2, [r7, #0]
   b5f26:	7821      	ldrb	r1, [r4, #0]
   b5f28:	23ff      	movs	r3, #255	; 0xff
   b5f2a:	2004      	movs	r0, #4
   b5f2c:	f7fe f918 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b5f30:	9600      	str	r6, [sp, #0]
   b5f32:	683a      	ldr	r2, [r7, #0]
   b5f34:	7821      	ldrb	r1, [r4, #0]
   b5f36:	23ff      	movs	r3, #255	; 0xff
   b5f38:	2005      	movs	r0, #5
   b5f3a:	f7fe f911 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b5f3e:	9600      	str	r6, [sp, #0]
   b5f40:	683a      	ldr	r2, [r7, #0]
   b5f42:	7821      	ldrb	r1, [r4, #0]
   b5f44:	23ff      	movs	r3, #255	; 0xff
   b5f46:	2006      	movs	r0, #6
   b5f48:	f7fe f90a 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b5f4c:	f242 7010 	movw	r0, #10000	; 0x2710
   b5f50:	f002 fab8 	bl	b84c4 <delay>
    if(roll==13) {
   b5f54:	682b      	ldr	r3, [r5, #0]
   b5f56:	2b0d      	cmp	r3, #13
   b5f58:	f040 80f4 	bne.w	b6144 <loop+0x1994>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5f5c:	f003 faec 	bl	b9538 <_Z16_fetch_usbserialv>
   b5f60:	2203      	movs	r2, #3
   b5f62:	495a      	ldr	r1, [pc, #360]	; (b60cc <loop+0x191c>)
 hueOnOff = true;
   b5f64:	4c5a      	ldr	r4, [pc, #360]	; (b60d0 <loop+0x1920>)
            Serial.printf("turning on the light\n");
   b5f66:	f8df a174 	ldr.w	sl, [pc, #372]	; b60dc <loop+0x192c>
            setHue(2, hueOnOff, HueBlue, i, 255);
   b5f6a:	f8df 8184 	ldr.w	r8, [pc, #388]	; b60f0 <loop+0x1940>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b5f6e:	f7fe f8c4 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b5f72:	2003      	movs	r0, #3
   b5f74:	f7fe fa7c 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b5f78:	f242 7010 	movw	r0, #10000	; 0x2710
   b5f7c:	f002 faa2 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b5f80:	4854      	ldr	r0, [pc, #336]	; (b60d4 <loop+0x1924>)
   b5f82:	2102      	movs	r1, #2
   b5f84:	f001 fc3d 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b5f88:	2200      	movs	r2, #0
   b5f8a:	4611      	mov	r1, r2
   b5f8c:	4851      	ldr	r0, [pc, #324]	; (b60d4 <loop+0x1924>)
   b5f8e:	f001 fc33 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, lucky, 128, 64, WHITE);
   b5f92:	2601      	movs	r6, #1
   b5f94:	2340      	movs	r3, #64	; 0x40
   b5f96:	2200      	movs	r2, #0
   b5f98:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b5f9c:	2380      	movs	r3, #128	; 0x80
   b5f9e:	4611      	mov	r1, r2
   b5fa0:	484c      	ldr	r0, [pc, #304]	; (b60d4 <loop+0x1924>)
   b5fa2:	9300      	str	r3, [sp, #0]
   b5fa4:	4b50      	ldr	r3, [pc, #320]	; (b60e8 <loop+0x1938>)
   b5fa6:	f001 fb23 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b5faa:	484a      	ldr	r0, [pc, #296]	; (b60d4 <loop+0x1924>)
   b5fac:	f001 fe8e 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b5fb0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5fb4:	f002 fa86 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b5fb8:	4846      	ldr	r0, [pc, #280]	; (b60d4 <loop+0x1924>)
   b5fba:	f001 fe0f 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b5fbe:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b5fc0:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5fc2:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b5fc4:	f003 fab8 	bl	b9538 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5fc8:	f8df 9128 	ldr.w	r9, [pc, #296]	; b60f4 <loop+0x1944>
            Serial.printf("turning on the light\n");
   b5fcc:	4651      	mov	r1, sl
   b5fce:	f7fe f894 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueViolet, i, 255);
   b5fd2:	9600      	str	r6, [sp, #0]
   b5fd4:	463b      	mov	r3, r7
   b5fd6:	f8d9 2000 	ldr.w	r2, [r9]
   b5fda:	7821      	ldrb	r1, [r4, #0]
   b5fdc:	2001      	movs	r0, #1
   b5fde:	f7fe f8bf 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueBlue, i, 255);
   b5fe2:	9600      	str	r6, [sp, #0]
   b5fe4:	463b      	mov	r3, r7
   b5fe6:	f8d8 2000 	ldr.w	r2, [r8]
   b5fea:	7821      	ldrb	r1, [r4, #0]
   b5fec:	2002      	movs	r0, #2
   b5fee:	f7fe f8b7 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 195, i, 255);
   b5ff2:	9600      	str	r6, [sp, #0]
   b5ff4:	463b      	mov	r3, r7
   b5ff6:	7821      	ldrb	r1, [r4, #0]
   b5ff8:	22c3      	movs	r2, #195	; 0xc3
   b5ffa:	2003      	movs	r0, #3
   b5ffc:	f7fe f8b0 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueViolet, i, 255);
   b6000:	9600      	str	r6, [sp, #0]
   b6002:	463b      	mov	r3, r7
   b6004:	f8d9 2000 	ldr.w	r2, [r9]
   b6008:	7821      	ldrb	r1, [r4, #0]
   b600a:	2004      	movs	r0, #4
   b600c:	f7fe f8a8 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueBlue, i, 255);
   b6010:	9600      	str	r6, [sp, #0]
   b6012:	463b      	mov	r3, r7
   b6014:	f8d8 2000 	ldr.w	r2, [r8]
   b6018:	7821      	ldrb	r1, [r4, #0]
   b601a:	2005      	movs	r0, #5
   b601c:	f7fe f8a0 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 195, i, 255);
   b6020:	9600      	str	r6, [sp, #0]
   b6022:	463b      	mov	r3, r7
   b6024:	7821      	ldrb	r1, [r4, #0]
   b6026:	22c3      	movs	r2, #195	; 0xc3
   b6028:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b602a:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, 195, i, 255);
   b602c:	f7fe f898 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b6030:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b6034:	d1c5      	bne.n	b5fc2 <loop+0x1812>
            Serial.printf("turning on the light\n");
   b6036:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b60dc <loop+0x192c>
        for(int i=0; i<=255; i=i+100) {
   b603a:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b603c:	f003 fa7c 	bl	b9538 <_Z16_fetch_usbserialv>
   b6040:	4651      	mov	r1, sl
   b6042:	f7fe f85a 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 195, i, 255);
   b6046:	9600      	str	r6, [sp, #0]
   b6048:	463b      	mov	r3, r7
   b604a:	7821      	ldrb	r1, [r4, #0]
   b604c:	22c3      	movs	r2, #195	; 0xc3
   b604e:	2001      	movs	r0, #1
   b6050:	f7fe f886 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueViolet, i, 255);
   b6054:	9600      	str	r6, [sp, #0]
   b6056:	463b      	mov	r3, r7
   b6058:	f8d9 2000 	ldr.w	r2, [r9]
   b605c:	7821      	ldrb	r1, [r4, #0]
   b605e:	2002      	movs	r0, #2
   b6060:	f7fe f87e 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueBlue, i, 255);
   b6064:	9600      	str	r6, [sp, #0]
   b6066:	463b      	mov	r3, r7
   b6068:	f8d8 2000 	ldr.w	r2, [r8]
   b606c:	7821      	ldrb	r1, [r4, #0]
   b606e:	2003      	movs	r0, #3
   b6070:	f7fe f876 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 195, i, 255);
   b6074:	9600      	str	r6, [sp, #0]
   b6076:	463b      	mov	r3, r7
   b6078:	7821      	ldrb	r1, [r4, #0]
   b607a:	22c3      	movs	r2, #195	; 0xc3
   b607c:	2004      	movs	r0, #4
   b607e:	f7fe f86f 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueViolet, i, 255);
   b6082:	9600      	str	r6, [sp, #0]
   b6084:	463b      	mov	r3, r7
   b6086:	f8d9 2000 	ldr.w	r2, [r9]
   b608a:	7821      	ldrb	r1, [r4, #0]
   b608c:	2005      	movs	r0, #5
   b608e:	f7fe f867 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueBlue, i, 255);
   b6092:	9600      	str	r6, [sp, #0]
   b6094:	463b      	mov	r3, r7
   b6096:	f8d8 2000 	ldr.w	r2, [r8]
   b609a:	7821      	ldrb	r1, [r4, #0]
   b609c:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b609e:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueBlue, i, 255);
   b60a0:	f7fe f85e 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b60a4:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b60a8:	d1c8      	bne.n	b603c <loop+0x188c>
        hueOnOff = false;
   b60aa:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b60ac:	4f0c      	ldr	r7, [pc, #48]	; (b60e0 <loop+0x1930>)
        hueOnOff = false;
   b60ae:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b60b0:	f003 fa42 	bl	b9538 <_Z16_fetch_usbserialv>
   b60b4:	490b      	ldr	r1, [pc, #44]	; (b60e4 <loop+0x1934>)
   b60b6:	f7fe f820 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b60ba:	9600      	str	r6, [sp, #0]
   b60bc:	683a      	ldr	r2, [r7, #0]
   b60be:	7821      	ldrb	r1, [r4, #0]
   b60c0:	23ff      	movs	r3, #255	; 0xff
   b60c2:	2001      	movs	r0, #1
   b60c4:	f7fe f84c 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b60c8:	9600      	str	r6, [sp, #0]
   b60ca:	e015      	b.n	b60f8 <loop+0x1948>
   b60cc:	000bbd2b 	.word	0x000bbd2b
   b60d0:	2003e64c 	.word	0x2003e64c
   b60d4:	2003e658 	.word	0x2003e658
   b60d8:	000beb2c 	.word	0x000beb2c
   b60dc:	000bbd15 	.word	0x000bbd15
   b60e0:	2003e58c 	.word	0x2003e58c
   b60e4:	000bbd44 	.word	0x000bbd44
   b60e8:	000be72c 	.word	0x000be72c
   b60ec:	2003e0a8 	.word	0x2003e0a8
   b60f0:	2003e0a4 	.word	0x2003e0a4
   b60f4:	2003e0b4 	.word	0x2003e0b4
   b60f8:	683a      	ldr	r2, [r7, #0]
   b60fa:	7821      	ldrb	r1, [r4, #0]
   b60fc:	23ff      	movs	r3, #255	; 0xff
   b60fe:	2002      	movs	r0, #2
   b6100:	f7fe f82e 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b6104:	9600      	str	r6, [sp, #0]
   b6106:	683a      	ldr	r2, [r7, #0]
   b6108:	7821      	ldrb	r1, [r4, #0]
   b610a:	23ff      	movs	r3, #255	; 0xff
   b610c:	2003      	movs	r0, #3
   b610e:	f7fe f827 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b6112:	9600      	str	r6, [sp, #0]
   b6114:	683a      	ldr	r2, [r7, #0]
   b6116:	7821      	ldrb	r1, [r4, #0]
   b6118:	23ff      	movs	r3, #255	; 0xff
   b611a:	2004      	movs	r0, #4
   b611c:	f7fe f820 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b6120:	9600      	str	r6, [sp, #0]
   b6122:	683a      	ldr	r2, [r7, #0]
   b6124:	7821      	ldrb	r1, [r4, #0]
   b6126:	23ff      	movs	r3, #255	; 0xff
   b6128:	2005      	movs	r0, #5
   b612a:	f7fe f819 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b612e:	9600      	str	r6, [sp, #0]
   b6130:	683a      	ldr	r2, [r7, #0]
   b6132:	7821      	ldrb	r1, [r4, #0]
   b6134:	23ff      	movs	r3, #255	; 0xff
   b6136:	2006      	movs	r0, #6
   b6138:	f7fe f812 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b613c:	f242 7010 	movw	r0, #10000	; 0x2710
   b6140:	f002 f9c0 	bl	b84c4 <delay>
    if(roll==14) {
   b6144:	682b      	ldr	r3, [r5, #0]
   b6146:	2b0e      	cmp	r3, #14
   b6148:	f040 80e1 	bne.w	b630e <loop+0x1b5e>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b614c:	f003 f9f4 	bl	b9538 <_Z16_fetch_usbserialv>
   b6150:	2203      	movs	r2, #3
   b6152:	49cd      	ldr	r1, [pc, #820]	; (b6488 <loop+0x1cd8>)
 hueOnOff = true;
   b6154:	4ccd      	ldr	r4, [pc, #820]	; (b648c <loop+0x1cdc>)
            Serial.printf("turning on the light\n");
   b6156:	f8df a34c 	ldr.w	sl, [pc, #844]	; b64a4 <loop+0x1cf4>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b615a:	f8df 834c 	ldr.w	r8, [pc, #844]	; b64a8 <loop+0x1cf8>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b615e:	f7fd ffcc 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b6162:	2003      	movs	r0, #3
   b6164:	f7fe f984 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b6168:	f242 7010 	movw	r0, #10000	; 0x2710
   b616c:	f002 f9aa 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b6170:	48c7      	ldr	r0, [pc, #796]	; (b6490 <loop+0x1ce0>)
   b6172:	2102      	movs	r1, #2
   b6174:	f001 fb45 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b6178:	2200      	movs	r2, #0
   b617a:	4611      	mov	r1, r2
   b617c:	48c4      	ldr	r0, [pc, #784]	; (b6490 <loop+0x1ce0>)
   b617e:	f001 fb3b 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, goodIdea, 128, 64, WHITE);
   b6182:	2601      	movs	r6, #1
   b6184:	2340      	movs	r3, #64	; 0x40
   b6186:	2200      	movs	r2, #0
   b6188:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b618c:	2380      	movs	r3, #128	; 0x80
   b618e:	4611      	mov	r1, r2
   b6190:	48bf      	ldr	r0, [pc, #764]	; (b6490 <loop+0x1ce0>)
   b6192:	9300      	str	r3, [sp, #0]
   b6194:	4bbf      	ldr	r3, [pc, #764]	; (b6494 <loop+0x1ce4>)
   b6196:	f001 fa2b 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b619a:	48bd      	ldr	r0, [pc, #756]	; (b6490 <loop+0x1ce0>)
   b619c:	f001 fd96 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b61a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b61a4:	f002 f98e 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b61a8:	48b9      	ldr	r0, [pc, #740]	; (b6490 <loop+0x1ce0>)
   b61aa:	f001 fd17 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b61ae:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b61b0:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueOrange, i, 255);
   b61b2:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b61b4:	f003 f9c0 	bl	b9538 <_Z16_fetch_usbserialv>
   b61b8:	4651      	mov	r1, sl
   b61ba:	f7fd ff9e 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b61be:	9600      	str	r6, [sp, #0]
            setHue(2, hueOnOff, HueViolet, i, 255);
   b61c0:	f8df 92e8 	ldr.w	r9, [pc, #744]	; b64ac <loop+0x1cfc>
            setHue(1, hueOnOff, HueOrange, i, 255);
   b61c4:	f8d8 2000 	ldr.w	r2, [r8]
   b61c8:	7821      	ldrb	r1, [r4, #0]
   b61ca:	463b      	mov	r3, r7
   b61cc:	2001      	movs	r0, #1
   b61ce:	f7fd ffc7 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueViolet, i, 255);
   b61d2:	9600      	str	r6, [sp, #0]
   b61d4:	463b      	mov	r3, r7
   b61d6:	f8d9 2000 	ldr.w	r2, [r9]
   b61da:	7821      	ldrb	r1, [r4, #0]
   b61dc:	2002      	movs	r0, #2
   b61de:	f7fd ffbf 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueOrange, i, 255);
   b61e2:	9600      	str	r6, [sp, #0]
   b61e4:	463b      	mov	r3, r7
   b61e6:	f8d8 2000 	ldr.w	r2, [r8]
   b61ea:	7821      	ldrb	r1, [r4, #0]
   b61ec:	2003      	movs	r0, #3
   b61ee:	f7fd ffb7 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueViolet, i, 255);
   b61f2:	9600      	str	r6, [sp, #0]
   b61f4:	463b      	mov	r3, r7
   b61f6:	f8d9 2000 	ldr.w	r2, [r9]
   b61fa:	7821      	ldrb	r1, [r4, #0]
   b61fc:	2004      	movs	r0, #4
   b61fe:	f7fd ffaf 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueOrange, i, 255);
   b6202:	9600      	str	r6, [sp, #0]
   b6204:	463b      	mov	r3, r7
   b6206:	f8d8 2000 	ldr.w	r2, [r8]
   b620a:	7821      	ldrb	r1, [r4, #0]
   b620c:	2005      	movs	r0, #5
   b620e:	f7fd ffa7 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueViolet, i, 255);
   b6212:	9600      	str	r6, [sp, #0]
   b6214:	463b      	mov	r3, r7
   b6216:	f8d9 2000 	ldr.w	r2, [r9]
   b621a:	7821      	ldrb	r1, [r4, #0]
   b621c:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b621e:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueViolet, i, 255);
   b6220:	f7fd ff9e 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b6224:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b6228:	d1c3      	bne.n	b61b2 <loop+0x1a02>
            Serial.printf("turning on the light\n");
   b622a:	f8df a278 	ldr.w	sl, [pc, #632]	; b64a4 <loop+0x1cf4>
        for(int i=0; i<=255; i=i+100) {
   b622e:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b6230:	f003 f982 	bl	b9538 <_Z16_fetch_usbserialv>
   b6234:	4651      	mov	r1, sl
   b6236:	f7fd ff60 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueViolet, i, 255);
   b623a:	9600      	str	r6, [sp, #0]
   b623c:	463b      	mov	r3, r7
   b623e:	f8d9 2000 	ldr.w	r2, [r9]
   b6242:	7821      	ldrb	r1, [r4, #0]
   b6244:	2001      	movs	r0, #1
   b6246:	f7fd ff8b 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueOrange, i, 255);
   b624a:	9600      	str	r6, [sp, #0]
   b624c:	463b      	mov	r3, r7
   b624e:	f8d8 2000 	ldr.w	r2, [r8]
   b6252:	7821      	ldrb	r1, [r4, #0]
   b6254:	2002      	movs	r0, #2
   b6256:	f7fd ff83 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueViolet, i, 255);
   b625a:	9600      	str	r6, [sp, #0]
   b625c:	463b      	mov	r3, r7
   b625e:	f8d9 2000 	ldr.w	r2, [r9]
   b6262:	7821      	ldrb	r1, [r4, #0]
   b6264:	2003      	movs	r0, #3
   b6266:	f7fd ff7b 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueOrange, i, 255);
   b626a:	9600      	str	r6, [sp, #0]
   b626c:	463b      	mov	r3, r7
   b626e:	f8d8 2000 	ldr.w	r2, [r8]
   b6272:	7821      	ldrb	r1, [r4, #0]
   b6274:	2004      	movs	r0, #4
   b6276:	f7fd ff73 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueViolet, i, 255);
   b627a:	9600      	str	r6, [sp, #0]
   b627c:	463b      	mov	r3, r7
   b627e:	f8d9 2000 	ldr.w	r2, [r9]
   b6282:	7821      	ldrb	r1, [r4, #0]
   b6284:	2005      	movs	r0, #5
   b6286:	f7fd ff6b 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueOrange, i, 255);
   b628a:	9600      	str	r6, [sp, #0]
   b628c:	463b      	mov	r3, r7
   b628e:	f8d8 2000 	ldr.w	r2, [r8]
   b6292:	7821      	ldrb	r1, [r4, #0]
   b6294:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b6296:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueOrange, i, 255);
   b6298:	f7fd ff62 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b629c:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b62a0:	d1c6      	bne.n	b6230 <loop+0x1a80>
        hueOnOff = false;
   b62a2:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b62a4:	4f7c      	ldr	r7, [pc, #496]	; (b6498 <loop+0x1ce8>)
        hueOnOff = false;
   b62a6:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b62a8:	f003 f946 	bl	b9538 <_Z16_fetch_usbserialv>
   b62ac:	497b      	ldr	r1, [pc, #492]	; (b649c <loop+0x1cec>)
   b62ae:	f7fd ff24 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b62b2:	9600      	str	r6, [sp, #0]
   b62b4:	683a      	ldr	r2, [r7, #0]
   b62b6:	7821      	ldrb	r1, [r4, #0]
   b62b8:	23ff      	movs	r3, #255	; 0xff
   b62ba:	2001      	movs	r0, #1
   b62bc:	f7fd ff50 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b62c0:	9600      	str	r6, [sp, #0]
   b62c2:	683a      	ldr	r2, [r7, #0]
   b62c4:	7821      	ldrb	r1, [r4, #0]
   b62c6:	23ff      	movs	r3, #255	; 0xff
   b62c8:	2002      	movs	r0, #2
   b62ca:	f7fd ff49 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b62ce:	9600      	str	r6, [sp, #0]
   b62d0:	683a      	ldr	r2, [r7, #0]
   b62d2:	7821      	ldrb	r1, [r4, #0]
   b62d4:	23ff      	movs	r3, #255	; 0xff
   b62d6:	2003      	movs	r0, #3
   b62d8:	f7fd ff42 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b62dc:	9600      	str	r6, [sp, #0]
   b62de:	683a      	ldr	r2, [r7, #0]
   b62e0:	7821      	ldrb	r1, [r4, #0]
   b62e2:	23ff      	movs	r3, #255	; 0xff
   b62e4:	2004      	movs	r0, #4
   b62e6:	f7fd ff3b 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b62ea:	9600      	str	r6, [sp, #0]
   b62ec:	683a      	ldr	r2, [r7, #0]
   b62ee:	7821      	ldrb	r1, [r4, #0]
   b62f0:	23ff      	movs	r3, #255	; 0xff
   b62f2:	2005      	movs	r0, #5
   b62f4:	f7fd ff34 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b62f8:	9600      	str	r6, [sp, #0]
   b62fa:	683a      	ldr	r2, [r7, #0]
   b62fc:	7821      	ldrb	r1, [r4, #0]
   b62fe:	23ff      	movs	r3, #255	; 0xff
   b6300:	2006      	movs	r0, #6
   b6302:	f7fd ff2d 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b6306:	f242 7010 	movw	r0, #10000	; 0x2710
   b630a:	f002 f8db 	bl	b84c4 <delay>
    if(roll==15) {
   b630e:	682b      	ldr	r3, [r5, #0]
   b6310:	2b0f      	cmp	r3, #15
   b6312:	f040 80f9 	bne.w	b6508 <loop+0x1d58>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b6316:	f003 f90f 	bl	b9538 <_Z16_fetch_usbserialv>
   b631a:	2203      	movs	r2, #3
   b631c:	495a      	ldr	r1, [pc, #360]	; (b6488 <loop+0x1cd8>)
 hueOnOff = true;
   b631e:	4c5b      	ldr	r4, [pc, #364]	; (b648c <loop+0x1cdc>)
            setHue(2, hueOnOff, HueOrange, i, 255);
   b6320:	f8df 8184 	ldr.w	r8, [pc, #388]	; b64a8 <loop+0x1cf8>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b6324:	f7fd fee9 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b6328:	2003      	movs	r0, #3
   b632a:	f7fe f8a1 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b632e:	f242 7010 	movw	r0, #10000	; 0x2710
   b6332:	f002 f8c7 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b6336:	4856      	ldr	r0, [pc, #344]	; (b6490 <loop+0x1ce0>)
   b6338:	2102      	movs	r1, #2
   b633a:	f001 fa62 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b633e:	2200      	movs	r2, #0
   b6340:	4611      	mov	r1, r2
   b6342:	4853      	ldr	r0, [pc, #332]	; (b6490 <loop+0x1ce0>)
   b6344:	f001 fa58 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, mushrooms, 128, 64, WHITE);
   b6348:	2601      	movs	r6, #1
   b634a:	2340      	movs	r3, #64	; 0x40
   b634c:	2200      	movs	r2, #0
   b634e:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b6352:	2380      	movs	r3, #128	; 0x80
   b6354:	4611      	mov	r1, r2
   b6356:	484e      	ldr	r0, [pc, #312]	; (b6490 <loop+0x1ce0>)
   b6358:	9300      	str	r3, [sp, #0]
   b635a:	4b51      	ldr	r3, [pc, #324]	; (b64a0 <loop+0x1cf0>)
   b635c:	f001 f948 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b6360:	484b      	ldr	r0, [pc, #300]	; (b6490 <loop+0x1ce0>)
   b6362:	f001 fcb3 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b6366:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b636a:	f002 f8ab 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b636e:	4848      	ldr	r0, [pc, #288]	; (b6490 <loop+0x1ce0>)
   b6370:	f001 fc34 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
 hueOnOff = true;
   b6374:	7026      	strb	r6, [r4, #0]
        for(int i=255; i>=0; i=i-100) {
   b6376:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b6378:	f003 f8de 	bl	b9538 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, 315, i, 255);
   b637c:	27ff      	movs	r7, #255	; 0xff
            Serial.printf("turning on the light\n");
   b637e:	4949      	ldr	r1, [pc, #292]	; (b64a4 <loop+0x1cf4>)
   b6380:	f7fd febb 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 315, i, 255);
   b6384:	9700      	str	r7, [sp, #0]
   b6386:	4633      	mov	r3, r6
   b6388:	7821      	ldrb	r1, [r4, #0]
   b638a:	f240 123b 	movw	r2, #315	; 0x13b
   b638e:	2001      	movs	r0, #1
   b6390:	f7fd fee6 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueOrange, i, 255);
   b6394:	9700      	str	r7, [sp, #0]
   b6396:	4633      	mov	r3, r6
   b6398:	f8d8 2000 	ldr.w	r2, [r8]
   b639c:	7821      	ldrb	r1, [r4, #0]
            setHue(3, hueOnOff, 315, i, 127);
   b639e:	f04f 097f 	mov.w	r9, #127	; 0x7f
            setHue(2, hueOnOff, HueOrange, i, 255);
   b63a2:	2002      	movs	r0, #2
   b63a4:	f7fd fedc 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, 315, i, 127);
   b63a8:	f8cd 9000 	str.w	r9, [sp]
   b63ac:	4633      	mov	r3, r6
   b63ae:	7821      	ldrb	r1, [r4, #0]
   b63b0:	f240 123b 	movw	r2, #315	; 0x13b
   b63b4:	2003      	movs	r0, #3
   b63b6:	f7fd fed3 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 315, i, 255);
   b63ba:	9700      	str	r7, [sp, #0]
   b63bc:	4633      	mov	r3, r6
   b63be:	7821      	ldrb	r1, [r4, #0]
   b63c0:	f240 123b 	movw	r2, #315	; 0x13b
   b63c4:	2004      	movs	r0, #4
   b63c6:	f7fd fecb 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueOrange, i, 255);
   b63ca:	9700      	str	r7, [sp, #0]
   b63cc:	4633      	mov	r3, r6
   b63ce:	f8d8 2000 	ldr.w	r2, [r8]
   b63d2:	7821      	ldrb	r1, [r4, #0]
   b63d4:	2005      	movs	r0, #5
   b63d6:	f7fd fec3 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, 315, i, 127);
   b63da:	f8cd 9000 	str.w	r9, [sp]
   b63de:	4633      	mov	r3, r6
   b63e0:	7821      	ldrb	r1, [r4, #0]
   b63e2:	f240 123b 	movw	r2, #315	; 0x13b
   b63e6:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b63e8:	3e64      	subs	r6, #100	; 0x64
            setHue(6, hueOnOff, 315, i, 127);
   b63ea:	f7fd feb9 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b63ee:	f116 0f2d 	cmn.w	r6, #45	; 0x2d
   b63f2:	d1c1      	bne.n	b6378 <loop+0x1bc8>
            Serial.printf("turning on the light\n");
   b63f4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; b64a4 <loop+0x1cf4>
        for(int i=0; i<=255; i=i+100) {
   b63f8:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b63fa:	f003 f89d 	bl	b9538 <_Z16_fetch_usbserialv>
   b63fe:	4651      	mov	r1, sl
   b6400:	f7fd fe7b 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, 315, i, 127);
   b6404:	f8cd 9000 	str.w	r9, [sp]
            setHue(2, hueOnOff, 315, i, 255);
   b6408:	26ff      	movs	r6, #255	; 0xff
            setHue(1, hueOnOff, 315, i, 127);
   b640a:	463b      	mov	r3, r7
   b640c:	7821      	ldrb	r1, [r4, #0]
   b640e:	f240 123b 	movw	r2, #315	; 0x13b
   b6412:	2001      	movs	r0, #1
   b6414:	f7fd fea4 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, 315, i, 255);
   b6418:	9600      	str	r6, [sp, #0]
   b641a:	463b      	mov	r3, r7
   b641c:	7821      	ldrb	r1, [r4, #0]
   b641e:	f240 123b 	movw	r2, #315	; 0x13b
   b6422:	2002      	movs	r0, #2
   b6424:	f7fd fe9c 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueOrange, i, 255);
   b6428:	9600      	str	r6, [sp, #0]
   b642a:	463b      	mov	r3, r7
   b642c:	f8d8 2000 	ldr.w	r2, [r8]
   b6430:	7821      	ldrb	r1, [r4, #0]
   b6432:	2003      	movs	r0, #3
   b6434:	f7fd fe94 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, 315, i, 127);
   b6438:	f8cd 9000 	str.w	r9, [sp]
   b643c:	463b      	mov	r3, r7
   b643e:	7821      	ldrb	r1, [r4, #0]
   b6440:	f240 123b 	movw	r2, #315	; 0x13b
   b6444:	2004      	movs	r0, #4
   b6446:	f7fd fe8b 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, 315, i, 255);
   b644a:	9600      	str	r6, [sp, #0]
   b644c:	463b      	mov	r3, r7
   b644e:	7821      	ldrb	r1, [r4, #0]
   b6450:	f240 123b 	movw	r2, #315	; 0x13b
   b6454:	2005      	movs	r0, #5
   b6456:	f7fd fe83 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueOrange, i, 255);
   b645a:	9600      	str	r6, [sp, #0]
   b645c:	463b      	mov	r3, r7
   b645e:	f8d8 2000 	ldr.w	r2, [r8]
   b6462:	7821      	ldrb	r1, [r4, #0]
   b6464:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b6466:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueOrange, i, 255);
   b6468:	f7fd fe7a 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b646c:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b6470:	d1c3      	bne.n	b63fa <loop+0x1c4a>
        hueOnOff = false;
   b6472:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b6474:	4f08      	ldr	r7, [pc, #32]	; (b6498 <loop+0x1ce8>)
        hueOnOff = false;
   b6476:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b6478:	f003 f85e 	bl	b9538 <_Z16_fetch_usbserialv>
   b647c:	4907      	ldr	r1, [pc, #28]	; (b649c <loop+0x1cec>)
   b647e:	f7fd fe3c 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b6482:	9600      	str	r6, [sp, #0]
   b6484:	683a      	ldr	r2, [r7, #0]
   b6486:	e013      	b.n	b64b0 <loop+0x1d00>
   b6488:	000bbd2b 	.word	0x000bbd2b
   b648c:	2003e64c 	.word	0x2003e64c
   b6490:	2003e658 	.word	0x2003e658
   b6494:	000bf72c 	.word	0x000bf72c
   b6498:	2003e58c 	.word	0x2003e58c
   b649c:	000bbd44 	.word	0x000bbd44
   b64a0:	000c0b38 	.word	0x000c0b38
   b64a4:	000bbd15 	.word	0x000bbd15
   b64a8:	2003e0b0 	.word	0x2003e0b0
   b64ac:	2003e0b4 	.word	0x2003e0b4
   b64b0:	7821      	ldrb	r1, [r4, #0]
   b64b2:	4633      	mov	r3, r6
   b64b4:	2001      	movs	r0, #1
   b64b6:	f7fd fe53 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b64ba:	9600      	str	r6, [sp, #0]
   b64bc:	683a      	ldr	r2, [r7, #0]
   b64be:	7821      	ldrb	r1, [r4, #0]
   b64c0:	4633      	mov	r3, r6
   b64c2:	2002      	movs	r0, #2
   b64c4:	f7fd fe4c 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b64c8:	9600      	str	r6, [sp, #0]
   b64ca:	683a      	ldr	r2, [r7, #0]
   b64cc:	7821      	ldrb	r1, [r4, #0]
   b64ce:	4633      	mov	r3, r6
   b64d0:	2003      	movs	r0, #3
   b64d2:	f7fd fe45 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b64d6:	9600      	str	r6, [sp, #0]
   b64d8:	683a      	ldr	r2, [r7, #0]
   b64da:	7821      	ldrb	r1, [r4, #0]
   b64dc:	4633      	mov	r3, r6
   b64de:	2004      	movs	r0, #4
   b64e0:	f7fd fe3e 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b64e4:	9600      	str	r6, [sp, #0]
   b64e6:	683a      	ldr	r2, [r7, #0]
   b64e8:	7821      	ldrb	r1, [r4, #0]
   b64ea:	4633      	mov	r3, r6
   b64ec:	2005      	movs	r0, #5
   b64ee:	f7fd fe37 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b64f2:	9600      	str	r6, [sp, #0]
   b64f4:	683a      	ldr	r2, [r7, #0]
   b64f6:	7821      	ldrb	r1, [r4, #0]
   b64f8:	4633      	mov	r3, r6
   b64fa:	2006      	movs	r0, #6
   b64fc:	f7fd fe30 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b6500:	f242 7010 	movw	r0, #10000	; 0x2710
   b6504:	f001 ffde 	bl	b84c4 <delay>
    if(roll==16) {
   b6508:	682b      	ldr	r3, [r5, #0]
   b650a:	2b10      	cmp	r3, #16
   b650c:	f040 80d6 	bne.w	b66bc <loop+0x1f0c>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b6510:	f003 f812 	bl	b9538 <_Z16_fetch_usbserialv>
   b6514:	2203      	movs	r2, #3
   b6516:	49c6      	ldr	r1, [pc, #792]	; (b6830 <loop+0x2080>)
 hueOnOff = true;
   b6518:	4cc6      	ldr	r4, [pc, #792]	; (b6834 <loop+0x2084>)
            Serial.printf("turning on the light\n");
   b651a:	f8df 9334 	ldr.w	r9, [pc, #820]	; b6850 <loop+0x20a0>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b651e:	4fc6      	ldr	r7, [pc, #792]	; (b6838 <loop+0x2088>)
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b6520:	f7fd fdeb 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b6524:	2003      	movs	r0, #3
   b6526:	f7fd ffa3 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b652a:	f242 7010 	movw	r0, #10000	; 0x2710
   b652e:	f001 ffc9 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b6532:	48c2      	ldr	r0, [pc, #776]	; (b683c <loop+0x208c>)
   b6534:	2102      	movs	r1, #2
   b6536:	f001 f964 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b653a:	2200      	movs	r2, #0
   b653c:	4611      	mov	r1, r2
   b653e:	48bf      	ldr	r0, [pc, #764]	; (b683c <loop+0x208c>)
   b6540:	f001 f95a 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, fight, 128, 64, WHITE);
   b6544:	2601      	movs	r6, #1
   b6546:	2340      	movs	r3, #64	; 0x40
   b6548:	2200      	movs	r2, #0
   b654a:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b654e:	2380      	movs	r3, #128	; 0x80
   b6550:	4611      	mov	r1, r2
   b6552:	48ba      	ldr	r0, [pc, #744]	; (b683c <loop+0x208c>)
   b6554:	9300      	str	r3, [sp, #0]
   b6556:	4bba      	ldr	r3, [pc, #744]	; (b6840 <loop+0x2090>)
   b6558:	f001 f84a 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b655c:	48b7      	ldr	r0, [pc, #732]	; (b683c <loop+0x208c>)
   b655e:	f001 fbb5 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b6562:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b6566:	f001 ffad 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b656a:	48b4      	ldr	r0, [pc, #720]	; (b683c <loop+0x208c>)
   b656c:	f001 fb36 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b6570:	f04f 08ff 	mov.w	r8, #255	; 0xff
 hueOnOff = true;
   b6574:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueGreen, i, 255);
   b6576:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b6578:	f002 ffde 	bl	b9538 <_Z16_fetch_usbserialv>
   b657c:	4649      	mov	r1, r9
   b657e:	f7fd fdbc 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b6582:	9600      	str	r6, [sp, #0]
   b6584:	4643      	mov	r3, r8
   b6586:	683a      	ldr	r2, [r7, #0]
   b6588:	7821      	ldrb	r1, [r4, #0]
   b658a:	2001      	movs	r0, #1
   b658c:	f7fd fde8 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b6590:	9600      	str	r6, [sp, #0]
   b6592:	4643      	mov	r3, r8
   b6594:	683a      	ldr	r2, [r7, #0]
   b6596:	7821      	ldrb	r1, [r4, #0]
   b6598:	2002      	movs	r0, #2
   b659a:	f7fd fde1 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b659e:	9600      	str	r6, [sp, #0]
   b65a0:	4643      	mov	r3, r8
   b65a2:	683a      	ldr	r2, [r7, #0]
   b65a4:	7821      	ldrb	r1, [r4, #0]
   b65a6:	2003      	movs	r0, #3
   b65a8:	f7fd fdda 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b65ac:	9600      	str	r6, [sp, #0]
   b65ae:	4643      	mov	r3, r8
   b65b0:	683a      	ldr	r2, [r7, #0]
   b65b2:	7821      	ldrb	r1, [r4, #0]
   b65b4:	2004      	movs	r0, #4
   b65b6:	f7fd fdd3 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b65ba:	9600      	str	r6, [sp, #0]
   b65bc:	4643      	mov	r3, r8
   b65be:	683a      	ldr	r2, [r7, #0]
   b65c0:	7821      	ldrb	r1, [r4, #0]
   b65c2:	2005      	movs	r0, #5
   b65c4:	f7fd fdcc 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b65c8:	9600      	str	r6, [sp, #0]
   b65ca:	4643      	mov	r3, r8
   b65cc:	683a      	ldr	r2, [r7, #0]
   b65ce:	7821      	ldrb	r1, [r4, #0]
   b65d0:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b65d2:	f1a8 0864 	sub.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b65d6:	f7fd fdc3 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b65da:	f118 0f2d 	cmn.w	r8, #45	; 0x2d
   b65de:	d1ca      	bne.n	b6576 <loop+0x1dc6>
            Serial.printf("turning on the light\n");
   b65e0:	f8df 926c 	ldr.w	r9, [pc, #620]	; b6850 <loop+0x20a0>
        for(int i=0; i<=255; i=i+100) {
   b65e4:	f04f 0800 	mov.w	r8, #0
            Serial.printf("turning on the light\n");
   b65e8:	f002 ffa6 	bl	b9538 <_Z16_fetch_usbserialv>
   b65ec:	4649      	mov	r1, r9
   b65ee:	f7fd fd84 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b65f2:	9600      	str	r6, [sp, #0]
   b65f4:	4643      	mov	r3, r8
   b65f6:	683a      	ldr	r2, [r7, #0]
   b65f8:	7821      	ldrb	r1, [r4, #0]
   b65fa:	2001      	movs	r0, #1
   b65fc:	f7fd fdb0 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b6600:	9600      	str	r6, [sp, #0]
   b6602:	4643      	mov	r3, r8
   b6604:	683a      	ldr	r2, [r7, #0]
   b6606:	7821      	ldrb	r1, [r4, #0]
   b6608:	2002      	movs	r0, #2
   b660a:	f7fd fda9 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b660e:	9600      	str	r6, [sp, #0]
   b6610:	4643      	mov	r3, r8
   b6612:	683a      	ldr	r2, [r7, #0]
   b6614:	7821      	ldrb	r1, [r4, #0]
   b6616:	2003      	movs	r0, #3
   b6618:	f7fd fda2 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b661c:	9600      	str	r6, [sp, #0]
   b661e:	4643      	mov	r3, r8
   b6620:	683a      	ldr	r2, [r7, #0]
   b6622:	7821      	ldrb	r1, [r4, #0]
   b6624:	2004      	movs	r0, #4
   b6626:	f7fd fd9b 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b662a:	9600      	str	r6, [sp, #0]
   b662c:	4643      	mov	r3, r8
   b662e:	683a      	ldr	r2, [r7, #0]
   b6630:	7821      	ldrb	r1, [r4, #0]
   b6632:	2005      	movs	r0, #5
   b6634:	f7fd fd94 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b6638:	9600      	str	r6, [sp, #0]
   b663a:	4643      	mov	r3, r8
   b663c:	683a      	ldr	r2, [r7, #0]
   b663e:	7821      	ldrb	r1, [r4, #0]
   b6640:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b6642:	f108 0864 	add.w	r8, r8, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b6646:	f7fd fd8b 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b664a:	f5b8 7f96 	cmp.w	r8, #300	; 0x12c
   b664e:	d1cb      	bne.n	b65e8 <loop+0x1e38>
        hueOnOff = false;
   b6650:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b6652:	4f7c      	ldr	r7, [pc, #496]	; (b6844 <loop+0x2094>)
        hueOnOff = false;
   b6654:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b6656:	f002 ff6f 	bl	b9538 <_Z16_fetch_usbserialv>
   b665a:	497b      	ldr	r1, [pc, #492]	; (b6848 <loop+0x2098>)
   b665c:	f7fd fd4d 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b6660:	9600      	str	r6, [sp, #0]
   b6662:	683a      	ldr	r2, [r7, #0]
   b6664:	7821      	ldrb	r1, [r4, #0]
   b6666:	23ff      	movs	r3, #255	; 0xff
   b6668:	2001      	movs	r0, #1
   b666a:	f7fd fd79 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b666e:	9600      	str	r6, [sp, #0]
   b6670:	683a      	ldr	r2, [r7, #0]
   b6672:	7821      	ldrb	r1, [r4, #0]
   b6674:	23ff      	movs	r3, #255	; 0xff
   b6676:	2002      	movs	r0, #2
   b6678:	f7fd fd72 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b667c:	9600      	str	r6, [sp, #0]
   b667e:	683a      	ldr	r2, [r7, #0]
   b6680:	7821      	ldrb	r1, [r4, #0]
   b6682:	23ff      	movs	r3, #255	; 0xff
   b6684:	2003      	movs	r0, #3
   b6686:	f7fd fd6b 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b668a:	9600      	str	r6, [sp, #0]
   b668c:	683a      	ldr	r2, [r7, #0]
   b668e:	7821      	ldrb	r1, [r4, #0]
   b6690:	23ff      	movs	r3, #255	; 0xff
   b6692:	2004      	movs	r0, #4
   b6694:	f7fd fd64 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b6698:	9600      	str	r6, [sp, #0]
   b669a:	683a      	ldr	r2, [r7, #0]
   b669c:	7821      	ldrb	r1, [r4, #0]
   b669e:	23ff      	movs	r3, #255	; 0xff
   b66a0:	2005      	movs	r0, #5
   b66a2:	f7fd fd5d 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b66a6:	9600      	str	r6, [sp, #0]
   b66a8:	683a      	ldr	r2, [r7, #0]
   b66aa:	7821      	ldrb	r1, [r4, #0]
   b66ac:	23ff      	movs	r3, #255	; 0xff
   b66ae:	2006      	movs	r0, #6
   b66b0:	f7fd fd56 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b66b4:	f242 7010 	movw	r0, #10000	; 0x2710
   b66b8:	f001 ff04 	bl	b84c4 <delay>
    if(roll==17) {
   b66bc:	682b      	ldr	r3, [r5, #0]
   b66be:	2b11      	cmp	r3, #17
   b66c0:	f040 80f7 	bne.w	b68b2 <loop+0x2102>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b66c4:	f002 ff38 	bl	b9538 <_Z16_fetch_usbserialv>
   b66c8:	2203      	movs	r2, #3
   b66ca:	4959      	ldr	r1, [pc, #356]	; (b6830 <loop+0x2080>)
 hueOnOff = true;
   b66cc:	4c59      	ldr	r4, [pc, #356]	; (b6834 <loop+0x2084>)
            Serial.printf("turning on the light\n");
   b66ce:	f8df a180 	ldr.w	sl, [pc, #384]	; b6850 <loop+0x20a0>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b66d2:	f8df 9180 	ldr.w	r9, [pc, #384]	; b6854 <loop+0x20a4>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b66d6:	f7fd fd10 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b66da:	2003      	movs	r0, #3
   b66dc:	f7fd fec8 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b66e0:	f242 7010 	movw	r0, #10000	; 0x2710
   b66e4:	f001 feee 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b66e8:	4854      	ldr	r0, [pc, #336]	; (b683c <loop+0x208c>)
   b66ea:	2102      	movs	r1, #2
   b66ec:	f001 f889 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b66f0:	2200      	movs	r2, #0
   b66f2:	4611      	mov	r1, r2
   b66f4:	4851      	ldr	r0, [pc, #324]	; (b683c <loop+0x208c>)
   b66f6:	f001 f87f 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, cheers, 128, 64, WHITE);
   b66fa:	2601      	movs	r6, #1
   b66fc:	2340      	movs	r3, #64	; 0x40
   b66fe:	2200      	movs	r2, #0
   b6700:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b6704:	2380      	movs	r3, #128	; 0x80
   b6706:	4611      	mov	r1, r2
   b6708:	484c      	ldr	r0, [pc, #304]	; (b683c <loop+0x208c>)
   b670a:	9300      	str	r3, [sp, #0]
   b670c:	4b4f      	ldr	r3, [pc, #316]	; (b684c <loop+0x209c>)
   b670e:	f000 ff6f 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b6712:	484a      	ldr	r0, [pc, #296]	; (b683c <loop+0x208c>)
   b6714:	f001 fada 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b6718:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b671c:	f001 fed2 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b6720:	4846      	ldr	r0, [pc, #280]	; (b683c <loop+0x208c>)
   b6722:	f001 fa5b 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b6726:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b6728:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueGreen, i, 255);
   b672a:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b672c:	f002 ff04 	bl	b9538 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b6730:	f8df 8104 	ldr.w	r8, [pc, #260]	; b6838 <loop+0x2088>
            Serial.printf("turning on the light\n");
   b6734:	4651      	mov	r1, sl
   b6736:	f7fd fce0 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b673a:	9600      	str	r6, [sp, #0]
   b673c:	463b      	mov	r3, r7
   b673e:	f8d8 2000 	ldr.w	r2, [r8]
   b6742:	7821      	ldrb	r1, [r4, #0]
   b6744:	2001      	movs	r0, #1
   b6746:	f7fd fd0b 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueYellow, i, 255);
   b674a:	9600      	str	r6, [sp, #0]
   b674c:	463b      	mov	r3, r7
   b674e:	f8d9 2000 	ldr.w	r2, [r9]
   b6752:	7821      	ldrb	r1, [r4, #0]
   b6754:	2002      	movs	r0, #2
   b6756:	f7fd fd03 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b675a:	9600      	str	r6, [sp, #0]
   b675c:	463b      	mov	r3, r7
   b675e:	f8d8 2000 	ldr.w	r2, [r8]
   b6762:	7821      	ldrb	r1, [r4, #0]
   b6764:	2003      	movs	r0, #3
   b6766:	f7fd fcfb 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueYellow, i, 255);
   b676a:	9600      	str	r6, [sp, #0]
   b676c:	463b      	mov	r3, r7
   b676e:	f8d9 2000 	ldr.w	r2, [r9]
   b6772:	7821      	ldrb	r1, [r4, #0]
   b6774:	2004      	movs	r0, #4
   b6776:	f7fd fcf3 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b677a:	9600      	str	r6, [sp, #0]
   b677c:	463b      	mov	r3, r7
   b677e:	f8d8 2000 	ldr.w	r2, [r8]
   b6782:	7821      	ldrb	r1, [r4, #0]
   b6784:	2005      	movs	r0, #5
   b6786:	f7fd fceb 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueYellow, i, 255);
   b678a:	9600      	str	r6, [sp, #0]
   b678c:	463b      	mov	r3, r7
   b678e:	f8d9 2000 	ldr.w	r2, [r9]
   b6792:	7821      	ldrb	r1, [r4, #0]
   b6794:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b6796:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueYellow, i, 255);
   b6798:	f7fd fce2 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b679c:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b67a0:	d1c3      	bne.n	b672a <loop+0x1f7a>
            Serial.printf("turning on the light\n");
   b67a2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; b6850 <loop+0x20a0>
        for(int i=0; i<=255; i=i+100) {
   b67a6:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b67a8:	f002 fec6 	bl	b9538 <_Z16_fetch_usbserialv>
   b67ac:	4651      	mov	r1, sl
   b67ae:	f7fd fca4 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueYellow, i, 255);
   b67b2:	9600      	str	r6, [sp, #0]
   b67b4:	463b      	mov	r3, r7
   b67b6:	f8d9 2000 	ldr.w	r2, [r9]
   b67ba:	7821      	ldrb	r1, [r4, #0]
   b67bc:	2001      	movs	r0, #1
   b67be:	f7fd fccf 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b67c2:	9600      	str	r6, [sp, #0]
   b67c4:	463b      	mov	r3, r7
   b67c6:	f8d8 2000 	ldr.w	r2, [r8]
   b67ca:	7821      	ldrb	r1, [r4, #0]
   b67cc:	2002      	movs	r0, #2
   b67ce:	f7fd fcc7 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueYellow, i, 255);
   b67d2:	9600      	str	r6, [sp, #0]
   b67d4:	463b      	mov	r3, r7
   b67d6:	f8d9 2000 	ldr.w	r2, [r9]
   b67da:	7821      	ldrb	r1, [r4, #0]
   b67dc:	2003      	movs	r0, #3
   b67de:	f7fd fcbf 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b67e2:	9600      	str	r6, [sp, #0]
   b67e4:	463b      	mov	r3, r7
   b67e6:	f8d8 2000 	ldr.w	r2, [r8]
   b67ea:	7821      	ldrb	r1, [r4, #0]
   b67ec:	2004      	movs	r0, #4
   b67ee:	f7fd fcb7 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueYellow, i, 255);
   b67f2:	9600      	str	r6, [sp, #0]
   b67f4:	463b      	mov	r3, r7
   b67f6:	f8d9 2000 	ldr.w	r2, [r9]
   b67fa:	7821      	ldrb	r1, [r4, #0]
   b67fc:	2005      	movs	r0, #5
   b67fe:	f7fd fcaf 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b6802:	9600      	str	r6, [sp, #0]
   b6804:	463b      	mov	r3, r7
   b6806:	f8d8 2000 	ldr.w	r2, [r8]
   b680a:	7821      	ldrb	r1, [r4, #0]
   b680c:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b680e:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b6810:	f7fd fca6 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b6814:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b6818:	d1c6      	bne.n	b67a8 <loop+0x1ff8>
        hueOnOff = false;
   b681a:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b681c:	4f09      	ldr	r7, [pc, #36]	; (b6844 <loop+0x2094>)
        hueOnOff = false;
   b681e:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b6820:	f002 fe8a 	bl	b9538 <_Z16_fetch_usbserialv>
   b6824:	4908      	ldr	r1, [pc, #32]	; (b6848 <loop+0x2098>)
   b6826:	f7fd fc68 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b682a:	9600      	str	r6, [sp, #0]
   b682c:	e014      	b.n	b6858 <loop+0x20a8>
   b682e:	bf00      	nop
   b6830:	000bbd2b 	.word	0x000bbd2b
   b6834:	2003e64c 	.word	0x2003e64c
   b6838:	2003e0a8 	.word	0x2003e0a8
   b683c:	2003e658 	.word	0x2003e658
   b6840:	000be32c 	.word	0x000be32c
   b6844:	2003e58c 	.word	0x2003e58c
   b6848:	000bbd44 	.word	0x000bbd44
   b684c:	000bef2c 	.word	0x000bef2c
   b6850:	000bbd15 	.word	0x000bbd15
   b6854:	2003e0b8 	.word	0x2003e0b8
   b6858:	683a      	ldr	r2, [r7, #0]
   b685a:	7821      	ldrb	r1, [r4, #0]
   b685c:	23ff      	movs	r3, #255	; 0xff
   b685e:	2001      	movs	r0, #1
   b6860:	f7fd fc7e 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b6864:	9600      	str	r6, [sp, #0]
   b6866:	683a      	ldr	r2, [r7, #0]
   b6868:	7821      	ldrb	r1, [r4, #0]
   b686a:	23ff      	movs	r3, #255	; 0xff
   b686c:	2002      	movs	r0, #2
   b686e:	f7fd fc77 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b6872:	9600      	str	r6, [sp, #0]
   b6874:	683a      	ldr	r2, [r7, #0]
   b6876:	7821      	ldrb	r1, [r4, #0]
   b6878:	23ff      	movs	r3, #255	; 0xff
   b687a:	2003      	movs	r0, #3
   b687c:	f7fd fc70 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b6880:	9600      	str	r6, [sp, #0]
   b6882:	683a      	ldr	r2, [r7, #0]
   b6884:	7821      	ldrb	r1, [r4, #0]
   b6886:	23ff      	movs	r3, #255	; 0xff
   b6888:	2004      	movs	r0, #4
   b688a:	f7fd fc69 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b688e:	9600      	str	r6, [sp, #0]
   b6890:	683a      	ldr	r2, [r7, #0]
   b6892:	7821      	ldrb	r1, [r4, #0]
   b6894:	23ff      	movs	r3, #255	; 0xff
   b6896:	2005      	movs	r0, #5
   b6898:	f7fd fc62 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b689c:	9600      	str	r6, [sp, #0]
   b689e:	683a      	ldr	r2, [r7, #0]
   b68a0:	7821      	ldrb	r1, [r4, #0]
   b68a2:	23ff      	movs	r3, #255	; 0xff
   b68a4:	2006      	movs	r0, #6
   b68a6:	f7fd fc5b 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b68aa:	f242 7010 	movw	r0, #10000	; 0x2710
   b68ae:	f001 fe09 	bl	b84c4 <delay>
    if(roll==18) {
   b68b2:	682b      	ldr	r3, [r5, #0]
   b68b4:	2b12      	cmp	r3, #18
   b68b6:	f040 80e1 	bne.w	b6a7c <loop+0x22cc>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b68ba:	f002 fe3d 	bl	b9538 <_Z16_fetch_usbserialv>
   b68be:	2203      	movs	r2, #3
   b68c0:	49cb      	ldr	r1, [pc, #812]	; (b6bf0 <loop+0x2440>)
 hueOnOff = true;
   b68c2:	4ccc      	ldr	r4, [pc, #816]	; (b6bf4 <loop+0x2444>)
            Serial.printf("turning on the light\n");
   b68c4:	f8df a344 	ldr.w	sl, [pc, #836]	; b6c0c <loop+0x245c>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b68c8:	f8df 9344 	ldr.w	r9, [pc, #836]	; b6c10 <loop+0x2460>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b68cc:	f7fd fc15 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b68d0:	2003      	movs	r0, #3
   b68d2:	f7fd fdcd 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b68d6:	f242 7010 	movw	r0, #10000	; 0x2710
   b68da:	f001 fdf3 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b68de:	48c6      	ldr	r0, [pc, #792]	; (b6bf8 <loop+0x2448>)
   b68e0:	2102      	movs	r1, #2
   b68e2:	f000 ff8e 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b68e6:	2200      	movs	r2, #0
   b68e8:	4611      	mov	r1, r2
   b68ea:	48c3      	ldr	r0, [pc, #780]	; (b6bf8 <loop+0x2448>)
   b68ec:	f000 ff84 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, youNeededThat, 128, 64, WHITE);
   b68f0:	2601      	movs	r6, #1
   b68f2:	2340      	movs	r3, #64	; 0x40
   b68f4:	2200      	movs	r2, #0
   b68f6:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b68fa:	2380      	movs	r3, #128	; 0x80
   b68fc:	4611      	mov	r1, r2
   b68fe:	48be      	ldr	r0, [pc, #760]	; (b6bf8 <loop+0x2448>)
   b6900:	9300      	str	r3, [sp, #0]
   b6902:	4bbe      	ldr	r3, [pc, #760]	; (b6bfc <loop+0x244c>)
   b6904:	f000 fe74 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b6908:	48bb      	ldr	r0, [pc, #748]	; (b6bf8 <loop+0x2448>)
   b690a:	f001 f9df 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b690e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b6912:	f001 fdd7 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b6916:	48b8      	ldr	r0, [pc, #736]	; (b6bf8 <loop+0x2448>)
   b6918:	f001 f960 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b691c:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b691e:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueBlue, i, 255);
   b6920:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b6922:	f002 fe09 	bl	b9538 <_Z16_fetch_usbserialv>
            setHue(1, hueOnOff, HueBlue, i, 255);
   b6926:	f8df 82ec 	ldr.w	r8, [pc, #748]	; b6c14 <loop+0x2464>
            Serial.printf("turning on the light\n");
   b692a:	4651      	mov	r1, sl
   b692c:	f7fd fbe5 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueBlue, i, 255);
   b6930:	9600      	str	r6, [sp, #0]
   b6932:	463b      	mov	r3, r7
   b6934:	f8d8 2000 	ldr.w	r2, [r8]
   b6938:	7821      	ldrb	r1, [r4, #0]
   b693a:	2001      	movs	r0, #1
   b693c:	f7fd fc10 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b6940:	9600      	str	r6, [sp, #0]
   b6942:	463b      	mov	r3, r7
   b6944:	f8d9 2000 	ldr.w	r2, [r9]
   b6948:	7821      	ldrb	r1, [r4, #0]
   b694a:	2002      	movs	r0, #2
   b694c:	f7fd fc08 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueBlue, i, 255);
   b6950:	9600      	str	r6, [sp, #0]
   b6952:	463b      	mov	r3, r7
   b6954:	f8d8 2000 	ldr.w	r2, [r8]
   b6958:	7821      	ldrb	r1, [r4, #0]
   b695a:	2003      	movs	r0, #3
   b695c:	f7fd fc00 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b6960:	9600      	str	r6, [sp, #0]
   b6962:	463b      	mov	r3, r7
   b6964:	f8d9 2000 	ldr.w	r2, [r9]
   b6968:	7821      	ldrb	r1, [r4, #0]
   b696a:	2004      	movs	r0, #4
   b696c:	f7fd fbf8 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueBlue, i, 255);
   b6970:	9600      	str	r6, [sp, #0]
   b6972:	463b      	mov	r3, r7
   b6974:	f8d8 2000 	ldr.w	r2, [r8]
   b6978:	7821      	ldrb	r1, [r4, #0]
   b697a:	2005      	movs	r0, #5
   b697c:	f7fd fbf0 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b6980:	9600      	str	r6, [sp, #0]
   b6982:	463b      	mov	r3, r7
   b6984:	f8d9 2000 	ldr.w	r2, [r9]
   b6988:	7821      	ldrb	r1, [r4, #0]
   b698a:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b698c:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b698e:	f7fd fbe7 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b6992:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b6996:	d1c3      	bne.n	b6920 <loop+0x2170>
            Serial.printf("turning on the light\n");
   b6998:	f8df a270 	ldr.w	sl, [pc, #624]	; b6c0c <loop+0x245c>
        for(int i=0; i<=255; i=i+100) {
   b699c:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b699e:	f002 fdcb 	bl	b9538 <_Z16_fetch_usbserialv>
   b69a2:	4651      	mov	r1, sl
   b69a4:	f7fd fba9 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b69a8:	9600      	str	r6, [sp, #0]
   b69aa:	463b      	mov	r3, r7
   b69ac:	f8d9 2000 	ldr.w	r2, [r9]
   b69b0:	7821      	ldrb	r1, [r4, #0]
   b69b2:	2001      	movs	r0, #1
   b69b4:	f7fd fbd4 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueBlue, i, 255);
   b69b8:	9600      	str	r6, [sp, #0]
   b69ba:	463b      	mov	r3, r7
   b69bc:	f8d8 2000 	ldr.w	r2, [r8]
   b69c0:	7821      	ldrb	r1, [r4, #0]
   b69c2:	2002      	movs	r0, #2
   b69c4:	f7fd fbcc 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b69c8:	9600      	str	r6, [sp, #0]
   b69ca:	463b      	mov	r3, r7
   b69cc:	f8d9 2000 	ldr.w	r2, [r9]
   b69d0:	7821      	ldrb	r1, [r4, #0]
   b69d2:	2003      	movs	r0, #3
   b69d4:	f7fd fbc4 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueBlue, i, 255);
   b69d8:	9600      	str	r6, [sp, #0]
   b69da:	463b      	mov	r3, r7
   b69dc:	f8d8 2000 	ldr.w	r2, [r8]
   b69e0:	7821      	ldrb	r1, [r4, #0]
   b69e2:	2004      	movs	r0, #4
   b69e4:	f7fd fbbc 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b69e8:	9600      	str	r6, [sp, #0]
   b69ea:	463b      	mov	r3, r7
   b69ec:	f8d9 2000 	ldr.w	r2, [r9]
   b69f0:	7821      	ldrb	r1, [r4, #0]
   b69f2:	2005      	movs	r0, #5
   b69f4:	f7fd fbb4 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueBlue, i, 255);
   b69f8:	9600      	str	r6, [sp, #0]
   b69fa:	463b      	mov	r3, r7
   b69fc:	f8d8 2000 	ldr.w	r2, [r8]
   b6a00:	7821      	ldrb	r1, [r4, #0]
   b6a02:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b6a04:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueBlue, i, 255);
   b6a06:	f7fd fbab 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b6a0a:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b6a0e:	d1c6      	bne.n	b699e <loop+0x21ee>
        hueOnOff = false;
   b6a10:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b6a12:	4f7b      	ldr	r7, [pc, #492]	; (b6c00 <loop+0x2450>)
        hueOnOff = false;
   b6a14:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b6a16:	f002 fd8f 	bl	b9538 <_Z16_fetch_usbserialv>
   b6a1a:	497a      	ldr	r1, [pc, #488]	; (b6c04 <loop+0x2454>)
   b6a1c:	f7fd fb6d 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b6a20:	9600      	str	r6, [sp, #0]
   b6a22:	683a      	ldr	r2, [r7, #0]
   b6a24:	7821      	ldrb	r1, [r4, #0]
   b6a26:	23ff      	movs	r3, #255	; 0xff
   b6a28:	2001      	movs	r0, #1
   b6a2a:	f7fd fb99 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b6a2e:	9600      	str	r6, [sp, #0]
   b6a30:	683a      	ldr	r2, [r7, #0]
   b6a32:	7821      	ldrb	r1, [r4, #0]
   b6a34:	23ff      	movs	r3, #255	; 0xff
   b6a36:	2002      	movs	r0, #2
   b6a38:	f7fd fb92 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b6a3c:	9600      	str	r6, [sp, #0]
   b6a3e:	683a      	ldr	r2, [r7, #0]
   b6a40:	7821      	ldrb	r1, [r4, #0]
   b6a42:	23ff      	movs	r3, #255	; 0xff
   b6a44:	2003      	movs	r0, #3
   b6a46:	f7fd fb8b 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b6a4a:	9600      	str	r6, [sp, #0]
   b6a4c:	683a      	ldr	r2, [r7, #0]
   b6a4e:	7821      	ldrb	r1, [r4, #0]
   b6a50:	23ff      	movs	r3, #255	; 0xff
   b6a52:	2004      	movs	r0, #4
   b6a54:	f7fd fb84 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b6a58:	9600      	str	r6, [sp, #0]
   b6a5a:	683a      	ldr	r2, [r7, #0]
   b6a5c:	7821      	ldrb	r1, [r4, #0]
   b6a5e:	23ff      	movs	r3, #255	; 0xff
   b6a60:	2005      	movs	r0, #5
   b6a62:	f7fd fb7d 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b6a66:	9600      	str	r6, [sp, #0]
   b6a68:	683a      	ldr	r2, [r7, #0]
   b6a6a:	7821      	ldrb	r1, [r4, #0]
   b6a6c:	23ff      	movs	r3, #255	; 0xff
   b6a6e:	2006      	movs	r0, #6
   b6a70:	f7fd fb76 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b6a74:	f242 7010 	movw	r0, #10000	; 0x2710
   b6a78:	f001 fd24 	bl	b84c4 <delay>
    if(roll==19) {
   b6a7c:	682b      	ldr	r3, [r5, #0]
   b6a7e:	2b13      	cmp	r3, #19
   b6a80:	f040 80f8 	bne.w	b6c74 <loop+0x24c4>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b6a84:	f002 fd58 	bl	b9538 <_Z16_fetch_usbserialv>
   b6a88:	2203      	movs	r2, #3
   b6a8a:	4959      	ldr	r1, [pc, #356]	; (b6bf0 <loop+0x2440>)
 hueOnOff = true;
   b6a8c:	4c59      	ldr	r4, [pc, #356]	; (b6bf4 <loop+0x2444>)
            Serial.printf("turning on the light\n");
   b6a8e:	f8df a17c 	ldr.w	sl, [pc, #380]	; b6c0c <loop+0x245c>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b6a92:	f8df 817c 	ldr.w	r8, [pc, #380]	; b6c10 <loop+0x2460>
        Serial.printf("Turniing off MRWEMO #%i\n", MRWEMO);
   b6a96:	f7fd fb30 	bl	b40fa <_ZN5Print6printfEPKcz>
        switchOFF(MRWEMO);
   b6a9a:	2003      	movs	r0, #3
   b6a9c:	f7fd fce8 	bl	b4470 <_Z9switchOFFi>
        delay(10000);
   b6aa0:	f242 7010 	movw	r0, #10000	; 0x2710
   b6aa4:	f001 fd0e 	bl	b84c4 <delay>
        myDisplay.setRotation(2); //0-3
   b6aa8:	4853      	ldr	r0, [pc, #332]	; (b6bf8 <loop+0x2448>)
   b6aaa:	2102      	movs	r1, #2
   b6aac:	f000 fea9 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b6ab0:	2200      	movs	r2, #0
   b6ab2:	4611      	mov	r1, r2
   b6ab4:	4850      	ldr	r0, [pc, #320]	; (b6bf8 <loop+0x2448>)
   b6ab6:	f000 fe9f 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, heroTime, 128, 64, WHITE);
   b6aba:	2601      	movs	r6, #1
   b6abc:	2340      	movs	r3, #64	; 0x40
   b6abe:	2200      	movs	r2, #0
   b6ac0:	e9cd 3601 	strd	r3, r6, [sp, #4]
   b6ac4:	2380      	movs	r3, #128	; 0x80
   b6ac6:	4611      	mov	r1, r2
   b6ac8:	484b      	ldr	r0, [pc, #300]	; (b6bf8 <loop+0x2448>)
   b6aca:	9300      	str	r3, [sp, #0]
   b6acc:	4b4e      	ldr	r3, [pc, #312]	; (b6c08 <loop+0x2458>)
   b6ace:	f000 fd8f 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b6ad2:	4849      	ldr	r0, [pc, #292]	; (b6bf8 <loop+0x2448>)
   b6ad4:	f001 f8fa 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b6ad8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b6adc:	f001 fcf2 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b6ae0:	4845      	ldr	r0, [pc, #276]	; (b6bf8 <loop+0x2448>)
   b6ae2:	f001 f87b 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
        for(int i=255; i>=0; i=i-100) {
   b6ae6:	27ff      	movs	r7, #255	; 0xff
 hueOnOff = true;
   b6ae8:	7026      	strb	r6, [r4, #0]
            setHue(1, hueOnOff, HueGreen, i, 255);
   b6aea:	26ff      	movs	r6, #255	; 0xff
            Serial.printf("turning on the light\n");
   b6aec:	f002 fd24 	bl	b9538 <_Z16_fetch_usbserialv>
   b6af0:	4651      	mov	r1, sl
   b6af2:	f7fd fb02 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b6af6:	9600      	str	r6, [sp, #0]
            setHue(2, hueOnOff, HueViolet, i, 255);
   b6af8:	f8df 911c 	ldr.w	r9, [pc, #284]	; b6c18 <loop+0x2468>
            setHue(1, hueOnOff, HueGreen, i, 255);
   b6afc:	f8d8 2000 	ldr.w	r2, [r8]
   b6b00:	7821      	ldrb	r1, [r4, #0]
   b6b02:	463b      	mov	r3, r7
   b6b04:	2001      	movs	r0, #1
   b6b06:	f7fd fb2b 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueViolet, i, 255);
   b6b0a:	9600      	str	r6, [sp, #0]
   b6b0c:	463b      	mov	r3, r7
   b6b0e:	f8d9 2000 	ldr.w	r2, [r9]
   b6b12:	7821      	ldrb	r1, [r4, #0]
   b6b14:	2002      	movs	r0, #2
   b6b16:	f7fd fb23 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueGreen, i, 255);
   b6b1a:	9600      	str	r6, [sp, #0]
   b6b1c:	463b      	mov	r3, r7
   b6b1e:	f8d8 2000 	ldr.w	r2, [r8]
   b6b22:	7821      	ldrb	r1, [r4, #0]
   b6b24:	2003      	movs	r0, #3
   b6b26:	f7fd fb1b 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueViolet, i, 255);
   b6b2a:	9600      	str	r6, [sp, #0]
   b6b2c:	463b      	mov	r3, r7
   b6b2e:	f8d9 2000 	ldr.w	r2, [r9]
   b6b32:	7821      	ldrb	r1, [r4, #0]
   b6b34:	2004      	movs	r0, #4
   b6b36:	f7fd fb13 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueGreen, i, 255);
   b6b3a:	9600      	str	r6, [sp, #0]
   b6b3c:	463b      	mov	r3, r7
   b6b3e:	f8d8 2000 	ldr.w	r2, [r8]
   b6b42:	7821      	ldrb	r1, [r4, #0]
   b6b44:	2005      	movs	r0, #5
   b6b46:	f7fd fb0b 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueViolet, i, 255);
   b6b4a:	9600      	str	r6, [sp, #0]
   b6b4c:	463b      	mov	r3, r7
   b6b4e:	f8d9 2000 	ldr.w	r2, [r9]
   b6b52:	7821      	ldrb	r1, [r4, #0]
   b6b54:	2006      	movs	r0, #6
        for(int i=255; i>=0; i=i-100) {
   b6b56:	3f64      	subs	r7, #100	; 0x64
            setHue(6, hueOnOff, HueViolet, i, 255);
   b6b58:	f7fd fb02 	bl	b4160 <_Z6setHueibiii>
        for(int i=255; i>=0; i=i-100) {
   b6b5c:	f117 0f2d 	cmn.w	r7, #45	; 0x2d
   b6b60:	d1c3      	bne.n	b6aea <loop+0x233a>
            Serial.printf("turning on the light\n");
   b6b62:	f8df a0a8 	ldr.w	sl, [pc, #168]	; b6c0c <loop+0x245c>
        for(int i=0; i<=255; i=i+100) {
   b6b66:	2700      	movs	r7, #0
            Serial.printf("turning on the light\n");
   b6b68:	f002 fce6 	bl	b9538 <_Z16_fetch_usbserialv>
   b6b6c:	4651      	mov	r1, sl
   b6b6e:	f7fd fac4 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueViolet, i, 255);
   b6b72:	9600      	str	r6, [sp, #0]
   b6b74:	463b      	mov	r3, r7
   b6b76:	f8d9 2000 	ldr.w	r2, [r9]
   b6b7a:	7821      	ldrb	r1, [r4, #0]
   b6b7c:	2001      	movs	r0, #1
   b6b7e:	f7fd faef 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueGreen, i, 255);
   b6b82:	9600      	str	r6, [sp, #0]
   b6b84:	463b      	mov	r3, r7
   b6b86:	f8d8 2000 	ldr.w	r2, [r8]
   b6b8a:	7821      	ldrb	r1, [r4, #0]
   b6b8c:	2002      	movs	r0, #2
   b6b8e:	f7fd fae7 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueViolet, i, 255);
   b6b92:	9600      	str	r6, [sp, #0]
   b6b94:	463b      	mov	r3, r7
   b6b96:	f8d9 2000 	ldr.w	r2, [r9]
   b6b9a:	7821      	ldrb	r1, [r4, #0]
   b6b9c:	2003      	movs	r0, #3
   b6b9e:	f7fd fadf 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueGreen, i, 255);
   b6ba2:	9600      	str	r6, [sp, #0]
   b6ba4:	463b      	mov	r3, r7
   b6ba6:	f8d8 2000 	ldr.w	r2, [r8]
   b6baa:	7821      	ldrb	r1, [r4, #0]
   b6bac:	2004      	movs	r0, #4
   b6bae:	f7fd fad7 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueViolet, i, 255);
   b6bb2:	9600      	str	r6, [sp, #0]
   b6bb4:	463b      	mov	r3, r7
   b6bb6:	f8d9 2000 	ldr.w	r2, [r9]
   b6bba:	7821      	ldrb	r1, [r4, #0]
   b6bbc:	2005      	movs	r0, #5
   b6bbe:	f7fd facf 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueGreen, i, 255);
   b6bc2:	9600      	str	r6, [sp, #0]
   b6bc4:	463b      	mov	r3, r7
   b6bc6:	f8d8 2000 	ldr.w	r2, [r8]
   b6bca:	7821      	ldrb	r1, [r4, #0]
   b6bcc:	2006      	movs	r0, #6
        for(int i=0; i<=255; i=i+100) {
   b6bce:	3764      	adds	r7, #100	; 0x64
            setHue(6, hueOnOff, HueGreen, i, 255);
   b6bd0:	f7fd fac6 	bl	b4160 <_Z6setHueibiii>
        for(int i=0; i<=255; i=i+100) {
   b6bd4:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
   b6bd8:	d1c6      	bne.n	b6b68 <loop+0x23b8>
        hueOnOff = false;
   b6bda:	2300      	movs	r3, #0
        setHue(1, hueOnOff, HueRed, 255, 255);
   b6bdc:	4f08      	ldr	r7, [pc, #32]	; (b6c00 <loop+0x2450>)
        hueOnOff = false;
   b6bde:	7023      	strb	r3, [r4, #0]
        Serial.printf("turning off the light");
   b6be0:	f002 fcaa 	bl	b9538 <_Z16_fetch_usbserialv>
   b6be4:	4907      	ldr	r1, [pc, #28]	; (b6c04 <loop+0x2454>)
   b6be6:	f7fd fa88 	bl	b40fa <_ZN5Print6printfEPKcz>
        setHue(1, hueOnOff, HueRed, 255, 255);
   b6bea:	9600      	str	r6, [sp, #0]
   b6bec:	683a      	ldr	r2, [r7, #0]
   b6bee:	e015      	b.n	b6c1c <loop+0x246c>
   b6bf0:	000bbd2b 	.word	0x000bbd2b
   b6bf4:	2003e64c 	.word	0x2003e64c
   b6bf8:	2003e658 	.word	0x2003e658
   b6bfc:	000bc23c 	.word	0x000bc23c
   b6c00:	2003e58c 	.word	0x2003e58c
   b6c04:	000bbd44 	.word	0x000bbd44
   b6c08:	000bff2c 	.word	0x000bff2c
   b6c0c:	000bbd15 	.word	0x000bbd15
   b6c10:	2003e0a8 	.word	0x2003e0a8
   b6c14:	2003e0a4 	.word	0x2003e0a4
   b6c18:	2003e0b4 	.word	0x2003e0b4
   b6c1c:	7821      	ldrb	r1, [r4, #0]
   b6c1e:	23ff      	movs	r3, #255	; 0xff
   b6c20:	2001      	movs	r0, #1
   b6c22:	f7fd fa9d 	bl	b4160 <_Z6setHueibiii>
        setHue(2, hueOnOff, HueRed, 255, 255);
   b6c26:	9600      	str	r6, [sp, #0]
   b6c28:	683a      	ldr	r2, [r7, #0]
   b6c2a:	7821      	ldrb	r1, [r4, #0]
   b6c2c:	23ff      	movs	r3, #255	; 0xff
   b6c2e:	2002      	movs	r0, #2
   b6c30:	f7fd fa96 	bl	b4160 <_Z6setHueibiii>
        setHue(3, hueOnOff, HueRed, 255, 255);
   b6c34:	9600      	str	r6, [sp, #0]
   b6c36:	683a      	ldr	r2, [r7, #0]
   b6c38:	7821      	ldrb	r1, [r4, #0]
   b6c3a:	23ff      	movs	r3, #255	; 0xff
   b6c3c:	2003      	movs	r0, #3
   b6c3e:	f7fd fa8f 	bl	b4160 <_Z6setHueibiii>
        setHue(4, hueOnOff, HueRed, 255, 255);
   b6c42:	9600      	str	r6, [sp, #0]
   b6c44:	683a      	ldr	r2, [r7, #0]
   b6c46:	7821      	ldrb	r1, [r4, #0]
   b6c48:	23ff      	movs	r3, #255	; 0xff
   b6c4a:	2004      	movs	r0, #4
   b6c4c:	f7fd fa88 	bl	b4160 <_Z6setHueibiii>
        setHue(5, hueOnOff, HueRed, 255, 255);
   b6c50:	9600      	str	r6, [sp, #0]
   b6c52:	683a      	ldr	r2, [r7, #0]
   b6c54:	7821      	ldrb	r1, [r4, #0]
   b6c56:	23ff      	movs	r3, #255	; 0xff
   b6c58:	2005      	movs	r0, #5
   b6c5a:	f7fd fa81 	bl	b4160 <_Z6setHueibiii>
        setHue(6, hueOnOff, HueRed, 255, 255);
   b6c5e:	9600      	str	r6, [sp, #0]
   b6c60:	683a      	ldr	r2, [r7, #0]
   b6c62:	7821      	ldrb	r1, [r4, #0]
   b6c64:	23ff      	movs	r3, #255	; 0xff
   b6c66:	2006      	movs	r0, #6
   b6c68:	f7fd fa7a 	bl	b4160 <_Z6setHueibiii>
        delay(10000);
   b6c6c:	f242 7010 	movw	r0, #10000	; 0x2710
   b6c70:	f001 fc28 	bl	b84c4 <delay>
    if(roll==20) {
   b6c74:	682b      	ldr	r3, [r5, #0]
   b6c76:	2b14      	cmp	r3, #20
   b6c78:	f040 80de 	bne.w	b6e38 <loop+0x2688>
        myDisplay.setRotation(2); //0-3
   b6c7c:	4870      	ldr	r0, [pc, #448]	; (b6e40 <loop+0x2690>)
            hueOnOff = true;
   b6c7e:	4e71      	ldr	r6, [pc, #452]	; (b6e44 <loop+0x2694>)
                Serial.printf("turning on the light\n");
   b6c80:	f8df b1ec 	ldr.w	fp, [pc, #492]	; b6e70 <loop+0x26c0>
                Serial.printf("light 1, r= %i\n", r);
   b6c84:	f8df a1ec 	ldr.w	sl, [pc, #492]	; b6e74 <loop+0x26c4>
        myDisplay.setRotation(2); //0-3
   b6c88:	2102      	movs	r1, #2
   b6c8a:	f000 fdba 	bl	b7802 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor(0,0);
   b6c8e:	2200      	movs	r2, #0
   b6c90:	4611      	mov	r1, r2
   b6c92:	486b      	ldr	r0, [pc, #428]	; (b6e40 <loop+0x2690>)
   b6c94:	f000 fdb0 	bl	b77f8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.drawBitmap(0, 0, killUmAll, 128, 64, WHITE);
   b6c98:	2401      	movs	r4, #1
   b6c9a:	2340      	movs	r3, #64	; 0x40
   b6c9c:	2200      	movs	r2, #0
   b6c9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b6ca2:	2380      	movs	r3, #128	; 0x80
   b6ca4:	4611      	mov	r1, r2
   b6ca6:	4866      	ldr	r0, [pc, #408]	; (b6e40 <loop+0x2690>)
   b6ca8:	9300      	str	r3, [sp, #0]
   b6caa:	4b67      	ldr	r3, [pc, #412]	; (b6e48 <loop+0x2698>)
   b6cac:	f000 fca0 	bl	b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b6cb0:	4863      	ldr	r0, [pc, #396]	; (b6e40 <loop+0x2690>)
   b6cb2:	f001 f80b 	bl	b7ccc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b6cb6:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b6cba:	f001 fc03 	bl	b84c4 <delay>
        myDisplay.clearDisplay();
   b6cbe:	4860      	ldr	r0, [pc, #384]	; (b6e40 <loop+0x2690>)
   b6cc0:	f000 ff8c 	bl	b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>
    Serial.printf("Turniing on MSWEMO #%i\n", MSWEMO);
   b6cc4:	f002 fc38 	bl	b9538 <_Z16_fetch_usbserialv>
   b6cc8:	4960      	ldr	r1, [pc, #384]	; (b6e4c <loop+0x269c>)
   b6cca:	4622      	mov	r2, r4
   b6ccc:	f7fd fa15 	bl	b40fa <_ZN5Print6printfEPKcz>
    switchON(MSWEMO);
   b6cd0:	4620      	mov	r0, r4
   b6cd2:	f7fd fb6b 	bl	b43ac <_Z8switchONi>
            hueOnOff = true;
   b6cd6:	f04f 0803 	mov.w	r8, #3
   b6cda:	7034      	strb	r4, [r6, #0]
                Serial.printf("turning on the light\n");
   b6cdc:	f002 fc2c 	bl	b9538 <_Z16_fetch_usbserialv>
   b6ce0:	4659      	mov	r1, fp
   b6ce2:	f7fd fa0a 	bl	b40fa <_ZN5Print6printfEPKcz>
                r=random(7);
   b6ce6:	2007      	movs	r0, #7
   b6ce8:	f001 fe9a 	bl	b8a20 <_Z6randomi>
   b6cec:	4681      	mov	r9, r0
                setHue(1, hueOnOff, HueRainbow[r], 255, 255);
   b6cee:	24ff      	movs	r4, #255	; 0xff
   b6cf0:	4f57      	ldr	r7, [pc, #348]	; (b6e50 <loop+0x26a0>)
                Serial.printf("light 1, r= %i\n", r);
   b6cf2:	f002 fc21 	bl	b9538 <_Z16_fetch_usbserialv>
   b6cf6:	464a      	mov	r2, r9
   b6cf8:	4651      	mov	r1, sl
   b6cfa:	f7fd f9fe 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(1, hueOnOff, HueRainbow[r], 255, 255);
   b6cfe:	9400      	str	r4, [sp, #0]
   b6d00:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b6d04:	7831      	ldrb	r1, [r6, #0]
   b6d06:	4623      	mov	r3, r4
   b6d08:	2001      	movs	r0, #1
   b6d0a:	f7fd fa29 	bl	b4160 <_Z6setHueibiii>
                r=random(7);
   b6d0e:	2007      	movs	r0, #7
   b6d10:	f001 fe86 	bl	b8a20 <_Z6randomi>
   b6d14:	4681      	mov	r9, r0
                Serial.printf("light 2, r= %i\n", r);
   b6d16:	f002 fc0f 	bl	b9538 <_Z16_fetch_usbserialv>
   b6d1a:	464a      	mov	r2, r9
   b6d1c:	494d      	ldr	r1, [pc, #308]	; (b6e54 <loop+0x26a4>)
   b6d1e:	f7fd f9ec 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(2, hueOnOff, HueRainbow[r], 255, 255);
   b6d22:	9400      	str	r4, [sp, #0]
   b6d24:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b6d28:	7831      	ldrb	r1, [r6, #0]
   b6d2a:	4623      	mov	r3, r4
   b6d2c:	2002      	movs	r0, #2
   b6d2e:	f7fd fa17 	bl	b4160 <_Z6setHueibiii>
                r=random(7);
   b6d32:	2007      	movs	r0, #7
   b6d34:	f001 fe74 	bl	b8a20 <_Z6randomi>
   b6d38:	4681      	mov	r9, r0
                Serial.printf("light 3, r= %i\n", r);
   b6d3a:	f002 fbfd 	bl	b9538 <_Z16_fetch_usbserialv>
   b6d3e:	464a      	mov	r2, r9
   b6d40:	4945      	ldr	r1, [pc, #276]	; (b6e58 <loop+0x26a8>)
   b6d42:	f7fd f9da 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(3, hueOnOff, HueRainbow[r], 255, 255);
   b6d46:	9400      	str	r4, [sp, #0]
   b6d48:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b6d4c:	7831      	ldrb	r1, [r6, #0]
   b6d4e:	4623      	mov	r3, r4
   b6d50:	2003      	movs	r0, #3
   b6d52:	f7fd fa05 	bl	b4160 <_Z6setHueibiii>
                r=random(7);
   b6d56:	2007      	movs	r0, #7
   b6d58:	f001 fe62 	bl	b8a20 <_Z6randomi>
   b6d5c:	4681      	mov	r9, r0
                Serial.printf("light 4, r= %i\n", r);
   b6d5e:	f002 fbeb 	bl	b9538 <_Z16_fetch_usbserialv>
   b6d62:	464a      	mov	r2, r9
   b6d64:	493d      	ldr	r1, [pc, #244]	; (b6e5c <loop+0x26ac>)
   b6d66:	f7fd f9c8 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(4, hueOnOff, HueRainbow[r], 255, 255);
   b6d6a:	9400      	str	r4, [sp, #0]
   b6d6c:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b6d70:	7831      	ldrb	r1, [r6, #0]
   b6d72:	4623      	mov	r3, r4
   b6d74:	2004      	movs	r0, #4
   b6d76:	f7fd f9f3 	bl	b4160 <_Z6setHueibiii>
                r=random(7);
   b6d7a:	2007      	movs	r0, #7
   b6d7c:	f001 fe50 	bl	b8a20 <_Z6randomi>
   b6d80:	4681      	mov	r9, r0
                Serial.printf("light 5, r= %i\n", r);
   b6d82:	f002 fbd9 	bl	b9538 <_Z16_fetch_usbserialv>
   b6d86:	464a      	mov	r2, r9
   b6d88:	4935      	ldr	r1, [pc, #212]	; (b6e60 <loop+0x26b0>)
   b6d8a:	f7fd f9b6 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(5, hueOnOff, HueRainbow[r], 255, 255);
   b6d8e:	9400      	str	r4, [sp, #0]
   b6d90:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b6d94:	7831      	ldrb	r1, [r6, #0]
   b6d96:	4623      	mov	r3, r4
   b6d98:	2005      	movs	r0, #5
   b6d9a:	f7fd f9e1 	bl	b4160 <_Z6setHueibiii>
                r=random(7);
   b6d9e:	2007      	movs	r0, #7
   b6da0:	f001 fe3e 	bl	b8a20 <_Z6randomi>
   b6da4:	4681      	mov	r9, r0
                Serial.printf("light 6, r= %i\n", r);
   b6da6:	f002 fbc7 	bl	b9538 <_Z16_fetch_usbserialv>
   b6daa:	492e      	ldr	r1, [pc, #184]	; (b6e64 <loop+0x26b4>)
   b6dac:	464a      	mov	r2, r9
   b6dae:	f7fd f9a4 	bl	b40fa <_ZN5Print6printfEPKcz>
                setHue(6, hueOnOff, HueRainbow[r], 255, 255);
   b6db2:	9400      	str	r4, [sp, #0]
   b6db4:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
   b6db8:	7831      	ldrb	r1, [r6, #0]
   b6dba:	4623      	mov	r3, r4
   b6dbc:	2006      	movs	r0, #6
   b6dbe:	f7fd f9cf 	bl	b4160 <_Z6setHueibiii>
            for(int hr=2; hr>=0; hr--) {
   b6dc2:	f1b8 0801 	subs.w	r8, r8, #1
   b6dc6:	d189      	bne.n	b6cdc <loop+0x252c>
            setHue(1, hueOnOff, HueRed, 255, 255);
   b6dc8:	4f27      	ldr	r7, [pc, #156]	; (b6e68 <loop+0x26b8>)
            hueOnOff = false;
   b6dca:	f886 8000 	strb.w	r8, [r6]
            Serial.printf("turning off the light");
   b6dce:	f002 fbb3 	bl	b9538 <_Z16_fetch_usbserialv>
   b6dd2:	4926      	ldr	r1, [pc, #152]	; (b6e6c <loop+0x26bc>)
   b6dd4:	f7fd f991 	bl	b40fa <_ZN5Print6printfEPKcz>
            setHue(1, hueOnOff, HueRed, 255, 255);
   b6dd8:	9400      	str	r4, [sp, #0]
   b6dda:	683a      	ldr	r2, [r7, #0]
   b6ddc:	7831      	ldrb	r1, [r6, #0]
   b6dde:	4623      	mov	r3, r4
   b6de0:	2001      	movs	r0, #1
   b6de2:	f7fd f9bd 	bl	b4160 <_Z6setHueibiii>
            setHue(2, hueOnOff, HueRed, 255, 255);
   b6de6:	9400      	str	r4, [sp, #0]
   b6de8:	683a      	ldr	r2, [r7, #0]
   b6dea:	7831      	ldrb	r1, [r6, #0]
   b6dec:	4623      	mov	r3, r4
   b6dee:	2002      	movs	r0, #2
   b6df0:	f7fd f9b6 	bl	b4160 <_Z6setHueibiii>
            setHue(3, hueOnOff, HueRed, 255, 255);
   b6df4:	9400      	str	r4, [sp, #0]
   b6df6:	683a      	ldr	r2, [r7, #0]
   b6df8:	7831      	ldrb	r1, [r6, #0]
   b6dfa:	4623      	mov	r3, r4
   b6dfc:	2003      	movs	r0, #3
   b6dfe:	f7fd f9af 	bl	b4160 <_Z6setHueibiii>
            setHue(4, hueOnOff, HueRed, 255, 255);
   b6e02:	9400      	str	r4, [sp, #0]
   b6e04:	683a      	ldr	r2, [r7, #0]
   b6e06:	7831      	ldrb	r1, [r6, #0]
   b6e08:	4623      	mov	r3, r4
   b6e0a:	2004      	movs	r0, #4
   b6e0c:	f7fd f9a8 	bl	b4160 <_Z6setHueibiii>
            setHue(5, hueOnOff, HueRed, 255, 255);
   b6e10:	9400      	str	r4, [sp, #0]
   b6e12:	683a      	ldr	r2, [r7, #0]
   b6e14:	7831      	ldrb	r1, [r6, #0]
   b6e16:	4623      	mov	r3, r4
   b6e18:	2005      	movs	r0, #5
   b6e1a:	f7fd f9a1 	bl	b4160 <_Z6setHueibiii>
            setHue(6, hueOnOff, HueRed, 255, 255);
   b6e1e:	9400      	str	r4, [sp, #0]
   b6e20:	4623      	mov	r3, r4
   b6e22:	683a      	ldr	r2, [r7, #0]
   b6e24:	7831      	ldrb	r1, [r6, #0]
   b6e26:	2006      	movs	r0, #6
   b6e28:	f7fd f99a 	bl	b4160 <_Z6setHueibiii>
            delay(10000);
   b6e2c:	f242 7010 	movw	r0, #10000	; 0x2710
   b6e30:	f001 fb48 	bl	b84c4 <delay>
        roll=1;
   b6e34:	2301      	movs	r3, #1
   b6e36:	602b      	str	r3, [r5, #0]
}
   b6e38:	b005      	add	sp, #20
   b6e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6e3e:	bf00      	nop
   b6e40:	2003e658 	.word	0x2003e658
   b6e44:	2003e64c 	.word	0x2003e64c
   b6e48:	000c0338 	.word	0x000c0338
   b6e4c:	000bbd5a 	.word	0x000bbd5a
   b6e50:	2003e570 	.word	0x2003e570
   b6e54:	000bbd82 	.word	0x000bbd82
   b6e58:	000bbd92 	.word	0x000bbd92
   b6e5c:	000bbda2 	.word	0x000bbda2
   b6e60:	000bbdb2 	.word	0x000bbdb2
   b6e64:	000bbdc2 	.word	0x000bbdc2
   b6e68:	2003e58c 	.word	0x2003e58c
   b6e6c:	000bbd44 	.word	0x000bbd44
   b6e70:	000bbd15 	.word	0x000bbd15
   b6e74:	000bbd72 	.word	0x000bbd72

000b6e78 <_GLOBAL__sub_I_hueOn>:
   b6e78:	b508      	push	{r3, lr}
String hueCmd;  // Hue command
   b6e7a:	491b      	ldr	r1, [pc, #108]	; (b6ee8 <_GLOBAL__sub_I_hueOn+0x70>)
   b6e7c:	481b      	ldr	r0, [pc, #108]	; (b6eec <_GLOBAL__sub_I_hueOn+0x74>)
   b6e7e:	f001 ff16 	bl	b8cae <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b6e82:	4a1b      	ldr	r2, [pc, #108]	; (b6ef0 <_GLOBAL__sub_I_hueOn+0x78>)
   b6e84:	4b1b      	ldr	r3, [pc, #108]	; (b6ef4 <_GLOBAL__sub_I_hueOn+0x7c>)
   b6e86:	6812      	ldr	r2, [r2, #0]
   b6e88:	601a      	str	r2, [r3, #0]
   b6e8a:	4a1b      	ldr	r2, [pc, #108]	; (b6ef8 <_GLOBAL__sub_I_hueOn+0x80>)
TCPClient HueClient;
   b6e8c:	481b      	ldr	r0, [pc, #108]	; (b6efc <_GLOBAL__sub_I_hueOn+0x84>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b6e8e:	6812      	ldr	r2, [r2, #0]
   b6e90:	605a      	str	r2, [r3, #4]
   b6e92:	4a1b      	ldr	r2, [pc, #108]	; (b6f00 <_GLOBAL__sub_I_hueOn+0x88>)
   b6e94:	6812      	ldr	r2, [r2, #0]
   b6e96:	609a      	str	r2, [r3, #8]
   b6e98:	4a1a      	ldr	r2, [pc, #104]	; (b6f04 <_GLOBAL__sub_I_hueOn+0x8c>)
   b6e9a:	6812      	ldr	r2, [r2, #0]
   b6e9c:	60da      	str	r2, [r3, #12]
   b6e9e:	4a1a      	ldr	r2, [pc, #104]	; (b6f08 <_GLOBAL__sub_I_hueOn+0x90>)
   b6ea0:	6812      	ldr	r2, [r2, #0]
   b6ea2:	611a      	str	r2, [r3, #16]
   b6ea4:	4a19      	ldr	r2, [pc, #100]	; (b6f0c <_GLOBAL__sub_I_hueOn+0x94>)
   b6ea6:	6812      	ldr	r2, [r2, #0]
   b6ea8:	615a      	str	r2, [r3, #20]
   b6eaa:	4a19      	ldr	r2, [pc, #100]	; (b6f10 <_GLOBAL__sub_I_hueOn+0x98>)
   b6eac:	6812      	ldr	r2, [r2, #0]
   b6eae:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b6eb0:	f002 fa70 	bl	b9394 <_ZN9TCPClientC1Ev>
TCPClient WemoClient;
   b6eb4:	4817      	ldr	r0, [pc, #92]	; (b6f14 <_GLOBAL__sub_I_hueOn+0x9c>)
   b6eb6:	f002 fa6d 	bl	b9394 <_ZN9TCPClientC1Ev>
Adafruit_SSD1306 myDisplay(OLED_RESET); 
   b6eba:	2104      	movs	r1, #4
   b6ebc:	4816      	ldr	r0, [pc, #88]	; (b6f18 <_GLOBAL__sub_I_hueOn+0xa0>)
   b6ebe:	f000 fe77 	bl	b7bb0 <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b6ec2:	2302      	movs	r3, #2
   b6ec4:	2208      	movs	r2, #8
   b6ec6:	4815      	ldr	r0, [pc, #84]	; (b6f1c <_GLOBAL__sub_I_hueOn+0xa4>)
   b6ec8:	2101      	movs	r1, #1
   b6eca:	f000 f86f 	bl	b6fac <_ZN17Adafruit_NeoPixelC1Ethh>
              error_(SYSTEM_ERROR_NONE) {
   b6ece:	4b14      	ldr	r3, [pc, #80]	; (b6f20 <_GLOBAL__sub_I_hueOn+0xa8>)
   b6ed0:	2200      	movs	r2, #0
   b6ed2:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b6ed6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b6eda:	609a      	str	r2, [r3, #8]
   b6edc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   b6ee0:	2002      	movs	r0, #2
   b6ee2:	f001 ba23 	b.w	b832c <set_system_mode>
   b6ee6:	bf00      	nop
   b6ee8:	000bbb84 	.word	0x000bbb84
   b6eec:	2003e63c 	.word	0x2003e63c
   b6ef0:	2003e58c 	.word	0x2003e58c
   b6ef4:	2003e570 	.word	0x2003e570
   b6ef8:	2003e0b0 	.word	0x2003e0b0
   b6efc:	2003e554 	.word	0x2003e554
   b6f00:	2003e0b8 	.word	0x2003e0b8
   b6f04:	2003e0a8 	.word	0x2003e0a8
   b6f08:	2003e0a4 	.word	0x2003e0a4
   b6f0c:	2003e0ac 	.word	0x2003e0ac
   b6f10:	2003e0b4 	.word	0x2003e0b4
   b6f14:	2003e59c 	.word	0x2003e59c
   b6f18:	2003e658 	.word	0x2003e658
   b6f1c:	2003e680 	.word	0x2003e680
   b6f20:	2003e590 	.word	0x2003e590

000b6f24 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b6f24:	b538      	push	{r3, r4, r5, lr}
   b6f26:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b6f28:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b6f2a:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b6f2c:	b108      	cbz	r0, b6f32 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b6f2e:	f001 fa99 	bl	b8464 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b6f32:	79a3      	ldrb	r3, [r4, #6]
   b6f34:	2b06      	cmp	r3, #6
   b6f36:	bf0c      	ite	eq
   b6f38:	2004      	moveq	r0, #4
   b6f3a:	2003      	movne	r0, #3
   b6f3c:	fb10 f005 	smulbb	r0, r0, r5
   b6f40:	b280      	uxth	r0, r0
   b6f42:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b6f44:	f001 fa86 	bl	b8454 <malloc>
   b6f48:	60e0      	str	r0, [r4, #12]
   b6f4a:	b128      	cbz	r0, b6f58 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b6f4c:	88a2      	ldrh	r2, [r4, #4]
   b6f4e:	2100      	movs	r1, #0
   b6f50:	f004 fbb4 	bl	bb6bc <memset>
    numLEDs = n;
   b6f54:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b6f56:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b6f58:	80a0      	strh	r0, [r4, #4]
   b6f5a:	8060      	strh	r0, [r4, #2]
}
   b6f5c:	e7fb      	b.n	b6f56 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b6f5e <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b6f5e:	b510      	push	{r4, lr}
   b6f60:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b6f62:	2101      	movs	r1, #1
   b6f64:	79c0      	ldrb	r0, [r0, #7]
   b6f66:	f002 fc71 	bl	b984c <pinMode>
  digitalWrite(pin, LOW);
   b6f6a:	79e0      	ldrb	r0, [r4, #7]
   b6f6c:	2100      	movs	r1, #0
   b6f6e:	f002 fc7e 	bl	b986e <digitalWrite>
  begun = true;
   b6f72:	2301      	movs	r3, #1
   b6f74:	7023      	strb	r3, [r4, #0]
}
   b6f76:	bd10      	pop	{r4, pc}

000b6f78 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b6f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b6f7a:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b6f7c:	4605      	mov	r5, r0
   b6f7e:	460c      	mov	r4, r1
    if (begun) {
   b6f80:	b11b      	cbz	r3, b6f8a <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b6f82:	79c0      	ldrb	r0, [r0, #7]
   b6f84:	2100      	movs	r1, #0
   b6f86:	f002 fc61 	bl	b984c <pinMode>
    }
    pin = p;
    if (begun) {
   b6f8a:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b6f8c:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b6f8e:	b15b      	cbz	r3, b6fa8 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b6f90:	b2a0      	uxth	r0, r4
   b6f92:	2101      	movs	r1, #1
   b6f94:	9001      	str	r0, [sp, #4]
   b6f96:	f002 fc59 	bl	b984c <pinMode>
        digitalWrite(p, LOW);
   b6f9a:	9801      	ldr	r0, [sp, #4]
   b6f9c:	2100      	movs	r1, #0
    }
}
   b6f9e:	b003      	add	sp, #12
   b6fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b6fa4:	f002 bc63 	b.w	b986e <digitalWrite>
}
   b6fa8:	b003      	add	sp, #12
   b6faa:	bd30      	pop	{r4, r5, pc}

000b6fac <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b6fac:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b6fae:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b6fb0:	4604      	mov	r4, r0
   b6fb2:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b6fb4:	7183      	strb	r3, [r0, #6]
   b6fb6:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b6fba:	7005      	strb	r5, [r0, #0]
   b6fbc:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b6fbe:	f7ff ffb1 	bl	b6f24 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b6fc2:	4620      	mov	r0, r4
   b6fc4:	4631      	mov	r1, r6
   b6fc6:	f7ff ffd7 	bl	b6f78 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b6fca:	4620      	mov	r0, r4
   b6fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6fd0 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b6fd0:	68c3      	ldr	r3, [r0, #12]
   b6fd2:	2b00      	cmp	r3, #0
   b6fd4:	f000 81a4 	beq.w	b7320 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b6fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6fdc:	7983      	ldrb	r3, [r0, #6]
   b6fde:	3b02      	subs	r3, #2
   b6fe0:	b2db      	uxtb	r3, r3
   b6fe2:	2b04      	cmp	r3, #4
   b6fe4:	bf9c      	itt	ls
   b6fe6:	4abf      	ldrls	r2, [pc, #764]	; (b72e4 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b6fe8:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b6fec:	b085      	sub	sp, #20
   b6fee:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b6ff0:	bf88      	it	hi
   b6ff2:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6ff4:	f000 ffca 	bl	b7f8c <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b6ff8:	692b      	ldr	r3, [r5, #16]
   b6ffa:	1ac0      	subs	r0, r0, r3
   b6ffc:	42a0      	cmp	r0, r4
   b6ffe:	d3f9      	bcc.n	b6ff4 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b7000:	4cb9      	ldr	r4, [pc, #740]	; (b72e8 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b7002:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b7004:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b7008:	b91b      	cbnz	r3, b7012 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b700a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b700e:	2b00      	cmp	r3, #0
   b7010:	db7e      	blt.n	b7110 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b7012:	4cb6      	ldr	r4, [pc, #728]	; (b72ec <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b7014:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b7018:	b923      	cbnz	r3, b7024 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b701a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b701e:	2b00      	cmp	r3, #0
   b7020:	f2c0 816e 	blt.w	b7300 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b7024:	4cb2      	ldr	r4, [pc, #712]	; (b72f0 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b7026:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b702a:	2b00      	cmp	r3, #0
   b702c:	f000 8144 	beq.w	b72b8 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b7030:	79eb      	ldrb	r3, [r5, #7]
   b7032:	4ab0      	ldr	r2, [pc, #704]	; (b72f4 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b7034:	4cb0      	ldr	r4, [pc, #704]	; (b72f8 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b7036:	6812      	ldr	r2, [r2, #0]
   b7038:	0119      	lsls	r1, r3, #4
   b703a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b703e:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b7040:	49ae      	ldr	r1, [pc, #696]	; (b72fc <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b7042:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b7044:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b7048:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b704c:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b7050:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b7052:	f003 031f 	and.w	r3, r3, #31
   b7056:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b705a:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b705c:	433a      	orrs	r2, r7
   b705e:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b7060:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b7062:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b7066:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b706a:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b706c:	2900      	cmp	r1, #0
   b706e:	d044      	beq.n	b70fa <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b7070:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b7074:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b7076:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b707a:	f818 cb01 	ldrb.w	ip, [r8], #1
   b707e:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b7080:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b7082:	6863      	ldr	r3, [r4, #4]
   b7084:	1a9b      	subs	r3, r3, r2
   b7086:	2b46      	cmp	r3, #70	; 0x46
   b7088:	d9fb      	bls.n	b7082 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b708a:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b708c:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b7090:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b7094:	ea43 0307 	orr.w	r3, r3, r7
   b7098:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b709c:	d02f      	beq.n	b70fe <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b709e:	6863      	ldr	r3, [r4, #4]
   b70a0:	1a9b      	subs	r3, r3, r2
   b70a2:	2b28      	cmp	r3, #40	; 0x28
   b70a4:	d9fb      	bls.n	b709e <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b70a6:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b70aa:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b70ac:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b70b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b70b4:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b70b8:	d1e3      	bne.n	b7082 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b70ba:	88ab      	ldrh	r3, [r5, #4]
   b70bc:	f10e 0e01 	add.w	lr, lr, #1
   b70c0:	fa1f fe8e 	uxth.w	lr, lr
   b70c4:	4573      	cmp	r3, lr
   b70c6:	d8d8      	bhi.n	b707a <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b70c8:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b70cc:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b70d0:	6863      	ldr	r3, [r4, #4]
   b70d2:	1a9b      	subs	r3, r3, r2
   b70d4:	2b46      	cmp	r3, #70	; 0x46
   b70d6:	d9fb      	bls.n	b70d0 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b70d8:	6863      	ldr	r3, [r4, #4]
   b70da:	eba3 0909 	sub.w	r9, r3, r9
   b70de:	4589      	cmp	r9, r1
   b70e0:	f0c0 80e4 	bcc.w	b72ac <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b70e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b70e8:	f000 ff48 	bl	b7f7c <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b70ec:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b70ee:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b70f2:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b70f6:	2900      	cmp	r1, #0
   b70f8:	d1ba      	bne.n	b7070 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b70fa:	460a      	mov	r2, r1
   b70fc:	e7e8      	b.n	b70d0 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b70fe:	6863      	ldr	r3, [r4, #4]
   b7100:	1a9b      	subs	r3, r3, r2
   b7102:	2b11      	cmp	r3, #17
   b7104:	d8cf      	bhi.n	b70a6 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b7106:	6863      	ldr	r3, [r4, #4]
   b7108:	1a9b      	subs	r3, r3, r2
   b710a:	2b11      	cmp	r3, #17
   b710c:	d9f7      	bls.n	b70fe <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b710e:	e7ca      	b.n	b70a6 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b7110:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b7114:	2b00      	cmp	r3, #0
   b7116:	f6bf af7c 	bge.w	b7012 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b711a:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b711e:	2b00      	cmp	r3, #0
   b7120:	f6bf af77 	bge.w	b7012 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b7124:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b7128:	2b00      	cmp	r3, #0
   b712a:	f6bf af72 	bge.w	b7012 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b712e:	0136      	lsls	r6, r6, #4
   b7130:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b7132:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b7134:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b7136:	f001 f98d 	bl	b8454 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b713a:	2800      	cmp	r0, #0
   b713c:	f43f af78 	beq.w	b7030 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b7140:	88ab      	ldrh	r3, [r5, #4]
   b7142:	2b00      	cmp	r3, #0
   b7144:	f000 80ed 	beq.w	b7322 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b7148:	68ea      	ldr	r2, [r5, #12]
   b714a:	3b01      	subs	r3, #1
   b714c:	fa12 f783 	uxtah	r7, r2, r3
   b7150:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b7154:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b7156:	f248 0206 	movw	r2, #32774	; 0x8006
   b715a:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b715e:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b7162:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b7166:	bf0c      	ite	eq
   b7168:	4693      	moveq	fp, r2
   b716a:	468b      	movne	fp, r1
   b716c:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b7170:	bf0c      	ite	eq
   b7172:	4616      	moveq	r6, r2
   b7174:	460e      	movne	r6, r1
   b7176:	f01c 0f20 	tst.w	ip, #32
   b717a:	bf0c      	ite	eq
   b717c:	4690      	moveq	r8, r2
   b717e:	4688      	movne	r8, r1
        pos++;
   b7180:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b7184:	f8cd 8008 	str.w	r8, [sp, #8]
   b7188:	9601      	str	r6, [sp, #4]
        pos++;
   b718a:	f103 0802 	add.w	r8, r3, #2
   b718e:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b7192:	9e01      	ldr	r6, [sp, #4]
   b7194:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b7198:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b719c:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b71a0:	9e02      	ldr	r6, [sp, #8]
   b71a2:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b71a6:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b71aa:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b71ae:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b71b2:	bf0c      	ite	eq
   b71b4:	4693      	moveq	fp, r2
   b71b6:	468b      	movne	fp, r1
   b71b8:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b71bc:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b71c0:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b71c4:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b71c8:	bf0c      	ite	eq
   b71ca:	4693      	moveq	fp, r2
   b71cc:	468b      	movne	fp, r1
   b71ce:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b71d2:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b71d6:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b71da:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b71de:	bf0c      	ite	eq
   b71e0:	4693      	moveq	fp, r2
   b71e2:	468b      	movne	fp, r1
   b71e4:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b71e8:	f103 0a08 	add.w	sl, r3, #8
   b71ec:	f103 0806 	add.w	r8, r3, #6
   b71f0:	3307      	adds	r3, #7
   b71f2:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b71f4:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b71f8:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b71fc:	bf0c      	ite	eq
   b71fe:	4693      	moveq	fp, r2
   b7200:	468b      	movne	fp, r1
        pos++;
   b7202:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b7206:	f01c 0f01 	tst.w	ip, #1
   b720a:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b720e:	bf15      	itete	ne
   b7210:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b7214:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b7218:	fa1f f38a 	uxthne.w	r3, sl
   b721c:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b7220:	4577      	cmp	r7, lr
   b7222:	d19c      	bne.n	b715e <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b7224:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b7226:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b7228:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b722a:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b722c:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b722e:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b7230:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b7234:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b7236:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b7238:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b723a:	4b2e      	ldr	r3, [pc, #184]	; (b72f4 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b723c:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b723e:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b7240:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b7242:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b7244:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b7248:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b724c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b7250:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b7254:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b7258:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b725c:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b7260:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b7264:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b7268:	79eb      	ldrb	r3, [r5, #7]
   b726a:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b726e:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b7270:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b7272:	5cfe      	ldrb	r6, [r7, r3]
   b7274:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b7278:	f003 031f 	and.w	r3, r3, #31
   b727c:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b7280:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b7284:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b7288:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b728c:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b728e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b7292:	2b00      	cmp	r3, #0
   b7294:	d0fb      	beq.n	b728e <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b7296:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b7298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b729c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b72a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b72a4:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b72a8:	f001 f8dc 	bl	b8464 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b72ac:	f000 fe6e 	bl	b7f8c <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b72b0:	6128      	str	r0, [r5, #16]
}
   b72b2:	b005      	add	sp, #20
   b72b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b72b8:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b72bc:	2b00      	cmp	r3, #0
   b72be:	f6bf aeb7 	bge.w	b7030 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b72c2:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b72c6:	2b00      	cmp	r3, #0
   b72c8:	f6bf aeb2 	bge.w	b7030 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b72cc:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b72d0:	2b00      	cmp	r3, #0
   b72d2:	f6bf aead 	bge.w	b7030 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b72d6:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b72da:	2b00      	cmp	r3, #0
   b72dc:	f6bf aea8 	bge.w	b7030 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b72e0:	e725      	b.n	b712e <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b72e2:	bf00      	nop
   b72e4:	000c0f38 	.word	0x000c0f38
   b72e8:	4001c000 	.word	0x4001c000
   b72ec:	40021000 	.word	0x40021000
   b72f0:	40022000 	.word	0x40022000
   b72f4:	2003e6b4 	.word	0x2003e6b4
   b72f8:	e0001000 	.word	0xe0001000
   b72fc:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b7300:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b7304:	2b00      	cmp	r3, #0
   b7306:	f6bf ae8d 	bge.w	b7024 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b730a:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b730e:	2b00      	cmp	r3, #0
   b7310:	f6bf ae88 	bge.w	b7024 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b7314:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b7318:	2b00      	cmp	r3, #0
   b731a:	f6bf ae83 	bge.w	b7024 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b731e:	e706      	b.n	b712e <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b7320:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b7322:	2304      	movs	r3, #4
   b7324:	2102      	movs	r1, #2
   b7326:	e783      	b.n	b7230 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b7328 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b7328:	8843      	ldrh	r3, [r0, #2]
   b732a:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b732c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b732e:	d92d      	bls.n	b738c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b7330:	7a06      	ldrb	r6, [r0, #8]
   b7332:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b7336:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b733a:	b2d5      	uxtb	r5, r2
   b733c:	b13e      	cbz	r6, b734e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b733e:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b7340:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b7342:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b7344:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b7348:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b734c:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b734e:	f890 c006 	ldrb.w	ip, [r0, #6]
   b7352:	68c7      	ldr	r7, [r0, #12]
   b7354:	f1bc 0f06 	cmp.w	ip, #6
   b7358:	bf0c      	ite	eq
   b735a:	2604      	moveq	r6, #4
   b735c:	2603      	movne	r6, #3
   b735e:	434e      	muls	r6, r1
   b7360:	f1ac 0c02 	sub.w	ip, ip, #2
   b7364:	19b9      	adds	r1, r7, r6
    switch(type) {
   b7366:	f1bc 0f06 	cmp.w	ip, #6
   b736a:	d81d      	bhi.n	b73a8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b736c:	e8df f00c 	tbb	[pc, ip]
   b7370:	04081c04 	.word	0x04081c04
   b7374:	040f      	.short	0x040f
   b7376:	04          	.byte	0x04
   b7377:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b7378:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b737a:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b737c:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b737e:	e005      	b.n	b738c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b7380:	2bfe      	cmp	r3, #254	; 0xfe
   b7382:	bf28      	it	cs
   b7384:	23fe      	movcs	r3, #254	; 0xfe
   b7386:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b7388:	704d      	strb	r5, [r1, #1]
          *p = g;
   b738a:	708c      	strb	r4, [r1, #2]
}
   b738c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b738e:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b7390:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b7392:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b7394:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b7396:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b7398:	b913      	cbnz	r3, b73a0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b739a:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b739c:	70ca      	strb	r2, [r1, #3]
        } break;
   b739e:	e7f5      	b.n	b738c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b73a0:	435a      	muls	r2, r3
   b73a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b73a6:	e7f9      	b.n	b739c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b73a8:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b73aa:	704c      	strb	r4, [r1, #1]
   b73ac:	e7e6      	b.n	b737c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b73ae <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b73ae:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b73b0:	1c4a      	adds	r2, r1, #1
   b73b2:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b73b4:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b73b6:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b73b8:	d01f      	beq.n	b73fa <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b73ba:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b73bc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b73c0:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b73c2:	d00c      	beq.n	b73de <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b73c4:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b73c6:	bf1f      	itttt	ne
   b73c8:	0211      	lslne	r1, r2, #8
   b73ca:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b73ce:	fbb1 f3f3 	udivne	r3, r1, r3
   b73d2:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b73d4:	bf04      	itt	eq
   b73d6:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b73da:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b73de:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b73e0:	8886      	ldrh	r6, [r0, #4]
   b73e2:	1b29      	subs	r1, r5, r4
   b73e4:	b289      	uxth	r1, r1
   b73e6:	428e      	cmp	r6, r1
   b73e8:	d906      	bls.n	b73f8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b73ea:	7829      	ldrb	r1, [r5, #0]
   b73ec:	4359      	muls	r1, r3
   b73ee:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b73f2:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b73f6:	e7f3      	b.n	b73e0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b73f8:	7202      	strb	r2, [r0, #8]
  }
}
   b73fa:	bd70      	pop	{r4, r5, r6, pc}

000b73fc <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b73fc:	8882      	ldrh	r2, [r0, #4]
   b73fe:	68c0      	ldr	r0, [r0, #12]
   b7400:	2100      	movs	r1, #0
   b7402:	f004 b95b 	b.w	bb6bc <memset>
	...

000b7408 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b7408:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b740a:	f000 fdd7 	bl	b7fbc <HAL_Pin_Map>
   b740e:	4b01      	ldr	r3, [pc, #4]	; (b7414 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b7410:	6018      	str	r0, [r3, #0]
}
   b7412:	bd08      	pop	{r3, pc}
   b7414:	2003e6b4 	.word	0x2003e6b4

000b7418 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b7418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b741c:	b085      	sub	sp, #20
   b741e:	461f      	mov	r7, r3
   b7420:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b7424:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b7428:	eba8 0902 	sub.w	r9, r8, r2
   b742c:	eba7 0a01 	sub.w	sl, r7, r1
   b7430:	f1b9 0f00 	cmp.w	r9, #0
   b7434:	bfb8      	it	lt
   b7436:	f1c9 0900 	rsblt	r9, r9, #0
   b743a:	f1ba 0f00 	cmp.w	sl, #0
   b743e:	bfb8      	it	lt
   b7440:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b7444:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b7446:	4683      	mov	fp, r0
   b7448:	460c      	mov	r4, r1
   b744a:	4615      	mov	r5, r2
  if (steep) {
   b744c:	dd04      	ble.n	b7458 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b744e:	463a      	mov	r2, r7
    swap(x0, y0);
   b7450:	462c      	mov	r4, r5
    swap(x1, y1);
   b7452:	4647      	mov	r7, r8
    swap(x0, y0);
   b7454:	460d      	mov	r5, r1
    swap(x1, y1);
   b7456:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b7458:	42bc      	cmp	r4, r7
   b745a:	dd05      	ble.n	b7468 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b745c:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b745e:	4645      	mov	r5, r8
   b7460:	4690      	mov	r8, r2
  if (x0 > x1) {
   b7462:	4622      	mov	r2, r4
   b7464:	463c      	mov	r4, r7
   b7466:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b7468:	1b3e      	subs	r6, r7, r4
   b746a:	b2b2      	uxth	r2, r6
   b746c:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b746e:	eba8 0205 	sub.w	r2, r8, r5
   b7472:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b7476:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b747a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b747e:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b7482:	4545      	cmp	r5, r8
   b7484:	bfb4      	ite	lt
   b7486:	2201      	movlt	r2, #1
   b7488:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b748c:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b748e:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b7490:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b7492:	42bc      	cmp	r4, r7
   b7494:	dc1c      	bgt.n	b74d0 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b7496:	f8db 2000 	ldr.w	r2, [fp]
   b749a:	9303      	str	r3, [sp, #12]
    if (steep) {
   b749c:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b749e:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b74a2:	bfc7      	ittee	gt
   b74a4:	4629      	movgt	r1, r5
   b74a6:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b74a8:	462a      	movle	r2, r5
   b74aa:	4621      	movle	r1, r4
   b74ac:	4658      	mov	r0, fp
   b74ae:	47c0      	blx	r8
    }
    err -= dy;
   b74b0:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b74b2:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b74b4:	1ab6      	subs	r6, r6, r2
   b74b6:	b2b1      	uxth	r1, r6
   b74b8:	b236      	sxth	r6, r6
    if (err < 0) {
   b74ba:	2e00      	cmp	r6, #0
   b74bc:	da05      	bge.n	b74ca <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b74be:	9a02      	ldr	r2, [sp, #8]
   b74c0:	4415      	add	r5, r2
      err += dx;
   b74c2:	9a00      	ldr	r2, [sp, #0]
   b74c4:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b74c6:	b22d      	sxth	r5, r5
      err += dx;
   b74c8:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b74ca:	3401      	adds	r4, #1
   b74cc:	b224      	sxth	r4, r4
   b74ce:	e7e0      	b.n	b7492 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b74d0:	b005      	add	sp, #20
   b74d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b74d6 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b74d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b74da:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b74de:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b74e0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b74e4:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b74e8:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b74ea:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b74ec:	4616      	mov	r6, r2
   b74ee:	468a      	mov	sl, r1
   b74f0:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b74f2:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b74f4:	6823      	ldr	r3, [r4, #0]
   b74f6:	f8cd 8000 	str.w	r8, [sp]
   b74fa:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b74fe:	4432      	add	r2, r6
   b7500:	69df      	ldr	r7, [r3, #28]
   b7502:	4651      	mov	r1, sl
   b7504:	462b      	mov	r3, r5
   b7506:	4620      	mov	r0, r4
   b7508:	b212      	sxth	r2, r2
   b750a:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b750c:	6823      	ldr	r3, [r4, #0]
   b750e:	f8cd 8000 	str.w	r8, [sp]
   b7512:	699f      	ldr	r7, [r3, #24]
   b7514:	4632      	mov	r2, r6
   b7516:	464b      	mov	r3, r9
   b7518:	4651      	mov	r1, sl
   b751a:	4620      	mov	r0, r4
   b751c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b751e:	1e6b      	subs	r3, r5, #1
   b7520:	eb03 010a 	add.w	r1, r3, sl
   b7524:	6823      	ldr	r3, [r4, #0]
   b7526:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b752a:	699d      	ldr	r5, [r3, #24]
   b752c:	4632      	mov	r2, r6
   b752e:	464b      	mov	r3, r9
   b7530:	b209      	sxth	r1, r1
   b7532:	4620      	mov	r0, r4
   b7534:	46ac      	mov	ip, r5
}
   b7536:	b002      	add	sp, #8
   b7538:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b753c:	4760      	bx	ip

000b753e <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b753e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b7540:	3b01      	subs	r3, #1
   b7542:	4413      	add	r3, r2
   b7544:	6804      	ldr	r4, [r0, #0]
   b7546:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b754a:	9501      	str	r5, [sp, #4]
   b754c:	b21b      	sxth	r3, r3
   b754e:	9300      	str	r3, [sp, #0]
   b7550:	6964      	ldr	r4, [r4, #20]
   b7552:	460b      	mov	r3, r1
   b7554:	47a0      	blx	r4
}
   b7556:	b003      	add	sp, #12
   b7558:	bd30      	pop	{r4, r5, pc}

000b755a <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b755a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b755c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b7560:	6804      	ldr	r4, [r0, #0]
   b7562:	e9cd 2500 	strd	r2, r5, [sp]
   b7566:	3b01      	subs	r3, #1
   b7568:	440b      	add	r3, r1
   b756a:	6964      	ldr	r4, [r4, #20]
   b756c:	b21b      	sxth	r3, r3
   b756e:	47a0      	blx	r4
}
   b7570:	b003      	add	sp, #12
   b7572:	bd30      	pop	{r4, r5, pc}

000b7574 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b7574:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7578:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b757c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b7580:	4605      	mov	r5, r0
   b7582:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b7584:	460c      	mov	r4, r1
   b7586:	18ce      	adds	r6, r1, r3
   b7588:	42b4      	cmp	r4, r6
   b758a:	da0b      	bge.n	b75a4 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b758c:	682b      	ldr	r3, [r5, #0]
   b758e:	f8cd 8000 	str.w	r8, [sp]
   b7592:	699f      	ldr	r7, [r3, #24]
   b7594:	4621      	mov	r1, r4
   b7596:	464b      	mov	r3, r9
   b7598:	4652      	mov	r2, sl
   b759a:	4628      	mov	r0, r5
   b759c:	3401      	adds	r4, #1
   b759e:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b75a0:	b224      	sxth	r4, r4
   b75a2:	e7f1      	b.n	b7588 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b75a4:	b002      	add	sp, #8
   b75a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b75aa <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b75aa:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b75ac:	6802      	ldr	r2, [r0, #0]
   b75ae:	9101      	str	r1, [sp, #4]
   b75b0:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b75b4:	9100      	str	r1, [sp, #0]
   b75b6:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b75b8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b75bc:	2200      	movs	r2, #0
   b75be:	4611      	mov	r1, r2
   b75c0:	47a0      	blx	r4
}
   b75c2:	b002      	add	sp, #8
   b75c4:	bd10      	pop	{r4, pc}

000b75c6 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b75c6:	4770      	bx	lr

000b75c8 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b75c8:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b75ca:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b75cc:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b75ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b75d2:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b75d4:	4d05      	ldr	r5, [pc, #20]	; (b75ec <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b75d6:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b75d8:	2201      	movs	r2, #1
   b75da:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b75dc:	6005      	str	r5, [r0, #0]
   b75de:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b75e0:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b75e2:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b75e4:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b75e6:	7682      	strb	r2, [r0, #26]
}
   b75e8:	bd30      	pop	{r4, r5, pc}
   b75ea:	bf00      	nop
   b75ec:	000c1450 	.word	0x000c1450

000b75f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
			      uint16_t color) {
   b75f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b75f4:	b089      	sub	sp, #36	; 0x24
   b75f6:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b75fa:	f9bd 7048 	ldrsh.w	r7, [sp, #72]	; 0x48
   b75fe:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
   b7602:	9305      	str	r3, [sp, #20]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b7604:	1dfa      	adds	r2, r7, #7
			      uint16_t color) {
   b7606:	e9cd 0101 	strd	r0, r1, [sp, #4]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b760a:	bf48      	it	mi
   b760c:	f107 020e 	addmi.w	r2, r7, #14
   b7610:	2400      	movs	r4, #0
			      uint16_t color) {
   b7612:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  int16_t i, j, byteWidth = (w + 7) / 8;
   b7616:	ea4f 0be2 	mov.w	fp, r2, asr #3
   b761a:	4625      	mov	r5, r4
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b761c:	f04f 0980 	mov.w	r9, #128	; 0x80
  for(j=0; j<h; j++) {
   b7620:	9905      	ldr	r1, [sp, #20]
   b7622:	b22a      	sxth	r2, r5
   b7624:	4291      	cmp	r1, r2
   b7626:	dd2a      	ble.n	b767e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b7628:	9a04      	ldr	r2, [sp, #16]
   b762a:	eb02 0a04 	add.w	sl, r2, r4
	drawPixel(x+i, y+j, color);
   b762e:	9a03      	ldr	r2, [sp, #12]
   b7630:	442a      	add	r2, r5
   b7632:	f04f 0800 	mov.w	r8, #0
   b7636:	b212      	sxth	r2, r2
   b7638:	fa0f f088 	sxth.w	r0, r8
    for(i=0; i<w; i++ ) {
   b763c:	4287      	cmp	r7, r0
   b763e:	fa1f f188 	uxth.w	r1, r8
   b7642:	dd19      	ble.n	b7678 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b7644:	10c0      	asrs	r0, r0, #3
   b7646:	f81a c000 	ldrb.w	ip, [sl, r0]
   b764a:	f001 0007 	and.w	r0, r1, #7
   b764e:	fa49 f000 	asr.w	r0, r9, r0
   b7652:	ea1c 0f00 	tst.w	ip, r0
   b7656:	d00c      	beq.n	b7672 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x82>
	drawPixel(x+i, y+j, color);
   b7658:	9802      	ldr	r0, [sp, #8]
   b765a:	4401      	add	r1, r0
   b765c:	9801      	ldr	r0, [sp, #4]
   b765e:	6800      	ldr	r0, [r0, #0]
   b7660:	6900      	ldr	r0, [r0, #16]
   b7662:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7666:	4606      	mov	r6, r0
   b7668:	b209      	sxth	r1, r1
   b766a:	9801      	ldr	r0, [sp, #4]
   b766c:	47b0      	blx	r6
   b766e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    for(i=0; i<w; i++ ) {
   b7672:	f108 0801 	add.w	r8, r8, #1
   b7676:	e7df      	b.n	b7638 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x48>
  for(j=0; j<h; j++) {
   b7678:	3501      	adds	r5, #1
   b767a:	445c      	add	r4, fp
   b767c:	e7d0      	b.n	b7620 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x30>
}
   b767e:	b009      	add	sp, #36	; 0x24
   b7680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7684 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b7684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7688:	ed2d 8b02 	vpush	{d8}
   b768c:	b08d      	sub	sp, #52	; 0x34
   b768e:	4607      	mov	r7, r0
   b7690:	9104      	str	r1, [sp, #16]
   b7692:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b7696:	9105      	str	r1, [sp, #20]
   b7698:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b769c:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b769e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b76a2:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b76a4:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b76a8:	4281      	cmp	r1, r0
   b76aa:	dd52      	ble.n	b7752 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b76ac:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b76b0:	4291      	cmp	r1, r2
   b76b2:	dd4e      	ble.n	b7752 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b76b4:	2106      	movs	r1, #6
   b76b6:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b76ba:	2c00      	cmp	r4, #0
   b76bc:	dd49      	ble.n	b7752 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b76be:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b76c2:	2c00      	cmp	r4, #0
   b76c4:	dd45      	ble.n	b7752 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b76c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b76ca:	930b      	str	r3, [sp, #44]	; 0x2c
   b76cc:	b293      	uxth	r3, r2
   b76ce:	9307      	str	r3, [sp, #28]
   b76d0:	3308      	adds	r3, #8
   b76d2:	b29b      	uxth	r3, r3
   b76d4:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b76d6:	2400      	movs	r4, #0
   b76d8:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b76da:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b76dc:	bf1c      	itt	ne
   b76de:	4b2c      	ldrne	r3, [pc, #176]	; (b7790 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b76e0:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b76e2:	9e07      	ldr	r6, [sp, #28]
   b76e4:	bf16      	itet	ne
   b76e6:	191b      	addne	r3, r3, r4
      line = 0x0;
   b76e8:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b76ea:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b76ec:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b76ee:	9a04      	ldr	r2, [sp, #16]
   b76f0:	b2ab      	uxth	r3, r5
   b76f2:	930a      	str	r3, [sp, #40]	; 0x28
   b76f4:	fb04 f305 	mul.w	r3, r4, r5
   b76f8:	fa13 f382 	uxtah	r3, r3, r2
   b76fc:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b76fe:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b7702:	ee08 3a10 	vmov	s16, r3
   b7706:	46b0      	mov	r8, r6
   b7708:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b770c:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b7710:	9b03      	ldr	r3, [sp, #12]
   b7712:	07db      	lsls	r3, r3, #31
   b7714:	d52f      	bpl.n	b7776 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b7716:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b7718:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b771a:	d11f      	bne.n	b775c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b771c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b7720:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b7722:	b232      	sxth	r2, r6
   b7724:	4651      	mov	r1, sl
   b7726:	4638      	mov	r0, r7
   b7728:	47d8      	blx	fp
      line >>= 1;
   b772a:	9b03      	ldr	r3, [sp, #12]
   b772c:	085b      	lsrs	r3, r3, #1
   b772e:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b7730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7732:	3601      	adds	r6, #1
   b7734:	4498      	add	r8, r3
   b7736:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7738:	b2b6      	uxth	r6, r6
   b773a:	42b3      	cmp	r3, r6
   b773c:	fa1f f888 	uxth.w	r8, r8
   b7740:	d1e6      	bne.n	b7710 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b7742:	9b08      	ldr	r3, [sp, #32]
   b7744:	3b01      	subs	r3, #1
   b7746:	3401      	adds	r4, #1
   b7748:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b774c:	b264      	sxtb	r4, r4
   b774e:	9308      	str	r3, [sp, #32]
   b7750:	d1c3      	bne.n	b76da <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b7752:	b00d      	add	sp, #52	; 0x34
   b7754:	ecbd 8b02 	vpop	{d8}
   b7758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b775c:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b775e:	e9cd 9200 	strd	r9, r2, [sp]
   b7762:	ee18 1a10 	vmov	r1, s16
   b7766:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b776a:	fa0f f288 	sxth.w	r2, r8
   b776e:	464b      	mov	r3, r9
   b7770:	4638      	mov	r0, r7
   b7772:	47d8      	blx	fp
   b7774:	e7d9      	b.n	b772a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b7776:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b777a:	4293      	cmp	r3, r2
   b777c:	d0d5      	beq.n	b772a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b777e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b7780:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b7782:	d103      	bne.n	b778c <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b7784:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b7788:	9b06      	ldr	r3, [sp, #24]
   b778a:	e7ca      	b.n	b7722 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b778c:	9a06      	ldr	r2, [sp, #24]
   b778e:	e7e6      	b.n	b775e <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b7790:	000c0f4c 	.word	0x000c0f4c

000b7794 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b7794:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b7796:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b7798:	b085      	sub	sp, #20
   b779a:	4604      	mov	r4, r0
  if (c == '\n') {
   b779c:	d107      	bne.n	b77ae <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b779e:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b77a0:	8a63      	ldrh	r3, [r4, #18]
   b77a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b77a6:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b77a8:	2300      	movs	r3, #0
   b77aa:	8223      	strh	r3, [r4, #16]
   b77ac:	e021      	b.n	b77f2 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b77ae:	290d      	cmp	r1, #13
   b77b0:	d01f      	beq.n	b77f2 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b77b2:	7e03      	ldrb	r3, [r0, #24]
   b77b4:	9302      	str	r3, [sp, #8]
   b77b6:	8ac3      	ldrh	r3, [r0, #22]
   b77b8:	9301      	str	r3, [sp, #4]
   b77ba:	8a83      	ldrh	r3, [r0, #20]
   b77bc:	9300      	str	r3, [sp, #0]
   b77be:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b77c2:	460b      	mov	r3, r1
   b77c4:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b77c8:	f7ff ff5c 	bl	b7684 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b77cc:	7e20      	ldrb	r0, [r4, #24]
   b77ce:	8a23      	ldrh	r3, [r4, #16]
   b77d0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b77d4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b77d8:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b77da:	b21b      	sxth	r3, r3
   b77dc:	4602      	mov	r2, r0
   b77de:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b77e0:	b139      	cbz	r1, b77f2 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b77e2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b77e6:	f06f 0505 	mvn.w	r5, #5
   b77ea:	fb05 1100 	mla	r1, r5, r0, r1
   b77ee:	428b      	cmp	r3, r1
   b77f0:	dcd6      	bgt.n	b77a0 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b77f2:	2001      	movs	r0, #1
   b77f4:	b005      	add	sp, #20
   b77f6:	bd30      	pop	{r4, r5, pc}

000b77f8 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b77f8:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b77fa:	8242      	strh	r2, [r0, #18]
}
   b77fc:	4770      	bx	lr

000b77fe <_ZN12Adafruit_GFX11getRotationEv>:
}
   b77fe:	7e40      	ldrb	r0, [r0, #25]
   b7800:	4770      	bx	lr

000b7802 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b7802:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b7806:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b780a:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b780c:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b780e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b7812:	bf59      	ittee	pl
   b7814:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b7816:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b7818:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b781a:	81c3      	strhmi	r3, [r0, #14]
}
   b781c:	4770      	bx	lr

000b781e <_ZN12Adafruit_GFX5widthEv>:
}
   b781e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b7822:	4770      	bx	lr

000b7824 <_ZN12Adafruit_GFX6heightEv>:
}
   b7824:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b7828:	4770      	bx	lr
	...

000b782c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b782c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b782e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7830:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b7834:	2d02      	cmp	r5, #2
   b7836:	d069      	beq.n	b790c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b7838:	2d03      	cmp	r5, #3
   b783a:	f000 8099 	beq.w	b7970 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b783e:	2d01      	cmp	r5, #1
   b7840:	d16c      	bne.n	b791c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b7842:	8905      	ldrh	r5, [r0, #8]
   b7844:	43d2      	mvns	r2, r2
   b7846:	442a      	add	r2, r5
   b7848:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b784a:	2a00      	cmp	r2, #0
   b784c:	db5d      	blt.n	b790a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b784e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b7852:	4295      	cmp	r5, r2
   b7854:	dd59      	ble.n	b790a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b7856:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b7858:	bfbe      	ittt	lt
   b785a:	185b      	addlt	r3, r3, r1
   b785c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b785e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b7860:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b7864:	18cd      	adds	r5, r1, r3
   b7866:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b7868:	bfc4      	itt	gt
   b786a:	1a43      	subgt	r3, r0, r1
   b786c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b786e:	2b00      	cmp	r3, #0
   b7870:	dd4b      	ble.n	b790a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b7872:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b7876:	f8df c120 	ldr.w	ip, [pc, #288]	; b7998 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b787a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b787e:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b7882:	b2db      	uxtb	r3, r3
  pBuf += x;
   b7884:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b7888:	d01a      	beq.n	b78c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b788a:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b788e:	4e40      	ldr	r6, [pc, #256]	; (b7990 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b7890:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b7892:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b7894:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b7896:	bf3f      	itttt	cc
   b7898:	eba5 0e03 	subcc.w	lr, r5, r3
   b789c:	26ff      	movcc	r6, #255	; 0xff
   b789e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b78a2:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b78a4:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b78a8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b78aa:	bf0c      	ite	eq
   b78ac:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b78ae:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b78b0:	42ab      	cmp	r3, r5
   b78b2:	f80c 6002 	strb.w	r6, [ip, r2]
   b78b6:	d328      	bcc.n	b790a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b78b8:	3908      	subs	r1, #8
   b78ba:	440b      	add	r3, r1
   b78bc:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b78be:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b78c0:	2b07      	cmp	r3, #7
   b78c2:	d919      	bls.n	b78f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b78c4:	2c01      	cmp	r4, #1
   b78c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b78ca:	bf18      	it	ne
   b78cc:	2500      	movne	r5, #0
   b78ce:	b2ed      	uxtb	r5, r5
   b78d0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b78d4:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b78d6:	3a08      	subs	r2, #8
   b78d8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b78da:	2a07      	cmp	r2, #7
      *pBuf = val;
   b78dc:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b78e0:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b78e4:	d8f7      	bhi.n	b78d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b78e6:	f1a3 0208 	sub.w	r2, r3, #8
   b78ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b78ee:	3201      	adds	r2, #1
   b78f0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b78f4:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b78f8:	b13b      	cbz	r3, b790a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b78fa:	4a26      	ldr	r2, [pc, #152]	; (b7994 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b78fc:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b78fe:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b7900:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b7902:	bf0c      	ite	eq
   b7904:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b7906:	4393      	bicne	r3, r2
   b7908:	7003      	strb	r3, [r0, #0]
}
   b790a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b790c:	8945      	ldrh	r5, [r0, #10]
   b790e:	43d2      	mvns	r2, r2
   b7910:	442a      	add	r2, r5
      x -= (w-1);
   b7912:	18cd      	adds	r5, r1, r3
   b7914:	8901      	ldrh	r1, [r0, #8]
   b7916:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b7918:	b212      	sxth	r2, r2
      x -= (w-1);
   b791a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b791c:	2a00      	cmp	r2, #0
   b791e:	dbf4      	blt.n	b790a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b7920:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b7924:	4295      	cmp	r5, r2
   b7926:	ddf0      	ble.n	b790a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b7928:	2900      	cmp	r1, #0
    w += x;
   b792a:	bfbe      	ittt	lt
   b792c:	185b      	addlt	r3, r3, r1
   b792e:	b21b      	sxthlt	r3, r3
    x = 0;
   b7930:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b7932:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b7936:	18ce      	adds	r6, r1, r3
   b7938:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b793a:	bfc4      	itt	gt
   b793c:	1a6b      	subgt	r3, r5, r1
   b793e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b7940:	2b00      	cmp	r3, #0
   b7942:	dde2      	ble.n	b790a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b7944:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b7946:	2580      	movs	r5, #128	; 0x80
   b7948:	fb10 1105 	smlabb	r1, r0, r5, r1
   b794c:	4812      	ldr	r0, [pc, #72]	; (b7998 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b794e:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b7950:	f002 0007 	and.w	r0, r2, #7
   b7954:	2201      	movs	r2, #1
   b7956:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b7958:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b795a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b795c:	440b      	add	r3, r1
   b795e:	d10c      	bne.n	b797a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b7960:	428b      	cmp	r3, r1
   b7962:	d0d2      	beq.n	b790a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b7964:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7968:	4310      	orrs	r0, r2
   b796a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b796e:	e7f7      	b.n	b7960 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b7970:	18cd      	adds	r5, r1, r3
   b7972:	8941      	ldrh	r1, [r0, #10]
   b7974:	1b49      	subs	r1, r1, r5
   b7976:	b209      	sxth	r1, r1
      break;
   b7978:	e767      	b.n	b784a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b797a:	43d2      	mvns	r2, r2
   b797c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b797e:	428b      	cmp	r3, r1
   b7980:	d0c3      	beq.n	b790a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b7982:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7986:	4010      	ands	r0, r2
   b7988:	f801 0c01 	strb.w	r0, [r1, #-1]
   b798c:	e7f7      	b.n	b797e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b798e:	bf00      	nop
   b7990:	2003e0dc 	.word	0x2003e0dc
   b7994:	2003e0d4 	.word	0x2003e0d4
   b7998:	2003e0e4 	.word	0x2003e0e4

000b799c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b799c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b799e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b79a0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b79a4:	2d02      	cmp	r5, #2
   b79a6:	d034      	beq.n	b7a12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b79a8:	2d03      	cmp	r5, #3
   b79aa:	f000 809b 	beq.w	b7ae4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b79ae:	2d01      	cmp	r5, #1
   b79b0:	d137      	bne.n	b7a22 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b79b2:	18d5      	adds	r5, r2, r3
   b79b4:	8902      	ldrh	r2, [r0, #8]
   b79b6:	1b52      	subs	r2, r2, r5
   b79b8:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b79ba:	2900      	cmp	r1, #0
   b79bc:	f2c0 8091 	blt.w	b7ae2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b79c0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b79c4:	428d      	cmp	r5, r1
   b79c6:	f340 808c 	ble.w	b7ae2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b79ca:	2a00      	cmp	r2, #0
    w += x;
   b79cc:	bfbe      	ittt	lt
   b79ce:	189b      	addlt	r3, r3, r2
   b79d0:	b21b      	sxthlt	r3, r3
    x = 0;
   b79d2:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b79d4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b79d8:	18d6      	adds	r6, r2, r3
   b79da:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b79dc:	bfc4      	itt	gt
   b79de:	1aab      	subgt	r3, r5, r2
   b79e0:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b79e2:	2b00      	cmp	r3, #0
   b79e4:	dd7d      	ble.n	b7ae2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b79e6:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b79e8:	2580      	movs	r5, #128	; 0x80
   b79ea:	fb10 2205 	smlabb	r2, r0, r5, r2
   b79ee:	4845      	ldr	r0, [pc, #276]	; (b7b04 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b79f0:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b79f2:	f001 0007 	and.w	r0, r1, #7
   b79f6:	2101      	movs	r1, #1
   b79f8:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b79fa:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b79fc:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b79fe:	4413      	add	r3, r2
   b7a00:	d175      	bne.n	b7aee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b7a02:	429a      	cmp	r2, r3
   b7a04:	d06d      	beq.n	b7ae2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b7a06:	f812 0b01 	ldrb.w	r0, [r2], #1
   b7a0a:	4308      	orrs	r0, r1
   b7a0c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b7a10:	e7f7      	b.n	b7a02 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b7a12:	8905      	ldrh	r5, [r0, #8]
   b7a14:	43c9      	mvns	r1, r1
   b7a16:	4429      	add	r1, r5
      y -= (h-1);
   b7a18:	18d5      	adds	r5, r2, r3
   b7a1a:	8942      	ldrh	r2, [r0, #10]
   b7a1c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b7a1e:	b209      	sxth	r1, r1
      y -= (h-1);
   b7a20:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b7a22:	2900      	cmp	r1, #0
   b7a24:	db5d      	blt.n	b7ae2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b7a26:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b7a2a:	428d      	cmp	r5, r1
   b7a2c:	dd59      	ble.n	b7ae2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b7a2e:	2a00      	cmp	r2, #0
    __h += __y;
   b7a30:	bfbe      	ittt	lt
   b7a32:	189b      	addlt	r3, r3, r2
   b7a34:	b21b      	sxthlt	r3, r3
    __y = 0;
   b7a36:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b7a38:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b7a3c:	18d5      	adds	r5, r2, r3
   b7a3e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b7a40:	bfc4      	itt	gt
   b7a42:	1a83      	subgt	r3, r0, r2
   b7a44:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b7a46:	2b00      	cmp	r3, #0
   b7a48:	dd4b      	ble.n	b7ae2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b7a4a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b7a4e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b7b04 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b7a52:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b7a56:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b7a5a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b7a5c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b7a60:	d01a      	beq.n	b7a98 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b7a62:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b7a66:	4e28      	ldr	r6, [pc, #160]	; (b7b08 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b7a68:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b7a6a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b7a6c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b7a6e:	bf3f      	itttt	cc
   b7a70:	eba5 0e03 	subcc.w	lr, r5, r3
   b7a74:	26ff      	movcc	r6, #255	; 0xff
   b7a76:	fa46 f60e 	asrcc.w	r6, r6, lr
   b7a7a:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b7a7c:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b7a80:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b7a82:	bf0c      	ite	eq
   b7a84:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b7a86:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b7a88:	42ab      	cmp	r3, r5
   b7a8a:	f80c 6001 	strb.w	r6, [ip, r1]
   b7a8e:	d328      	bcc.n	b7ae2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b7a90:	3a08      	subs	r2, #8
   b7a92:	4413      	add	r3, r2
   b7a94:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b7a96:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b7a98:	2b07      	cmp	r3, #7
   b7a9a:	d919      	bls.n	b7ad0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b7a9c:	2c01      	cmp	r4, #1
   b7a9e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b7aa2:	bf18      	it	ne
   b7aa4:	2500      	movne	r5, #0
   b7aa6:	b2ed      	uxtb	r5, r5
   b7aa8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b7aac:	461a      	mov	r2, r3
      h -= 8;
   b7aae:	3a08      	subs	r2, #8
   b7ab0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b7ab2:	2a07      	cmp	r2, #7
      *pBuf = val;
   b7ab4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b7ab8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b7abc:	d8f7      	bhi.n	b7aae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b7abe:	f1a3 0208 	sub.w	r2, r3, #8
   b7ac2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b7ac6:	3201      	adds	r2, #1
   b7ac8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b7acc:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b7ad0:	b13b      	cbz	r3, b7ae2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b7ad2:	4a0e      	ldr	r2, [pc, #56]	; (b7b0c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b7ad4:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b7ad6:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b7ad8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b7ada:	bf0c      	ite	eq
   b7adc:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b7ade:	4393      	bicne	r3, r2
   b7ae0:	7003      	strb	r3, [r0, #0]
}
   b7ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b7ae4:	8945      	ldrh	r5, [r0, #10]
   b7ae6:	43c9      	mvns	r1, r1
   b7ae8:	4429      	add	r1, r5
   b7aea:	b209      	sxth	r1, r1
      break;
   b7aec:	e765      	b.n	b79ba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b7aee:	43c9      	mvns	r1, r1
   b7af0:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b7af2:	429a      	cmp	r2, r3
   b7af4:	d0f5      	beq.n	b7ae2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b7af6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b7afa:	4008      	ands	r0, r1
   b7afc:	f802 0c01 	strb.w	r0, [r2, #-1]
   b7b00:	e7f7      	b.n	b7af2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b7b02:	bf00      	nop
   b7b04:	2003e0e4 	.word	0x2003e0e4
   b7b08:	2003e0dc 	.word	0x2003e0dc
   b7b0c:	2003e0d4 	.word	0x2003e0d4

000b7b10 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b7b10:	4770      	bx	lr
	...

000b7b14 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b7b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b7b16:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b7b18:	4606      	mov	r6, r0
   b7b1a:	4614      	mov	r4, r2
   b7b1c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b7b1e:	db2d      	blt.n	b7b7c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b7b20:	f7ff fe7d 	bl	b781e <_ZN12Adafruit_GFX5widthEv>
   b7b24:	42a8      	cmp	r0, r5
   b7b26:	dd29      	ble.n	b7b7c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b7b28:	2c00      	cmp	r4, #0
   b7b2a:	db27      	blt.n	b7b7c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b7b2c:	4630      	mov	r0, r6
   b7b2e:	f7ff fe79 	bl	b7824 <_ZN12Adafruit_GFX6heightEv>
   b7b32:	42a0      	cmp	r0, r4
   b7b34:	dd22      	ble.n	b7b7c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b7b36:	4630      	mov	r0, r6
   b7b38:	f7ff fe61 	bl	b77fe <_ZN12Adafruit_GFX11getRotationEv>
   b7b3c:	2802      	cmp	r0, #2
   b7b3e:	d01e      	beq.n	b7b7e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b7b40:	2803      	cmp	r0, #3
   b7b42:	d025      	beq.n	b7b90 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b7b44:	2801      	cmp	r0, #1
   b7b46:	d104      	bne.n	b7b52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b7b48:	8933      	ldrh	r3, [r6, #8]
   b7b4a:	43e2      	mvns	r2, r4
   b7b4c:	441a      	add	r2, r3
    break;
   b7b4e:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b7b50:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b7b52:	2c00      	cmp	r4, #0
   b7b54:	4622      	mov	r2, r4
   b7b56:	bfb8      	it	lt
   b7b58:	1de2      	addlt	r2, r4, #7
   b7b5a:	10d2      	asrs	r2, r2, #3
   b7b5c:	2180      	movs	r1, #128	; 0x80
   b7b5e:	fb12 5501 	smlabb	r5, r2, r1, r5
   b7b62:	490e      	ldr	r1, [pc, #56]	; (b7b9c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b7b64:	2201      	movs	r2, #1
   b7b66:	f004 0407 	and.w	r4, r4, #7
   b7b6a:	574b      	ldrsb	r3, [r1, r5]
   b7b6c:	fa02 f404 	lsl.w	r4, r2, r4
   b7b70:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b7b72:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b7b74:	bf0c      	ite	eq
   b7b76:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b7b78:	43a3      	bicne	r3, r4
   b7b7a:	554b      	strb	r3, [r1, r5]
}
   b7b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b7b7e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b7b80:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b7b82:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b7b84:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b7b86:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b7b88:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b7b8a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b7b8c:	b224      	sxth	r4, r4
    break;
   b7b8e:	e7e0      	b.n	b7b52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b7b90:	8973      	ldrh	r3, [r6, #10]
   b7b92:	3b01      	subs	r3, #1
   b7b94:	1b5b      	subs	r3, r3, r5
    break;
   b7b96:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b7b98:	b21c      	sxth	r4, r3
    break;
   b7b9a:	e7da      	b.n	b7b52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b7b9c:	2003e0e4 	.word	0x2003e0e4

000b7ba0 <_ZN16Adafruit_SSD1306D0Ev>:
   b7ba0:	b510      	push	{r4, lr}
   b7ba2:	2124      	movs	r1, #36	; 0x24
   b7ba4:	4604      	mov	r4, r0
   b7ba6:	f7fc fa7a 	bl	b409e <_ZdlPvj>
   b7baa:	4620      	mov	r0, r4
   b7bac:	bd10      	pop	{r4, pc}
	...

000b7bb0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b7bb0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b7bb2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b7bb4:	4604      	mov	r4, r0
   b7bb6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b7bb8:	2180      	movs	r1, #128	; 0x80
   b7bba:	f7ff fd05 	bl	b75c8 <_ZN12Adafruit_GFXC1Ess>
   b7bbe:	4b06      	ldr	r3, [pc, #24]	; (b7bd8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b7bc0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b7bc2:	23ff      	movs	r3, #255	; 0xff
   b7bc4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b7bc8:	7763      	strb	r3, [r4, #29]
   b7bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7bce:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b7bd0:	f884 5020 	strb.w	r5, [r4, #32]
}
   b7bd4:	4620      	mov	r0, r4
   b7bd6:	bd38      	pop	{r3, r4, r5, pc}
   b7bd8:	000c1488 	.word	0x000c1488

000b7bdc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b7bdc:	4802      	ldr	r0, [pc, #8]	; (b7be8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b7bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b7be2:	2100      	movs	r1, #0
   b7be4:	f003 bd6a 	b.w	bb6bc <memset>
   b7be8:	2003e0e4 	.word	0x2003e0e4

000b7bec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b7bec:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b7bee:	4c0b      	ldr	r4, [pc, #44]	; (b7c1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b7bf0:	7821      	ldrb	r1, [r4, #0]
   b7bf2:	f3bf 8f5b 	dmb	ish
   b7bf6:	f011 0101 	ands.w	r1, r1, #1
   b7bfa:	d10b      	bne.n	b7c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7bfc:	4620      	mov	r0, r4
   b7bfe:	9101      	str	r1, [sp, #4]
   b7c00:	f7fc fa5c 	bl	b40bc <__cxa_guard_acquire>
   b7c04:	9901      	ldr	r1, [sp, #4]
   b7c06:	b128      	cbz	r0, b7c14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7c08:	4805      	ldr	r0, [pc, #20]	; (b7c20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b7c0a:	f000 ff21 	bl	b8a50 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7c0e:	4620      	mov	r0, r4
   b7c10:	f7fc fa59 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b7c14:	4802      	ldr	r0, [pc, #8]	; (b7c20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b7c16:	b002      	add	sp, #8
   b7c18:	bd10      	pop	{r4, pc}
   b7c1a:	bf00      	nop
   b7c1c:	2003e6b8 	.word	0x2003e6b8
   b7c20:	2003e6bc 	.word	0x2003e6bc

000b7c24 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b7c24:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b7c26:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b7c2a:	b143      	cbz	r3, b7c3e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b7c2c:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b7c2e:	f7ff ffdd 	bl	b7bec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7c32:	9901      	ldr	r1, [sp, #4]
}
   b7c34:	b003      	add	sp, #12
   b7c36:	f85d eb04 	ldr.w	lr, [sp], #4
   b7c3a:	f000 bfbd 	b.w	b8bb8 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b7c3e:	460b      	mov	r3, r1
   b7c40:	7f81      	ldrb	r1, [r0, #30]
   b7c42:	7f40      	ldrb	r0, [r0, #29]
   b7c44:	2201      	movs	r2, #1
}
   b7c46:	b003      	add	sp, #12
   b7c48:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b7c4c:	f001 be28 	b.w	b98a0 <shiftOut>

000b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b7c50:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b7c52:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b7c56:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b7c58:	4604      	mov	r4, r0
   b7c5a:	460d      	mov	r5, r1
  if (sid != -1)
   b7c5c:	d01d      	beq.n	b7c9a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b7c5e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b7c62:	2101      	movs	r1, #1
   b7c64:	b280      	uxth	r0, r0
   b7c66:	f001 fe02 	bl	b986e <digitalWrite>
    digitalWrite(dc, LOW);
   b7c6a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b7c6e:	2100      	movs	r1, #0
   b7c70:	b280      	uxth	r0, r0
   b7c72:	f001 fdfc 	bl	b986e <digitalWrite>
    digitalWrite(cs, LOW);
   b7c76:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b7c7a:	2100      	movs	r1, #0
   b7c7c:	b280      	uxth	r0, r0
   b7c7e:	f001 fdf6 	bl	b986e <digitalWrite>
    fastSPIwrite(c);
   b7c82:	4629      	mov	r1, r5
   b7c84:	4620      	mov	r0, r4
   b7c86:	f7ff ffcd 	bl	b7c24 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b7c8a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b7c8e:	2101      	movs	r1, #1
}
   b7c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b7c94:	b280      	uxth	r0, r0
   b7c96:	f001 bdea 	b.w	b986e <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b7c9a:	f001 fe3f 	bl	b991c <_Z19__fetch_global_Wirev>
   b7c9e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b7ca2:	f000 fcd6 	bl	b8652 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b7ca6:	f001 fe39 	bl	b991c <_Z19__fetch_global_Wirev>
   b7caa:	6803      	ldr	r3, [r0, #0]
   b7cac:	2100      	movs	r1, #0
   b7cae:	689b      	ldr	r3, [r3, #8]
   b7cb0:	4798      	blx	r3
    Wire.write(c);
   b7cb2:	f001 fe33 	bl	b991c <_Z19__fetch_global_Wirev>
   b7cb6:	6803      	ldr	r3, [r0, #0]
   b7cb8:	4629      	mov	r1, r5
   b7cba:	689b      	ldr	r3, [r3, #8]
   b7cbc:	4798      	blx	r3
    Wire.endTransmission();
   b7cbe:	f001 fe2d 	bl	b991c <_Z19__fetch_global_Wirev>
}
   b7cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b7cc6:	f000 bccb 	b.w	b8660 <_ZN7TwoWire15endTransmissionEv>
	...

000b7ccc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b7ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b7cce:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b7cd0:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b7cd2:	f7ff ffbd 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b7cd6:	2100      	movs	r1, #0
   b7cd8:	4620      	mov	r0, r4
   b7cda:	f7ff ffb9 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b7cde:	217f      	movs	r1, #127	; 0x7f
   b7ce0:	4620      	mov	r0, r4
   b7ce2:	f7ff ffb5 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b7ce6:	2122      	movs	r1, #34	; 0x22
   b7ce8:	4620      	mov	r0, r4
   b7cea:	f7ff ffb1 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b7cee:	2100      	movs	r1, #0
   b7cf0:	4620      	mov	r0, r4
   b7cf2:	f7ff ffad 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b7cf6:	2107      	movs	r1, #7
   b7cf8:	4620      	mov	r0, r4
   b7cfa:	f7ff ffa9 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b7cfe:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b7d02:	4f29      	ldr	r7, [pc, #164]	; (b7da8 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b7d04:	3301      	adds	r3, #1
   b7d06:	d02a      	beq.n	b7d5e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b7d08:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b7d0c:	2101      	movs	r1, #1
   b7d0e:	b280      	uxth	r0, r0
   b7d10:	f001 fdad 	bl	b986e <digitalWrite>
    digitalWrite(dc, HIGH);
   b7d14:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b7d18:	2101      	movs	r1, #1
   b7d1a:	b280      	uxth	r0, r0
   b7d1c:	f001 fda7 	bl	b986e <digitalWrite>
    digitalWrite(cs, LOW);
   b7d20:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b7d24:	2100      	movs	r1, #0
   b7d26:	b280      	uxth	r0, r0
   b7d28:	f001 fda1 	bl	b986e <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7d2c:	2001      	movs	r0, #1
   b7d2e:	f000 f925 	bl	b7f7c <HAL_Delay_Microseconds>
   b7d32:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b7d36:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b7d38:	f817 1b01 	ldrb.w	r1, [r7], #1
   b7d3c:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b7d3e:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b7d40:	f7ff ff70 	bl	b7c24 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b7d44:	2d00      	cmp	r5, #0
   b7d46:	d1f6      	bne.n	b7d36 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b7d48:	2001      	movs	r0, #1
   b7d4a:	f000 f917 	bl	b7f7c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b7d4e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b7d52:	2101      	movs	r1, #1
}
   b7d54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b7d58:	b280      	uxth	r0, r0
   b7d5a:	f001 bd88 	b.w	b986e <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b7d5e:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b7d60:	f001 fddc 	bl	b991c <_Z19__fetch_global_Wirev>
   b7d64:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b7d68:	f000 fc73 	bl	b8652 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b7d6c:	f001 fdd6 	bl	b991c <_Z19__fetch_global_Wirev>
   b7d70:	6803      	ldr	r3, [r0, #0]
   b7d72:	2140      	movs	r1, #64	; 0x40
   b7d74:	689b      	ldr	r3, [r3, #8]
   b7d76:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b7d78:	f105 0610 	add.w	r6, r5, #16
   b7d7c:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b7d7e:	f001 fdcd 	bl	b991c <_Z19__fetch_global_Wirev>
   b7d82:	6803      	ldr	r3, [r0, #0]
   b7d84:	5d79      	ldrb	r1, [r7, r5]
   b7d86:	689b      	ldr	r3, [r3, #8]
   b7d88:	4798      	blx	r3
		i++;
   b7d8a:	1c6b      	adds	r3, r5, #1
   b7d8c:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b7d8e:	42ae      	cmp	r6, r5
   b7d90:	d1f5      	bne.n	b7d7e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b7d92:	f001 fdc3 	bl	b991c <_Z19__fetch_global_Wirev>
   b7d96:	f000 fc63 	bl	b8660 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b7d9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b7d9e:	d100      	bne.n	b7da2 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b7da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7da2:	4635      	mov	r5, r6
   b7da4:	e7dc      	b.n	b7d60 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b7da6:	bf00      	nop
   b7da8:	2003e0e4 	.word	0x2003e0e4

000b7dac <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b7dac:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b7dae:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b7db2:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b7db4:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b7db6:	4604      	mov	r4, r0
   b7db8:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b7dba:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b7dbc:	f000 80c9 	beq.w	b7f52 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b7dc0:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b7dc4:	2101      	movs	r1, #1
   b7dc6:	b280      	uxth	r0, r0
   b7dc8:	f001 fd40 	bl	b984c <pinMode>
    pinMode(cs, OUTPUT);
   b7dcc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b7dd0:	2101      	movs	r1, #1
   b7dd2:	b280      	uxth	r0, r0
   b7dd4:	f001 fd3a 	bl	b984c <pinMode>
    if (!hwSPI){
   b7dd8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b7ddc:	2b00      	cmp	r3, #0
   b7dde:	f000 80a6 	beq.w	b7f2e <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b7de2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b7de6:	2101      	movs	r1, #1
   b7de8:	b280      	uxth	r0, r0
   b7dea:	f001 fd40 	bl	b986e <digitalWrite>
        instance().setBitOrder(order);
   b7dee:	f7ff fefd 	bl	b7bec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7df2:	2101      	movs	r1, #1
   b7df4:	f000 fe4a 	bl	b8a8c <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b7df8:	f7ff fef8 	bl	b7bec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7dfc:	2110      	movs	r1, #16
   b7dfe:	f000 feb5 	bl	b8b6c <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b7e02:	f7ff fef3 	bl	b7bec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7e06:	2100      	movs	r1, #0
   b7e08:	f000 fe54 	bl	b8ab4 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b7e0c:	f7ff feee 	bl	b7bec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7e10:	f000 fe28 	bl	b8a64 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b7e14:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b7e18:	2101      	movs	r1, #1
   b7e1a:	b280      	uxth	r0, r0
   b7e1c:	f001 fd16 	bl	b984c <pinMode>
  digitalWrite(rst, HIGH);
   b7e20:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b7e24:	2101      	movs	r1, #1
   b7e26:	b280      	uxth	r0, r0
   b7e28:	f001 fd21 	bl	b986e <digitalWrite>
  delay(1);
   b7e2c:	2001      	movs	r0, #1
   b7e2e:	f000 fb49 	bl	b84c4 <delay>
  digitalWrite(rst, LOW);
   b7e32:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b7e36:	2100      	movs	r1, #0
   b7e38:	b280      	uxth	r0, r0
   b7e3a:	f001 fd18 	bl	b986e <digitalWrite>
  delay(10);
   b7e3e:	200a      	movs	r0, #10
   b7e40:	f000 fb40 	bl	b84c4 <delay>
  digitalWrite(rst, HIGH);
   b7e44:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b7e48:	2101      	movs	r1, #1
   b7e4a:	b280      	uxth	r0, r0
   b7e4c:	f001 fd0f 	bl	b986e <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b7e50:	4620      	mov	r0, r4
   b7e52:	21ae      	movs	r1, #174	; 0xae
   b7e54:	f7ff fefc 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b7e58:	4620      	mov	r0, r4
   b7e5a:	21d5      	movs	r1, #213	; 0xd5
   b7e5c:	f7ff fef8 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b7e60:	4620      	mov	r0, r4
   b7e62:	2180      	movs	r1, #128	; 0x80
   b7e64:	f7ff fef4 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b7e68:	4620      	mov	r0, r4
   b7e6a:	21a8      	movs	r1, #168	; 0xa8
   b7e6c:	f7ff fef0 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b7e70:	4620      	mov	r0, r4
   b7e72:	213f      	movs	r1, #63	; 0x3f
   b7e74:	f7ff feec 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b7e78:	4620      	mov	r0, r4
   b7e7a:	21d3      	movs	r1, #211	; 0xd3
   b7e7c:	f7ff fee8 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b7e80:	4620      	mov	r0, r4
   b7e82:	2100      	movs	r1, #0
   b7e84:	f7ff fee4 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b7e88:	4620      	mov	r0, r4
   b7e8a:	2140      	movs	r1, #64	; 0x40
   b7e8c:	f7ff fee0 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b7e90:	218d      	movs	r1, #141	; 0x8d
   b7e92:	4620      	mov	r0, r4
   b7e94:	f7ff fedc 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b7e98:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b7e9a:	bf0c      	ite	eq
   b7e9c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b7e9e:	2114      	movne	r1, #20
   b7ea0:	4620      	mov	r0, r4
   b7ea2:	f7ff fed5 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b7ea6:	4620      	mov	r0, r4
   b7ea8:	2120      	movs	r1, #32
   b7eaa:	f7ff fed1 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b7eae:	4620      	mov	r0, r4
   b7eb0:	2100      	movs	r1, #0
   b7eb2:	f7ff fecd 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b7eb6:	4620      	mov	r0, r4
   b7eb8:	21a1      	movs	r1, #161	; 0xa1
   b7eba:	f7ff fec9 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b7ebe:	4620      	mov	r0, r4
   b7ec0:	21c8      	movs	r1, #200	; 0xc8
   b7ec2:	f7ff fec5 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b7ec6:	4620      	mov	r0, r4
   b7ec8:	21da      	movs	r1, #218	; 0xda
   b7eca:	f7ff fec1 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b7ece:	4620      	mov	r0, r4
   b7ed0:	2112      	movs	r1, #18
   b7ed2:	f7ff febd 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b7ed6:	2181      	movs	r1, #129	; 0x81
   b7ed8:	4620      	mov	r0, r4
   b7eda:	f7ff feb9 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b7ede:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b7ee0:	bf0c      	ite	eq
   b7ee2:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b7ee4:	21cf      	movne	r1, #207	; 0xcf
   b7ee6:	4620      	mov	r0, r4
   b7ee8:	f7ff feb2 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b7eec:	21d9      	movs	r1, #217	; 0xd9
   b7eee:	4620      	mov	r0, r4
   b7ef0:	f7ff feae 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b7ef4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b7ef6:	bf0c      	ite	eq
   b7ef8:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b7efa:	21f1      	movne	r1, #241	; 0xf1
   b7efc:	4620      	mov	r0, r4
   b7efe:	f7ff fea7 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b7f02:	4620      	mov	r0, r4
   b7f04:	21db      	movs	r1, #219	; 0xdb
   b7f06:	f7ff fea3 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b7f0a:	4620      	mov	r0, r4
   b7f0c:	2140      	movs	r1, #64	; 0x40
   b7f0e:	f7ff fe9f 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b7f12:	4620      	mov	r0, r4
   b7f14:	21a4      	movs	r1, #164	; 0xa4
   b7f16:	f7ff fe9b 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b7f1a:	4620      	mov	r0, r4
   b7f1c:	21a6      	movs	r1, #166	; 0xa6
   b7f1e:	f7ff fe97 	bl	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b7f22:	4620      	mov	r0, r4
   b7f24:	21af      	movs	r1, #175	; 0xaf
}
   b7f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b7f2a:	f7ff be91 	b.w	b7c50 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b7f2e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b7f32:	2101      	movs	r1, #1
   b7f34:	b280      	uxth	r0, r0
   b7f36:	f001 fc89 	bl	b984c <pinMode>
    	pinMode(sclk, OUTPUT);
   b7f3a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b7f3e:	2101      	movs	r1, #1
   b7f40:	b280      	uxth	r0, r0
   b7f42:	f001 fc83 	bl	b984c <pinMode>
    if (hwSPI){
   b7f46:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b7f4a:	2b00      	cmp	r3, #0
   b7f4c:	f43f af62 	beq.w	b7e14 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b7f50:	e747      	b.n	b7de2 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b7f52:	f001 fce3 	bl	b991c <_Z19__fetch_global_Wirev>
   b7f56:	f000 fb49 	bl	b85ec <_ZN7TwoWire5beginEv>
   b7f5a:	e75b      	b.n	b7e14 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b7f5c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7f5c:	b508      	push	{r3, lr}
   b7f5e:	4b02      	ldr	r3, [pc, #8]	; (b7f68 <os_mutex_recursive_create+0xc>)
   b7f60:	681b      	ldr	r3, [r3, #0]
   b7f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7f64:	9301      	str	r3, [sp, #4]
   b7f66:	bd08      	pop	{r3, pc}
   b7f68:	00030248 	.word	0x00030248

000b7f6c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7f6c:	b508      	push	{r3, lr}
   b7f6e:	4b02      	ldr	r3, [pc, #8]	; (b7f78 <HAL_RNG_GetRandomNumber+0xc>)
   b7f70:	681b      	ldr	r3, [r3, #0]
   b7f72:	685b      	ldr	r3, [r3, #4]
   b7f74:	9301      	str	r3, [sp, #4]
   b7f76:	bd08      	pop	{r3, pc}
   b7f78:	00030218 	.word	0x00030218

000b7f7c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7f7c:	b508      	push	{r3, lr}
   b7f7e:	4b02      	ldr	r3, [pc, #8]	; (b7f88 <HAL_Delay_Microseconds+0xc>)
   b7f80:	681b      	ldr	r3, [r3, #0]
   b7f82:	68db      	ldr	r3, [r3, #12]
   b7f84:	9301      	str	r3, [sp, #4]
   b7f86:	bd08      	pop	{r3, pc}
   b7f88:	00030218 	.word	0x00030218

000b7f8c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b7f8c:	b508      	push	{r3, lr}
   b7f8e:	4b02      	ldr	r3, [pc, #8]	; (b7f98 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b7f90:	681b      	ldr	r3, [r3, #0]
   b7f92:	691b      	ldr	r3, [r3, #16]
   b7f94:	9301      	str	r3, [sp, #4]
   b7f96:	bd08      	pop	{r3, pc}
   b7f98:	00030218 	.word	0x00030218

000b7f9c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7f9c:	b508      	push	{r3, lr}
   b7f9e:	4b02      	ldr	r3, [pc, #8]	; (b7fa8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7fa0:	681b      	ldr	r3, [r3, #0]
   b7fa2:	695b      	ldr	r3, [r3, #20]
   b7fa4:	9301      	str	r3, [sp, #4]
   b7fa6:	bd08      	pop	{r3, pc}
   b7fa8:	00030218 	.word	0x00030218

000b7fac <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b7fac:	b508      	push	{r3, lr}
   b7fae:	4b02      	ldr	r3, [pc, #8]	; (b7fb8 <hal_timer_millis+0xc>)
   b7fb0:	681b      	ldr	r3, [r3, #0]
   b7fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b7fb4:	9301      	str	r3, [sp, #4]
   b7fb6:	bd08      	pop	{r3, pc}
   b7fb8:	00030218 	.word	0x00030218

000b7fbc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b7fbc:	b508      	push	{r3, lr}
   b7fbe:	4b02      	ldr	r3, [pc, #8]	; (b7fc8 <HAL_Pin_Map+0xc>)
   b7fc0:	681b      	ldr	r3, [r3, #0]
   b7fc2:	681b      	ldr	r3, [r3, #0]
   b7fc4:	9301      	str	r3, [sp, #4]
   b7fc6:	bd08      	pop	{r3, pc}
   b7fc8:	0003022c 	.word	0x0003022c

000b7fcc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7fcc:	b508      	push	{r3, lr}
   b7fce:	4b02      	ldr	r3, [pc, #8]	; (b7fd8 <HAL_Pin_Mode+0xc>)
   b7fd0:	681b      	ldr	r3, [r3, #0]
   b7fd2:	689b      	ldr	r3, [r3, #8]
   b7fd4:	9301      	str	r3, [sp, #4]
   b7fd6:	bd08      	pop	{r3, pc}
   b7fd8:	0003022c 	.word	0x0003022c

000b7fdc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7fdc:	b508      	push	{r3, lr}
   b7fde:	4b02      	ldr	r3, [pc, #8]	; (b7fe8 <HAL_Get_Pin_Mode+0xc>)
   b7fe0:	681b      	ldr	r3, [r3, #0]
   b7fe2:	68db      	ldr	r3, [r3, #12]
   b7fe4:	9301      	str	r3, [sp, #4]
   b7fe6:	bd08      	pop	{r3, pc}
   b7fe8:	0003022c 	.word	0x0003022c

000b7fec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7fec:	b508      	push	{r3, lr}
   b7fee:	4b02      	ldr	r3, [pc, #8]	; (b7ff8 <HAL_GPIO_Write+0xc>)
   b7ff0:	681b      	ldr	r3, [r3, #0]
   b7ff2:	691b      	ldr	r3, [r3, #16]
   b7ff4:	9301      	str	r3, [sp, #4]
   b7ff6:	bd08      	pop	{r3, pc}
   b7ff8:	0003022c 	.word	0x0003022c

000b7ffc <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7ffc:	b508      	push	{r3, lr}
   b7ffe:	4b02      	ldr	r3, [pc, #8]	; (b8008 <hal_i2c_begin+0xc>)
   b8000:	681b      	ldr	r3, [r3, #0]
   b8002:	68db      	ldr	r3, [r3, #12]
   b8004:	9301      	str	r3, [sp, #4]
   b8006:	bd08      	pop	{r3, pc}
   b8008:	00030228 	.word	0x00030228

000b800c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b800c:	b508      	push	{r3, lr}
   b800e:	4b02      	ldr	r3, [pc, #8]	; (b8018 <hal_i2c_begin_transmission+0xc>)
   b8010:	681b      	ldr	r3, [r3, #0]
   b8012:	699b      	ldr	r3, [r3, #24]
   b8014:	9301      	str	r3, [sp, #4]
   b8016:	bd08      	pop	{r3, pc}
   b8018:	00030228 	.word	0x00030228

000b801c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b801c:	b508      	push	{r3, lr}
   b801e:	4b02      	ldr	r3, [pc, #8]	; (b8028 <hal_i2c_end_transmission+0xc>)
   b8020:	681b      	ldr	r3, [r3, #0]
   b8022:	69db      	ldr	r3, [r3, #28]
   b8024:	9301      	str	r3, [sp, #4]
   b8026:	bd08      	pop	{r3, pc}
   b8028:	00030228 	.word	0x00030228

000b802c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b802c:	b508      	push	{r3, lr}
   b802e:	4b02      	ldr	r3, [pc, #8]	; (b8038 <hal_i2c_write+0xc>)
   b8030:	681b      	ldr	r3, [r3, #0]
   b8032:	6a1b      	ldr	r3, [r3, #32]
   b8034:	9301      	str	r3, [sp, #4]
   b8036:	bd08      	pop	{r3, pc}
   b8038:	00030228 	.word	0x00030228

000b803c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b803c:	b508      	push	{r3, lr}
   b803e:	4b02      	ldr	r3, [pc, #8]	; (b8048 <hal_i2c_available+0xc>)
   b8040:	681b      	ldr	r3, [r3, #0]
   b8042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8044:	9301      	str	r3, [sp, #4]
   b8046:	bd08      	pop	{r3, pc}
   b8048:	00030228 	.word	0x00030228

000b804c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b804c:	b508      	push	{r3, lr}
   b804e:	4b02      	ldr	r3, [pc, #8]	; (b8058 <hal_i2c_read+0xc>)
   b8050:	681b      	ldr	r3, [r3, #0]
   b8052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8054:	9301      	str	r3, [sp, #4]
   b8056:	bd08      	pop	{r3, pc}
   b8058:	00030228 	.word	0x00030228

000b805c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b805c:	b508      	push	{r3, lr}
   b805e:	4b02      	ldr	r3, [pc, #8]	; (b8068 <hal_i2c_peek+0xc>)
   b8060:	681b      	ldr	r3, [r3, #0]
   b8062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8064:	9301      	str	r3, [sp, #4]
   b8066:	bd08      	pop	{r3, pc}
   b8068:	00030228 	.word	0x00030228

000b806c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b806c:	b508      	push	{r3, lr}
   b806e:	4b02      	ldr	r3, [pc, #8]	; (b8078 <hal_i2c_flush+0xc>)
   b8070:	681b      	ldr	r3, [r3, #0]
   b8072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8074:	9301      	str	r3, [sp, #4]
   b8076:	bd08      	pop	{r3, pc}
   b8078:	00030228 	.word	0x00030228

000b807c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b807c:	b508      	push	{r3, lr}
   b807e:	4b02      	ldr	r3, [pc, #8]	; (b8088 <hal_i2c_is_enabled+0xc>)
   b8080:	681b      	ldr	r3, [r3, #0]
   b8082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8084:	9301      	str	r3, [sp, #4]
   b8086:	bd08      	pop	{r3, pc}
   b8088:	00030228 	.word	0x00030228

000b808c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b808c:	b508      	push	{r3, lr}
   b808e:	4b02      	ldr	r3, [pc, #8]	; (b8098 <hal_i2c_init+0xc>)
   b8090:	681b      	ldr	r3, [r3, #0]
   b8092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8094:	9301      	str	r3, [sp, #4]
   b8096:	bd08      	pop	{r3, pc}
   b8098:	00030228 	.word	0x00030228

000b809c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b809c:	b508      	push	{r3, lr}
   b809e:	4b02      	ldr	r3, [pc, #8]	; (b80a8 <hal_i2c_request_ex+0xc>)
   b80a0:	681b      	ldr	r3, [r3, #0]
   b80a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b80a4:	9301      	str	r3, [sp, #4]
   b80a6:	bd08      	pop	{r3, pc}
   b80a8:	00030228 	.word	0x00030228

000b80ac <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b80ac:	b508      	push	{r3, lr}
   b80ae:	4b02      	ldr	r3, [pc, #8]	; (b80b8 <if_index_to_name+0xc>)
   b80b0:	681b      	ldr	r3, [r3, #0]
   b80b2:	695b      	ldr	r3, [r3, #20]
   b80b4:	9301      	str	r3, [sp, #4]
   b80b6:	bd08      	pop	{r3, pc}
   b80b8:	0003026c 	.word	0x0003026c

000b80bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b80bc:	b508      	push	{r3, lr}
   b80be:	4b02      	ldr	r3, [pc, #8]	; (b80c8 <inet_inet_ntop+0xc>)
   b80c0:	681b      	ldr	r3, [r3, #0]
   b80c2:	695b      	ldr	r3, [r3, #20]
   b80c4:	9301      	str	r3, [sp, #4]
   b80c6:	bd08      	pop	{r3, pc}
   b80c8:	00030264 	.word	0x00030264

000b80cc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b80cc:	b508      	push	{r3, lr}
   b80ce:	4b02      	ldr	r3, [pc, #8]	; (b80d8 <inet_htonl+0xc>)
   b80d0:	681b      	ldr	r3, [r3, #0]
   b80d2:	6a1b      	ldr	r3, [r3, #32]
   b80d4:	9301      	str	r3, [sp, #4]
   b80d6:	bd08      	pop	{r3, pc}
   b80d8:	00030264 	.word	0x00030264

000b80dc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b80dc:	b508      	push	{r3, lr}
   b80de:	4b02      	ldr	r3, [pc, #8]	; (b80e8 <inet_htons+0xc>)
   b80e0:	681b      	ldr	r3, [r3, #0]
   b80e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b80e4:	9301      	str	r3, [sp, #4]
   b80e6:	bd08      	pop	{r3, pc}
   b80e8:	00030264 	.word	0x00030264

000b80ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b80ec:	b508      	push	{r3, lr}
   b80ee:	4b02      	ldr	r3, [pc, #8]	; (b80f8 <netdb_freeaddrinfo+0xc>)
   b80f0:	681b      	ldr	r3, [r3, #0]
   b80f2:	689b      	ldr	r3, [r3, #8]
   b80f4:	9301      	str	r3, [sp, #4]
   b80f6:	bd08      	pop	{r3, pc}
   b80f8:	00030268 	.word	0x00030268

000b80fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b80fc:	b508      	push	{r3, lr}
   b80fe:	4b02      	ldr	r3, [pc, #8]	; (b8108 <netdb_getaddrinfo+0xc>)
   b8100:	681b      	ldr	r3, [r3, #0]
   b8102:	68db      	ldr	r3, [r3, #12]
   b8104:	9301      	str	r3, [sp, #4]
   b8106:	bd08      	pop	{r3, pc}
   b8108:	00030268 	.word	0x00030268

000b810c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b810c:	b508      	push	{r3, lr}
   b810e:	4b02      	ldr	r3, [pc, #8]	; (b8118 <sock_setsockopt+0xc>)
   b8110:	681b      	ldr	r3, [r3, #0]
   b8112:	699b      	ldr	r3, [r3, #24]
   b8114:	9301      	str	r3, [sp, #4]
   b8116:	bd08      	pop	{r3, pc}
   b8118:	00030238 	.word	0x00030238

000b811c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b811c:	b508      	push	{r3, lr}
   b811e:	4b02      	ldr	r3, [pc, #8]	; (b8128 <sock_close+0xc>)
   b8120:	681b      	ldr	r3, [r3, #0]
   b8122:	69db      	ldr	r3, [r3, #28]
   b8124:	9301      	str	r3, [sp, #4]
   b8126:	bd08      	pop	{r3, pc}
   b8128:	00030238 	.word	0x00030238

000b812c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b812c:	b508      	push	{r3, lr}
   b812e:	4b02      	ldr	r3, [pc, #8]	; (b8138 <sock_connect+0xc>)
   b8130:	681b      	ldr	r3, [r3, #0]
   b8132:	6a1b      	ldr	r3, [r3, #32]
   b8134:	9301      	str	r3, [sp, #4]
   b8136:	bd08      	pop	{r3, pc}
   b8138:	00030238 	.word	0x00030238

000b813c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b813c:	b508      	push	{r3, lr}
   b813e:	4b02      	ldr	r3, [pc, #8]	; (b8148 <sock_recv+0xc>)
   b8140:	681b      	ldr	r3, [r3, #0]
   b8142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8144:	9301      	str	r3, [sp, #4]
   b8146:	bd08      	pop	{r3, pc}
   b8148:	00030238 	.word	0x00030238

000b814c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b814c:	b508      	push	{r3, lr}
   b814e:	4b02      	ldr	r3, [pc, #8]	; (b8158 <sock_send+0xc>)
   b8150:	681b      	ldr	r3, [r3, #0]
   b8152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8154:	9301      	str	r3, [sp, #4]
   b8156:	bd08      	pop	{r3, pc}
   b8158:	00030238 	.word	0x00030238

000b815c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b815c:	b508      	push	{r3, lr}
   b815e:	4b02      	ldr	r3, [pc, #8]	; (b8168 <sock_socket+0xc>)
   b8160:	681b      	ldr	r3, [r3, #0]
   b8162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8164:	9301      	str	r3, [sp, #4]
   b8166:	bd08      	pop	{r3, pc}
   b8168:	00030238 	.word	0x00030238

000b816c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b816c:	b508      	push	{r3, lr}
   b816e:	4b02      	ldr	r3, [pc, #8]	; (b8178 <hal_spi_begin+0xc>)
   b8170:	681b      	ldr	r3, [r3, #0]
   b8172:	681b      	ldr	r3, [r3, #0]
   b8174:	9301      	str	r3, [sp, #4]
   b8176:	bd08      	pop	{r3, pc}
   b8178:	00030230 	.word	0x00030230

000b817c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b817c:	b508      	push	{r3, lr}
   b817e:	4b02      	ldr	r3, [pc, #8]	; (b8188 <hal_spi_set_bit_order+0xc>)
   b8180:	681b      	ldr	r3, [r3, #0]
   b8182:	689b      	ldr	r3, [r3, #8]
   b8184:	9301      	str	r3, [sp, #4]
   b8186:	bd08      	pop	{r3, pc}
   b8188:	00030230 	.word	0x00030230

000b818c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b818c:	b508      	push	{r3, lr}
   b818e:	4b02      	ldr	r3, [pc, #8]	; (b8198 <hal_spi_set_data_mode+0xc>)
   b8190:	681b      	ldr	r3, [r3, #0]
   b8192:	68db      	ldr	r3, [r3, #12]
   b8194:	9301      	str	r3, [sp, #4]
   b8196:	bd08      	pop	{r3, pc}
   b8198:	00030230 	.word	0x00030230

000b819c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b819c:	b508      	push	{r3, lr}
   b819e:	4b02      	ldr	r3, [pc, #8]	; (b81a8 <hal_spi_set_clock_divider+0xc>)
   b81a0:	681b      	ldr	r3, [r3, #0]
   b81a2:	691b      	ldr	r3, [r3, #16]
   b81a4:	9301      	str	r3, [sp, #4]
   b81a6:	bd08      	pop	{r3, pc}
   b81a8:	00030230 	.word	0x00030230

000b81ac <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b81ac:	b508      	push	{r3, lr}
   b81ae:	4b02      	ldr	r3, [pc, #8]	; (b81b8 <hal_spi_transfer+0xc>)
   b81b0:	681b      	ldr	r3, [r3, #0]
   b81b2:	695b      	ldr	r3, [r3, #20]
   b81b4:	9301      	str	r3, [sp, #4]
   b81b6:	bd08      	pop	{r3, pc}
   b81b8:	00030230 	.word	0x00030230

000b81bc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b81bc:	b508      	push	{r3, lr}
   b81be:	4b02      	ldr	r3, [pc, #8]	; (b81c8 <hal_spi_init+0xc>)
   b81c0:	681b      	ldr	r3, [r3, #0]
   b81c2:	69db      	ldr	r3, [r3, #28]
   b81c4:	9301      	str	r3, [sp, #4]
   b81c6:	bd08      	pop	{r3, pc}
   b81c8:	00030230 	.word	0x00030230

000b81cc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b81cc:	b508      	push	{r3, lr}
   b81ce:	4b02      	ldr	r3, [pc, #8]	; (b81d8 <hal_spi_is_enabled+0xc>)
   b81d0:	681b      	ldr	r3, [r3, #0]
   b81d2:	6a1b      	ldr	r3, [r3, #32]
   b81d4:	9301      	str	r3, [sp, #4]
   b81d6:	bd08      	pop	{r3, pc}
   b81d8:	00030230 	.word	0x00030230

000b81dc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b81dc:	b508      	push	{r3, lr}
   b81de:	4b02      	ldr	r3, [pc, #8]	; (b81e8 <hal_spi_info+0xc>)
   b81e0:	681b      	ldr	r3, [r3, #0]
   b81e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b81e4:	9301      	str	r3, [sp, #4]
   b81e6:	bd08      	pop	{r3, pc}
   b81e8:	00030230 	.word	0x00030230

000b81ec <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b81ec:	b508      	push	{r3, lr}
   b81ee:	4b02      	ldr	r3, [pc, #8]	; (b81f8 <hal_spi_acquire+0xc>)
   b81f0:	681b      	ldr	r3, [r3, #0]
   b81f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b81f4:	9301      	str	r3, [sp, #4]
   b81f6:	bd08      	pop	{r3, pc}
   b81f8:	00030230 	.word	0x00030230

000b81fc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b81fc:	b508      	push	{r3, lr}
   b81fe:	4b02      	ldr	r3, [pc, #8]	; (b8208 <hal_spi_release+0xc>)
   b8200:	681b      	ldr	r3, [r3, #0]
   b8202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8204:	9301      	str	r3, [sp, #4]
   b8206:	bd08      	pop	{r3, pc}
   b8208:	00030230 	.word	0x00030230

000b820c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b820c:	b508      	push	{r3, lr}
   b820e:	4b02      	ldr	r3, [pc, #8]	; (b8218 <hal_usart_write+0xc>)
   b8210:	681b      	ldr	r3, [r3, #0]
   b8212:	68db      	ldr	r3, [r3, #12]
   b8214:	9301      	str	r3, [sp, #4]
   b8216:	bd08      	pop	{r3, pc}
   b8218:	0003023c 	.word	0x0003023c

000b821c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b821c:	b508      	push	{r3, lr}
   b821e:	4b02      	ldr	r3, [pc, #8]	; (b8228 <hal_usart_available+0xc>)
   b8220:	681b      	ldr	r3, [r3, #0]
   b8222:	691b      	ldr	r3, [r3, #16]
   b8224:	9301      	str	r3, [sp, #4]
   b8226:	bd08      	pop	{r3, pc}
   b8228:	0003023c 	.word	0x0003023c

000b822c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b822c:	b508      	push	{r3, lr}
   b822e:	4b02      	ldr	r3, [pc, #8]	; (b8238 <hal_usart_read+0xc>)
   b8230:	681b      	ldr	r3, [r3, #0]
   b8232:	695b      	ldr	r3, [r3, #20]
   b8234:	9301      	str	r3, [sp, #4]
   b8236:	bd08      	pop	{r3, pc}
   b8238:	0003023c 	.word	0x0003023c

000b823c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b823c:	b508      	push	{r3, lr}
   b823e:	4b02      	ldr	r3, [pc, #8]	; (b8248 <hal_usart_peek+0xc>)
   b8240:	681b      	ldr	r3, [r3, #0]
   b8242:	699b      	ldr	r3, [r3, #24]
   b8244:	9301      	str	r3, [sp, #4]
   b8246:	bd08      	pop	{r3, pc}
   b8248:	0003023c 	.word	0x0003023c

000b824c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b824c:	b508      	push	{r3, lr}
   b824e:	4b02      	ldr	r3, [pc, #8]	; (b8258 <hal_usart_flush+0xc>)
   b8250:	681b      	ldr	r3, [r3, #0]
   b8252:	69db      	ldr	r3, [r3, #28]
   b8254:	9301      	str	r3, [sp, #4]
   b8256:	bd08      	pop	{r3, pc}
   b8258:	0003023c 	.word	0x0003023c

000b825c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b825c:	b508      	push	{r3, lr}
   b825e:	4b02      	ldr	r3, [pc, #8]	; (b8268 <hal_usart_is_enabled+0xc>)
   b8260:	681b      	ldr	r3, [r3, #0]
   b8262:	6a1b      	ldr	r3, [r3, #32]
   b8264:	9301      	str	r3, [sp, #4]
   b8266:	bd08      	pop	{r3, pc}
   b8268:	0003023c 	.word	0x0003023c

000b826c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b826c:	b508      	push	{r3, lr}
   b826e:	4b02      	ldr	r3, [pc, #8]	; (b8278 <hal_usart_available_data_for_write+0xc>)
   b8270:	681b      	ldr	r3, [r3, #0]
   b8272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8274:	9301      	str	r3, [sp, #4]
   b8276:	bd08      	pop	{r3, pc}
   b8278:	0003023c 	.word	0x0003023c

000b827c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b827c:	b508      	push	{r3, lr}
   b827e:	4b02      	ldr	r3, [pc, #8]	; (b8288 <hal_usart_init_ex+0xc>)
   b8280:	681b      	ldr	r3, [r3, #0]
   b8282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8284:	9301      	str	r3, [sp, #4]
   b8286:	bd08      	pop	{r3, pc}
   b8288:	0003023c 	.word	0x0003023c

000b828c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b828c:	b508      	push	{r3, lr}
   b828e:	4b02      	ldr	r3, [pc, #8]	; (b8298 <HAL_USB_USART_Init+0xc>)
   b8290:	681b      	ldr	r3, [r3, #0]
   b8292:	681b      	ldr	r3, [r3, #0]
   b8294:	9301      	str	r3, [sp, #4]
   b8296:	bd08      	pop	{r3, pc}
   b8298:	0003024c 	.word	0x0003024c

000b829c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b829c:	b508      	push	{r3, lr}
   b829e:	4b02      	ldr	r3, [pc, #8]	; (b82a8 <HAL_USB_USART_Begin+0xc>)
   b82a0:	681b      	ldr	r3, [r3, #0]
   b82a2:	685b      	ldr	r3, [r3, #4]
   b82a4:	9301      	str	r3, [sp, #4]
   b82a6:	bd08      	pop	{r3, pc}
   b82a8:	0003024c 	.word	0x0003024c

000b82ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b82ac:	b508      	push	{r3, lr}
   b82ae:	4b02      	ldr	r3, [pc, #8]	; (b82b8 <HAL_USB_USART_Available_Data+0xc>)
   b82b0:	681b      	ldr	r3, [r3, #0]
   b82b2:	691b      	ldr	r3, [r3, #16]
   b82b4:	9301      	str	r3, [sp, #4]
   b82b6:	bd08      	pop	{r3, pc}
   b82b8:	0003024c 	.word	0x0003024c

000b82bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b82bc:	b508      	push	{r3, lr}
   b82be:	4b02      	ldr	r3, [pc, #8]	; (b82c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b82c0:	681b      	ldr	r3, [r3, #0]
   b82c2:	695b      	ldr	r3, [r3, #20]
   b82c4:	9301      	str	r3, [sp, #4]
   b82c6:	bd08      	pop	{r3, pc}
   b82c8:	0003024c 	.word	0x0003024c

000b82cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b82cc:	b508      	push	{r3, lr}
   b82ce:	4b02      	ldr	r3, [pc, #8]	; (b82d8 <HAL_USB_USART_Receive_Data+0xc>)
   b82d0:	681b      	ldr	r3, [r3, #0]
   b82d2:	699b      	ldr	r3, [r3, #24]
   b82d4:	9301      	str	r3, [sp, #4]
   b82d6:	bd08      	pop	{r3, pc}
   b82d8:	0003024c 	.word	0x0003024c

000b82dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b82dc:	b508      	push	{r3, lr}
   b82de:	4b02      	ldr	r3, [pc, #8]	; (b82e8 <HAL_USB_USART_Send_Data+0xc>)
   b82e0:	681b      	ldr	r3, [r3, #0]
   b82e2:	69db      	ldr	r3, [r3, #28]
   b82e4:	9301      	str	r3, [sp, #4]
   b82e6:	bd08      	pop	{r3, pc}
   b82e8:	0003024c 	.word	0x0003024c

000b82ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b82ec:	b508      	push	{r3, lr}
   b82ee:	4b02      	ldr	r3, [pc, #8]	; (b82f8 <HAL_USB_USART_Flush_Data+0xc>)
   b82f0:	681b      	ldr	r3, [r3, #0]
   b82f2:	6a1b      	ldr	r3, [r3, #32]
   b82f4:	9301      	str	r3, [sp, #4]
   b82f6:	bd08      	pop	{r3, pc}
   b82f8:	0003024c 	.word	0x0003024c

000b82fc <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b82fc:	b508      	push	{r3, lr}
   b82fe:	4b02      	ldr	r3, [pc, #8]	; (b8308 <HAL_USB_USART_Is_Connected+0xc>)
   b8300:	681b      	ldr	r3, [r3, #0]
   b8302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8304:	9301      	str	r3, [sp, #4]
   b8306:	bd08      	pop	{r3, pc}
   b8308:	0003024c 	.word	0x0003024c

000b830c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b830c:	b508      	push	{r3, lr}
   b830e:	4b02      	ldr	r3, [pc, #8]	; (b8318 <panic_+0xc>)
   b8310:	681b      	ldr	r3, [r3, #0]
   b8312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8314:	9301      	str	r3, [sp, #4]
   b8316:	bd08      	pop	{r3, pc}
   b8318:	00030260 	.word	0x00030260

000b831c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b831c:	b508      	push	{r3, lr}
   b831e:	4b02      	ldr	r3, [pc, #8]	; (b8328 <log_message+0xc>)
   b8320:	681b      	ldr	r3, [r3, #0]
   b8322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8324:	9301      	str	r3, [sp, #4]
   b8326:	bd08      	pop	{r3, pc}
   b8328:	00030260 	.word	0x00030260

000b832c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b832c:	b508      	push	{r3, lr}
   b832e:	4b02      	ldr	r3, [pc, #8]	; (b8338 <set_system_mode+0xc>)
   b8330:	681b      	ldr	r3, [r3, #0]
   b8332:	685b      	ldr	r3, [r3, #4]
   b8334:	9301      	str	r3, [sp, #4]
   b8336:	bd08      	pop	{r3, pc}
   b8338:	00030220 	.word	0x00030220

000b833c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b833c:	b508      	push	{r3, lr}
   b833e:	4b02      	ldr	r3, [pc, #8]	; (b8348 <system_delay_ms+0xc>)
   b8340:	681b      	ldr	r3, [r3, #0]
   b8342:	695b      	ldr	r3, [r3, #20]
   b8344:	9301      	str	r3, [sp, #4]
   b8346:	bd08      	pop	{r3, pc}
   b8348:	00030220 	.word	0x00030220

000b834c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b834c:	b508      	push	{r3, lr}
   b834e:	4b03      	ldr	r3, [pc, #12]	; (b835c <system_ctrl_set_app_request_handler+0x10>)
   b8350:	681b      	ldr	r3, [r3, #0]
   b8352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8356:	9301      	str	r3, [sp, #4]
   b8358:	bd08      	pop	{r3, pc}
   b835a:	0000      	.short	0x0000
   b835c:	00030220 	.word	0x00030220

000b8360 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8360:	b508      	push	{r3, lr}
   b8362:	4b03      	ldr	r3, [pc, #12]	; (b8370 <system_ctrl_set_result+0x10>)
   b8364:	681b      	ldr	r3, [r3, #0]
   b8366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b836a:	9301      	str	r3, [sp, #4]
   b836c:	bd08      	pop	{r3, pc}
   b836e:	0000      	.short	0x0000
   b8370:	00030220 	.word	0x00030220

000b8374 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8374:	b508      	push	{r3, lr}
   b8376:	4b02      	ldr	r3, [pc, #8]	; (b8380 <spark_process+0xc>)
   b8378:	681b      	ldr	r3, [r3, #0]
   b837a:	689b      	ldr	r3, [r3, #8]
   b837c:	9301      	str	r3, [sp, #4]
   b837e:	bd08      	pop	{r3, pc}
   b8380:	00030244 	.word	0x00030244

000b8384 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8384:	b508      	push	{r3, lr}
   b8386:	4b02      	ldr	r3, [pc, #8]	; (b8390 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8388:	681b      	ldr	r3, [r3, #0]
   b838a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b838c:	9301      	str	r3, [sp, #4]
   b838e:	bd08      	pop	{r3, pc}
   b8390:	00030244 	.word	0x00030244

000b8394 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8394:	b508      	push	{r3, lr}
   b8396:	4b02      	ldr	r3, [pc, #8]	; (b83a0 <network_connect+0xc>)
   b8398:	681b      	ldr	r3, [r3, #0]
   b839a:	685b      	ldr	r3, [r3, #4]
   b839c:	9301      	str	r3, [sp, #4]
   b839e:	bd08      	pop	{r3, pc}
   b83a0:	00030240 	.word	0x00030240

000b83a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b83a4:	b508      	push	{r3, lr}
   b83a6:	4b02      	ldr	r3, [pc, #8]	; (b83b0 <network_connecting+0xc>)
   b83a8:	681b      	ldr	r3, [r3, #0]
   b83aa:	689b      	ldr	r3, [r3, #8]
   b83ac:	9301      	str	r3, [sp, #4]
   b83ae:	bd08      	pop	{r3, pc}
   b83b0:	00030240 	.word	0x00030240

000b83b4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b83b4:	b508      	push	{r3, lr}
   b83b6:	4b02      	ldr	r3, [pc, #8]	; (b83c0 <network_disconnect+0xc>)
   b83b8:	681b      	ldr	r3, [r3, #0]
   b83ba:	68db      	ldr	r3, [r3, #12]
   b83bc:	9301      	str	r3, [sp, #4]
   b83be:	bd08      	pop	{r3, pc}
   b83c0:	00030240 	.word	0x00030240

000b83c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b83c4:	b508      	push	{r3, lr}
   b83c6:	4b02      	ldr	r3, [pc, #8]	; (b83d0 <network_ready+0xc>)
   b83c8:	681b      	ldr	r3, [r3, #0]
   b83ca:	691b      	ldr	r3, [r3, #16]
   b83cc:	9301      	str	r3, [sp, #4]
   b83ce:	bd08      	pop	{r3, pc}
   b83d0:	00030240 	.word	0x00030240

000b83d4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b83d4:	b508      	push	{r3, lr}
   b83d6:	4b02      	ldr	r3, [pc, #8]	; (b83e0 <network_on+0xc>)
   b83d8:	681b      	ldr	r3, [r3, #0]
   b83da:	695b      	ldr	r3, [r3, #20]
   b83dc:	9301      	str	r3, [sp, #4]
   b83de:	bd08      	pop	{r3, pc}
   b83e0:	00030240 	.word	0x00030240

000b83e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b83e4:	b508      	push	{r3, lr}
   b83e6:	4b02      	ldr	r3, [pc, #8]	; (b83f0 <network_off+0xc>)
   b83e8:	681b      	ldr	r3, [r3, #0]
   b83ea:	699b      	ldr	r3, [r3, #24]
   b83ec:	9301      	str	r3, [sp, #4]
   b83ee:	bd08      	pop	{r3, pc}
   b83f0:	00030240 	.word	0x00030240

000b83f4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b83f4:	b508      	push	{r3, lr}
   b83f6:	4b02      	ldr	r3, [pc, #8]	; (b8400 <network_listen+0xc>)
   b83f8:	681b      	ldr	r3, [r3, #0]
   b83fa:	69db      	ldr	r3, [r3, #28]
   b83fc:	9301      	str	r3, [sp, #4]
   b83fe:	bd08      	pop	{r3, pc}
   b8400:	00030240 	.word	0x00030240

000b8404 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8404:	b508      	push	{r3, lr}
   b8406:	4b02      	ldr	r3, [pc, #8]	; (b8410 <network_listening+0xc>)
   b8408:	681b      	ldr	r3, [r3, #0]
   b840a:	6a1b      	ldr	r3, [r3, #32]
   b840c:	9301      	str	r3, [sp, #4]
   b840e:	bd08      	pop	{r3, pc}
   b8410:	00030240 	.word	0x00030240

000b8414 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8414:	b508      	push	{r3, lr}
   b8416:	4b02      	ldr	r3, [pc, #8]	; (b8420 <network_set_listen_timeout+0xc>)
   b8418:	681b      	ldr	r3, [r3, #0]
   b841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b841c:	9301      	str	r3, [sp, #4]
   b841e:	bd08      	pop	{r3, pc}
   b8420:	00030240 	.word	0x00030240

000b8424 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8424:	b508      	push	{r3, lr}
   b8426:	4b02      	ldr	r3, [pc, #8]	; (b8430 <network_get_listen_timeout+0xc>)
   b8428:	681b      	ldr	r3, [r3, #0]
   b842a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b842c:	9301      	str	r3, [sp, #4]
   b842e:	bd08      	pop	{r3, pc}
   b8430:	00030240 	.word	0x00030240

000b8434 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8434:	b508      	push	{r3, lr}
   b8436:	4b02      	ldr	r3, [pc, #8]	; (b8440 <network_is_on+0xc>)
   b8438:	681b      	ldr	r3, [r3, #0]
   b843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b843c:	9301      	str	r3, [sp, #4]
   b843e:	bd08      	pop	{r3, pc}
   b8440:	00030240 	.word	0x00030240

000b8444 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8444:	b508      	push	{r3, lr}
   b8446:	4b02      	ldr	r3, [pc, #8]	; (b8450 <network_is_off+0xc>)
   b8448:	681b      	ldr	r3, [r3, #0]
   b844a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b844c:	9301      	str	r3, [sp, #4]
   b844e:	bd08      	pop	{r3, pc}
   b8450:	00030240 	.word	0x00030240

000b8454 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8454:	b508      	push	{r3, lr}
   b8456:	4b02      	ldr	r3, [pc, #8]	; (b8460 <malloc+0xc>)
   b8458:	681b      	ldr	r3, [r3, #0]
   b845a:	681b      	ldr	r3, [r3, #0]
   b845c:	9301      	str	r3, [sp, #4]
   b845e:	bd08      	pop	{r3, pc}
   b8460:	0003021c 	.word	0x0003021c

000b8464 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8464:	b508      	push	{r3, lr}
   b8466:	4b02      	ldr	r3, [pc, #8]	; (b8470 <free+0xc>)
   b8468:	681b      	ldr	r3, [r3, #0]
   b846a:	685b      	ldr	r3, [r3, #4]
   b846c:	9301      	str	r3, [sp, #4]
   b846e:	bd08      	pop	{r3, pc}
   b8470:	0003021c 	.word	0x0003021c

000b8474 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8474:	b508      	push	{r3, lr}
   b8476:	4b02      	ldr	r3, [pc, #8]	; (b8480 <realloc+0xc>)
   b8478:	681b      	ldr	r3, [r3, #0]
   b847a:	689b      	ldr	r3, [r3, #8]
   b847c:	9301      	str	r3, [sp, #4]
   b847e:	bd08      	pop	{r3, pc}
   b8480:	0003021c 	.word	0x0003021c

000b8484 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8484:	b508      	push	{r3, lr}
   b8486:	4b02      	ldr	r3, [pc, #8]	; (b8490 <vsnprintf+0xc>)
   b8488:	681b      	ldr	r3, [r3, #0]
   b848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b848c:	9301      	str	r3, [sp, #4]
   b848e:	bd08      	pop	{r3, pc}
   b8490:	0003021c 	.word	0x0003021c

000b8494 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8494:	b508      	push	{r3, lr}
   b8496:	4b02      	ldr	r3, [pc, #8]	; (b84a0 <__errno+0xc>)
   b8498:	681b      	ldr	r3, [r3, #0]
   b849a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b849c:	9301      	str	r3, [sp, #4]
   b849e:	bd08      	pop	{r3, pc}
   b84a0:	0003021c 	.word	0x0003021c

000b84a4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b84a4:	b508      	push	{r3, lr}
   b84a6:	4b02      	ldr	r3, [pc, #8]	; (b84b0 <__assert_func+0xc>)
   b84a8:	681b      	ldr	r3, [r3, #0]
   b84aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b84ac:	9301      	str	r3, [sp, #4]
   b84ae:	bd08      	pop	{r3, pc}
   b84b0:	0003021c 	.word	0x0003021c

000b84b4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b84b4:	b508      	push	{r3, lr}
   b84b6:	4b02      	ldr	r3, [pc, #8]	; (b84c0 <newlib_impure_ptr_callback+0xc>)
   b84b8:	681b      	ldr	r3, [r3, #0]
   b84ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b84bc:	9301      	str	r3, [sp, #4]
   b84be:	bd08      	pop	{r3, pc}
   b84c0:	0003021c 	.word	0x0003021c

000b84c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b84c4:	2100      	movs	r1, #0
   b84c6:	f7ff bf39 	b.w	b833c <system_delay_ms>
	...

000b84cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b84cc:	4802      	ldr	r0, [pc, #8]	; (b84d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b84ce:	2300      	movs	r3, #0
   b84d0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b84d2:	f7ff bd43 	b.w	b7f5c <os_mutex_recursive_create>
   b84d6:	bf00      	nop
   b84d8:	2003e6c4 	.word	0x2003e6c4

000b84dc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b84dc:	2200      	movs	r2, #0
   b84de:	6840      	ldr	r0, [r0, #4]
   b84e0:	4611      	mov	r1, r2
   b84e2:	f7ff bf8f 	b.w	b8404 <network_listening>

000b84e6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b84e6:	2200      	movs	r2, #0
   b84e8:	6840      	ldr	r0, [r0, #4]
   b84ea:	4611      	mov	r1, r2
   b84ec:	f7ff bf9a 	b.w	b8424 <network_get_listen_timeout>

000b84f0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b84f0:	6840      	ldr	r0, [r0, #4]
   b84f2:	2200      	movs	r2, #0
   b84f4:	f7ff bf8e 	b.w	b8414 <network_set_listen_timeout>

000b84f8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b84f8:	6840      	ldr	r0, [r0, #4]
   b84fa:	2200      	movs	r2, #0
   b84fc:	f081 0101 	eor.w	r1, r1, #1
   b8500:	f7ff bf78 	b.w	b83f4 <network_listen>

000b8504 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8504:	2300      	movs	r3, #0
   b8506:	6840      	ldr	r0, [r0, #4]
   b8508:	461a      	mov	r2, r3
   b850a:	4619      	mov	r1, r3
   b850c:	f7ff bf6a 	b.w	b83e4 <network_off>

000b8510 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8510:	2300      	movs	r3, #0
   b8512:	6840      	ldr	r0, [r0, #4]
   b8514:	461a      	mov	r2, r3
   b8516:	4619      	mov	r1, r3
   b8518:	f7ff bf5c 	b.w	b83d4 <network_on>

000b851c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b851c:	2200      	movs	r2, #0
   b851e:	6840      	ldr	r0, [r0, #4]
   b8520:	4611      	mov	r1, r2
   b8522:	f7ff bf4f 	b.w	b83c4 <network_ready>

000b8526 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8526:	2200      	movs	r2, #0
   b8528:	6840      	ldr	r0, [r0, #4]
   b852a:	4611      	mov	r1, r2
   b852c:	f7ff bf3a 	b.w	b83a4 <network_connecting>

000b8530 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8530:	6840      	ldr	r0, [r0, #4]
   b8532:	2200      	movs	r2, #0
   b8534:	2102      	movs	r1, #2
   b8536:	f7ff bf3d 	b.w	b83b4 <network_disconnect>

000b853a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b853a:	2300      	movs	r3, #0
   b853c:	6840      	ldr	r0, [r0, #4]
   b853e:	461a      	mov	r2, r3
   b8540:	f7ff bf28 	b.w	b8394 <network_connect>

000b8544 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8544:	4b02      	ldr	r3, [pc, #8]	; (b8550 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8546:	2203      	movs	r2, #3
   b8548:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b854a:	4a02      	ldr	r2, [pc, #8]	; (b8554 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b854c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b854e:	4770      	bx	lr
   b8550:	2003e6c8 	.word	0x2003e6c8
   b8554:	000c14c8 	.word	0x000c14c8

000b8558 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8558:	4770      	bx	lr

000b855a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b855a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b855c:	4606      	mov	r6, r0
   b855e:	4615      	mov	r5, r2
   b8560:	460c      	mov	r4, r1
   b8562:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8564:	42bc      	cmp	r4, r7
   b8566:	d006      	beq.n	b8576 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8568:	6833      	ldr	r3, [r6, #0]
   b856a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b856e:	689b      	ldr	r3, [r3, #8]
   b8570:	4630      	mov	r0, r6
   b8572:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8574:	e7f6      	b.n	b8564 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8576:	4628      	mov	r0, r5
   b8578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b857a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b857a:	7c00      	ldrb	r0, [r0, #16]
   b857c:	2200      	movs	r2, #0
   b857e:	f7ff bd55 	b.w	b802c <hal_i2c_write>

000b8582 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8582:	7c00      	ldrb	r0, [r0, #16]
   b8584:	2100      	movs	r1, #0
   b8586:	f7ff bd59 	b.w	b803c <hal_i2c_available>

000b858a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b858a:	7c00      	ldrb	r0, [r0, #16]
   b858c:	2100      	movs	r1, #0
   b858e:	f7ff bd5d 	b.w	b804c <hal_i2c_read>

000b8592 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8592:	7c00      	ldrb	r0, [r0, #16]
   b8594:	2100      	movs	r1, #0
   b8596:	f7ff bd61 	b.w	b805c <hal_i2c_peek>

000b859a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b859a:	7c00      	ldrb	r0, [r0, #16]
   b859c:	2100      	movs	r1, #0
   b859e:	f7ff bd65 	b.w	b806c <hal_i2c_flush>

000b85a2 <_ZN7TwoWireD0Ev>:
   b85a2:	b510      	push	{r4, lr}
   b85a4:	2114      	movs	r1, #20
   b85a6:	4604      	mov	r4, r0
   b85a8:	f7fb fd79 	bl	b409e <_ZdlPvj>
   b85ac:	4620      	mov	r0, r4
   b85ae:	bd10      	pop	{r4, pc}

000b85b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b85b0:	b538      	push	{r3, r4, r5, lr}
   b85b2:	4604      	mov	r4, r0
   b85b4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b85b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b85ba:	2200      	movs	r2, #0
   b85bc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b85c0:	4b09      	ldr	r3, [pc, #36]	; (b85e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b85c2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b85c4:	4608      	mov	r0, r1
   b85c6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b85c8:	4629      	mov	r1, r5
   b85ca:	f7ff fd5f 	bl	b808c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b85ce:	30bf      	adds	r0, #191	; 0xbf
   b85d0:	d108      	bne.n	b85e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b85d2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b85d4:	07db      	lsls	r3, r3, #31
   b85d6:	d505      	bpl.n	b85e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b85d8:	6868      	ldr	r0, [r5, #4]
   b85da:	f7ff ff43 	bl	b8464 <free>
    free(conf.tx_buffer);
   b85de:	68e8      	ldr	r0, [r5, #12]
   b85e0:	f7ff ff40 	bl	b8464 <free>
}
   b85e4:	4620      	mov	r0, r4
   b85e6:	bd38      	pop	{r3, r4, r5, pc}
   b85e8:	000c1504 	.word	0x000c1504

000b85ec <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b85ec:	2300      	movs	r3, #0
   b85ee:	7c00      	ldrb	r0, [r0, #16]
   b85f0:	461a      	mov	r2, r3
   b85f2:	4619      	mov	r1, r3
   b85f4:	f7ff bd02 	b.w	b7ffc <hal_i2c_begin>

000b85f8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b85f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b85fa:	2200      	movs	r2, #0
   b85fc:	2314      	movs	r3, #20
   b85fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8602:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8606:	780b      	ldrb	r3, [r1, #0]
   b8608:	f88d 3008 	strb.w	r3, [sp, #8]
   b860c:	684b      	ldr	r3, [r1, #4]
   b860e:	9303      	str	r3, [sp, #12]
   b8610:	68cb      	ldr	r3, [r1, #12]
   b8612:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8614:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8616:	7a0b      	ldrb	r3, [r1, #8]
   b8618:	9305      	str	r3, [sp, #20]
   b861a:	a901      	add	r1, sp, #4
   b861c:	f7ff fd3e 	bl	b809c <hal_i2c_request_ex>
}
   b8620:	b007      	add	sp, #28
   b8622:	f85d fb04 	ldr.w	pc, [sp], #4

000b8626 <_ZN7TwoWire11requestFromEhjh>:
{
   b8626:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8628:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b862a:	f88d 1000 	strb.w	r1, [sp]
   b862e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8632:	9103      	str	r1, [sp, #12]
   b8634:	bf18      	it	ne
   b8636:	2301      	movne	r3, #1
   b8638:	4669      	mov	r1, sp
    size_ = size;
   b863a:	9201      	str	r2, [sp, #4]
   b863c:	f88d 3008 	strb.w	r3, [sp, #8]
   b8640:	f7ff ffda 	bl	b85f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8644:	b005      	add	sp, #20
   b8646:	f85d fb04 	ldr.w	pc, [sp], #4

000b864a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b864a:	7c00      	ldrb	r0, [r0, #16]
   b864c:	2200      	movs	r2, #0
   b864e:	f7ff bcdd 	b.w	b800c <hal_i2c_begin_transmission>

000b8652 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8652:	b2c9      	uxtb	r1, r1
   b8654:	f7ff bff9 	b.w	b864a <_ZN7TwoWire17beginTransmissionEh>

000b8658 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8658:	7c00      	ldrb	r0, [r0, #16]
   b865a:	2200      	movs	r2, #0
   b865c:	f7ff bcde 	b.w	b801c <hal_i2c_end_transmission>

000b8660 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8660:	2101      	movs	r1, #1
   b8662:	f7ff bff9 	b.w	b8658 <_ZN7TwoWire15endTransmissionEh>

000b8666 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8666:	4770      	bx	lr

000b8668 <_ZN9IPAddressD0Ev>:
   b8668:	b510      	push	{r4, lr}
   b866a:	2118      	movs	r1, #24
   b866c:	4604      	mov	r4, r0
   b866e:	f7fb fd16 	bl	b409e <_ZdlPvj>
   b8672:	4620      	mov	r0, r4
   b8674:	bd10      	pop	{r4, pc}

000b8676 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8676:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8678:	7d03      	ldrb	r3, [r0, #20]
   b867a:	2b06      	cmp	r3, #6
{
   b867c:	b08d      	sub	sp, #52	; 0x34
   b867e:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8680:	f100 0704 	add.w	r7, r0, #4
   b8684:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8688:	d012      	beq.n	b86b0 <_ZNK9IPAddress7printToER5Print+0x3a>
   b868a:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b868e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8692:	220a      	movs	r2, #10
   b8694:	4630      	mov	r0, r6
   b8696:	f000 f974 	bl	b8982 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b869a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b869c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b869e:	d019      	beq.n	b86d4 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b86a0:	2c00      	cmp	r4, #0
   b86a2:	d0f4      	beq.n	b868e <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b86a4:	212e      	movs	r1, #46	; 0x2e
   b86a6:	4630      	mov	r0, r6
   b86a8:	f000 f952 	bl	b8950 <_ZN5Print5printEc>
   b86ac:	4404      	add	r4, r0
   b86ae:	e7ee      	b.n	b868e <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b86b0:	232f      	movs	r3, #47	; 0x2f
   b86b2:	466a      	mov	r2, sp
   b86b4:	4639      	mov	r1, r7
   b86b6:	200a      	movs	r0, #10
		buf[0] = 0;
   b86b8:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b86bc:	f7ff fcfe 	bl	b80bc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b86c0:	4668      	mov	r0, sp
   b86c2:	f003 f881 	bl	bb7c8 <strlen>
   b86c6:	6833      	ldr	r3, [r6, #0]
   b86c8:	4602      	mov	r2, r0
   b86ca:	68db      	ldr	r3, [r3, #12]
   b86cc:	4669      	mov	r1, sp
   b86ce:	4630      	mov	r0, r6
   b86d0:	4798      	blx	r3
   b86d2:	4604      	mov	r4, r0
    }
    return n;
}
   b86d4:	4620      	mov	r0, r4
   b86d6:	b00d      	add	sp, #52	; 0x34
   b86d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b86dc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b86dc:	b510      	push	{r4, lr}
   b86de:	4b05      	ldr	r3, [pc, #20]	; (b86f4 <_ZN9IPAddressC1Ev+0x18>)
   b86e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b86e2:	2211      	movs	r2, #17
   b86e4:	f840 3b04 	str.w	r3, [r0], #4
   b86e8:	2100      	movs	r1, #0
   b86ea:	f002 ffe7 	bl	bb6bc <memset>
}
   b86ee:	4620      	mov	r0, r4
   b86f0:	bd10      	pop	{r4, pc}
   b86f2:	bf00      	nop
   b86f4:	000c152c 	.word	0x000c152c

000b86f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b86f8:	4603      	mov	r3, r0
   b86fa:	4a07      	ldr	r2, [pc, #28]	; (b8718 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b86fc:	b510      	push	{r4, lr}
   b86fe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8702:	f101 0210 	add.w	r2, r1, #16
   b8706:	f851 4b04 	ldr.w	r4, [r1], #4
   b870a:	f843 4b04 	str.w	r4, [r3], #4
   b870e:	4291      	cmp	r1, r2
   b8710:	d1f9      	bne.n	b8706 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8712:	780a      	ldrb	r2, [r1, #0]
   b8714:	701a      	strb	r2, [r3, #0]
}
   b8716:	bd10      	pop	{r4, pc}
   b8718:	000c152c 	.word	0x000c152c

000b871c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b871c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b871e:	2b04      	cmp	r3, #4
   b8720:	d104      	bne.n	b872c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8722:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8724:	3800      	subs	r0, #0
   b8726:	bf18      	it	ne
   b8728:	2001      	movne	r0, #1
   b872a:	4770      	bx	lr
    } else if (version() == 6) {
   b872c:	2b06      	cmp	r3, #6
   b872e:	d107      	bne.n	b8740 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8730:	6843      	ldr	r3, [r0, #4]
   b8732:	b93b      	cbnz	r3, b8744 <_ZNK9IPAddresscvbEv+0x28>
   b8734:	6883      	ldr	r3, [r0, #8]
   b8736:	b92b      	cbnz	r3, b8744 <_ZNK9IPAddresscvbEv+0x28>
   b8738:	68c3      	ldr	r3, [r0, #12]
   b873a:	b91b      	cbnz	r3, b8744 <_ZNK9IPAddresscvbEv+0x28>
   b873c:	6900      	ldr	r0, [r0, #16]
   b873e:	e7f1      	b.n	b8724 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8740:	2000      	movs	r0, #0
   b8742:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8744:	2001      	movs	r0, #1
}
   b8746:	4770      	bx	lr

000b8748 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8748:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b874a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b874e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8752:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8756:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b875a:	2304      	movs	r3, #4
   b875c:	6041      	str	r1, [r0, #4]
   b875e:	7503      	strb	r3, [r0, #20]
}
   b8760:	bd10      	pop	{r4, pc}
	...

000b8764 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8764:	b507      	push	{r0, r1, r2, lr}
   b8766:	4b06      	ldr	r3, [pc, #24]	; (b8780 <_ZN9IPAddressC1EPKh+0x1c>)
   b8768:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b876a:	78cb      	ldrb	r3, [r1, #3]
   b876c:	9300      	str	r3, [sp, #0]
   b876e:	788b      	ldrb	r3, [r1, #2]
   b8770:	784a      	ldrb	r2, [r1, #1]
   b8772:	7809      	ldrb	r1, [r1, #0]
   b8774:	f7ff ffe8 	bl	b8748 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8778:	b003      	add	sp, #12
   b877a:	f85d fb04 	ldr.w	pc, [sp], #4
   b877e:	bf00      	nop
   b8780:	000c152c 	.word	0x000c152c

000b8784 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8784:	4b01      	ldr	r3, [pc, #4]	; (b878c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8786:	4a02      	ldr	r2, [pc, #8]	; (b8790 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8788:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b878a:	4770      	bx	lr
   b878c:	2003e6d0 	.word	0x2003e6d0
   b8790:	000c1538 	.word	0x000c1538

000b8794 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8794:	2300      	movs	r3, #0
   b8796:	6840      	ldr	r0, [r0, #4]
   b8798:	461a      	mov	r2, r3
   b879a:	f7ff bdfb 	b.w	b8394 <network_connect>

000b879e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b879e:	6840      	ldr	r0, [r0, #4]
   b87a0:	2200      	movs	r2, #0
   b87a2:	2102      	movs	r1, #2
   b87a4:	f7ff be06 	b.w	b83b4 <network_disconnect>

000b87a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b87a8:	2200      	movs	r2, #0
   b87aa:	6840      	ldr	r0, [r0, #4]
   b87ac:	4611      	mov	r1, r2
   b87ae:	f7ff bdf9 	b.w	b83a4 <network_connecting>

000b87b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b87b2:	2200      	movs	r2, #0
   b87b4:	6840      	ldr	r0, [r0, #4]
   b87b6:	4611      	mov	r1, r2
   b87b8:	f7ff be04 	b.w	b83c4 <network_ready>

000b87bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b87bc:	2300      	movs	r3, #0
   b87be:	6840      	ldr	r0, [r0, #4]
   b87c0:	461a      	mov	r2, r3
   b87c2:	4619      	mov	r1, r3
   b87c4:	f7ff be06 	b.w	b83d4 <network_on>

000b87c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b87c8:	2300      	movs	r3, #0
   b87ca:	6840      	ldr	r0, [r0, #4]
   b87cc:	461a      	mov	r2, r3
   b87ce:	4619      	mov	r1, r3
   b87d0:	f7ff be08 	b.w	b83e4 <network_off>

000b87d4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b87d4:	6840      	ldr	r0, [r0, #4]
   b87d6:	2100      	movs	r1, #0
   b87d8:	f7ff be2c 	b.w	b8434 <network_is_on>

000b87dc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b87dc:	6840      	ldr	r0, [r0, #4]
   b87de:	2100      	movs	r1, #0
   b87e0:	f7ff be30 	b.w	b8444 <network_is_off>

000b87e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b87e4:	6840      	ldr	r0, [r0, #4]
   b87e6:	2200      	movs	r2, #0
   b87e8:	f081 0101 	eor.w	r1, r1, #1
   b87ec:	f7ff be02 	b.w	b83f4 <network_listen>

000b87f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b87f0:	6840      	ldr	r0, [r0, #4]
   b87f2:	2200      	movs	r2, #0
   b87f4:	f7ff be0e 	b.w	b8414 <network_set_listen_timeout>

000b87f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b87f8:	2200      	movs	r2, #0
   b87fa:	6840      	ldr	r0, [r0, #4]
   b87fc:	4611      	mov	r1, r2
   b87fe:	f7ff be11 	b.w	b8424 <network_get_listen_timeout>

000b8802 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8802:	2200      	movs	r2, #0
   b8804:	6840      	ldr	r0, [r0, #4]
   b8806:	4611      	mov	r1, r2
   b8808:	f7ff bdfc 	b.w	b8404 <network_listening>

000b880c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b880c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8810:	b095      	sub	sp, #84	; 0x54
   b8812:	4614      	mov	r4, r2
   b8814:	460d      	mov	r5, r1
   b8816:	4607      	mov	r7, r0
    IPAddress addr;
   b8818:	f7ff ff60 	bl	b86dc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b881c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b881e:	221c      	movs	r2, #28
   b8820:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8822:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8824:	f002 ff4a 	bl	bb6bc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8828:	2340      	movs	r3, #64	; 0x40
   b882a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b882c:	4620      	mov	r0, r4
   b882e:	466b      	mov	r3, sp
   b8830:	aa0c      	add	r2, sp, #48	; 0x30
   b8832:	2100      	movs	r1, #0
   b8834:	f7ff fc62 	bl	b80fc <netdb_getaddrinfo>
    if (!r) {
   b8838:	4604      	mov	r4, r0
   b883a:	2800      	cmp	r0, #0
   b883c:	d14b      	bne.n	b88d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b883e:	4602      	mov	r2, r0
   b8840:	2101      	movs	r1, #1
   b8842:	6868      	ldr	r0, [r5, #4]
   b8844:	f7ff fdbe 	bl	b83c4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8848:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b884a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b884c:	4622      	mov	r2, r4
   b884e:	6868      	ldr	r0, [r5, #4]
   b8850:	f7ff fdb8 	bl	b83c4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8854:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8856:	4681      	mov	r9, r0
        bool ok = false;
   b8858:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b885a:	2e00      	cmp	r6, #0
   b885c:	d03b      	beq.n	b88d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b885e:	2900      	cmp	r1, #0
   b8860:	d139      	bne.n	b88d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8862:	6873      	ldr	r3, [r6, #4]
   b8864:	2b02      	cmp	r3, #2
   b8866:	d003      	beq.n	b8870 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8868:	2b0a      	cmp	r3, #10
   b886a:	d011      	beq.n	b8890 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b886c:	69f6      	ldr	r6, [r6, #28]
   b886e:	e7f4      	b.n	b885a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8870:	f1b8 0f00 	cmp.w	r8, #0
   b8874:	d0fa      	beq.n	b886c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8876:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8878:	a806      	add	r0, sp, #24
   b887a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b887c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b887e:	f7ff ff71 	bl	b8764 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8884:	1d3c      	adds	r4, r7, #4
   b8886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8888:	682b      	ldr	r3, [r5, #0]
   b888a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b888c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b888e:	e7ed      	b.n	b886c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8890:	f1b9 0f00 	cmp.w	r9, #0
   b8894:	d0ea      	beq.n	b886c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8896:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8898:	2210      	movs	r2, #16
   b889a:	a801      	add	r0, sp, #4
   b889c:	f002 ff0e 	bl	bb6bc <memset>
                    a.v = 6;
   b88a0:	2306      	movs	r3, #6
   b88a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b88a6:	ad01      	add	r5, sp, #4
   b88a8:	f104 0308 	add.w	r3, r4, #8
   b88ac:	3418      	adds	r4, #24
   b88ae:	6818      	ldr	r0, [r3, #0]
   b88b0:	6859      	ldr	r1, [r3, #4]
   b88b2:	462a      	mov	r2, r5
   b88b4:	c203      	stmia	r2!, {r0, r1}
   b88b6:	3308      	adds	r3, #8
   b88b8:	42a3      	cmp	r3, r4
   b88ba:	4615      	mov	r5, r2
   b88bc:	d1f7      	bne.n	b88ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b88be:	a901      	add	r1, sp, #4
   b88c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b88c2:	ad07      	add	r5, sp, #28
   b88c4:	f7ff ff18 	bl	b86f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b88c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b88ca:	1d3c      	adds	r4, r7, #4
   b88cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b88ce:	682b      	ldr	r3, [r5, #0]
   b88d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b88d2:	4649      	mov	r1, r9
   b88d4:	e7ca      	b.n	b886c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b88d6:	9800      	ldr	r0, [sp, #0]
   b88d8:	f7ff fc08 	bl	b80ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b88dc:	4638      	mov	r0, r7
   b88de:	b015      	add	sp, #84	; 0x54
   b88e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b88e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b88e4:	4b02      	ldr	r3, [pc, #8]	; (b88f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b88e6:	4a03      	ldr	r2, [pc, #12]	; (b88f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b88e8:	601a      	str	r2, [r3, #0]
   b88ea:	2200      	movs	r2, #0
   b88ec:	605a      	str	r2, [r3, #4]

} // spark
   b88ee:	4770      	bx	lr
   b88f0:	2003e6d4 	.word	0x2003e6d4
   b88f4:	000c1544 	.word	0x000c1544

000b88f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b88f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b88fa:	4606      	mov	r6, r0
   b88fc:	460d      	mov	r5, r1
  size_t n = 0;
   b88fe:	188f      	adds	r7, r1, r2
   b8900:	2400      	movs	r4, #0
  while (size--) {
   b8902:	42bd      	cmp	r5, r7
   b8904:	d00c      	beq.n	b8920 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8906:	6833      	ldr	r3, [r6, #0]
   b8908:	f815 1b01 	ldrb.w	r1, [r5], #1
   b890c:	689b      	ldr	r3, [r3, #8]
   b890e:	4630      	mov	r0, r6
   b8910:	4798      	blx	r3
     if (chunk>=0)
   b8912:	1e03      	subs	r3, r0, #0
   b8914:	db01      	blt.n	b891a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8916:	441c      	add	r4, r3
  while (size--) {
   b8918:	e7f3      	b.n	b8902 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b891a:	2c00      	cmp	r4, #0
   b891c:	bf08      	it	eq
   b891e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8920:	4620      	mov	r0, r4
   b8922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8924 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8924:	b513      	push	{r0, r1, r4, lr}
   b8926:	4604      	mov	r4, r0
    }
   b8928:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b892a:	b159      	cbz	r1, b8944 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b892c:	9101      	str	r1, [sp, #4]
   b892e:	f002 ff4b 	bl	bb7c8 <strlen>
   b8932:	6823      	ldr	r3, [r4, #0]
   b8934:	9901      	ldr	r1, [sp, #4]
   b8936:	68db      	ldr	r3, [r3, #12]
   b8938:	4602      	mov	r2, r0
   b893a:	4620      	mov	r0, r4
    }
   b893c:	b002      	add	sp, #8
   b893e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8942:	4718      	bx	r3
    }
   b8944:	b002      	add	sp, #8
   b8946:	bd10      	pop	{r4, pc}

000b8948 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8948:	b508      	push	{r3, lr}
  return write(str);
   b894a:	f7ff ffeb 	bl	b8924 <_ZN5Print5writeEPKc>
}
   b894e:	bd08      	pop	{r3, pc}

000b8950 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8950:	6803      	ldr	r3, [r0, #0]
   b8952:	689b      	ldr	r3, [r3, #8]
   b8954:	4718      	bx	r3

000b8956 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8956:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8958:	210d      	movs	r1, #13
{
   b895a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b895c:	f7ff fff8 	bl	b8950 <_ZN5Print5printEc>
  n += print('\n');
   b8960:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8962:	4604      	mov	r4, r0
  n += print('\n');
   b8964:	4628      	mov	r0, r5
   b8966:	f7ff fff3 	bl	b8950 <_ZN5Print5printEc>
  return n;
}
   b896a:	4420      	add	r0, r4
   b896c:	bd38      	pop	{r3, r4, r5, pc}

000b896e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b896e:	b538      	push	{r3, r4, r5, lr}
   b8970:	4605      	mov	r5, r0
  return write(str);
   b8972:	f7ff ffd7 	bl	b8924 <_ZN5Print5writeEPKc>
   b8976:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8978:	4628      	mov	r0, r5
   b897a:	f7ff ffec 	bl	b8956 <_ZN5Print7printlnEv>
  return n;
}
   b897e:	4420      	add	r0, r4
   b8980:	bd38      	pop	{r3, r4, r5, pc}

000b8982 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8982:	b530      	push	{r4, r5, lr}
   b8984:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8986:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8988:	2a01      	cmp	r2, #1
  *str = '\0';
   b898a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b898e:	bf98      	it	ls
   b8990:	220a      	movls	r2, #10
   b8992:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8994:	460d      	mov	r5, r1
   b8996:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b899a:	fb01 5312 	mls	r3, r1, r2, r5
   b899e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b89a2:	2b09      	cmp	r3, #9
   b89a4:	bf94      	ite	ls
   b89a6:	3330      	addls	r3, #48	; 0x30
   b89a8:	3337      	addhi	r3, #55	; 0x37
   b89aa:	b2db      	uxtb	r3, r3
  } while(n);
   b89ac:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b89ae:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b89b2:	d9ef      	bls.n	b8994 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b89b4:	4621      	mov	r1, r4
   b89b6:	f7ff ffb5 	bl	b8924 <_ZN5Print5writeEPKc>
}
   b89ba:	b00b      	add	sp, #44	; 0x2c
   b89bc:	bd30      	pop	{r4, r5, pc}

000b89be <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b89be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b89c2:	b086      	sub	sp, #24
   b89c4:	af00      	add	r7, sp, #0
   b89c6:	4605      	mov	r5, r0
   b89c8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b89ca:	1d38      	adds	r0, r7, #4
   b89cc:	2114      	movs	r1, #20
{
   b89ce:	4614      	mov	r4, r2
    va_copy(args2, args);
   b89d0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b89d2:	f7ff fd57 	bl	b8484 <vsnprintf>

    if (n<bufsize)
   b89d6:	2813      	cmp	r0, #19
   b89d8:	d80e      	bhi.n	b89f8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b89da:	1d39      	adds	r1, r7, #4
   b89dc:	4628      	mov	r0, r5
   b89de:	f7ff ffa1 	bl	b8924 <_ZN5Print5writeEPKc>
   b89e2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b89e4:	b11e      	cbz	r6, b89ee <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b89e6:	4628      	mov	r0, r5
   b89e8:	f7ff ffb5 	bl	b8956 <_ZN5Print7printlnEv>
   b89ec:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b89ee:	4620      	mov	r0, r4
   b89f0:	3718      	adds	r7, #24
   b89f2:	46bd      	mov	sp, r7
   b89f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b89f8:	f100 0308 	add.w	r3, r0, #8
   b89fc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8a00:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8a02:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8a06:	4622      	mov	r2, r4
   b8a08:	1c41      	adds	r1, r0, #1
   b8a0a:	683b      	ldr	r3, [r7, #0]
   b8a0c:	4668      	mov	r0, sp
   b8a0e:	f7ff fd39 	bl	b8484 <vsnprintf>
  return write(str);
   b8a12:	4669      	mov	r1, sp
   b8a14:	4628      	mov	r0, r5
   b8a16:	f7ff ff85 	bl	b8924 <_ZN5Print5writeEPKc>
   b8a1a:	4604      	mov	r4, r0
   b8a1c:	46c5      	mov	sp, r8
   b8a1e:	e7e1      	b.n	b89e4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8a20 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   b8a20:	b510      	push	{r4, lr}
  if (0 == max) {
   b8a22:	4604      	mov	r4, r0
   b8a24:	b128      	cbz	r0, b8a32 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   b8a26:	f002 fe7f 	bl	bb728 <rand>
   b8a2a:	fb90 f3f4 	sdiv	r3, r0, r4
   b8a2e:	fb03 0414 	mls	r4, r3, r4, r0
}
   b8a32:	4620      	mov	r0, r4
   b8a34:	bd10      	pop	{r4, pc}
	...

000b8a38 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b8a38:	4b01      	ldr	r3, [pc, #4]	; (b8a40 <_GLOBAL__sub_I_RGB+0x8>)
   b8a3a:	2200      	movs	r2, #0
   b8a3c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8a3e:	4770      	bx	lr
   b8a40:	2003e6dc 	.word	0x2003e6dc

000b8a44 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8a44:	2100      	movs	r1, #0
   b8a46:	f7ff bbd9 	b.w	b81fc <hal_spi_release>

000b8a4a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b8a4a:	2100      	movs	r1, #0
   b8a4c:	f7ff bbce 	b.w	b81ec <hal_spi_acquire>

000b8a50 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8a50:	b510      	push	{r4, lr}
   b8a52:	4604      	mov	r4, r0
   b8a54:	4608      	mov	r0, r1
{
    _spi = spi;
   b8a56:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8a58:	f7ff fbb0 	bl	b81bc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8a5c:	2300      	movs	r3, #0
   b8a5e:	6063      	str	r3, [r4, #4]
}
   b8a60:	4620      	mov	r0, r4
   b8a62:	bd10      	pop	{r4, pc}

000b8a64 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8a64:	b513      	push	{r0, r1, r4, lr}
   b8a66:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8a68:	7800      	ldrb	r0, [r0, #0]
   b8a6a:	f7ff ffee 	bl	b8a4a <_ZN8SPIClass4lockEv.isra.0>
   b8a6e:	b958      	cbnz	r0, b8a88 <_ZN8SPIClass5beginEv+0x24>
   b8a70:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b8a72:	9001      	str	r0, [sp, #4]
   b8a74:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8a78:	f7ff fb78 	bl	b816c <hal_spi_begin>
        unlock();
   b8a7c:	9801      	ldr	r0, [sp, #4]
    }
}
   b8a7e:	b002      	add	sp, #8
   b8a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8a84:	f7ff bfde 	b.w	b8a44 <_ZN8SPIClass6unlockEv.isra.0>
   b8a88:	b002      	add	sp, #8
   b8a8a:	bd10      	pop	{r4, pc}

000b8a8c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b8a8c:	b513      	push	{r0, r1, r4, lr}
   b8a8e:	4604      	mov	r4, r0
    if (!lock())
   b8a90:	7800      	ldrb	r0, [r0, #0]
{
   b8a92:	9101      	str	r1, [sp, #4]
    if (!lock())
   b8a94:	f7ff ffd9 	bl	b8a4a <_ZN8SPIClass4lockEv.isra.0>
   b8a98:	9901      	ldr	r1, [sp, #4]
   b8a9a:	b948      	cbnz	r0, b8ab0 <_ZN8SPIClass11setBitOrderEh+0x24>
   b8a9c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b8a9e:	9001      	str	r0, [sp, #4]
   b8aa0:	f7ff fb6c 	bl	b817c <hal_spi_set_bit_order>
        unlock();
   b8aa4:	9801      	ldr	r0, [sp, #4]
    }
}
   b8aa6:	b002      	add	sp, #8
   b8aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8aac:	f7ff bfca 	b.w	b8a44 <_ZN8SPIClass6unlockEv.isra.0>
   b8ab0:	b002      	add	sp, #8
   b8ab2:	bd10      	pop	{r4, pc}

000b8ab4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b8ab4:	b513      	push	{r0, r1, r4, lr}
   b8ab6:	4604      	mov	r4, r0
    if (!lock())
   b8ab8:	7800      	ldrb	r0, [r0, #0]
{
   b8aba:	9101      	str	r1, [sp, #4]
    if (!lock())
   b8abc:	f7ff ffc5 	bl	b8a4a <_ZN8SPIClass4lockEv.isra.0>
   b8ac0:	9901      	ldr	r1, [sp, #4]
   b8ac2:	b948      	cbnz	r0, b8ad8 <_ZN8SPIClass11setDataModeEh+0x24>
   b8ac4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b8ac6:	9001      	str	r0, [sp, #4]
   b8ac8:	f7ff fb60 	bl	b818c <hal_spi_set_data_mode>
        unlock();
   b8acc:	9801      	ldr	r0, [sp, #4]
    }
}
   b8ace:	b002      	add	sp, #8
   b8ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8ad4:	f7ff bfb6 	b.w	b8a44 <_ZN8SPIClass6unlockEv.isra.0>
   b8ad8:	b002      	add	sp, #8
   b8ada:	bd10      	pop	{r4, pc}

000b8adc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8adc:	0840      	lsrs	r0, r0, #1
{
   b8ade:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8ae0:	6018      	str	r0, [r3, #0]
   b8ae2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b8ae4:	6818      	ldr	r0, [r3, #0]
   b8ae6:	4288      	cmp	r0, r1
   b8ae8:	b2e5      	uxtb	r5, r4
   b8aea:	d906      	bls.n	b8afa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8aec:	3401      	adds	r4, #1
   b8aee:	2c08      	cmp	r4, #8
   b8af0:	d002      	beq.n	b8af8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b8af2:	0840      	lsrs	r0, r0, #1
   b8af4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b8af6:	e7f5      	b.n	b8ae4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8af8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b8afa:	4b02      	ldr	r3, [pc, #8]	; (b8b04 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b8afc:	5d5b      	ldrb	r3, [r3, r5]
   b8afe:	7013      	strb	r3, [r2, #0]
}
   b8b00:	bd30      	pop	{r4, r5, pc}
   b8b02:	bf00      	nop
   b8b04:	000c1578 	.word	0x000c1578

000b8b08 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b8b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8b0c:	b088      	sub	sp, #32
    unsigned clock = 0;
   b8b0e:	2300      	movs	r3, #0
{
   b8b10:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b8b12:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b8b14:	9302      	str	r3, [sp, #8]
{
   b8b16:	460e      	mov	r6, r1
   b8b18:	4617      	mov	r7, r2
    if (!lock())
   b8b1a:	f7ff ff96 	bl	b8a4a <_ZN8SPIClass4lockEv.isra.0>
   b8b1e:	4605      	mov	r5, r0
   b8b20:	bb00      	cbnz	r0, b8b64 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b8b22:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b8b26:	4601      	mov	r1, r0
   b8b28:	2214      	movs	r2, #20
   b8b2a:	a803      	add	r0, sp, #12
   b8b2c:	f002 fdc6 	bl	bb6bc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8b30:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b8b32:	462a      	mov	r2, r5
   b8b34:	a903      	add	r1, sp, #12
   b8b36:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b8b38:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b8b3c:	f7ff fb4e 	bl	b81dc <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b8b40:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b8b42:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b8b46:	ab02      	add	r3, sp, #8
   b8b48:	f10d 0207 	add.w	r2, sp, #7
   b8b4c:	fb07 f106 	mul.w	r1, r7, r6
   b8b50:	f7ff ffc4 	bl	b8adc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b8b54:	7820      	ldrb	r0, [r4, #0]
   b8b56:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b8b5a:	f7ff fb1f 	bl	b819c <hal_spi_set_clock_divider>
        unlock();
   b8b5e:	7820      	ldrb	r0, [r4, #0]
   b8b60:	f7ff ff70 	bl	b8a44 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b8b64:	9802      	ldr	r0, [sp, #8]
   b8b66:	b008      	add	sp, #32
   b8b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8b6c <_ZN8SPIClass15setClockDividerEh>:
{
   b8b6c:	b538      	push	{r3, r4, r5, lr}
   b8b6e:	4604      	mov	r4, r0
    if (!lock())
   b8b70:	7800      	ldrb	r0, [r0, #0]
{
   b8b72:	460d      	mov	r5, r1
    if (!lock())
   b8b74:	f7ff ff69 	bl	b8a4a <_ZN8SPIClass4lockEv.isra.0>
   b8b78:	4603      	mov	r3, r0
   b8b7a:	b9d0      	cbnz	r0, b8bb2 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b8b7c:	6861      	ldr	r1, [r4, #4]
   b8b7e:	b199      	cbz	r1, b8ba8 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b8b80:	4a0c      	ldr	r2, [pc, #48]	; (b8bb4 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b8b82:	f812 0b01 	ldrb.w	r0, [r2], #1
   b8b86:	4285      	cmp	r5, r0
   b8b88:	d002      	beq.n	b8b90 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b8b8a:	3301      	adds	r3, #1
   b8b8c:	2b08      	cmp	r3, #8
   b8b8e:	d1f8      	bne.n	b8b82 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b8b90:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b8b92:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b8b94:	2201      	movs	r2, #1
   b8b96:	40d9      	lsrs	r1, r3
   b8b98:	4620      	mov	r0, r4
   b8b9a:	f7ff ffb5 	bl	b8b08 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b8b9e:	7820      	ldrb	r0, [r4, #0]
}
   b8ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b8ba4:	f7ff bf4e 	b.w	b8a44 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b8ba8:	7820      	ldrb	r0, [r4, #0]
   b8baa:	4629      	mov	r1, r5
   b8bac:	f7ff faf6 	bl	b819c <hal_spi_set_clock_divider>
   b8bb0:	e7f5      	b.n	b8b9e <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b8bb2:	bd38      	pop	{r3, r4, r5, pc}
   b8bb4:	000c1578 	.word	0x000c1578

000b8bb8 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b8bb8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8bba:	7800      	ldrb	r0, [r0, #0]
   b8bbc:	f7ff faf6 	bl	b81ac <hal_spi_transfer>
}
   b8bc0:	b2c0      	uxtb	r0, r0
   b8bc2:	bd08      	pop	{r3, pc}

000b8bc4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b8bc4:	b510      	push	{r4, lr}
   b8bc6:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8bc8:	f7ff f9e8 	bl	b7f9c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b8bcc:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b8bce:	6823      	ldr	r3, [r4, #0]
   b8bd0:	4620      	mov	r0, r4
   b8bd2:	695b      	ldr	r3, [r3, #20]
   b8bd4:	4798      	blx	r3
    if (c >= 0) return c;
   b8bd6:	2800      	cmp	r0, #0
   b8bd8:	da08      	bge.n	b8bec <_ZN6Stream9timedReadEv+0x28>
   b8bda:	f7ff f9df 	bl	b7f9c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b8bde:	68e3      	ldr	r3, [r4, #12]
   b8be0:	1ac0      	subs	r0, r0, r3
   b8be2:	68a3      	ldr	r3, [r4, #8]
   b8be4:	4298      	cmp	r0, r3
   b8be6:	d3f2      	bcc.n	b8bce <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b8be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b8bec:	bd10      	pop	{r4, pc}
	...

000b8bf0 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b8bf0:	b538      	push	{r3, r4, r5, lr}
   b8bf2:	460d      	mov	r5, r1
  String ret;
   b8bf4:	4907      	ldr	r1, [pc, #28]	; (b8c14 <_ZN6Stream10readStringEv+0x24>)
{
   b8bf6:	4604      	mov	r4, r0
  String ret;
   b8bf8:	f000 f859 	bl	b8cae <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b8bfc:	4628      	mov	r0, r5
   b8bfe:	f7ff ffe1 	bl	b8bc4 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b8c02:	2800      	cmp	r0, #0
   b8c04:	db04      	blt.n	b8c10 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b8c06:	b2c1      	uxtb	r1, r0
   b8c08:	4620      	mov	r0, r4
   b8c0a:	f000 f8cb 	bl	b8da4 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b8c0e:	e7f5      	b.n	b8bfc <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b8c10:	4620      	mov	r0, r4
   b8c12:	bd38      	pop	{r3, r4, r5, pc}
   b8c14:	000bbb84 	.word	0x000bbb84

000b8c18 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8c18:	b510      	push	{r4, lr}
   b8c1a:	4604      	mov	r4, r0
{
	free(buffer);
   b8c1c:	6800      	ldr	r0, [r0, #0]
   b8c1e:	f7ff fc21 	bl	b8464 <free>
}
   b8c22:	4620      	mov	r0, r4
   b8c24:	bd10      	pop	{r4, pc}

000b8c26 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8c26:	b510      	push	{r4, lr}
   b8c28:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8c2a:	6800      	ldr	r0, [r0, #0]
   b8c2c:	b108      	cbz	r0, b8c32 <_ZN6String10invalidateEv+0xc>
   b8c2e:	f7ff fc19 	bl	b8464 <free>
	buffer = NULL;
   b8c32:	2300      	movs	r3, #0
	capacity = len = 0;
   b8c34:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8c38:	6023      	str	r3, [r4, #0]
}
   b8c3a:	bd10      	pop	{r4, pc}

000b8c3c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8c3c:	b538      	push	{r3, r4, r5, lr}
   b8c3e:	4604      	mov	r4, r0
   b8c40:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8c42:	6800      	ldr	r0, [r0, #0]
   b8c44:	3101      	adds	r1, #1
   b8c46:	f7ff fc15 	bl	b8474 <realloc>
	if (newbuffer) {
   b8c4a:	b110      	cbz	r0, b8c52 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8c4c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8c50:	2001      	movs	r0, #1
	}
	return 0;
}
   b8c52:	bd38      	pop	{r3, r4, r5, pc}

000b8c54 <_ZN6String7reserveEj>:
{
   b8c54:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8c56:	6803      	ldr	r3, [r0, #0]
{
   b8c58:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8c5a:	b123      	cbz	r3, b8c66 <_ZN6String7reserveEj+0x12>
   b8c5c:	6843      	ldr	r3, [r0, #4]
   b8c5e:	428b      	cmp	r3, r1
   b8c60:	d301      	bcc.n	b8c66 <_ZN6String7reserveEj+0x12>
   b8c62:	2001      	movs	r0, #1
}
   b8c64:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8c66:	4620      	mov	r0, r4
   b8c68:	f7ff ffe8 	bl	b8c3c <_ZN6String12changeBufferEj>
   b8c6c:	2800      	cmp	r0, #0
   b8c6e:	d0f9      	beq.n	b8c64 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8c70:	68a3      	ldr	r3, [r4, #8]
   b8c72:	2b00      	cmp	r3, #0
   b8c74:	d1f5      	bne.n	b8c62 <_ZN6String7reserveEj+0xe>
   b8c76:	6822      	ldr	r2, [r4, #0]
   b8c78:	7013      	strb	r3, [r2, #0]
   b8c7a:	e7f2      	b.n	b8c62 <_ZN6String7reserveEj+0xe>

000b8c7c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8c7e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8c80:	4611      	mov	r1, r2
   b8c82:	9201      	str	r2, [sp, #4]
{
   b8c84:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8c86:	f7ff ffe5 	bl	b8c54 <_ZN6String7reserveEj>
   b8c8a:	9a01      	ldr	r2, [sp, #4]
   b8c8c:	b928      	cbnz	r0, b8c9a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8c8e:	4620      	mov	r0, r4
   b8c90:	f7ff ffc9 	bl	b8c26 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8c94:	4620      	mov	r0, r4
   b8c96:	b003      	add	sp, #12
   b8c98:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8c9a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8c9c:	4629      	mov	r1, r5
   b8c9e:	6820      	ldr	r0, [r4, #0]
   b8ca0:	f002 fcfe 	bl	bb6a0 <memcpy>
	buffer[len] = 0;
   b8ca4:	6822      	ldr	r2, [r4, #0]
   b8ca6:	68a3      	ldr	r3, [r4, #8]
   b8ca8:	2100      	movs	r1, #0
   b8caa:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8cac:	e7f2      	b.n	b8c94 <_ZN6String4copyEPKcj+0x18>

000b8cae <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8cae:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8cb0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8cb2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8cb6:	4604      	mov	r4, r0
	len = 0;
   b8cb8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8cba:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8cbc:	b141      	cbz	r1, b8cd0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8cbe:	4608      	mov	r0, r1
   b8cc0:	9101      	str	r1, [sp, #4]
   b8cc2:	f002 fd81 	bl	bb7c8 <strlen>
   b8cc6:	9901      	ldr	r1, [sp, #4]
   b8cc8:	4602      	mov	r2, r0
   b8cca:	4620      	mov	r0, r4
   b8ccc:	f7ff ffd6 	bl	b8c7c <_ZN6String4copyEPKcj>
}
   b8cd0:	4620      	mov	r0, r4
   b8cd2:	b002      	add	sp, #8
   b8cd4:	bd10      	pop	{r4, pc}

000b8cd6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8cd6:	4288      	cmp	r0, r1
{
   b8cd8:	b510      	push	{r4, lr}
   b8cda:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8cdc:	d005      	beq.n	b8cea <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8cde:	680b      	ldr	r3, [r1, #0]
   b8ce0:	b12b      	cbz	r3, b8cee <_ZN6StringaSERKS_+0x18>
   b8ce2:	688a      	ldr	r2, [r1, #8]
   b8ce4:	4619      	mov	r1, r3
   b8ce6:	f7ff ffc9 	bl	b8c7c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8cea:	4620      	mov	r0, r4
   b8cec:	bd10      	pop	{r4, pc}
	else invalidate();
   b8cee:	f7ff ff9a 	bl	b8c26 <_ZN6String10invalidateEv>
   b8cf2:	e7fa      	b.n	b8cea <_ZN6StringaSERKS_+0x14>

000b8cf4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8cf4:	b510      	push	{r4, lr}
	buffer = NULL;
   b8cf6:	2300      	movs	r3, #0
String::String(const String &value)
   b8cf8:	4604      	mov	r4, r0
	capacity = 0;
   b8cfa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8cfe:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8d00:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8d02:	f7ff ffe8 	bl	b8cd6 <_ZN6StringaSERKS_>
}
   b8d06:	4620      	mov	r0, r4
   b8d08:	bd10      	pop	{r4, pc}

000b8d0a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8d0a:	b513      	push	{r0, r1, r4, lr}
   b8d0c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8d0e:	b159      	cbz	r1, b8d28 <_ZN6StringaSEPKc+0x1e>
   b8d10:	4608      	mov	r0, r1
   b8d12:	9101      	str	r1, [sp, #4]
   b8d14:	f002 fd58 	bl	bb7c8 <strlen>
   b8d18:	9901      	ldr	r1, [sp, #4]
   b8d1a:	4602      	mov	r2, r0
   b8d1c:	4620      	mov	r0, r4
   b8d1e:	f7ff ffad 	bl	b8c7c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8d22:	4620      	mov	r0, r4
   b8d24:	b002      	add	sp, #8
   b8d26:	bd10      	pop	{r4, pc}
	else invalidate();
   b8d28:	f7ff ff7d 	bl	b8c26 <_ZN6String10invalidateEv>
   b8d2c:	e7f9      	b.n	b8d22 <_ZN6StringaSEPKc+0x18>

000b8d2e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8d2e:	b510      	push	{r4, lr}
   b8d30:	4604      	mov	r4, r0
   b8d32:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8d34:	2300      	movs	r3, #0
	capacity = 0;
   b8d36:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8d3a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8d3c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b8d3e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8d40:	a901      	add	r1, sp, #4
   b8d42:	f000 fc93 	bl	b966c <itoa>
	*this = buf;
   b8d46:	a901      	add	r1, sp, #4
   b8d48:	4620      	mov	r0, r4
   b8d4a:	f7ff ffde 	bl	b8d0a <_ZN6StringaSEPKc>
}
   b8d4e:	4620      	mov	r0, r4
   b8d50:	b00a      	add	sp, #40	; 0x28
   b8d52:	bd10      	pop	{r4, pc}

000b8d54 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8d54:	b570      	push	{r4, r5, r6, lr}
   b8d56:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8d58:	460e      	mov	r6, r1
   b8d5a:	b909      	cbnz	r1, b8d60 <_ZN6String6concatEPKcj+0xc>
   b8d5c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8d5e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8d60:	b16a      	cbz	r2, b8d7e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8d62:	6884      	ldr	r4, [r0, #8]
   b8d64:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8d66:	4621      	mov	r1, r4
   b8d68:	f7ff ff74 	bl	b8c54 <_ZN6String7reserveEj>
   b8d6c:	2800      	cmp	r0, #0
   b8d6e:	d0f5      	beq.n	b8d5c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8d70:	6828      	ldr	r0, [r5, #0]
   b8d72:	68ab      	ldr	r3, [r5, #8]
   b8d74:	4631      	mov	r1, r6
   b8d76:	4418      	add	r0, r3
   b8d78:	f002 fd1e 	bl	bb7b8 <strcpy>
	len = newlen;
   b8d7c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8d7e:	2001      	movs	r0, #1
   b8d80:	e7ed      	b.n	b8d5e <_ZN6String6concatEPKcj+0xa>

000b8d82 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b8d82:	b513      	push	{r0, r1, r4, lr}
   b8d84:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b8d86:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b8d88:	b151      	cbz	r1, b8da0 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b8d8a:	9101      	str	r1, [sp, #4]
   b8d8c:	f002 fd1c 	bl	bb7c8 <strlen>
   b8d90:	9901      	ldr	r1, [sp, #4]
   b8d92:	4602      	mov	r2, r0
   b8d94:	4620      	mov	r0, r4
}
   b8d96:	b002      	add	sp, #8
   b8d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b8d9c:	f7ff bfda 	b.w	b8d54 <_ZN6String6concatEPKcj>
}
   b8da0:	b002      	add	sp, #8
   b8da2:	bd10      	pop	{r4, pc}

000b8da4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8da4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8da6:	2300      	movs	r3, #0
	buf[0] = c;
   b8da8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8dac:	2201      	movs	r2, #1
   b8dae:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8db0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8db4:	f7ff ffce 	bl	b8d54 <_ZN6String6concatEPKcj>
}
   b8db8:	b003      	add	sp, #12
   b8dba:	f85d fb04 	ldr.w	pc, [sp], #4

000b8dbe <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b8dbe:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8dc0:	688a      	ldr	r2, [r1, #8]
   b8dc2:	6809      	ldr	r1, [r1, #0]
{
   b8dc4:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8dc6:	f7ff ffc5 	bl	b8d54 <_ZN6String6concatEPKcj>
   b8dca:	b910      	cbnz	r0, b8dd2 <_ZplRK15StringSumHelperRK6String+0x14>
   b8dcc:	4620      	mov	r0, r4
   b8dce:	f7ff ff2a 	bl	b8c26 <_ZN6String10invalidateEv>
	return a;
}
   b8dd2:	4620      	mov	r0, r4
   b8dd4:	bd10      	pop	{r4, pc}

000b8dd6 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8dd6:	b513      	push	{r0, r1, r4, lr}
   b8dd8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8dda:	b929      	cbnz	r1, b8de8 <_ZplRK15StringSumHelperPKc+0x12>
   b8ddc:	4620      	mov	r0, r4
   b8dde:	f7ff ff22 	bl	b8c26 <_ZN6String10invalidateEv>
	return a;
}
   b8de2:	4620      	mov	r0, r4
   b8de4:	b002      	add	sp, #8
   b8de6:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8de8:	4608      	mov	r0, r1
   b8dea:	9101      	str	r1, [sp, #4]
   b8dec:	f002 fcec 	bl	bb7c8 <strlen>
   b8df0:	9901      	ldr	r1, [sp, #4]
   b8df2:	4602      	mov	r2, r0
   b8df4:	4620      	mov	r0, r4
   b8df6:	f7ff ffad 	bl	b8d54 <_ZN6String6concatEPKcj>
   b8dfa:	2800      	cmp	r0, #0
   b8dfc:	d0ee      	beq.n	b8ddc <_ZplRK15StringSumHelperPKc+0x6>
   b8dfe:	e7f0      	b.n	b8de2 <_ZplRK15StringSumHelperPKc+0xc>

000b8e00 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8e00:	4b05      	ldr	r3, [pc, #20]	; (b8e18 <_GLOBAL__sub_I_System+0x18>)
   b8e02:	2202      	movs	r2, #2
   b8e04:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8e06:	4b05      	ldr	r3, [pc, #20]	; (b8e1c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8e08:	4a05      	ldr	r2, [pc, #20]	; (b8e20 <_GLOBAL__sub_I_System+0x20>)
   b8e0a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8e0c:	2000      	movs	r0, #0
   b8e0e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8e12:	f7ff ba8b 	b.w	b832c <set_system_mode>
   b8e16:	bf00      	nop
   b8e18:	2003e6f8 	.word	0x2003e6f8
   b8e1c:	2003e6ec 	.word	0x2003e6ec
   b8e20:	ffff0000 	.word	0xffff0000

000b8e24 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8e24:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8e26:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8e28:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8e2c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8e2e:	2201      	movs	r2, #1
   b8e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8e34:	f10d 0107 	add.w	r1, sp, #7
   b8e38:	47a0      	blx	r4
}
   b8e3a:	b002      	add	sp, #8
   b8e3c:	bd10      	pop	{r4, pc}

000b8e3e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8e3e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8e40:	6803      	ldr	r3, [r0, #0]
   b8e42:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8e48:	46a4      	mov	ip, r4
}
   b8e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8e4e:	4760      	bx	ip

000b8e50 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8e50:	b513      	push	{r0, r1, r4, lr}
   b8e52:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8e54:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8e56:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8e5a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8e5c:	f10d 0107 	add.w	r1, sp, #7
   b8e60:	2201      	movs	r2, #1
   b8e62:	47a0      	blx	r4
}
   b8e64:	b002      	add	sp, #8
   b8e66:	bd10      	pop	{r4, pc}

000b8e68 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8e68:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b8e6a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e6c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8e70:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8e74:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8e76:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e78:	d008      	beq.n	b8e8c <_ZN9TCPClient4readEv+0x24>
   b8e7a:	6963      	ldr	r3, [r4, #20]
   b8e7c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8e80:	1c51      	adds	r1, r2, #1
   b8e82:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8e86:	4413      	add	r3, r2
   b8e88:	7918      	ldrb	r0, [r3, #4]
}
   b8e8a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e8c:	6803      	ldr	r3, [r0, #0]
   b8e8e:	691b      	ldr	r3, [r3, #16]
   b8e90:	4798      	blx	r3
   b8e92:	2800      	cmp	r0, #0
   b8e94:	d1f1      	bne.n	b8e7a <_ZN9TCPClient4readEv+0x12>
   b8e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8e9a:	e7f6      	b.n	b8e8a <_ZN9TCPClient4readEv+0x22>

000b8e9c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8e9c:	4770      	bx	lr

000b8e9e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8e9e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8ea0:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8ea2:	43c0      	mvns	r0, r0
   b8ea4:	0fc0      	lsrs	r0, r0, #31
   b8ea6:	4770      	bx	lr

000b8ea8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8ea8:	4770      	bx	lr
	...

000b8eac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8eac:	4b06      	ldr	r3, [pc, #24]	; (b8ec8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8eae:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8eb0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b8eb2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8eb6:	d005      	beq.n	b8ec4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8eb8:	4608      	mov	r0, r1
   b8eba:	f000 fd95 	bl	b99e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8ebe:	2800      	cmp	r0, #0
   b8ec0:	bf08      	it	eq
   b8ec2:	2400      	moveq	r4, #0
      }
   b8ec4:	4620      	mov	r0, r4
   b8ec6:	bd10      	pop	{r4, pc}
   b8ec8:	000c14b8 	.word	0x000c14b8

000b8ecc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8ecc:	b510      	push	{r4, lr}
   b8ece:	21ac      	movs	r1, #172	; 0xac
   b8ed0:	4604      	mov	r4, r0
   b8ed2:	f7fb f8e4 	bl	b409e <_ZdlPvj>
   b8ed6:	4620      	mov	r0, r4
   b8ed8:	bd10      	pop	{r4, pc}

000b8eda <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b8eda:	21ac      	movs	r1, #172	; 0xac
   b8edc:	f7fb b8df 	b.w	b409e <_ZdlPvj>

000b8ee0 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8ee4:	f04f 0800 	mov.w	r8, #0
   b8ee8:	b086      	sub	sp, #24
   b8eea:	461c      	mov	r4, r3
   b8eec:	f8c0 8004 	str.w	r8, [r0, #4]
   b8ef0:	4605      	mov	r5, r0
   b8ef2:	460e      	mov	r6, r1
   b8ef4:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8ef6:	4641      	mov	r1, r8
   b8ef8:	2210      	movs	r2, #16
   b8efa:	a802      	add	r0, sp, #8
   b8efc:	f002 fbde 	bl	bb6bc <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8f00:	1c63      	adds	r3, r4, #1
   b8f02:	d009      	beq.n	b8f18 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8f08:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8f0c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8f10:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8f14:	435c      	muls	r4, r3
   b8f16:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8f18:	6968      	ldr	r0, [r5, #20]
   b8f1a:	2310      	movs	r3, #16
   b8f1c:	9300      	str	r3, [sp, #0]
   b8f1e:	6800      	ldr	r0, [r0, #0]
   b8f20:	ab02      	add	r3, sp, #8
   b8f22:	f241 0205 	movw	r2, #4101	; 0x1005
   b8f26:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8f2a:	f7ff f8ef 	bl	b810c <sock_setsockopt>
    if (ret < 0) {
   b8f2e:	2800      	cmp	r0, #0
   b8f30:	da07      	bge.n	b8f42 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8f32:	f7ff faaf 	bl	b8494 <__errno>
   b8f36:	6803      	ldr	r3, [r0, #0]
   b8f38:	606b      	str	r3, [r5, #4]
        return 0;
   b8f3a:	2000      	movs	r0, #0
}
   b8f3c:	b006      	add	sp, #24
   b8f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8f42:	6968      	ldr	r0, [r5, #20]
   b8f44:	2300      	movs	r3, #0
   b8f46:	6800      	ldr	r0, [r0, #0]
   b8f48:	463a      	mov	r2, r7
   b8f4a:	4631      	mov	r1, r6
   b8f4c:	f7ff f8fe 	bl	b814c <sock_send>
    if (ret < 0) {
   b8f50:	1e03      	subs	r3, r0, #0
   b8f52:	dbee      	blt.n	b8f32 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8f54:	4618      	mov	r0, r3
   b8f56:	e7f1      	b.n	b8f3c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8f58 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8f58:	b530      	push	{r4, r5, lr}
   b8f5a:	b087      	sub	sp, #28
   b8f5c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8f5e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8f60:	4668      	mov	r0, sp
   b8f62:	f7ff fbff 	bl	b8764 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f68:	3404      	adds	r4, #4
   b8f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f6c:	682b      	ldr	r3, [r5, #0]
   b8f6e:	7023      	strb	r3, [r4, #0]
    }
   b8f70:	b007      	add	sp, #28
   b8f72:	bd30      	pop	{r4, r5, pc}

000b8f74 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8f74:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8f76:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8f78:	4b05      	ldr	r3, [pc, #20]	; (b8f90 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8f7a:	4604      	mov	r4, r0
   b8f7c:	358c      	adds	r5, #140	; 0x8c
   b8f7e:	f844 3b04 	str.w	r3, [r4], #4
   b8f82:	4606      	mov	r6, r0
   b8f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f88:	682b      	ldr	r3, [r5, #0]
   b8f8a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8f8c:	4630      	mov	r0, r6
   b8f8e:	bd70      	pop	{r4, r5, r6, pc}
   b8f90:	000c152c 	.word	0x000c152c

000b8f94 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8f98:	4698      	mov	r8, r3
    stop();
   b8f9a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8f9c:	b093      	sub	sp, #76	; 0x4c
   b8f9e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8fa0:	2400      	movs	r4, #0
    stop();
   b8fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8fa4:	4606      	mov	r6, r0
   b8fa6:	4617      	mov	r7, r2
    stop();
   b8fa8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8faa:	4628      	mov	r0, r5
   b8fac:	466b      	mov	r3, sp
   b8fae:	4622      	mov	r2, r4
   b8fb0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8fb2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8fb4:	f7ff f8a2 	bl	b80fc <netdb_getaddrinfo>
   b8fb8:	4605      	mov	r5, r0
   b8fba:	2800      	cmp	r0, #0
   b8fbc:	d163      	bne.n	b9086 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8fbe:	9b00      	ldr	r3, [sp, #0]
   b8fc0:	2b00      	cmp	r3, #0
   b8fc2:	d04b      	beq.n	b905c <_ZN9TCPClient7connectEPKctm+0xc8>
   b8fc4:	695b      	ldr	r3, [r3, #20]
   b8fc6:	2b00      	cmp	r3, #0
   b8fc8:	d048      	beq.n	b905c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8fca:	a806      	add	r0, sp, #24
   b8fcc:	f7ff fb86 	bl	b86dc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8fd0:	9b00      	ldr	r3, [sp, #0]
   b8fd2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8fd4:	7863      	ldrb	r3, [r4, #1]
   b8fd6:	2b02      	cmp	r3, #2
   b8fd8:	d104      	bne.n	b8fe4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8fda:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8fdc:	a806      	add	r0, sp, #24
   b8fde:	f7ff ffbb 	bl	b8f58 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8fe2:	e026      	b.n	b9032 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8fe4:	2b0a      	cmp	r3, #10
   b8fe6:	d124      	bne.n	b9032 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8fe8:	2211      	movs	r2, #17
   b8fea:	4629      	mov	r1, r5
   b8fec:	a801      	add	r0, sp, #4
   b8fee:	f002 fb65 	bl	bb6bc <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8ff2:	68a3      	ldr	r3, [r4, #8]
   b8ff4:	2b00      	cmp	r3, #0
   b8ff6:	d038      	beq.n	b906a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8ff8:	f104 0308 	add.w	r3, r4, #8
   b8ffc:	f10d 0c04 	add.w	ip, sp, #4
   b9000:	3418      	adds	r4, #24
   b9002:	6818      	ldr	r0, [r3, #0]
   b9004:	6859      	ldr	r1, [r3, #4]
   b9006:	4662      	mov	r2, ip
   b9008:	c203      	stmia	r2!, {r0, r1}
   b900a:	3308      	adds	r3, #8
   b900c:	42a3      	cmp	r3, r4
   b900e:	4694      	mov	ip, r2
   b9010:	d1f7      	bne.n	b9002 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9012:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9014:	a901      	add	r1, sp, #4
   b9016:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9018:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b901c:	f7ff fb6c 	bl	b86f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9020:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9024:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9028:	ac07      	add	r4, sp, #28
   b902a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b902c:	f8dc 3000 	ldr.w	r3, [ip]
   b9030:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9032:	a806      	add	r0, sp, #24
   b9034:	f7ff fb72 	bl	b871c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9038:	b180      	cbz	r0, b905c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b903a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b903c:	ad07      	add	r5, sp, #28
   b903e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9042:	4b12      	ldr	r3, [pc, #72]	; (b908c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9044:	930c      	str	r3, [sp, #48]	; 0x30
   b9046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9048:	ac0d      	add	r4, sp, #52	; 0x34
   b904a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b904c:	682b      	ldr	r3, [r5, #0]
   b904e:	7023      	strb	r3, [r4, #0]
   b9050:	463a      	mov	r2, r7
   b9052:	4643      	mov	r3, r8
   b9054:	a90c      	add	r1, sp, #48	; 0x30
   b9056:	4630      	mov	r0, r6
   b9058:	47c8      	blx	r9
   b905a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b905c:	9800      	ldr	r0, [sp, #0]
   b905e:	f7ff f845 	bl	b80ec <netdb_freeaddrinfo>
}
   b9062:	4628      	mov	r0, r5
   b9064:	b013      	add	sp, #76	; 0x4c
   b9066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b906a:	68e3      	ldr	r3, [r4, #12]
   b906c:	2b00      	cmp	r3, #0
   b906e:	d1c3      	bne.n	b8ff8 <_ZN9TCPClient7connectEPKctm+0x64>
   b9070:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9074:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9078:	f7ff f828 	bl	b80cc <inet_htonl>
   b907c:	4581      	cmp	r9, r0
   b907e:	d1bb      	bne.n	b8ff8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9080:	f104 0114 	add.w	r1, r4, #20
   b9084:	e7aa      	b.n	b8fdc <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9086:	4625      	mov	r5, r4
   b9088:	e7e8      	b.n	b905c <_ZN9TCPClient7connectEPKctm+0xc8>
   b908a:	bf00      	nop
   b908c:	000c152c 	.word	0x000c152c

000b9090 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9090:	b538      	push	{r3, r4, r5, lr}
   b9092:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9094:	681a      	ldr	r2, [r3, #0]
   b9096:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9098:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b909a:	da10      	bge.n	b90be <_ZN9TCPClient9connectedEv+0x2e>
   b909c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b90a0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b90a4:	429a      	cmp	r2, r3
   b90a6:	d10a      	bne.n	b90be <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b90a8:	6803      	ldr	r3, [r0, #0]
   b90aa:	691b      	ldr	r3, [r3, #16]
   b90ac:	4798      	blx	r3
        if (!rv) {
   b90ae:	4604      	mov	r4, r0
   b90b0:	b928      	cbnz	r0, b90be <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b90b2:	682b      	ldr	r3, [r5, #0]
   b90b4:	4628      	mov	r0, r5
   b90b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b90b8:	4798      	blx	r3
        rv = available();
   b90ba:	4620      	mov	r0, r4
}
   b90bc:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b90be:	2001      	movs	r0, #1
   b90c0:	e7fc      	b.n	b90bc <_ZN9TCPClient9connectedEv+0x2c>

000b90c2 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b90c2:	b510      	push	{r4, lr}
   b90c4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b90c6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b90ca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b90ce:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b90d0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b90d2:	d005      	beq.n	b90e0 <_ZN9TCPClient4peekEv+0x1e>
   b90d4:	6963      	ldr	r3, [r4, #20]
   b90d6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b90da:	4413      	add	r3, r2
   b90dc:	7918      	ldrb	r0, [r3, #4]
}
   b90de:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b90e0:	6803      	ldr	r3, [r0, #0]
   b90e2:	691b      	ldr	r3, [r3, #16]
   b90e4:	4798      	blx	r3
   b90e6:	2800      	cmp	r0, #0
   b90e8:	d1f4      	bne.n	b90d4 <_ZN9TCPClient4peekEv+0x12>
   b90ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b90ee:	e7f6      	b.n	b90de <_ZN9TCPClient4peekEv+0x1c>

000b90f0 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b90f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b90f2:	6943      	ldr	r3, [r0, #20]
   b90f4:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b90f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b90fa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b90fe:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9100:	4605      	mov	r5, r0
   b9102:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9104:	d016      	beq.n	b9134 <_ZN9TCPClient4readEPhj+0x44>
   b9106:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9108:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b910c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9110:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9112:	42bc      	cmp	r4, r7
   b9114:	bf28      	it	cs
   b9116:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9118:	3304      	adds	r3, #4
   b911a:	4622      	mov	r2, r4
   b911c:	4419      	add	r1, r3
   b911e:	4630      	mov	r0, r6
   b9120:	f002 fabe 	bl	bb6a0 <memcpy>
   b9124:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9126:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b912a:	4423      	add	r3, r4
   b912c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9130:	4620      	mov	r0, r4
   b9132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9134:	6803      	ldr	r3, [r0, #0]
   b9136:	691b      	ldr	r3, [r3, #16]
   b9138:	4798      	blx	r3
   b913a:	2800      	cmp	r0, #0
   b913c:	d1e3      	bne.n	b9106 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b913e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9142:	e7f5      	b.n	b9130 <_ZN9TCPClient4readEPhj+0x40>

000b9144 <_ZN9TCPClient12flush_bufferEv>:
   b9144:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9146:	2300      	movs	r3, #0
   b9148:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b914c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b914e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9152:	4770      	bx	lr

000b9154 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9158:	461f      	mov	r7, r3
    stop();
   b915a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b915c:	460c      	mov	r4, r1
    stop();
   b915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9160:	b08a      	sub	sp, #40	; 0x28
   b9162:	4605      	mov	r5, r0
   b9164:	4616      	mov	r6, r2
    stop();
   b9166:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9168:	7d23      	ldrb	r3, [r4, #20]
   b916a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b916e:	2b04      	cmp	r3, #4
   b9170:	bf0c      	ite	eq
   b9172:	2002      	moveq	r0, #2
   b9174:	200a      	movne	r0, #10
   b9176:	2206      	movs	r2, #6
   b9178:	2101      	movs	r1, #1
   b917a:	f7fe ffef 	bl	b815c <sock_socket>
   b917e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9182:	696b      	ldr	r3, [r5, #20]
   b9184:	681b      	ldr	r3, [r3, #0]
   b9186:	2b00      	cmp	r3, #0
   b9188:	da08      	bge.n	b919c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b918a:	682b      	ldr	r3, [r5, #0]
   b918c:	4628      	mov	r0, r5
   b918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9190:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9192:	4798      	blx	r3
}
   b9194:	4620      	mov	r0, r4
   b9196:	b00a      	add	sp, #40	; 0x28
   b9198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b919c:	4628      	mov	r0, r5
   b919e:	f7ff ffd1 	bl	b9144 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b91a2:	b1b7      	cbz	r7, b91d2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b91a4:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b91a6:	a903      	add	r1, sp, #12
   b91a8:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b91aa:	9303      	str	r3, [sp, #12]
   b91ac:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b91b0:	f7fe ff7c 	bl	b80ac <if_index_to_name>
   b91b4:	2800      	cmp	r0, #0
   b91b6:	d1e8      	bne.n	b918a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b91b8:	6968      	ldr	r0, [r5, #20]
   b91ba:	2306      	movs	r3, #6
   b91bc:	9300      	str	r3, [sp, #0]
   b91be:	6800      	ldr	r0, [r0, #0]
   b91c0:	ab03      	add	r3, sp, #12
   b91c2:	f241 020b 	movw	r2, #4107	; 0x100b
   b91c6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b91ca:	f7fe ff9f 	bl	b810c <sock_setsockopt>
   b91ce:	2800      	cmp	r0, #0
   b91d0:	d1db      	bne.n	b918a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b91d2:	221c      	movs	r2, #28
   b91d4:	2100      	movs	r1, #0
   b91d6:	a803      	add	r0, sp, #12
   b91d8:	f002 fa70 	bl	bb6bc <memset>
    if (ip.version() == 4) {
   b91dc:	7d23      	ldrb	r3, [r4, #20]
   b91de:	2b04      	cmp	r3, #4
   b91e0:	d11d      	bne.n	b921e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b91e2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b91e6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b91e8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b91ec:	f7fe ff76 	bl	b80dc <inet_htons>
   b91f0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b91f4:	6860      	ldr	r0, [r4, #4]
   b91f6:	f7fe ff69 	bl	b80cc <inet_htonl>
   b91fa:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b91fc:	696b      	ldr	r3, [r5, #20]
   b91fe:	221c      	movs	r2, #28
   b9200:	6818      	ldr	r0, [r3, #0]
   b9202:	a903      	add	r1, sp, #12
   b9204:	f7fe ff92 	bl	b812c <sock_connect>
   b9208:	2800      	cmp	r0, #0
   b920a:	d1be      	bne.n	b918a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b920c:	3404      	adds	r4, #4
   b920e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9210:	696d      	ldr	r5, [r5, #20]
   b9212:	358c      	adds	r5, #140	; 0x8c
   b9214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9216:	6823      	ldr	r3, [r4, #0]
   b9218:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b921a:	2401      	movs	r4, #1
   b921c:	e7ba      	b.n	b9194 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b921e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9222:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9224:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9228:	f7fe ff58 	bl	b80dc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b922c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b922e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9232:	1d23      	adds	r3, r4, #4
   b9234:	f104 0714 	add.w	r7, r4, #20
   b9238:	6818      	ldr	r0, [r3, #0]
   b923a:	6859      	ldr	r1, [r3, #4]
   b923c:	4632      	mov	r2, r6
   b923e:	c203      	stmia	r2!, {r0, r1}
   b9240:	3308      	adds	r3, #8
   b9242:	42bb      	cmp	r3, r7
   b9244:	4616      	mov	r6, r2
   b9246:	d1f7      	bne.n	b9238 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9248:	e7d8      	b.n	b91fc <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b924c <_ZN9TCPClient9availableEv>:
{
   b924c:	b530      	push	{r4, r5, lr}
   b924e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9250:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9254:	b08b      	sub	sp, #44	; 0x2c
   b9256:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9258:	b12b      	cbz	r3, b9266 <_ZN9TCPClient9availableEv+0x1a>
   b925a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b925e:	429a      	cmp	r2, r3
   b9260:	d101      	bne.n	b9266 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9262:	f7ff ff6f 	bl	b9144 <_ZN9TCPClient12flush_bufferEv>
   b9266:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9268:	6808      	ldr	r0, [r1, #0]
   b926a:	2800      	cmp	r0, #0
   b926c:	db18      	blt.n	b92a0 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b926e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9272:	2d7f      	cmp	r5, #127	; 0x7f
   b9274:	d814      	bhi.n	b92a0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9276:	3104      	adds	r1, #4
   b9278:	2308      	movs	r3, #8
   b927a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b927e:	4429      	add	r1, r5
   b9280:	f7fe ff5c 	bl	b813c <sock_recv>
            if (ret > 0) {
   b9284:	2800      	cmp	r0, #0
   b9286:	dd13      	ble.n	b92b0 <_ZN9TCPClient9availableEv+0x64>
   b9288:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b928a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b928e:	b90a      	cbnz	r2, b9294 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9290:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9294:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9296:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b929a:	4410      	add	r0, r2
   b929c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b92a0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b92a2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b92a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b92aa:	1ac0      	subs	r0, r0, r3
   b92ac:	b00b      	add	sp, #44	; 0x2c
   b92ae:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b92b0:	f7ff f8f0 	bl	b8494 <__errno>
   b92b4:	6803      	ldr	r3, [r0, #0]
   b92b6:	2b0b      	cmp	r3, #11
   b92b8:	d0f2      	beq.n	b92a0 <_ZN9TCPClient9availableEv+0x54>
   b92ba:	f7ff f8eb 	bl	b8494 <__errno>
   b92be:	6803      	ldr	r3, [r0, #0]
   b92c0:	2b0b      	cmp	r3, #11
   b92c2:	d0ed      	beq.n	b92a0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b92c4:	2320      	movs	r3, #32
   b92c6:	2500      	movs	r5, #0
   b92c8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b92cc:	f7ff f8e2 	bl	b8494 <__errno>
   b92d0:	6803      	ldr	r3, [r0, #0]
   b92d2:	9301      	str	r3, [sp, #4]
   b92d4:	4b08      	ldr	r3, [pc, #32]	; (b92f8 <_ZN9TCPClient9availableEv+0xac>)
   b92d6:	4909      	ldr	r1, [pc, #36]	; (b92fc <_ZN9TCPClient9availableEv+0xb0>)
   b92d8:	9300      	str	r3, [sp, #0]
   b92da:	aa02      	add	r2, sp, #8
   b92dc:	462b      	mov	r3, r5
   b92de:	2032      	movs	r0, #50	; 0x32
   b92e0:	f7ff f81c 	bl	b831c <log_message>
                    sock_close(d_->sock);
   b92e4:	6963      	ldr	r3, [r4, #20]
   b92e6:	6818      	ldr	r0, [r3, #0]
   b92e8:	f7fe ff18 	bl	b811c <sock_close>
   b92ec:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b92ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b92f2:	601a      	str	r2, [r3, #0]
   b92f4:	e7d4      	b.n	b92a0 <_ZN9TCPClient9availableEv+0x54>
   b92f6:	bf00      	nop
   b92f8:	000c1587 	.word	0x000c1587
   b92fc:	000c1580 	.word	0x000c1580

000b9300 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9300:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9302:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9304:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b9306:	6818      	ldr	r0, [r3, #0]
   b9308:	2800      	cmp	r0, #0
   b930a:	db01      	blt.n	b9310 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b930c:	f7fe ff06 	bl	b811c <sock_close>
   b9310:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9316:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9318:	6960      	ldr	r0, [r4, #20]
   b931a:	2211      	movs	r2, #17
   b931c:	2100      	movs	r1, #0
   b931e:	308c      	adds	r0, #140	; 0x8c
   b9320:	f002 f9cc 	bl	bb6bc <memset>
    flush_buffer();
   b9324:	4620      	mov	r0, r4
}
   b9326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b932a:	f7ff bf0b 	b.w	b9144 <_ZN9TCPClient12flush_bufferEv>

000b932e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b932e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9330:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9332:	4604      	mov	r4, r0
          total(0) {
   b9334:	6001      	str	r1, [r0, #0]
   b9336:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b933a:	3088      	adds	r0, #136	; 0x88
   b933c:	f7ff f9ce 	bl	b86dc <_ZN9IPAddressC1Ev>
}
   b9340:	4620      	mov	r0, r4
   b9342:	bd10      	pop	{r4, pc}

000b9344 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9344:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9346:	2300      	movs	r3, #0
   b9348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b934c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9350:	4a0e      	ldr	r2, [pc, #56]	; (b938c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9352:	6103      	str	r3, [r0, #16]
   b9354:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9356:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9358:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b935a:	20ac      	movs	r0, #172	; 0xac
   b935c:	9101      	str	r1, [sp, #4]
   b935e:	f7fa fe9a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9362:	1e05      	subs	r5, r0, #0
   b9364:	f105 060c 	add.w	r6, r5, #12
   b9368:	d008      	beq.n	b937c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b936a:	2301      	movs	r3, #1
   b936c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9370:	4b07      	ldr	r3, [pc, #28]	; (b9390 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9372:	9901      	ldr	r1, [sp, #4]
   b9374:	602b      	str	r3, [r5, #0]
   b9376:	4630      	mov	r0, r6
   b9378:	f7ff ffd9 	bl	b932e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b937c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b937e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9382:	f7ff fedf 	bl	b9144 <_ZN9TCPClient12flush_bufferEv>
}
   b9386:	b002      	add	sp, #8
   b9388:	bd70      	pop	{r4, r5, r6, pc}
   b938a:	bf00      	nop
   b938c:	000c15bc 	.word	0x000c15bc
   b9390:	000c15a0 	.word	0x000c15a0

000b9394 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9394:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9396:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b939a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b939c:	f7ff ffd2 	bl	b9344 <_ZN9TCPClientC1Ei>
}
   b93a0:	4620      	mov	r0, r4
   b93a2:	bd10      	pop	{r4, pc}

000b93a4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b93a4:	b510      	push	{r4, lr}
   b93a6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b93a8:	6800      	ldr	r0, [r0, #0]
   b93aa:	2800      	cmp	r0, #0
   b93ac:	db01      	blt.n	b93b2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b93ae:	f7fe feb5 	bl	b811c <sock_close>
    }
}
   b93b2:	4620      	mov	r0, r4
   b93b4:	bd10      	pop	{r4, pc}

000b93b6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b93b6:	300c      	adds	r0, #12
   b93b8:	f7ff bff4 	b.w	b93a4 <_ZN9TCPClient4DataD1Ev>

000b93bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b93bc:	4b02      	ldr	r3, [pc, #8]	; (b93c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b93be:	681a      	ldr	r2, [r3, #0]
   b93c0:	4b02      	ldr	r3, [pc, #8]	; (b93cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b93c2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b93c4:	4770      	bx	lr
   b93c6:	bf00      	nop
   b93c8:	2003e4e4 	.word	0x2003e4e4
   b93cc:	2003e6fc 	.word	0x2003e6fc

000b93d0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b93d0:	4770      	bx	lr

000b93d2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b93d2:	7441      	strb	r1, [r0, #17]
}
   b93d4:	4770      	bx	lr

000b93d6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b93d6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b93d8:	7c00      	ldrb	r0, [r0, #16]
   b93da:	f7fe ff47 	bl	b826c <hal_usart_available_data_for_write>
}
   b93de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b93e2:	bd08      	pop	{r3, pc}

000b93e4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b93e4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b93e6:	7c00      	ldrb	r0, [r0, #16]
   b93e8:	f7fe ff18 	bl	b821c <hal_usart_available>
}
   b93ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b93f0:	bd08      	pop	{r3, pc}

000b93f2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b93f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b93f4:	7c00      	ldrb	r0, [r0, #16]
   b93f6:	f7fe ff21 	bl	b823c <hal_usart_peek>
}
   b93fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b93fe:	bd08      	pop	{r3, pc}

000b9400 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9400:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9402:	7c00      	ldrb	r0, [r0, #16]
   b9404:	f7fe ff12 	bl	b822c <hal_usart_read>
}
   b9408:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b940c:	bd08      	pop	{r3, pc}

000b940e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b940e:	7c00      	ldrb	r0, [r0, #16]
   b9410:	f7fe bf1c 	b.w	b824c <hal_usart_flush>

000b9414 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9414:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9416:	7c45      	ldrb	r5, [r0, #17]
{
   b9418:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b941a:	b12d      	cbz	r5, b9428 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b941c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b941e:	b003      	add	sp, #12
   b9420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9424:	f7fe bef2 	b.w	b820c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9428:	7c00      	ldrb	r0, [r0, #16]
   b942a:	9101      	str	r1, [sp, #4]
   b942c:	f7fe ff1e 	bl	b826c <hal_usart_available_data_for_write>
   b9430:	2800      	cmp	r0, #0
   b9432:	9901      	ldr	r1, [sp, #4]
   b9434:	dcf2      	bgt.n	b941c <_ZN11USARTSerial5writeEh+0x8>
}
   b9436:	4628      	mov	r0, r5
   b9438:	b003      	add	sp, #12
   b943a:	bd30      	pop	{r4, r5, pc}

000b943c <_ZN11USARTSerialD0Ev>:
   b943c:	b510      	push	{r4, lr}
   b943e:	2114      	movs	r1, #20
   b9440:	4604      	mov	r4, r0
   b9442:	f7fa fe2c 	bl	b409e <_ZdlPvj>
   b9446:	4620      	mov	r0, r4
   b9448:	bd10      	pop	{r4, pc}
	...

000b944c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b944c:	b510      	push	{r4, lr}
   b944e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9452:	4604      	mov	r4, r0
   b9454:	4608      	mov	r0, r1
   b9456:	4611      	mov	r1, r2
   b9458:	2200      	movs	r2, #0
   b945a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b945e:	4b04      	ldr	r3, [pc, #16]	; (b9470 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9460:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9462:	2301      	movs	r3, #1
  _serial = serial;
   b9464:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9466:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9468:	f7fe ff08 	bl	b827c <hal_usart_init_ex>
}
   b946c:	4620      	mov	r0, r4
   b946e:	bd10      	pop	{r4, pc}
   b9470:	000c1624 	.word	0x000c1624

000b9474 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9474:	7441      	strb	r1, [r0, #17]
}
   b9476:	4770      	bx	lr

000b9478 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9478:	4770      	bx	lr

000b947a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b947a:	4770      	bx	lr

000b947c <_ZN9USBSerial4readEv>:
{
   b947c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b947e:	2100      	movs	r1, #0
   b9480:	7c00      	ldrb	r0, [r0, #16]
   b9482:	f7fe ff23 	bl	b82cc <HAL_USB_USART_Receive_Data>
}
   b9486:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b948a:	bd08      	pop	{r3, pc}

000b948c <_ZN9USBSerial4peekEv>:
{
   b948c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b948e:	2101      	movs	r1, #1
   b9490:	7c00      	ldrb	r0, [r0, #16]
   b9492:	f7fe ff1b 	bl	b82cc <HAL_USB_USART_Receive_Data>
}
   b9496:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b949a:	bd08      	pop	{r3, pc}

000b949c <_ZN9USBSerial17availableForWriteEv>:
{
   b949c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b949e:	7c00      	ldrb	r0, [r0, #16]
   b94a0:	f7fe ff0c 	bl	b82bc <HAL_USB_USART_Available_Data_For_Write>
}
   b94a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b94a8:	bd08      	pop	{r3, pc}

000b94aa <_ZN9USBSerial9availableEv>:
{
   b94aa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b94ac:	7c00      	ldrb	r0, [r0, #16]
   b94ae:	f7fe fefd 	bl	b82ac <HAL_USB_USART_Available_Data>
}
   b94b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b94b6:	bd08      	pop	{r3, pc}

000b94b8 <_ZN9USBSerial5writeEh>:
{
   b94b8:	b513      	push	{r0, r1, r4, lr}
   b94ba:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b94bc:	7c00      	ldrb	r0, [r0, #16]
{
   b94be:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b94c0:	f7fe fefc 	bl	b82bc <HAL_USB_USART_Available_Data_For_Write>
   b94c4:	2800      	cmp	r0, #0
   b94c6:	9901      	ldr	r1, [sp, #4]
   b94c8:	dc01      	bgt.n	b94ce <_ZN9USBSerial5writeEh+0x16>
   b94ca:	7c60      	ldrb	r0, [r4, #17]
   b94cc:	b120      	cbz	r0, b94d8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b94ce:	7c20      	ldrb	r0, [r4, #16]
   b94d0:	f7fe ff04 	bl	b82dc <HAL_USB_USART_Send_Data>
   b94d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b94d8:	b002      	add	sp, #8
   b94da:	bd10      	pop	{r4, pc}

000b94dc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b94dc:	7c00      	ldrb	r0, [r0, #16]
   b94de:	f7fe bf05 	b.w	b82ec <HAL_USB_USART_Flush_Data>

000b94e2 <_ZN9USBSerialD0Ev>:
   b94e2:	b510      	push	{r4, lr}
   b94e4:	2114      	movs	r1, #20
   b94e6:	4604      	mov	r4, r0
   b94e8:	f7fa fdd9 	bl	b409e <_ZdlPvj>
   b94ec:	4620      	mov	r0, r4
   b94ee:	bd10      	pop	{r4, pc}

000b94f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b94f0:	b510      	push	{r4, lr}
   b94f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b94f6:	4604      	mov	r4, r0
   b94f8:	4608      	mov	r0, r1
   b94fa:	2100      	movs	r1, #0
   b94fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9500:	4b04      	ldr	r3, [pc, #16]	; (b9514 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9502:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9504:	2301      	movs	r3, #1
  _serial = serial;
   b9506:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9508:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b950a:	4611      	mov	r1, r2
   b950c:	f7fe febe 	bl	b828c <HAL_USB_USART_Init>
}
   b9510:	4620      	mov	r0, r4
   b9512:	bd10      	pop	{r4, pc}
   b9514:	000c1654 	.word	0x000c1654

000b9518 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9518:	7c00      	ldrb	r0, [r0, #16]
   b951a:	2200      	movs	r2, #0
   b951c:	f7fe bebe 	b.w	b829c <HAL_USB_USART_Begin>

000b9520 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b9520:	7c00      	ldrb	r0, [r0, #16]
   b9522:	f7fe beeb 	b.w	b82fc <HAL_USB_USART_Is_Connected>

000b9526 <_Z19acquireSerialBufferv>:
{
   b9526:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9528:	2214      	movs	r2, #20
{
   b952a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b952c:	2100      	movs	r1, #0
   b952e:	f002 f8c5 	bl	bb6bc <memset>
}
   b9532:	4620      	mov	r0, r4
   b9534:	bd10      	pop	{r4, pc}
	...

000b9538 <_Z16_fetch_usbserialv>:
{
   b9538:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b953a:	4c0f      	ldr	r4, [pc, #60]	; (b9578 <_Z16_fetch_usbserialv+0x40>)
{
   b953c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b953e:	a803      	add	r0, sp, #12
   b9540:	f7ff fff1 	bl	b9526 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9544:	7821      	ldrb	r1, [r4, #0]
   b9546:	f3bf 8f5b 	dmb	ish
   b954a:	f011 0101 	ands.w	r1, r1, #1
   b954e:	d10f      	bne.n	b9570 <_Z16_fetch_usbserialv+0x38>
   b9550:	4620      	mov	r0, r4
   b9552:	9101      	str	r1, [sp, #4]
   b9554:	f7fa fdb2 	bl	b40bc <__cxa_guard_acquire>
   b9558:	9901      	ldr	r1, [sp, #4]
   b955a:	b148      	cbz	r0, b9570 <_Z16_fetch_usbserialv+0x38>
   b955c:	aa03      	add	r2, sp, #12
   b955e:	4807      	ldr	r0, [pc, #28]	; (b957c <_Z16_fetch_usbserialv+0x44>)
   b9560:	f7ff ffc6 	bl	b94f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9564:	4620      	mov	r0, r4
   b9566:	f7fa fdae 	bl	b40c6 <__cxa_guard_release>
   b956a:	4805      	ldr	r0, [pc, #20]	; (b9580 <_Z16_fetch_usbserialv+0x48>)
   b956c:	f002 f892 	bl	bb694 <atexit>
	return _usbserial;
}
   b9570:	4802      	ldr	r0, [pc, #8]	; (b957c <_Z16_fetch_usbserialv+0x44>)
   b9572:	b008      	add	sp, #32
   b9574:	bd10      	pop	{r4, pc}
   b9576:	bf00      	nop
   b9578:	2003e700 	.word	0x2003e700
   b957c:	2003e704 	.word	0x2003e704
   b9580:	000b9479 	.word	0x000b9479

000b9584 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9584:	2200      	movs	r2, #0
   b9586:	6840      	ldr	r0, [r0, #4]
   b9588:	4611      	mov	r1, r2
   b958a:	f7fe bf1b 	b.w	b83c4 <network_ready>

000b958e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b958e:	2200      	movs	r2, #0
   b9590:	6840      	ldr	r0, [r0, #4]
   b9592:	4611      	mov	r1, r2
   b9594:	f7fe bf36 	b.w	b8404 <network_listening>

000b9598 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9598:	2200      	movs	r2, #0
   b959a:	6840      	ldr	r0, [r0, #4]
   b959c:	4611      	mov	r1, r2
   b959e:	f7fe bf41 	b.w	b8424 <network_get_listen_timeout>

000b95a2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b95a2:	6840      	ldr	r0, [r0, #4]
   b95a4:	2200      	movs	r2, #0
   b95a6:	f7fe bf35 	b.w	b8414 <network_set_listen_timeout>

000b95aa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b95aa:	6840      	ldr	r0, [r0, #4]
   b95ac:	2200      	movs	r2, #0
   b95ae:	f081 0101 	eor.w	r1, r1, #1
   b95b2:	f7fe bf1f 	b.w	b83f4 <network_listen>

000b95b6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b95b6:	2300      	movs	r3, #0
   b95b8:	6840      	ldr	r0, [r0, #4]
   b95ba:	461a      	mov	r2, r3
   b95bc:	4619      	mov	r1, r3
   b95be:	f7fe bf11 	b.w	b83e4 <network_off>

000b95c2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b95c2:	2300      	movs	r3, #0
   b95c4:	6840      	ldr	r0, [r0, #4]
   b95c6:	461a      	mov	r2, r3
   b95c8:	4619      	mov	r1, r3
   b95ca:	f7fe bf03 	b.w	b83d4 <network_on>

000b95ce <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b95ce:	2200      	movs	r2, #0
   b95d0:	6840      	ldr	r0, [r0, #4]
   b95d2:	4611      	mov	r1, r2
   b95d4:	f7fe bee6 	b.w	b83a4 <network_connecting>

000b95d8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b95d8:	6840      	ldr	r0, [r0, #4]
   b95da:	2200      	movs	r2, #0
   b95dc:	2102      	movs	r1, #2
   b95de:	f7fe bee9 	b.w	b83b4 <network_disconnect>

000b95e2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b95e2:	2300      	movs	r3, #0
   b95e4:	6840      	ldr	r0, [r0, #4]
   b95e6:	461a      	mov	r2, r3
   b95e8:	f7fe bed4 	b.w	b8394 <network_connect>

000b95ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b95ec:	4b02      	ldr	r3, [pc, #8]	; (b95f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b95ee:	2204      	movs	r2, #4
   b95f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b95f2:	4a02      	ldr	r2, [pc, #8]	; (b95fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b95f4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b95f6:	4770      	bx	lr
   b95f8:	2003e718 	.word	0x2003e718
   b95fc:	000c1684 	.word	0x000c1684

000b9600 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b9600:	b510      	push	{r4, lr}
   b9602:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9604:	f002 f8e0 	bl	bb7c8 <strlen>
   b9608:	3801      	subs	r0, #1
   b960a:	1823      	adds	r3, r4, r0
   b960c:	4620      	mov	r0, r4
	while(i<j){
   b960e:	4283      	cmp	r3, r0
   b9610:	d906      	bls.n	b9620 <_Z11str_reversePc+0x20>
		c = *i;
   b9612:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9614:	7819      	ldrb	r1, [r3, #0]
   b9616:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b961a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b961e:	e7f6      	b.n	b960e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b9620:	bd10      	pop	{r4, pc}

000b9622 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b9622:	b570      	push	{r4, r5, r6, lr}
   b9624:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b9626:	1e91      	subs	r1, r2, #2
   b9628:	2922      	cmp	r1, #34	; 0x22
   b962a:	d81d      	bhi.n	b9668 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b962c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b962e:	b930      	cbnz	r0, b963e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b9630:	4423      	add	r3, r4
            *ptr++ = '0';
   b9632:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b9634:	429d      	cmp	r5, r3
   b9636:	d210      	bcs.n	b965a <ultoa+0x38>
            *ptr++ = '0';
   b9638:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b963c:	e7fa      	b.n	b9634 <ultoa+0x12>
            result.quot = a/radix;
   b963e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b9642:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b9646:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b9648:	2809      	cmp	r0, #9
                *ptr += '0';
   b964a:	bf94      	ite	ls
   b964c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b964e:	3157      	addhi	r1, #87	; 0x57
   b9650:	b2c9      	uxtb	r1, r1
   b9652:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b9656:	4630      	mov	r0, r6
	while(a){
   b9658:	e7e9      	b.n	b962e <ultoa+0xc>

	*ptr = '\0';
   b965a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b965c:	4620      	mov	r0, r4
	*ptr = '\0';
   b965e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b9660:	f7ff ffce 	bl	b9600 <_Z11str_reversePc>
	return buffer;
   b9664:	4620      	mov	r0, r4
}
   b9666:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b9668:	2000      	movs	r0, #0
   b966a:	e7fc      	b.n	b9666 <ultoa+0x44>

000b966c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b966c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b966e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9670:	460c      	mov	r4, r1
   b9672:	4615      	mov	r5, r2
	if(a<0){
   b9674:	da0e      	bge.n	b9694 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b967a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b967e:	bf14      	ite	ne
   b9680:	4258      	negne	r0, r3
   b9682:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9684:	2301      	movs	r3, #1
		*buffer = '-';
   b9686:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b9688:	462a      	mov	r2, r5
   b968a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b968c:	f7ff ffc9 	bl	b9622 <ultoa>
	}
	return buffer;
}
   b9690:	4620      	mov	r0, r4
   b9692:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9694:	2301      	movs	r3, #1
   b9696:	e7f9      	b.n	b968c <itoa+0x20>

000b9698 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9698:	4b01      	ldr	r3, [pc, #4]	; (b96a0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b969a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b969c:	4770      	bx	lr
   b969e:	bf00      	nop
   b96a0:	2003e4ec 	.word	0x2003e4ec

000b96a4 <serialEventRun>:
{
   b96a4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b96a6:	4b0b      	ldr	r3, [pc, #44]	; (b96d4 <serialEventRun+0x30>)
   b96a8:	b143      	cbz	r3, b96bc <serialEventRun+0x18>
   b96aa:	f7ff ff45 	bl	b9538 <_Z16_fetch_usbserialv>
   b96ae:	6803      	ldr	r3, [r0, #0]
   b96b0:	691b      	ldr	r3, [r3, #16]
   b96b2:	4798      	blx	r3
   b96b4:	2800      	cmp	r0, #0
   b96b6:	dd01      	ble.n	b96bc <serialEventRun+0x18>
        serialEvent();
   b96b8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b96bc:	4b06      	ldr	r3, [pc, #24]	; (b96d8 <serialEventRun+0x34>)
   b96be:	b143      	cbz	r3, b96d2 <serialEventRun+0x2e>
   b96c0:	f000 f96c 	bl	b999c <_Z22__fetch_global_Serial1v>
   b96c4:	6803      	ldr	r3, [r0, #0]
   b96c6:	691b      	ldr	r3, [r3, #16]
   b96c8:	4798      	blx	r3
   b96ca:	2800      	cmp	r0, #0
   b96cc:	dd01      	ble.n	b96d2 <serialEventRun+0x2e>
        serialEvent1();
   b96ce:	f3af 8000 	nop.w
}
   b96d2:	bd08      	pop	{r3, pc}
	...

000b96dc <_post_loop>:
{
   b96dc:	b508      	push	{r3, lr}
	serialEventRun();
   b96de:	f7ff ffe1 	bl	b96a4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b96e2:	f7fe fc5b 	bl	b7f9c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b96e6:	4b01      	ldr	r3, [pc, #4]	; (b96ec <_post_loop+0x10>)
   b96e8:	6018      	str	r0, [r3, #0]
}
   b96ea:	bd08      	pop	{r3, pc}
   b96ec:	2003e728 	.word	0x2003e728

000b96f0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b96f0:	4805      	ldr	r0, [pc, #20]	; (b9708 <_Z33system_initialize_user_backup_ramv+0x18>)
   b96f2:	4a06      	ldr	r2, [pc, #24]	; (b970c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b96f4:	4906      	ldr	r1, [pc, #24]	; (b9710 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b96f6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b96f8:	1a12      	subs	r2, r2, r0
   b96fa:	f001 ffd1 	bl	bb6a0 <memcpy>
    __backup_sram_signature = signature;
   b96fe:	4b05      	ldr	r3, [pc, #20]	; (b9714 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9700:	4a05      	ldr	r2, [pc, #20]	; (b9718 <_Z33system_initialize_user_backup_ramv+0x28>)
   b9702:	601a      	str	r2, [r3, #0]
}
   b9704:	bd08      	pop	{r3, pc}
   b9706:	bf00      	nop
   b9708:	2003f400 	.word	0x2003f400
   b970c:	2003f404 	.word	0x2003f404
   b9710:	000c1884 	.word	0x000c1884
   b9714:	2003f400 	.word	0x2003f400
   b9718:	9a271c1e 	.word	0x9a271c1e

000b971c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b971c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b971e:	2300      	movs	r3, #0
   b9720:	9300      	str	r3, [sp, #0]
   b9722:	461a      	mov	r2, r3
   b9724:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9728:	f7fe fe1a 	bl	b8360 <system_ctrl_set_result>
}
   b972c:	b003      	add	sp, #12
   b972e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9734 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9734:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9736:	8843      	ldrh	r3, [r0, #2]
   b9738:	2b0a      	cmp	r3, #10
   b973a:	d008      	beq.n	b974e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b973c:	2b50      	cmp	r3, #80	; 0x50
   b973e:	d10b      	bne.n	b9758 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9740:	4b09      	ldr	r3, [pc, #36]	; (b9768 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9742:	681b      	ldr	r3, [r3, #0]
   b9744:	b14b      	cbz	r3, b975a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9746:	b003      	add	sp, #12
   b9748:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b974c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b974e:	f7ff ffe5 	bl	b971c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9752:	b003      	add	sp, #12
   b9754:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9758:	2300      	movs	r3, #0
   b975a:	9300      	str	r3, [sp, #0]
   b975c:	461a      	mov	r2, r3
   b975e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9762:	f7fe fdfd 	bl	b8360 <system_ctrl_set_result>
}
   b9766:	e7f4      	b.n	b9752 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9768:	2003e724 	.word	0x2003e724

000b976c <module_user_init_hook>:
{
   b976c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b976e:	4812      	ldr	r0, [pc, #72]	; (b97b8 <module_user_init_hook+0x4c>)
   b9770:	2100      	movs	r1, #0
   b9772:	f7fe fe9f 	bl	b84b4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9776:	4b11      	ldr	r3, [pc, #68]	; (b97bc <module_user_init_hook+0x50>)
   b9778:	681a      	ldr	r2, [r3, #0]
   b977a:	4b11      	ldr	r3, [pc, #68]	; (b97c0 <module_user_init_hook+0x54>)
   b977c:	429a      	cmp	r2, r3
   b977e:	4b11      	ldr	r3, [pc, #68]	; (b97c4 <module_user_init_hook+0x58>)
   b9780:	bf0c      	ite	eq
   b9782:	2201      	moveq	r2, #1
   b9784:	2200      	movne	r2, #0
   b9786:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9788:	d001      	beq.n	b978e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b978a:	f7ff ffb1 	bl	b96f0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b978e:	f7fe fbed 	bl	b7f6c <HAL_RNG_GetRandomNumber>
   b9792:	4604      	mov	r4, r0
    srand(seed);
   b9794:	f001 ff9a 	bl	bb6cc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9798:	4b0b      	ldr	r3, [pc, #44]	; (b97c8 <module_user_init_hook+0x5c>)
   b979a:	b113      	cbz	r3, b97a2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b979c:	4620      	mov	r0, r4
   b979e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b97a2:	2100      	movs	r1, #0
   b97a4:	4808      	ldr	r0, [pc, #32]	; (b97c8 <module_user_init_hook+0x5c>)
   b97a6:	f7fe fded 	bl	b8384 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b97aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b97ae:	4807      	ldr	r0, [pc, #28]	; (b97cc <module_user_init_hook+0x60>)
   b97b0:	2100      	movs	r1, #0
   b97b2:	f7fe bdcb 	b.w	b834c <system_ctrl_set_app_request_handler>
   b97b6:	bf00      	nop
   b97b8:	000b9699 	.word	0x000b9699
   b97bc:	2003f400 	.word	0x2003f400
   b97c0:	9a271c1e 	.word	0x9a271c1e
   b97c4:	2003e720 	.word	0x2003e720
   b97c8:	00000000 	.word	0x00000000
   b97cc:	000b9735 	.word	0x000b9735

000b97d0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b97d0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b97d2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b97d4:	d902      	bls.n	b97dc <pinAvailable+0xc>
    return false;
   b97d6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b97d8:	b002      	add	sp, #8
   b97da:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b97dc:	f1a0 030b 	sub.w	r3, r0, #11
   b97e0:	2b02      	cmp	r3, #2
   b97e2:	d81a      	bhi.n	b981a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b97e4:	4c17      	ldr	r4, [pc, #92]	; (b9844 <pinAvailable+0x74>)
   b97e6:	7821      	ldrb	r1, [r4, #0]
   b97e8:	f3bf 8f5b 	dmb	ish
   b97ec:	f011 0101 	ands.w	r1, r1, #1
   b97f0:	d10b      	bne.n	b980a <pinAvailable+0x3a>
   b97f2:	4620      	mov	r0, r4
   b97f4:	9101      	str	r1, [sp, #4]
   b97f6:	f7fa fc61 	bl	b40bc <__cxa_guard_acquire>
   b97fa:	9901      	ldr	r1, [sp, #4]
   b97fc:	b128      	cbz	r0, b980a <pinAvailable+0x3a>
   b97fe:	4812      	ldr	r0, [pc, #72]	; (b9848 <pinAvailable+0x78>)
   b9800:	f7ff f926 	bl	b8a50 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9804:	4620      	mov	r0, r4
   b9806:	f7fa fc5e 	bl	b40c6 <__cxa_guard_release>
   b980a:	4b0f      	ldr	r3, [pc, #60]	; (b9848 <pinAvailable+0x78>)
   b980c:	7818      	ldrb	r0, [r3, #0]
   b980e:	f7fe fcdd 	bl	b81cc <hal_spi_is_enabled>
   b9812:	2800      	cmp	r0, #0
   b9814:	d1df      	bne.n	b97d6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b9816:	2001      	movs	r0, #1
   b9818:	e7de      	b.n	b97d8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b981a:	2801      	cmp	r0, #1
   b981c:	d809      	bhi.n	b9832 <pinAvailable+0x62>
   b981e:	f000 f87d 	bl	b991c <_Z19__fetch_global_Wirev>
   b9822:	2100      	movs	r1, #0
   b9824:	7c00      	ldrb	r0, [r0, #16]
   b9826:	f7fe fc29 	bl	b807c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b982a:	f080 0001 	eor.w	r0, r0, #1
   b982e:	b2c0      	uxtb	r0, r0
   b9830:	e7d2      	b.n	b97d8 <pinAvailable+0x8>
   b9832:	3809      	subs	r0, #9
   b9834:	2801      	cmp	r0, #1
   b9836:	d8ee      	bhi.n	b9816 <pinAvailable+0x46>
   b9838:	f000 f8b0 	bl	b999c <_Z22__fetch_global_Serial1v>
   b983c:	7c00      	ldrb	r0, [r0, #16]
   b983e:	f7fe fd0d 	bl	b825c <hal_usart_is_enabled>
   b9842:	e7f2      	b.n	b982a <pinAvailable+0x5a>
   b9844:	2003e6b8 	.word	0x2003e6b8
   b9848:	2003e6bc 	.word	0x2003e6bc

000b984c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b984c:	2823      	cmp	r0, #35	; 0x23
{
   b984e:	b538      	push	{r3, r4, r5, lr}
   b9850:	4604      	mov	r4, r0
   b9852:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9854:	d80a      	bhi.n	b986c <pinMode+0x20>
   b9856:	29ff      	cmp	r1, #255	; 0xff
   b9858:	d008      	beq.n	b986c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b985a:	f7ff ffb9 	bl	b97d0 <pinAvailable>
   b985e:	b128      	cbz	r0, b986c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9860:	4629      	mov	r1, r5
   b9862:	4620      	mov	r0, r4
}
   b9864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9868:	f7fe bbb0 	b.w	b7fcc <HAL_Pin_Mode>
}
   b986c:	bd38      	pop	{r3, r4, r5, pc}

000b986e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b986e:	b538      	push	{r3, r4, r5, lr}
   b9870:	4604      	mov	r4, r0
   b9872:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9874:	f7fe fbb2 	bl	b7fdc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9878:	28ff      	cmp	r0, #255	; 0xff
   b987a:	d010      	beq.n	b989e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b987c:	2806      	cmp	r0, #6
   b987e:	d804      	bhi.n	b988a <digitalWrite+0x1c>
   b9880:	234d      	movs	r3, #77	; 0x4d
   b9882:	fa23 f000 	lsr.w	r0, r3, r0
   b9886:	07c3      	lsls	r3, r0, #31
   b9888:	d409      	bmi.n	b989e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b988a:	4620      	mov	r0, r4
   b988c:	f7ff ffa0 	bl	b97d0 <pinAvailable>
   b9890:	b128      	cbz	r0, b989e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b9892:	4629      	mov	r1, r5
   b9894:	4620      	mov	r0, r4
}
   b9896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b989a:	f7fe bba7 	b.w	b7fec <HAL_GPIO_Write>
}
   b989e:	bd38      	pop	{r3, r4, r5, pc}

000b98a0 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b98a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b98a4:	4690      	mov	r8, r2
   b98a6:	461f      	mov	r7, r3
   b98a8:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b98aa:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b98ac:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b98ae:	f1c4 0107 	rsb	r1, r4, #7
   b98b2:	f1b8 0f00 	cmp.w	r8, #0
   b98b6:	d112      	bne.n	b98de <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b98b8:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b98bc:	f001 0101 	and.w	r1, r1, #1
   b98c0:	4630      	mov	r0, r6
   b98c2:	f7ff ffd4 	bl	b986e <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b98c6:	2101      	movs	r1, #1
   b98c8:	4628      	mov	r0, r5
   b98ca:	f7ff ffd0 	bl	b986e <digitalWrite>
    digitalWrite(clockPin, LOW);
   b98ce:	2100      	movs	r1, #0
   b98d0:	4628      	mov	r0, r5
   b98d2:	f7ff ffcc 	bl	b986e <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b98d6:	3c01      	subs	r4, #1
   b98d8:	d2e9      	bcs.n	b98ae <shiftOut+0xe>
  }
}
   b98da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b98de:	fa47 f104 	asr.w	r1, r7, r4
   b98e2:	e7eb      	b.n	b98bc <shiftOut+0x1c>

000b98e4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b98e4:	4770      	bx	lr
	...

000b98e8 <_Z17acquireWireBufferv>:
{
   b98e8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b98ea:	4b0a      	ldr	r3, [pc, #40]	; (b9914 <_Z17acquireWireBufferv+0x2c>)
   b98ec:	6003      	str	r3, [r0, #0]
   b98ee:	2301      	movs	r3, #1
{
   b98f0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b98f2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b98f4:	4908      	ldr	r1, [pc, #32]	; (b9918 <_Z17acquireWireBufferv+0x30>)
   b98f6:	2020      	movs	r0, #32
   b98f8:	f000 f874 	bl	b99e4 <_ZnajRKSt9nothrow_t>
	};
   b98fc:	2520      	movs	r5, #32
   b98fe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9900:	4905      	ldr	r1, [pc, #20]	; (b9918 <_Z17acquireWireBufferv+0x30>)
	};
   b9902:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9904:	4628      	mov	r0, r5
   b9906:	f000 f86d 	bl	b99e4 <_ZnajRKSt9nothrow_t>
	};
   b990a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b990e:	4620      	mov	r0, r4
   b9910:	bd38      	pop	{r3, r4, r5, pc}
   b9912:	bf00      	nop
   b9914:	00010018 	.word	0x00010018
   b9918:	000c16b8 	.word	0x000c16b8

000b991c <_Z19__fetch_global_Wirev>:
{
   b991c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b991e:	4d0e      	ldr	r5, [pc, #56]	; (b9958 <_Z19__fetch_global_Wirev+0x3c>)
   b9920:	7829      	ldrb	r1, [r5, #0]
   b9922:	f3bf 8f5b 	dmb	ish
   b9926:	f011 0401 	ands.w	r4, r1, #1
{
   b992a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b992c:	d111      	bne.n	b9952 <_Z19__fetch_global_Wirev+0x36>
   b992e:	4628      	mov	r0, r5
   b9930:	f7fa fbc4 	bl	b40bc <__cxa_guard_acquire>
   b9934:	b168      	cbz	r0, b9952 <_Z19__fetch_global_Wirev+0x36>
   b9936:	4668      	mov	r0, sp
   b9938:	f7ff ffd6 	bl	b98e8 <_Z17acquireWireBufferv>
   b993c:	466a      	mov	r2, sp
   b993e:	4621      	mov	r1, r4
   b9940:	4806      	ldr	r0, [pc, #24]	; (b995c <_Z19__fetch_global_Wirev+0x40>)
   b9942:	f7fe fe35 	bl	b85b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9946:	4628      	mov	r0, r5
   b9948:	f7fa fbbd 	bl	b40c6 <__cxa_guard_release>
   b994c:	4804      	ldr	r0, [pc, #16]	; (b9960 <_Z19__fetch_global_Wirev+0x44>)
   b994e:	f001 fea1 	bl	bb694 <atexit>
	return wire;
}
   b9952:	4802      	ldr	r0, [pc, #8]	; (b995c <_Z19__fetch_global_Wirev+0x40>)
   b9954:	b007      	add	sp, #28
   b9956:	bd30      	pop	{r4, r5, pc}
   b9958:	2003e72c 	.word	0x2003e72c
   b995c:	2003e730 	.word	0x2003e730
   b9960:	000b98e5 	.word	0x000b98e5

000b9964 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9964:	4770      	bx	lr
	...

000b9968 <_Z20acquireSerial1Bufferv>:
{
   b9968:	b538      	push	{r3, r4, r5, lr}
   b996a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b996c:	2514      	movs	r5, #20
   b996e:	462a      	mov	r2, r5
   b9970:	2100      	movs	r1, #0
   b9972:	f001 fea3 	bl	bb6bc <memset>
   b9976:	8025      	strh	r5, [r4, #0]
   b9978:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b997a:	4907      	ldr	r1, [pc, #28]	; (b9998 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b997c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b997e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9980:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9982:	f000 f82f 	bl	b99e4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9986:	4904      	ldr	r1, [pc, #16]	; (b9998 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9988:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b998a:	4628      	mov	r0, r5
   b998c:	f000 f82a 	bl	b99e4 <_ZnajRKSt9nothrow_t>
    };
   b9990:	60e0      	str	r0, [r4, #12]
}
   b9992:	4620      	mov	r0, r4
   b9994:	bd38      	pop	{r3, r4, r5, pc}
   b9996:	bf00      	nop
   b9998:	000c16b8 	.word	0x000c16b8

000b999c <_Z22__fetch_global_Serial1v>:
{
   b999c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b999e:	4d0e      	ldr	r5, [pc, #56]	; (b99d8 <_Z22__fetch_global_Serial1v+0x3c>)
   b99a0:	7829      	ldrb	r1, [r5, #0]
   b99a2:	f3bf 8f5b 	dmb	ish
   b99a6:	f011 0401 	ands.w	r4, r1, #1
{
   b99aa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b99ac:	d111      	bne.n	b99d2 <_Z22__fetch_global_Serial1v+0x36>
   b99ae:	4628      	mov	r0, r5
   b99b0:	f7fa fb84 	bl	b40bc <__cxa_guard_acquire>
   b99b4:	b168      	cbz	r0, b99d2 <_Z22__fetch_global_Serial1v+0x36>
   b99b6:	a801      	add	r0, sp, #4
   b99b8:	f7ff ffd6 	bl	b9968 <_Z20acquireSerial1Bufferv>
   b99bc:	aa01      	add	r2, sp, #4
   b99be:	4621      	mov	r1, r4
   b99c0:	4806      	ldr	r0, [pc, #24]	; (b99dc <_Z22__fetch_global_Serial1v+0x40>)
   b99c2:	f7ff fd43 	bl	b944c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b99c6:	4628      	mov	r0, r5
   b99c8:	f7fa fb7d 	bl	b40c6 <__cxa_guard_release>
   b99cc:	4804      	ldr	r0, [pc, #16]	; (b99e0 <_Z22__fetch_global_Serial1v+0x44>)
   b99ce:	f001 fe61 	bl	bb694 <atexit>
    return serial1;
}
   b99d2:	4802      	ldr	r0, [pc, #8]	; (b99dc <_Z22__fetch_global_Serial1v+0x40>)
   b99d4:	b007      	add	sp, #28
   b99d6:	bd30      	pop	{r4, r5, pc}
   b99d8:	2003e744 	.word	0x2003e744
   b99dc:	2003e748 	.word	0x2003e748
   b99e0:	000b9965 	.word	0x000b9965

000b99e4 <_ZnajRKSt9nothrow_t>:
   b99e4:	f7fa bb59 	b.w	b409a <_Znaj>

000b99e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b99e8:	4901      	ldr	r1, [pc, #4]	; (b99f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b99ea:	f000 b8f9 	b.w	b9be0 <_ZNKSt9type_infoeqERKS_>
   b99ee:	bf00      	nop
   b99f0:	000c16d4 	.word	0x000c16d4

000b99f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b99f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b99f6:	2400      	movs	r4, #0
   b99f8:	2310      	movs	r3, #16
   b99fa:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b99fe:	6803      	ldr	r3, [r0, #0]
   b9a00:	4615      	mov	r5, r2
   b9a02:	699e      	ldr	r6, [r3, #24]
   b9a04:	6812      	ldr	r2, [r2, #0]
   b9a06:	466b      	mov	r3, sp
   b9a08:	e9cd 4400 	strd	r4, r4, [sp]
   b9a0c:	47b0      	blx	r6
   b9a0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9a12:	f003 0306 	and.w	r3, r3, #6
   b9a16:	2b06      	cmp	r3, #6
   b9a18:	bf03      	ittte	eq
   b9a1a:	9b00      	ldreq	r3, [sp, #0]
   b9a1c:	602b      	streq	r3, [r5, #0]
   b9a1e:	2001      	moveq	r0, #1
   b9a20:	4620      	movne	r0, r4
   b9a22:	b004      	add	sp, #16
   b9a24:	bd70      	pop	{r4, r5, r6, pc}

000b9a26 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9a26:	9800      	ldr	r0, [sp, #0]
   b9a28:	4290      	cmp	r0, r2
   b9a2a:	bf14      	ite	ne
   b9a2c:	2001      	movne	r0, #1
   b9a2e:	2006      	moveq	r0, #6
   b9a30:	4770      	bx	lr
	...

000b9a34 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9a34:	b510      	push	{r4, lr}
   b9a36:	4b03      	ldr	r3, [pc, #12]	; (b9a44 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9a38:	6003      	str	r3, [r0, #0]
   b9a3a:	4604      	mov	r4, r0
   b9a3c:	f000 f8cd 	bl	b9bda <_ZNSt9type_infoD1Ev>
   b9a40:	4620      	mov	r0, r4
   b9a42:	bd10      	pop	{r4, pc}
   b9a44:	000c1714 	.word	0x000c1714

000b9a48 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9a48:	b510      	push	{r4, lr}
   b9a4a:	4604      	mov	r4, r0
   b9a4c:	f7ff fff2 	bl	b9a34 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9a50:	4620      	mov	r0, r4
   b9a52:	2108      	movs	r1, #8
   b9a54:	f7fa fb23 	bl	b409e <_ZdlPvj>
   b9a58:	4620      	mov	r0, r4
   b9a5a:	bd10      	pop	{r4, pc}

000b9a5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a60:	461f      	mov	r7, r3
   b9a62:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9a66:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9a6a:	4598      	cmp	r8, r3
   b9a6c:	4606      	mov	r6, r0
   b9a6e:	4615      	mov	r5, r2
   b9a70:	d107      	bne.n	b9a82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9a72:	9907      	ldr	r1, [sp, #28]
   b9a74:	f000 f8b4 	bl	b9be0 <_ZNKSt9type_infoeqERKS_>
   b9a78:	b118      	cbz	r0, b9a82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9a7a:	7165      	strb	r5, [r4, #5]
   b9a7c:	2000      	movs	r0, #0
   b9a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9a82:	4639      	mov	r1, r7
   b9a84:	4630      	mov	r0, r6
   b9a86:	f000 f8ab 	bl	b9be0 <_ZNKSt9type_infoeqERKS_>
   b9a8a:	2800      	cmp	r0, #0
   b9a8c:	d0f6      	beq.n	b9a7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9a8e:	2301      	movs	r3, #1
   b9a90:	f8c4 8000 	str.w	r8, [r4]
   b9a94:	7125      	strb	r5, [r4, #4]
   b9a96:	71a3      	strb	r3, [r4, #6]
   b9a98:	e7f0      	b.n	b9a7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9a9a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9a9a:	b538      	push	{r3, r4, r5, lr}
   b9a9c:	4615      	mov	r5, r2
   b9a9e:	461c      	mov	r4, r3
   b9aa0:	f000 f89e 	bl	b9be0 <_ZNKSt9type_infoeqERKS_>
   b9aa4:	b120      	cbz	r0, b9ab0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9aa6:	2308      	movs	r3, #8
   b9aa8:	60e3      	str	r3, [r4, #12]
   b9aaa:	2306      	movs	r3, #6
   b9aac:	6025      	str	r5, [r4, #0]
   b9aae:	7123      	strb	r3, [r4, #4]
   b9ab0:	bd38      	pop	{r3, r4, r5, pc}

000b9ab2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9ab4:	4605      	mov	r5, r0
   b9ab6:	460c      	mov	r4, r1
   b9ab8:	9201      	str	r2, [sp, #4]
   b9aba:	461e      	mov	r6, r3
   b9abc:	f000 f890 	bl	b9be0 <_ZNKSt9type_infoeqERKS_>
   b9ac0:	b950      	cbnz	r0, b9ad8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9ac2:	2e03      	cmp	r6, #3
   b9ac4:	d808      	bhi.n	b9ad8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9ac6:	6823      	ldr	r3, [r4, #0]
   b9ac8:	9a01      	ldr	r2, [sp, #4]
   b9aca:	695b      	ldr	r3, [r3, #20]
   b9acc:	4629      	mov	r1, r5
   b9ace:	4620      	mov	r0, r4
   b9ad0:	b002      	add	sp, #8
   b9ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9ad6:	4718      	bx	r3
   b9ad8:	b002      	add	sp, #8
   b9ada:	bd70      	pop	{r4, r5, r6, pc}

000b9adc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9adc:	b510      	push	{r4, lr}
   b9ade:	4b03      	ldr	r3, [pc, #12]	; (b9aec <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9ae0:	6003      	str	r3, [r0, #0]
   b9ae2:	4604      	mov	r4, r0
   b9ae4:	f7ff ffa6 	bl	b9a34 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9ae8:	4620      	mov	r0, r4
   b9aea:	bd10      	pop	{r4, pc}
   b9aec:	000c1774 	.word	0x000c1774

000b9af0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9af0:	b510      	push	{r4, lr}
   b9af2:	4604      	mov	r4, r0
   b9af4:	f7ff fff2 	bl	b9adc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9af8:	4620      	mov	r0, r4
   b9afa:	210c      	movs	r1, #12
   b9afc:	f7fa facf 	bl	b409e <_ZdlPvj>
   b9b00:	4620      	mov	r0, r4
   b9b02:	bd10      	pop	{r4, pc}

000b9b04 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9b06:	9f08      	ldr	r7, [sp, #32]
   b9b08:	4297      	cmp	r7, r2
   b9b0a:	4605      	mov	r5, r0
   b9b0c:	460e      	mov	r6, r1
   b9b0e:	4614      	mov	r4, r2
   b9b10:	d00a      	beq.n	b9b28 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9b12:	68a8      	ldr	r0, [r5, #8]
   b9b14:	6802      	ldr	r2, [r0, #0]
   b9b16:	9708      	str	r7, [sp, #32]
   b9b18:	6a15      	ldr	r5, [r2, #32]
   b9b1a:	4631      	mov	r1, r6
   b9b1c:	4622      	mov	r2, r4
   b9b1e:	46ac      	mov	ip, r5
   b9b20:	b003      	add	sp, #12
   b9b22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9b26:	4760      	bx	ip
   b9b28:	4619      	mov	r1, r3
   b9b2a:	9301      	str	r3, [sp, #4]
   b9b2c:	f000 f858 	bl	b9be0 <_ZNKSt9type_infoeqERKS_>
   b9b30:	9b01      	ldr	r3, [sp, #4]
   b9b32:	2800      	cmp	r0, #0
   b9b34:	d0ed      	beq.n	b9b12 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9b36:	2006      	movs	r0, #6
   b9b38:	b003      	add	sp, #12
   b9b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9b3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9b3c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9b40:	460d      	mov	r5, r1
   b9b42:	4619      	mov	r1, r3
   b9b44:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9b48:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9b4c:	4681      	mov	r9, r0
   b9b4e:	4617      	mov	r7, r2
   b9b50:	4698      	mov	r8, r3
   b9b52:	f000 f845 	bl	b9be0 <_ZNKSt9type_infoeqERKS_>
   b9b56:	b190      	cbz	r0, b9b7e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9b58:	2d00      	cmp	r5, #0
   b9b5a:	6034      	str	r4, [r6, #0]
   b9b5c:	7137      	strb	r7, [r6, #4]
   b9b5e:	db09      	blt.n	b9b74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9b60:	1961      	adds	r1, r4, r5
   b9b62:	458a      	cmp	sl, r1
   b9b64:	bf0c      	ite	eq
   b9b66:	2106      	moveq	r1, #6
   b9b68:	2101      	movne	r1, #1
   b9b6a:	71b1      	strb	r1, [r6, #6]
   b9b6c:	2000      	movs	r0, #0
   b9b6e:	b001      	add	sp, #4
   b9b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9b74:	3502      	adds	r5, #2
   b9b76:	d1f9      	bne.n	b9b6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9b78:	2301      	movs	r3, #1
   b9b7a:	71b3      	strb	r3, [r6, #6]
   b9b7c:	e7f6      	b.n	b9b6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9b7e:	4554      	cmp	r4, sl
   b9b80:	d106      	bne.n	b9b90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9b82:	4659      	mov	r1, fp
   b9b84:	4648      	mov	r0, r9
   b9b86:	f000 f82b 	bl	b9be0 <_ZNKSt9type_infoeqERKS_>
   b9b8a:	b108      	cbz	r0, b9b90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9b8c:	7177      	strb	r7, [r6, #5]
   b9b8e:	e7ed      	b.n	b9b6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9b90:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9b94:	6803      	ldr	r3, [r0, #0]
   b9b96:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9b9a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9b9e:	69dc      	ldr	r4, [r3, #28]
   b9ba0:	463a      	mov	r2, r7
   b9ba2:	4643      	mov	r3, r8
   b9ba4:	4629      	mov	r1, r5
   b9ba6:	46a4      	mov	ip, r4
   b9ba8:	b001      	add	sp, #4
   b9baa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9bae:	4760      	bx	ip

000b9bb0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9bb4:	4607      	mov	r7, r0
   b9bb6:	460c      	mov	r4, r1
   b9bb8:	4615      	mov	r5, r2
   b9bba:	461e      	mov	r6, r3
   b9bbc:	f7ff ff6d 	bl	b9a9a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9bc0:	b948      	cbnz	r0, b9bd6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9bc2:	68b8      	ldr	r0, [r7, #8]
   b9bc4:	6803      	ldr	r3, [r0, #0]
   b9bc6:	699f      	ldr	r7, [r3, #24]
   b9bc8:	462a      	mov	r2, r5
   b9bca:	4633      	mov	r3, r6
   b9bcc:	4621      	mov	r1, r4
   b9bce:	46bc      	mov	ip, r7
   b9bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9bd4:	4760      	bx	ip
   b9bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9bda <_ZNSt9type_infoD1Ev>:
   b9bda:	4770      	bx	lr

000b9bdc <_ZNKSt9type_info14__is_pointer_pEv>:
   b9bdc:	2000      	movs	r0, #0
   b9bde:	4770      	bx	lr

000b9be0 <_ZNKSt9type_infoeqERKS_>:
   b9be0:	4281      	cmp	r1, r0
   b9be2:	b508      	push	{r3, lr}
   b9be4:	d00e      	beq.n	b9c04 <_ZNKSt9type_infoeqERKS_+0x24>
   b9be6:	6840      	ldr	r0, [r0, #4]
   b9be8:	7803      	ldrb	r3, [r0, #0]
   b9bea:	2b2a      	cmp	r3, #42	; 0x2a
   b9bec:	d00c      	beq.n	b9c08 <_ZNKSt9type_infoeqERKS_+0x28>
   b9bee:	6849      	ldr	r1, [r1, #4]
   b9bf0:	780b      	ldrb	r3, [r1, #0]
   b9bf2:	2b2a      	cmp	r3, #42	; 0x2a
   b9bf4:	bf08      	it	eq
   b9bf6:	3101      	addeq	r1, #1
   b9bf8:	f001 fdd4 	bl	bb7a4 <strcmp>
   b9bfc:	fab0 f080 	clz	r0, r0
   b9c00:	0940      	lsrs	r0, r0, #5
   b9c02:	bd08      	pop	{r3, pc}
   b9c04:	2001      	movs	r0, #1
   b9c06:	e7fc      	b.n	b9c02 <_ZNKSt9type_infoeqERKS_+0x22>
   b9c08:	2000      	movs	r0, #0
   b9c0a:	e7fa      	b.n	b9c02 <_ZNKSt9type_infoeqERKS_+0x22>
   b9c0c:	0000      	movs	r0, r0
	...

000b9c10 <pow>:
   b9c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9c12:	ed2d 8b02 	vpush	{d8}
   b9c16:	ec57 6b10 	vmov	r6, r7, d0
   b9c1a:	ec55 4b11 	vmov	r4, r5, d1
   b9c1e:	f000 f8cb 	bl	b9db8 <__ieee754_pow>
   b9c22:	4b63      	ldr	r3, [pc, #396]	; (b9db0 <pow+0x1a0>)
   b9c24:	eeb0 8a40 	vmov.f32	s16, s0
   b9c28:	eef0 8a60 	vmov.f32	s17, s1
   b9c2c:	f993 3000 	ldrsb.w	r3, [r3]
   b9c30:	3301      	adds	r3, #1
   b9c32:	d02a      	beq.n	b9c8a <pow+0x7a>
   b9c34:	4622      	mov	r2, r4
   b9c36:	462b      	mov	r3, r5
   b9c38:	4620      	mov	r0, r4
   b9c3a:	4629      	mov	r1, r5
   b9c3c:	f001 fcc4 	bl	bb5c8 <__aeabi_dcmpun>
   b9c40:	bb18      	cbnz	r0, b9c8a <pow+0x7a>
   b9c42:	4632      	mov	r2, r6
   b9c44:	463b      	mov	r3, r7
   b9c46:	4630      	mov	r0, r6
   b9c48:	4639      	mov	r1, r7
   b9c4a:	f001 fcbd 	bl	bb5c8 <__aeabi_dcmpun>
   b9c4e:	2800      	cmp	r0, #0
   b9c50:	d144      	bne.n	b9cdc <pow+0xcc>
   b9c52:	2200      	movs	r2, #0
   b9c54:	2300      	movs	r3, #0
   b9c56:	4630      	mov	r0, r6
   b9c58:	4639      	mov	r1, r7
   b9c5a:	f001 fc83 	bl	bb564 <__aeabi_dcmpeq>
   b9c5e:	b1d8      	cbz	r0, b9c98 <pow+0x88>
   b9c60:	2200      	movs	r2, #0
   b9c62:	2300      	movs	r3, #0
   b9c64:	4620      	mov	r0, r4
   b9c66:	4629      	mov	r1, r5
   b9c68:	f001 fc7c 	bl	bb564 <__aeabi_dcmpeq>
   b9c6c:	2800      	cmp	r0, #0
   b9c6e:	d13d      	bne.n	b9cec <pow+0xdc>
   b9c70:	ec45 4b10 	vmov	d0, r4, r5
   b9c74:	f000 ff10 	bl	baa98 <finite>
   b9c78:	b138      	cbz	r0, b9c8a <pow+0x7a>
   b9c7a:	4620      	mov	r0, r4
   b9c7c:	4629      	mov	r1, r5
   b9c7e:	2200      	movs	r2, #0
   b9c80:	2300      	movs	r3, #0
   b9c82:	f001 fc79 	bl	bb578 <__aeabi_dcmplt>
   b9c86:	2800      	cmp	r0, #0
   b9c88:	d15c      	bne.n	b9d44 <pow+0x134>
   b9c8a:	eeb0 0a48 	vmov.f32	s0, s16
   b9c8e:	eef0 0a68 	vmov.f32	s1, s17
   b9c92:	ecbd 8b02 	vpop	{d8}
   b9c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9c98:	eeb0 0a48 	vmov.f32	s0, s16
   b9c9c:	eef0 0a68 	vmov.f32	s1, s17
   b9ca0:	f000 fefa 	bl	baa98 <finite>
   b9ca4:	b358      	cbz	r0, b9cfe <pow+0xee>
   b9ca6:	ec51 0b18 	vmov	r0, r1, d8
   b9caa:	2200      	movs	r2, #0
   b9cac:	2300      	movs	r3, #0
   b9cae:	f001 fc59 	bl	bb564 <__aeabi_dcmpeq>
   b9cb2:	2800      	cmp	r0, #0
   b9cb4:	d0e9      	beq.n	b9c8a <pow+0x7a>
   b9cb6:	ec47 6b10 	vmov	d0, r6, r7
   b9cba:	f000 feed 	bl	baa98 <finite>
   b9cbe:	2800      	cmp	r0, #0
   b9cc0:	d0e3      	beq.n	b9c8a <pow+0x7a>
   b9cc2:	ec45 4b10 	vmov	d0, r4, r5
   b9cc6:	f000 fee7 	bl	baa98 <finite>
   b9cca:	2800      	cmp	r0, #0
   b9ccc:	d0dd      	beq.n	b9c8a <pow+0x7a>
   b9cce:	f7fe fbe1 	bl	b8494 <__errno>
   b9cd2:	2322      	movs	r3, #34	; 0x22
   b9cd4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b9d90 <pow+0x180>
   b9cd8:	6003      	str	r3, [r0, #0]
   b9cda:	e7d6      	b.n	b9c8a <pow+0x7a>
   b9cdc:	4620      	mov	r0, r4
   b9cde:	4629      	mov	r1, r5
   b9ce0:	2200      	movs	r2, #0
   b9ce2:	2300      	movs	r3, #0
   b9ce4:	f001 fc3e 	bl	bb564 <__aeabi_dcmpeq>
   b9ce8:	2800      	cmp	r0, #0
   b9cea:	d0ce      	beq.n	b9c8a <pow+0x7a>
   b9cec:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b9d98 <pow+0x188>
   b9cf0:	eeb0 0a48 	vmov.f32	s0, s16
   b9cf4:	eef0 0a68 	vmov.f32	s1, s17
   b9cf8:	ecbd 8b02 	vpop	{d8}
   b9cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9cfe:	ec47 6b10 	vmov	d0, r6, r7
   b9d02:	f000 fec9 	bl	baa98 <finite>
   b9d06:	2800      	cmp	r0, #0
   b9d08:	d0cd      	beq.n	b9ca6 <pow+0x96>
   b9d0a:	ec45 4b10 	vmov	d0, r4, r5
   b9d0e:	f000 fec3 	bl	baa98 <finite>
   b9d12:	2800      	cmp	r0, #0
   b9d14:	d0c7      	beq.n	b9ca6 <pow+0x96>
   b9d16:	ec53 2b18 	vmov	r2, r3, d8
   b9d1a:	ee18 0a10 	vmov	r0, s16
   b9d1e:	4619      	mov	r1, r3
   b9d20:	f001 fc52 	bl	bb5c8 <__aeabi_dcmpun>
   b9d24:	bb20      	cbnz	r0, b9d70 <pow+0x160>
   b9d26:	f7fe fbb5 	bl	b8494 <__errno>
   b9d2a:	4603      	mov	r3, r0
   b9d2c:	2222      	movs	r2, #34	; 0x22
   b9d2e:	601a      	str	r2, [r3, #0]
   b9d30:	4630      	mov	r0, r6
   b9d32:	4639      	mov	r1, r7
   b9d34:	2200      	movs	r2, #0
   b9d36:	2300      	movs	r3, #0
   b9d38:	f001 fc1e 	bl	bb578 <__aeabi_dcmplt>
   b9d3c:	b948      	cbnz	r0, b9d52 <pow+0x142>
   b9d3e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b9da0 <pow+0x190>
   b9d42:	e7a2      	b.n	b9c8a <pow+0x7a>
   b9d44:	f7fe fba6 	bl	b8494 <__errno>
   b9d48:	2321      	movs	r3, #33	; 0x21
   b9d4a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b9da8 <pow+0x198>
   b9d4e:	6003      	str	r3, [r0, #0]
   b9d50:	e79b      	b.n	b9c8a <pow+0x7a>
   b9d52:	ec45 4b10 	vmov	d0, r4, r5
   b9d56:	f000 feb3 	bl	baac0 <rint>
   b9d5a:	4622      	mov	r2, r4
   b9d5c:	ec51 0b10 	vmov	r0, r1, d0
   b9d60:	462b      	mov	r3, r5
   b9d62:	f001 fbff 	bl	bb564 <__aeabi_dcmpeq>
   b9d66:	2800      	cmp	r0, #0
   b9d68:	d1e9      	bne.n	b9d3e <pow+0x12e>
   b9d6a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b9da8 <pow+0x198>
   b9d6e:	e78c      	b.n	b9c8a <pow+0x7a>
   b9d70:	f7fe fb90 	bl	b8494 <__errno>
   b9d74:	2200      	movs	r2, #0
   b9d76:	2300      	movs	r3, #0
   b9d78:	2121      	movs	r1, #33	; 0x21
   b9d7a:	6001      	str	r1, [r0, #0]
   b9d7c:	4610      	mov	r0, r2
   b9d7e:	4619      	mov	r1, r3
   b9d80:	f001 fab2 	bl	bb2e8 <__aeabi_ddiv>
   b9d84:	ec41 0b18 	vmov	d8, r0, r1
   b9d88:	e77f      	b.n	b9c8a <pow+0x7a>
   b9d8a:	bf00      	nop
   b9d8c:	f3af 8000 	nop.w
	...
   b9d9c:	3ff00000 	.word	0x3ff00000
   b9da0:	00000000 	.word	0x00000000
   b9da4:	7ff00000 	.word	0x7ff00000
   b9da8:	00000000 	.word	0x00000000
   b9dac:	fff00000 	.word	0xfff00000
   b9db0:	2003e4e8 	.word	0x2003e4e8
   b9db4:	00000000 	.word	0x00000000

000b9db8 <__ieee754_pow>:
   b9db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9dbc:	ec57 6b11 	vmov	r6, r7, d1
   b9dc0:	ed2d 8b0c 	vpush	{d8-d13}
   b9dc4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b9dc8:	ea5a 0206 	orrs.w	r2, sl, r6
   b9dcc:	b087      	sub	sp, #28
   b9dce:	d03d      	beq.n	b9e4c <__ieee754_pow+0x94>
   b9dd0:	ec55 4b10 	vmov	r4, r5, d0
   b9dd4:	4972      	ldr	r1, [pc, #456]	; (b9fa0 <__ieee754_pow+0x1e8>)
   b9dd6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b9dda:	4588      	cmp	r8, r1
   b9ddc:	ee10 2a10 	vmov	r2, s0
   b9de0:	46a9      	mov	r9, r5
   b9de2:	dc2c      	bgt.n	b9e3e <__ieee754_pow+0x86>
   b9de4:	ee11 3a10 	vmov	r3, s2
   b9de8:	46bb      	mov	fp, r7
   b9dea:	d036      	beq.n	b9e5a <__ieee754_pow+0xa2>
   b9dec:	458a      	cmp	sl, r1
   b9dee:	dc26      	bgt.n	b9e3e <__ieee754_pow+0x86>
   b9df0:	496b      	ldr	r1, [pc, #428]	; (b9fa0 <__ieee754_pow+0x1e8>)
   b9df2:	458a      	cmp	sl, r1
   b9df4:	d021      	beq.n	b9e3a <__ieee754_pow+0x82>
   b9df6:	f1b9 0f00 	cmp.w	r9, #0
   b9dfa:	db39      	blt.n	b9e70 <__ieee754_pow+0xb8>
   b9dfc:	2100      	movs	r1, #0
   b9dfe:	9100      	str	r1, [sp, #0]
   b9e00:	2b00      	cmp	r3, #0
   b9e02:	d151      	bne.n	b9ea8 <__ieee754_pow+0xf0>
   b9e04:	4b66      	ldr	r3, [pc, #408]	; (b9fa0 <__ieee754_pow+0x1e8>)
   b9e06:	459a      	cmp	sl, r3
   b9e08:	f000 80a2 	beq.w	b9f50 <__ieee754_pow+0x198>
   b9e0c:	4b65      	ldr	r3, [pc, #404]	; (b9fa4 <__ieee754_pow+0x1ec>)
   b9e0e:	459a      	cmp	sl, r3
   b9e10:	f000 80b0 	beq.w	b9f74 <__ieee754_pow+0x1bc>
   b9e14:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b9e18:	f000 84c0 	beq.w	ba79c <__ieee754_pow+0x9e4>
   b9e1c:	4b62      	ldr	r3, [pc, #392]	; (b9fa8 <__ieee754_pow+0x1f0>)
   b9e1e:	459b      	cmp	fp, r3
   b9e20:	d142      	bne.n	b9ea8 <__ieee754_pow+0xf0>
   b9e22:	f1b9 0f00 	cmp.w	r9, #0
   b9e26:	db3f      	blt.n	b9ea8 <__ieee754_pow+0xf0>
   b9e28:	ec45 4b10 	vmov	d0, r4, r5
   b9e2c:	b007      	add	sp, #28
   b9e2e:	ecbd 8b0c 	vpop	{d8-d13}
   b9e32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e36:	f000 bd59 	b.w	ba8ec <__ieee754_sqrt>
   b9e3a:	2b00      	cmp	r3, #0
   b9e3c:	d0db      	beq.n	b9df6 <__ieee754_pow+0x3e>
   b9e3e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b9e42:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b9e46:	ea58 0302 	orrs.w	r3, r8, r2
   b9e4a:	d109      	bne.n	b9e60 <__ieee754_pow+0xa8>
   b9e4c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b9f90 <__ieee754_pow+0x1d8>
   b9e50:	b007      	add	sp, #28
   b9e52:	ecbd 8b0c 	vpop	{d8-d13}
   b9e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9e5a:	b90c      	cbnz	r4, b9e60 <__ieee754_pow+0xa8>
   b9e5c:	45c2      	cmp	sl, r8
   b9e5e:	ddc7      	ble.n	b9df0 <__ieee754_pow+0x38>
   b9e60:	4852      	ldr	r0, [pc, #328]	; (b9fac <__ieee754_pow+0x1f4>)
   b9e62:	b007      	add	sp, #28
   b9e64:	ecbd 8b0c 	vpop	{d8-d13}
   b9e68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e6c:	f000 be20 	b.w	baab0 <nan>
   b9e70:	494f      	ldr	r1, [pc, #316]	; (b9fb0 <__ieee754_pow+0x1f8>)
   b9e72:	458a      	cmp	sl, r1
   b9e74:	f300 8085 	bgt.w	b9f82 <__ieee754_pow+0x1ca>
   b9e78:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b9e7c:	458a      	cmp	sl, r1
   b9e7e:	dd0f      	ble.n	b9ea0 <__ieee754_pow+0xe8>
   b9e80:	ea4f 512a 	mov.w	r1, sl, asr #20
   b9e84:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b9e88:	2914      	cmp	r1, #20
   b9e8a:	f340 849b 	ble.w	ba7c4 <__ieee754_pow+0xa0c>
   b9e8e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b9e92:	fa23 f001 	lsr.w	r0, r3, r1
   b9e96:	fa00 f101 	lsl.w	r1, r0, r1
   b9e9a:	4299      	cmp	r1, r3
   b9e9c:	f000 84ed 	beq.w	ba87a <__ieee754_pow+0xac2>
   b9ea0:	2100      	movs	r1, #0
   b9ea2:	9100      	str	r1, [sp, #0]
   b9ea4:	2b00      	cmp	r3, #0
   b9ea6:	d0b1      	beq.n	b9e0c <__ieee754_pow+0x54>
   b9ea8:	ec45 4b10 	vmov	d0, r4, r5
   b9eac:	9202      	str	r2, [sp, #8]
   b9eae:	f000 fde9 	bl	baa84 <fabs>
   b9eb2:	9a02      	ldr	r2, [sp, #8]
   b9eb4:	bb5a      	cbnz	r2, b9f0e <__ieee754_pow+0x156>
   b9eb6:	f1b8 0f00 	cmp.w	r8, #0
   b9eba:	d004      	beq.n	b9ec6 <__ieee754_pow+0x10e>
   b9ebc:	4b39      	ldr	r3, [pc, #228]	; (b9fa4 <__ieee754_pow+0x1ec>)
   b9ebe:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b9ec2:	429a      	cmp	r2, r3
   b9ec4:	d123      	bne.n	b9f0e <__ieee754_pow+0x156>
   b9ec6:	f1bb 0f00 	cmp.w	fp, #0
   b9eca:	da07      	bge.n	b9edc <__ieee754_pow+0x124>
   b9ecc:	ec53 2b10 	vmov	r2, r3, d0
   b9ed0:	4934      	ldr	r1, [pc, #208]	; (b9fa4 <__ieee754_pow+0x1ec>)
   b9ed2:	2000      	movs	r0, #0
   b9ed4:	f001 fa08 	bl	bb2e8 <__aeabi_ddiv>
   b9ed8:	ec41 0b10 	vmov	d0, r0, r1
   b9edc:	f1b9 0f00 	cmp.w	r9, #0
   b9ee0:	dab6      	bge.n	b9e50 <__ieee754_pow+0x98>
   b9ee2:	9b00      	ldr	r3, [sp, #0]
   b9ee4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b9ee8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b9eec:	ea58 0303 	orrs.w	r3, r8, r3
   b9ef0:	f040 848d 	bne.w	ba80e <__ieee754_pow+0xa56>
   b9ef4:	ec53 2b10 	vmov	r2, r3, d0
   b9ef8:	4610      	mov	r0, r2
   b9efa:	4619      	mov	r1, r3
   b9efc:	f000 ff12 	bl	bad24 <__aeabi_dsub>
   b9f00:	4602      	mov	r2, r0
   b9f02:	460b      	mov	r3, r1
   b9f04:	f001 f9f0 	bl	bb2e8 <__aeabi_ddiv>
   b9f08:	ec41 0b10 	vmov	d0, r0, r1
   b9f0c:	e7a0      	b.n	b9e50 <__ieee754_pow+0x98>
   b9f0e:	9a00      	ldr	r2, [sp, #0]
   b9f10:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b9f14:	3b01      	subs	r3, #1
   b9f16:	9304      	str	r3, [sp, #16]
   b9f18:	4313      	orrs	r3, r2
   b9f1a:	d035      	beq.n	b9f88 <__ieee754_pow+0x1d0>
   b9f1c:	4b25      	ldr	r3, [pc, #148]	; (b9fb4 <__ieee754_pow+0x1fc>)
   b9f1e:	459a      	cmp	sl, r3
   b9f20:	dd4c      	ble.n	b9fbc <__ieee754_pow+0x204>
   b9f22:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b9f26:	459a      	cmp	sl, r3
   b9f28:	4b23      	ldr	r3, [pc, #140]	; (b9fb8 <__ieee754_pow+0x200>)
   b9f2a:	f340 83db 	ble.w	ba6e4 <__ieee754_pow+0x92c>
   b9f2e:	4598      	cmp	r8, r3
   b9f30:	f340 8360 	ble.w	ba5f4 <__ieee754_pow+0x83c>
   b9f34:	f1bb 0f00 	cmp.w	fp, #0
   b9f38:	f340 8360 	ble.w	ba5fc <__ieee754_pow+0x844>
   b9f3c:	a316      	add	r3, pc, #88	; (adr r3, b9f98 <__ieee754_pow+0x1e0>)
   b9f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9f42:	4610      	mov	r0, r2
   b9f44:	4619      	mov	r1, r3
   b9f46:	f001 f8a5 	bl	bb094 <__aeabi_dmul>
   b9f4a:	ec41 0b10 	vmov	d0, r0, r1
   b9f4e:	e77f      	b.n	b9e50 <__ieee754_pow+0x98>
   b9f50:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b9f54:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b9f58:	4313      	orrs	r3, r2
   b9f5a:	f43f af77 	beq.w	b9e4c <__ieee754_pow+0x94>
   b9f5e:	4b16      	ldr	r3, [pc, #88]	; (b9fb8 <__ieee754_pow+0x200>)
   b9f60:	4598      	cmp	r8, r3
   b9f62:	f340 837a 	ble.w	ba65a <__ieee754_pow+0x8a2>
   b9f66:	f1bb 0f00 	cmp.w	fp, #0
   b9f6a:	f2c0 8347 	blt.w	ba5fc <__ieee754_pow+0x844>
   b9f6e:	ec47 6b10 	vmov	d0, r6, r7
   b9f72:	e76d      	b.n	b9e50 <__ieee754_pow+0x98>
   b9f74:	f1bb 0f00 	cmp.w	fp, #0
   b9f78:	f2c0 841a 	blt.w	ba7b0 <__ieee754_pow+0x9f8>
   b9f7c:	ec45 4b10 	vmov	d0, r4, r5
   b9f80:	e766      	b.n	b9e50 <__ieee754_pow+0x98>
   b9f82:	2102      	movs	r1, #2
   b9f84:	9100      	str	r1, [sp, #0]
   b9f86:	e73b      	b.n	b9e00 <__ieee754_pow+0x48>
   b9f88:	4622      	mov	r2, r4
   b9f8a:	462b      	mov	r3, r5
   b9f8c:	e7b4      	b.n	b9ef8 <__ieee754_pow+0x140>
   b9f8e:	bf00      	nop
   b9f90:	00000000 	.word	0x00000000
   b9f94:	3ff00000 	.word	0x3ff00000
   b9f98:	8800759c 	.word	0x8800759c
   b9f9c:	7e37e43c 	.word	0x7e37e43c
   b9fa0:	7ff00000 	.word	0x7ff00000
   b9fa4:	3ff00000 	.word	0x3ff00000
   b9fa8:	3fe00000 	.word	0x3fe00000
   b9fac:	000c17b0 	.word	0x000c17b0
   b9fb0:	433fffff 	.word	0x433fffff
   b9fb4:	41e00000 	.word	0x41e00000
   b9fb8:	3fefffff 	.word	0x3fefffff
   b9fbc:	4be4      	ldr	r3, [pc, #912]	; (ba350 <__ieee754_pow+0x598>)
   b9fbe:	ea09 0303 	and.w	r3, r9, r3
   b9fc2:	2200      	movs	r2, #0
   b9fc4:	b953      	cbnz	r3, b9fdc <__ieee754_pow+0x224>
   b9fc6:	ec51 0b10 	vmov	r0, r1, d0
   b9fca:	4be2      	ldr	r3, [pc, #904]	; (ba354 <__ieee754_pow+0x59c>)
   b9fcc:	f001 f862 	bl	bb094 <__aeabi_dmul>
   b9fd0:	ec41 0b10 	vmov	d0, r0, r1
   b9fd4:	ee10 8a90 	vmov	r8, s1
   b9fd8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b9fdc:	ea4f 5328 	mov.w	r3, r8, asr #20
   b9fe0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b9fe4:	189a      	adds	r2, r3, r2
   b9fe6:	4bdc      	ldr	r3, [pc, #880]	; (ba358 <__ieee754_pow+0x5a0>)
   b9fe8:	9205      	str	r2, [sp, #20]
   b9fea:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b9fee:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b9ff2:	4598      	cmp	r8, r3
   b9ff4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b9ff8:	dd07      	ble.n	ba00a <__ieee754_pow+0x252>
   b9ffa:	4bd8      	ldr	r3, [pc, #864]	; (ba35c <__ieee754_pow+0x5a4>)
   b9ffc:	4598      	cmp	r8, r3
   b9ffe:	f340 8414 	ble.w	ba82a <__ieee754_pow+0xa72>
   ba002:	3201      	adds	r2, #1
   ba004:	9205      	str	r2, [sp, #20]
   ba006:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   ba00a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; ba2f0 <__ieee754_pow+0x538>
   ba00e:	ed9f 7bba 	vldr	d7, [pc, #744]	; ba2f8 <__ieee754_pow+0x540>
   ba012:	ec53 2b16 	vmov	r2, r3, d6
   ba016:	eeb0 ca47 	vmov.f32	s24, s14
   ba01a:	eef0 ca67 	vmov.f32	s25, s15
   ba01e:	2500      	movs	r5, #0
   ba020:	eeb0 da47 	vmov.f32	s26, s14
   ba024:	eef0 da67 	vmov.f32	s27, s15
   ba028:	ec5b ab10 	vmov	sl, fp, d0
   ba02c:	46a3      	mov	fp, r4
   ba02e:	4650      	mov	r0, sl
   ba030:	4659      	mov	r1, fp
   ba032:	ec43 2b1a 	vmov	d10, r2, r3
   ba036:	f000 fe75 	bl	bad24 <__aeabi_dsub>
   ba03a:	ec53 2b1a 	vmov	r2, r3, d10
   ba03e:	4680      	mov	r8, r0
   ba040:	4689      	mov	r9, r1
   ba042:	4650      	mov	r0, sl
   ba044:	4659      	mov	r1, fp
   ba046:	f000 fe6f 	bl	bad28 <__adddf3>
   ba04a:	4602      	mov	r2, r0
   ba04c:	460b      	mov	r3, r1
   ba04e:	2000      	movs	r0, #0
   ba050:	49c3      	ldr	r1, [pc, #780]	; (ba360 <__ieee754_pow+0x5a8>)
   ba052:	f001 f949 	bl	bb2e8 <__aeabi_ddiv>
   ba056:	ec41 0b1b 	vmov	d11, r0, r1
   ba05a:	4640      	mov	r0, r8
   ba05c:	ec53 2b1b 	vmov	r2, r3, d11
   ba060:	4649      	mov	r1, r9
   ba062:	f001 f817 	bl	bb094 <__aeabi_dmul>
   ba066:	ec41 0b18 	vmov	d8, r0, r1
   ba06a:	460a      	mov	r2, r1
   ba06c:	4601      	mov	r1, r0
   ba06e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   ba072:	2100      	movs	r1, #0
   ba074:	9102      	str	r1, [sp, #8]
   ba076:	1064      	asrs	r4, r4, #1
   ba078:	ec4b ab19 	vmov	d9, sl, fp
   ba07c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   ba080:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   ba084:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   ba088:	2000      	movs	r0, #0
   ba08a:	1959      	adds	r1, r3, r5
   ba08c:	4604      	mov	r4, r0
   ba08e:	460d      	mov	r5, r1
   ba090:	4602      	mov	r2, r0
   ba092:	460b      	mov	r3, r1
   ba094:	4650      	mov	r0, sl
   ba096:	4659      	mov	r1, fp
   ba098:	f000 fffc 	bl	bb094 <__aeabi_dmul>
   ba09c:	4602      	mov	r2, r0
   ba09e:	460b      	mov	r3, r1
   ba0a0:	4640      	mov	r0, r8
   ba0a2:	4649      	mov	r1, r9
   ba0a4:	f000 fe3e 	bl	bad24 <__aeabi_dsub>
   ba0a8:	ec53 2b1a 	vmov	r2, r3, d10
   ba0ac:	4680      	mov	r8, r0
   ba0ae:	4689      	mov	r9, r1
   ba0b0:	4620      	mov	r0, r4
   ba0b2:	4629      	mov	r1, r5
   ba0b4:	f000 fe36 	bl	bad24 <__aeabi_dsub>
   ba0b8:	4602      	mov	r2, r0
   ba0ba:	460b      	mov	r3, r1
   ba0bc:	ec51 0b19 	vmov	r0, r1, d9
   ba0c0:	f000 fe30 	bl	bad24 <__aeabi_dsub>
   ba0c4:	4652      	mov	r2, sl
   ba0c6:	465b      	mov	r3, fp
   ba0c8:	f000 ffe4 	bl	bb094 <__aeabi_dmul>
   ba0cc:	4602      	mov	r2, r0
   ba0ce:	460b      	mov	r3, r1
   ba0d0:	4640      	mov	r0, r8
   ba0d2:	4649      	mov	r1, r9
   ba0d4:	f000 fe26 	bl	bad24 <__aeabi_dsub>
   ba0d8:	ec53 2b1b 	vmov	r2, r3, d11
   ba0dc:	f000 ffda 	bl	bb094 <__aeabi_dmul>
   ba0e0:	ec53 2b18 	vmov	r2, r3, d8
   ba0e4:	ec41 0b19 	vmov	d9, r0, r1
   ba0e8:	ec51 0b18 	vmov	r0, r1, d8
   ba0ec:	f000 ffd2 	bl	bb094 <__aeabi_dmul>
   ba0f0:	a383      	add	r3, pc, #524	; (adr r3, ba300 <__ieee754_pow+0x548>)
   ba0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba0f6:	4604      	mov	r4, r0
   ba0f8:	460d      	mov	r5, r1
   ba0fa:	f000 ffcb 	bl	bb094 <__aeabi_dmul>
   ba0fe:	a382      	add	r3, pc, #520	; (adr r3, ba308 <__ieee754_pow+0x550>)
   ba100:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba104:	f000 fe10 	bl	bad28 <__adddf3>
   ba108:	4622      	mov	r2, r4
   ba10a:	462b      	mov	r3, r5
   ba10c:	f000 ffc2 	bl	bb094 <__aeabi_dmul>
   ba110:	a37f      	add	r3, pc, #508	; (adr r3, ba310 <__ieee754_pow+0x558>)
   ba112:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba116:	f000 fe07 	bl	bad28 <__adddf3>
   ba11a:	4622      	mov	r2, r4
   ba11c:	462b      	mov	r3, r5
   ba11e:	f000 ffb9 	bl	bb094 <__aeabi_dmul>
   ba122:	a37d      	add	r3, pc, #500	; (adr r3, ba318 <__ieee754_pow+0x560>)
   ba124:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba128:	f000 fdfe 	bl	bad28 <__adddf3>
   ba12c:	4622      	mov	r2, r4
   ba12e:	462b      	mov	r3, r5
   ba130:	f000 ffb0 	bl	bb094 <__aeabi_dmul>
   ba134:	a37a      	add	r3, pc, #488	; (adr r3, ba320 <__ieee754_pow+0x568>)
   ba136:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba13a:	f000 fdf5 	bl	bad28 <__adddf3>
   ba13e:	4622      	mov	r2, r4
   ba140:	462b      	mov	r3, r5
   ba142:	f000 ffa7 	bl	bb094 <__aeabi_dmul>
   ba146:	a378      	add	r3, pc, #480	; (adr r3, ba328 <__ieee754_pow+0x570>)
   ba148:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba14c:	f000 fdec 	bl	bad28 <__adddf3>
   ba150:	4622      	mov	r2, r4
   ba152:	4680      	mov	r8, r0
   ba154:	4689      	mov	r9, r1
   ba156:	462b      	mov	r3, r5
   ba158:	4620      	mov	r0, r4
   ba15a:	4629      	mov	r1, r5
   ba15c:	f000 ff9a 	bl	bb094 <__aeabi_dmul>
   ba160:	4602      	mov	r2, r0
   ba162:	460b      	mov	r3, r1
   ba164:	4640      	mov	r0, r8
   ba166:	4649      	mov	r1, r9
   ba168:	f000 ff94 	bl	bb094 <__aeabi_dmul>
   ba16c:	4652      	mov	r2, sl
   ba16e:	4604      	mov	r4, r0
   ba170:	460d      	mov	r5, r1
   ba172:	465b      	mov	r3, fp
   ba174:	ec51 0b18 	vmov	r0, r1, d8
   ba178:	f000 fdd6 	bl	bad28 <__adddf3>
   ba17c:	ec53 2b19 	vmov	r2, r3, d9
   ba180:	f000 ff88 	bl	bb094 <__aeabi_dmul>
   ba184:	4622      	mov	r2, r4
   ba186:	462b      	mov	r3, r5
   ba188:	f000 fdce 	bl	bad28 <__adddf3>
   ba18c:	4652      	mov	r2, sl
   ba18e:	4680      	mov	r8, r0
   ba190:	4689      	mov	r9, r1
   ba192:	465b      	mov	r3, fp
   ba194:	4650      	mov	r0, sl
   ba196:	4659      	mov	r1, fp
   ba198:	f000 ff7c 	bl	bb094 <__aeabi_dmul>
   ba19c:	4602      	mov	r2, r0
   ba19e:	460b      	mov	r3, r1
   ba1a0:	ec43 2b1a 	vmov	d10, r2, r3
   ba1a4:	4b6f      	ldr	r3, [pc, #444]	; (ba364 <__ieee754_pow+0x5ac>)
   ba1a6:	2200      	movs	r2, #0
   ba1a8:	f000 fdbe 	bl	bad28 <__adddf3>
   ba1ac:	4642      	mov	r2, r8
   ba1ae:	464b      	mov	r3, r9
   ba1b0:	f000 fdba 	bl	bad28 <__adddf3>
   ba1b4:	2400      	movs	r4, #0
   ba1b6:	460d      	mov	r5, r1
   ba1b8:	4622      	mov	r2, r4
   ba1ba:	462b      	mov	r3, r5
   ba1bc:	4650      	mov	r0, sl
   ba1be:	4659      	mov	r1, fp
   ba1c0:	f000 ff68 	bl	bb094 <__aeabi_dmul>
   ba1c4:	4b67      	ldr	r3, [pc, #412]	; (ba364 <__ieee754_pow+0x5ac>)
   ba1c6:	4682      	mov	sl, r0
   ba1c8:	468b      	mov	fp, r1
   ba1ca:	2200      	movs	r2, #0
   ba1cc:	4620      	mov	r0, r4
   ba1ce:	4629      	mov	r1, r5
   ba1d0:	f000 fda8 	bl	bad24 <__aeabi_dsub>
   ba1d4:	ec53 2b1a 	vmov	r2, r3, d10
   ba1d8:	f000 fda4 	bl	bad24 <__aeabi_dsub>
   ba1dc:	4602      	mov	r2, r0
   ba1de:	460b      	mov	r3, r1
   ba1e0:	4640      	mov	r0, r8
   ba1e2:	4649      	mov	r1, r9
   ba1e4:	f000 fd9e 	bl	bad24 <__aeabi_dsub>
   ba1e8:	ec53 2b18 	vmov	r2, r3, d8
   ba1ec:	f000 ff52 	bl	bb094 <__aeabi_dmul>
   ba1f0:	4622      	mov	r2, r4
   ba1f2:	462b      	mov	r3, r5
   ba1f4:	4604      	mov	r4, r0
   ba1f6:	460d      	mov	r5, r1
   ba1f8:	ec51 0b19 	vmov	r0, r1, d9
   ba1fc:	f000 ff4a 	bl	bb094 <__aeabi_dmul>
   ba200:	4602      	mov	r2, r0
   ba202:	460b      	mov	r3, r1
   ba204:	4620      	mov	r0, r4
   ba206:	4629      	mov	r1, r5
   ba208:	f000 fd8e 	bl	bad28 <__adddf3>
   ba20c:	4680      	mov	r8, r0
   ba20e:	4689      	mov	r9, r1
   ba210:	4642      	mov	r2, r8
   ba212:	464b      	mov	r3, r9
   ba214:	4650      	mov	r0, sl
   ba216:	4659      	mov	r1, fp
   ba218:	f000 fd86 	bl	bad28 <__adddf3>
   ba21c:	a344      	add	r3, pc, #272	; (adr r3, ba330 <__ieee754_pow+0x578>)
   ba21e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba222:	2000      	movs	r0, #0
   ba224:	4604      	mov	r4, r0
   ba226:	460d      	mov	r5, r1
   ba228:	f000 ff34 	bl	bb094 <__aeabi_dmul>
   ba22c:	4652      	mov	r2, sl
   ba22e:	ec41 0b19 	vmov	d9, r0, r1
   ba232:	465b      	mov	r3, fp
   ba234:	4620      	mov	r0, r4
   ba236:	4629      	mov	r1, r5
   ba238:	f000 fd74 	bl	bad24 <__aeabi_dsub>
   ba23c:	4602      	mov	r2, r0
   ba23e:	460b      	mov	r3, r1
   ba240:	4640      	mov	r0, r8
   ba242:	4649      	mov	r1, r9
   ba244:	f000 fd6e 	bl	bad24 <__aeabi_dsub>
   ba248:	a33b      	add	r3, pc, #236	; (adr r3, ba338 <__ieee754_pow+0x580>)
   ba24a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba24e:	f000 ff21 	bl	bb094 <__aeabi_dmul>
   ba252:	4602      	mov	r2, r0
   ba254:	460b      	mov	r3, r1
   ba256:	4620      	mov	r0, r4
   ba258:	4629      	mov	r1, r5
   ba25a:	4614      	mov	r4, r2
   ba25c:	461d      	mov	r5, r3
   ba25e:	a338      	add	r3, pc, #224	; (adr r3, ba340 <__ieee754_pow+0x588>)
   ba260:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba264:	f000 ff16 	bl	bb094 <__aeabi_dmul>
   ba268:	4602      	mov	r2, r0
   ba26a:	460b      	mov	r3, r1
   ba26c:	4620      	mov	r0, r4
   ba26e:	4629      	mov	r1, r5
   ba270:	f000 fd5a 	bl	bad28 <__adddf3>
   ba274:	ec53 2b1d 	vmov	r2, r3, d13
   ba278:	f000 fd56 	bl	bad28 <__adddf3>
   ba27c:	4680      	mov	r8, r0
   ba27e:	9805      	ldr	r0, [sp, #20]
   ba280:	4689      	mov	r9, r1
   ba282:	f000 fe9d 	bl	bafc0 <__aeabi_i2d>
   ba286:	4642      	mov	r2, r8
   ba288:	4682      	mov	sl, r0
   ba28a:	468b      	mov	fp, r1
   ba28c:	464b      	mov	r3, r9
   ba28e:	ec51 0b19 	vmov	r0, r1, d9
   ba292:	f000 fd49 	bl	bad28 <__adddf3>
   ba296:	ec53 2b1c 	vmov	r2, r3, d12
   ba29a:	f000 fd45 	bl	bad28 <__adddf3>
   ba29e:	4652      	mov	r2, sl
   ba2a0:	465b      	mov	r3, fp
   ba2a2:	f000 fd41 	bl	bad28 <__adddf3>
   ba2a6:	4652      	mov	r2, sl
   ba2a8:	465b      	mov	r3, fp
   ba2aa:	2000      	movs	r0, #0
   ba2ac:	4604      	mov	r4, r0
   ba2ae:	460d      	mov	r5, r1
   ba2b0:	f000 fd38 	bl	bad24 <__aeabi_dsub>
   ba2b4:	ec53 2b1c 	vmov	r2, r3, d12
   ba2b8:	f000 fd34 	bl	bad24 <__aeabi_dsub>
   ba2bc:	ec53 2b19 	vmov	r2, r3, d9
   ba2c0:	f000 fd30 	bl	bad24 <__aeabi_dsub>
   ba2c4:	4602      	mov	r2, r0
   ba2c6:	460b      	mov	r3, r1
   ba2c8:	4640      	mov	r0, r8
   ba2ca:	4649      	mov	r1, r9
   ba2cc:	f000 fd2a 	bl	bad24 <__aeabi_dsub>
   ba2d0:	9b00      	ldr	r3, [sp, #0]
   ba2d2:	9a04      	ldr	r2, [sp, #16]
   ba2d4:	3b01      	subs	r3, #1
   ba2d6:	4313      	orrs	r3, r2
   ba2d8:	4682      	mov	sl, r0
   ba2da:	468b      	mov	fp, r1
   ba2dc:	f040 81b6 	bne.w	ba64c <__ieee754_pow+0x894>
   ba2e0:	ed9f 7b19 	vldr	d7, [pc, #100]	; ba348 <__ieee754_pow+0x590>
   ba2e4:	eeb0 8a47 	vmov.f32	s16, s14
   ba2e8:	eef0 8a67 	vmov.f32	s17, s15
   ba2ec:	e03c      	b.n	ba368 <__ieee754_pow+0x5b0>
   ba2ee:	bf00      	nop
   ba2f0:	00000000 	.word	0x00000000
   ba2f4:	3ff00000 	.word	0x3ff00000
	...
   ba300:	4a454eef 	.word	0x4a454eef
   ba304:	3fca7e28 	.word	0x3fca7e28
   ba308:	93c9db65 	.word	0x93c9db65
   ba30c:	3fcd864a 	.word	0x3fcd864a
   ba310:	a91d4101 	.word	0xa91d4101
   ba314:	3fd17460 	.word	0x3fd17460
   ba318:	518f264d 	.word	0x518f264d
   ba31c:	3fd55555 	.word	0x3fd55555
   ba320:	db6fabff 	.word	0xdb6fabff
   ba324:	3fdb6db6 	.word	0x3fdb6db6
   ba328:	33333303 	.word	0x33333303
   ba32c:	3fe33333 	.word	0x3fe33333
   ba330:	e0000000 	.word	0xe0000000
   ba334:	3feec709 	.word	0x3feec709
   ba338:	dc3a03fd 	.word	0xdc3a03fd
   ba33c:	3feec709 	.word	0x3feec709
   ba340:	145b01f5 	.word	0x145b01f5
   ba344:	be3e2fe0 	.word	0xbe3e2fe0
   ba348:	00000000 	.word	0x00000000
   ba34c:	bff00000 	.word	0xbff00000
   ba350:	7ff00000 	.word	0x7ff00000
   ba354:	43400000 	.word	0x43400000
   ba358:	0003988e 	.word	0x0003988e
   ba35c:	000bb679 	.word	0x000bb679
   ba360:	3ff00000 	.word	0x3ff00000
   ba364:	40080000 	.word	0x40080000
   ba368:	2300      	movs	r3, #0
   ba36a:	e9cd 6700 	strd	r6, r7, [sp]
   ba36e:	9300      	str	r3, [sp, #0]
   ba370:	e9dd 8900 	ldrd	r8, r9, [sp]
   ba374:	4630      	mov	r0, r6
   ba376:	4642      	mov	r2, r8
   ba378:	464b      	mov	r3, r9
   ba37a:	4639      	mov	r1, r7
   ba37c:	f000 fcd2 	bl	bad24 <__aeabi_dsub>
   ba380:	4622      	mov	r2, r4
   ba382:	462b      	mov	r3, r5
   ba384:	f000 fe86 	bl	bb094 <__aeabi_dmul>
   ba388:	4632      	mov	r2, r6
   ba38a:	463b      	mov	r3, r7
   ba38c:	4606      	mov	r6, r0
   ba38e:	460f      	mov	r7, r1
   ba390:	4650      	mov	r0, sl
   ba392:	4659      	mov	r1, fp
   ba394:	f000 fe7e 	bl	bb094 <__aeabi_dmul>
   ba398:	4602      	mov	r2, r0
   ba39a:	460b      	mov	r3, r1
   ba39c:	4630      	mov	r0, r6
   ba39e:	4639      	mov	r1, r7
   ba3a0:	f000 fcc2 	bl	bad28 <__adddf3>
   ba3a4:	4642      	mov	r2, r8
   ba3a6:	464b      	mov	r3, r9
   ba3a8:	4606      	mov	r6, r0
   ba3aa:	460f      	mov	r7, r1
   ba3ac:	4620      	mov	r0, r4
   ba3ae:	4629      	mov	r1, r5
   ba3b0:	f000 fe70 	bl	bb094 <__aeabi_dmul>
   ba3b4:	4604      	mov	r4, r0
   ba3b6:	460d      	mov	r5, r1
   ba3b8:	462b      	mov	r3, r5
   ba3ba:	4630      	mov	r0, r6
   ba3bc:	4639      	mov	r1, r7
   ba3be:	4622      	mov	r2, r4
   ba3c0:	f000 fcb2 	bl	bad28 <__adddf3>
   ba3c4:	4bc2      	ldr	r3, [pc, #776]	; (ba6d0 <__ieee754_pow+0x918>)
   ba3c6:	4299      	cmp	r1, r3
   ba3c8:	4680      	mov	r8, r0
   ba3ca:	4689      	mov	r9, r1
   ba3cc:	468a      	mov	sl, r1
   ba3ce:	f340 8118 	ble.w	ba602 <__ieee754_pow+0x84a>
   ba3d2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   ba3d6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   ba3da:	4303      	orrs	r3, r0
   ba3dc:	f040 8207 	bne.w	ba7ee <__ieee754_pow+0xa36>
   ba3e0:	a3a3      	add	r3, pc, #652	; (adr r3, ba670 <__ieee754_pow+0x8b8>)
   ba3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba3e6:	4630      	mov	r0, r6
   ba3e8:	4639      	mov	r1, r7
   ba3ea:	f000 fc9d 	bl	bad28 <__adddf3>
   ba3ee:	4602      	mov	r2, r0
   ba3f0:	460b      	mov	r3, r1
   ba3f2:	4640      	mov	r0, r8
   ba3f4:	4649      	mov	r1, r9
   ba3f6:	4690      	mov	r8, r2
   ba3f8:	4699      	mov	r9, r3
   ba3fa:	4622      	mov	r2, r4
   ba3fc:	462b      	mov	r3, r5
   ba3fe:	f000 fc91 	bl	bad24 <__aeabi_dsub>
   ba402:	4602      	mov	r2, r0
   ba404:	460b      	mov	r3, r1
   ba406:	4640      	mov	r0, r8
   ba408:	4649      	mov	r1, r9
   ba40a:	f001 f8d3 	bl	bb5b4 <__aeabi_dcmpgt>
   ba40e:	2800      	cmp	r0, #0
   ba410:	f040 81ed 	bne.w	ba7ee <__ieee754_pow+0xa36>
   ba414:	f3ca 530a 	ubfx	r3, sl, #20, #11
   ba418:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   ba41c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   ba420:	fa42 f303 	asr.w	r3, r2, r3
   ba424:	4453      	add	r3, sl
   ba426:	49ab      	ldr	r1, [pc, #684]	; (ba6d4 <__ieee754_pow+0x91c>)
   ba428:	f3c3 520a 	ubfx	r2, r3, #20, #11
   ba42c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   ba430:	fa41 fc02 	asr.w	ip, r1, r2
   ba434:	f3c3 0113 	ubfx	r1, r3, #0, #20
   ba438:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba43c:	f1c2 0214 	rsb	r2, r2, #20
   ba440:	fa41 f202 	asr.w	r2, r1, r2
   ba444:	2000      	movs	r0, #0
   ba446:	ea23 010c 	bic.w	r1, r3, ip
   ba44a:	f1ba 0f00 	cmp.w	sl, #0
   ba44e:	9200      	str	r2, [sp, #0]
   ba450:	460b      	mov	r3, r1
   ba452:	4602      	mov	r2, r0
   ba454:	da02      	bge.n	ba45c <__ieee754_pow+0x6a4>
   ba456:	9900      	ldr	r1, [sp, #0]
   ba458:	4249      	negs	r1, r1
   ba45a:	9100      	str	r1, [sp, #0]
   ba45c:	4620      	mov	r0, r4
   ba45e:	4629      	mov	r1, r5
   ba460:	f000 fc60 	bl	bad24 <__aeabi_dsub>
   ba464:	9b00      	ldr	r3, [sp, #0]
   ba466:	051b      	lsls	r3, r3, #20
   ba468:	9302      	str	r3, [sp, #8]
   ba46a:	4602      	mov	r2, r0
   ba46c:	460b      	mov	r3, r1
   ba46e:	4604      	mov	r4, r0
   ba470:	460d      	mov	r5, r1
   ba472:	4630      	mov	r0, r6
   ba474:	4639      	mov	r1, r7
   ba476:	f000 fc57 	bl	bad28 <__adddf3>
   ba47a:	4689      	mov	r9, r1
   ba47c:	f04f 0800 	mov.w	r8, #0
   ba480:	a37d      	add	r3, pc, #500	; (adr r3, ba678 <__ieee754_pow+0x8c0>)
   ba482:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba486:	4640      	mov	r0, r8
   ba488:	4649      	mov	r1, r9
   ba48a:	f000 fe03 	bl	bb094 <__aeabi_dmul>
   ba48e:	4622      	mov	r2, r4
   ba490:	462b      	mov	r3, r5
   ba492:	4682      	mov	sl, r0
   ba494:	468b      	mov	fp, r1
   ba496:	4640      	mov	r0, r8
   ba498:	4649      	mov	r1, r9
   ba49a:	f000 fc43 	bl	bad24 <__aeabi_dsub>
   ba49e:	4602      	mov	r2, r0
   ba4a0:	460b      	mov	r3, r1
   ba4a2:	4630      	mov	r0, r6
   ba4a4:	4639      	mov	r1, r7
   ba4a6:	f000 fc3d 	bl	bad24 <__aeabi_dsub>
   ba4aa:	a375      	add	r3, pc, #468	; (adr r3, ba680 <__ieee754_pow+0x8c8>)
   ba4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba4b0:	f000 fdf0 	bl	bb094 <__aeabi_dmul>
   ba4b4:	a374      	add	r3, pc, #464	; (adr r3, ba688 <__ieee754_pow+0x8d0>)
   ba4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba4ba:	4604      	mov	r4, r0
   ba4bc:	460d      	mov	r5, r1
   ba4be:	4640      	mov	r0, r8
   ba4c0:	4649      	mov	r1, r9
   ba4c2:	f000 fde7 	bl	bb094 <__aeabi_dmul>
   ba4c6:	4602      	mov	r2, r0
   ba4c8:	460b      	mov	r3, r1
   ba4ca:	4620      	mov	r0, r4
   ba4cc:	4629      	mov	r1, r5
   ba4ce:	f000 fc2b 	bl	bad28 <__adddf3>
   ba4d2:	4606      	mov	r6, r0
   ba4d4:	460f      	mov	r7, r1
   ba4d6:	4632      	mov	r2, r6
   ba4d8:	463b      	mov	r3, r7
   ba4da:	4650      	mov	r0, sl
   ba4dc:	4659      	mov	r1, fp
   ba4de:	f000 fc23 	bl	bad28 <__adddf3>
   ba4e2:	4652      	mov	r2, sl
   ba4e4:	465b      	mov	r3, fp
   ba4e6:	4604      	mov	r4, r0
   ba4e8:	460d      	mov	r5, r1
   ba4ea:	f000 fc1b 	bl	bad24 <__aeabi_dsub>
   ba4ee:	4602      	mov	r2, r0
   ba4f0:	460b      	mov	r3, r1
   ba4f2:	4630      	mov	r0, r6
   ba4f4:	4639      	mov	r1, r7
   ba4f6:	f000 fc15 	bl	bad24 <__aeabi_dsub>
   ba4fa:	4622      	mov	r2, r4
   ba4fc:	4680      	mov	r8, r0
   ba4fe:	4689      	mov	r9, r1
   ba500:	462b      	mov	r3, r5
   ba502:	4620      	mov	r0, r4
   ba504:	4629      	mov	r1, r5
   ba506:	f000 fdc5 	bl	bb094 <__aeabi_dmul>
   ba50a:	a361      	add	r3, pc, #388	; (adr r3, ba690 <__ieee754_pow+0x8d8>)
   ba50c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba510:	4606      	mov	r6, r0
   ba512:	460f      	mov	r7, r1
   ba514:	f000 fdbe 	bl	bb094 <__aeabi_dmul>
   ba518:	a35f      	add	r3, pc, #380	; (adr r3, ba698 <__ieee754_pow+0x8e0>)
   ba51a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba51e:	f000 fc01 	bl	bad24 <__aeabi_dsub>
   ba522:	4632      	mov	r2, r6
   ba524:	463b      	mov	r3, r7
   ba526:	f000 fdb5 	bl	bb094 <__aeabi_dmul>
   ba52a:	a35d      	add	r3, pc, #372	; (adr r3, ba6a0 <__ieee754_pow+0x8e8>)
   ba52c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba530:	f000 fbfa 	bl	bad28 <__adddf3>
   ba534:	4632      	mov	r2, r6
   ba536:	463b      	mov	r3, r7
   ba538:	f000 fdac 	bl	bb094 <__aeabi_dmul>
   ba53c:	a35a      	add	r3, pc, #360	; (adr r3, ba6a8 <__ieee754_pow+0x8f0>)
   ba53e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba542:	f000 fbef 	bl	bad24 <__aeabi_dsub>
   ba546:	4632      	mov	r2, r6
   ba548:	463b      	mov	r3, r7
   ba54a:	f000 fda3 	bl	bb094 <__aeabi_dmul>
   ba54e:	a358      	add	r3, pc, #352	; (adr r3, ba6b0 <__ieee754_pow+0x8f8>)
   ba550:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba554:	f000 fbe8 	bl	bad28 <__adddf3>
   ba558:	4632      	mov	r2, r6
   ba55a:	463b      	mov	r3, r7
   ba55c:	f000 fd9a 	bl	bb094 <__aeabi_dmul>
   ba560:	4602      	mov	r2, r0
   ba562:	460b      	mov	r3, r1
   ba564:	4620      	mov	r0, r4
   ba566:	4629      	mov	r1, r5
   ba568:	f000 fbdc 	bl	bad24 <__aeabi_dsub>
   ba56c:	4606      	mov	r6, r0
   ba56e:	460f      	mov	r7, r1
   ba570:	4632      	mov	r2, r6
   ba572:	463b      	mov	r3, r7
   ba574:	4620      	mov	r0, r4
   ba576:	4629      	mov	r1, r5
   ba578:	f000 fd8c 	bl	bb094 <__aeabi_dmul>
   ba57c:	4602      	mov	r2, r0
   ba57e:	460b      	mov	r3, r1
   ba580:	4630      	mov	r0, r6
   ba582:	4639      	mov	r1, r7
   ba584:	4616      	mov	r6, r2
   ba586:	461f      	mov	r7, r3
   ba588:	2200      	movs	r2, #0
   ba58a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ba58e:	f000 fbc9 	bl	bad24 <__aeabi_dsub>
   ba592:	4602      	mov	r2, r0
   ba594:	460b      	mov	r3, r1
   ba596:	4630      	mov	r0, r6
   ba598:	4639      	mov	r1, r7
   ba59a:	f000 fea5 	bl	bb2e8 <__aeabi_ddiv>
   ba59e:	4642      	mov	r2, r8
   ba5a0:	4606      	mov	r6, r0
   ba5a2:	460f      	mov	r7, r1
   ba5a4:	464b      	mov	r3, r9
   ba5a6:	4620      	mov	r0, r4
   ba5a8:	4629      	mov	r1, r5
   ba5aa:	f000 fd73 	bl	bb094 <__aeabi_dmul>
   ba5ae:	4642      	mov	r2, r8
   ba5b0:	464b      	mov	r3, r9
   ba5b2:	f000 fbb9 	bl	bad28 <__adddf3>
   ba5b6:	4602      	mov	r2, r0
   ba5b8:	460b      	mov	r3, r1
   ba5ba:	4630      	mov	r0, r6
   ba5bc:	4639      	mov	r1, r7
   ba5be:	f000 fbb1 	bl	bad24 <__aeabi_dsub>
   ba5c2:	4622      	mov	r2, r4
   ba5c4:	462b      	mov	r3, r5
   ba5c6:	f000 fbad 	bl	bad24 <__aeabi_dsub>
   ba5ca:	4602      	mov	r2, r0
   ba5cc:	460b      	mov	r3, r1
   ba5ce:	2000      	movs	r0, #0
   ba5d0:	4941      	ldr	r1, [pc, #260]	; (ba6d8 <__ieee754_pow+0x920>)
   ba5d2:	f000 fba7 	bl	bad24 <__aeabi_dsub>
   ba5d6:	9a02      	ldr	r2, [sp, #8]
   ba5d8:	460b      	mov	r3, r1
   ba5da:	4413      	add	r3, r2
   ba5dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   ba5e0:	f2c0 8143 	blt.w	ba86a <__ieee754_pow+0xab2>
   ba5e4:	4619      	mov	r1, r3
   ba5e6:	ec53 2b18 	vmov	r2, r3, d8
   ba5ea:	f000 fd53 	bl	bb094 <__aeabi_dmul>
   ba5ee:	ec41 0b10 	vmov	d0, r0, r1
   ba5f2:	e42d      	b.n	b9e50 <__ieee754_pow+0x98>
   ba5f4:	f1bb 0f00 	cmp.w	fp, #0
   ba5f8:	f6ff aca0 	blt.w	b9f3c <__ieee754_pow+0x184>
   ba5fc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; ba6b8 <__ieee754_pow+0x900>
   ba600:	e426      	b.n	b9e50 <__ieee754_pow+0x98>
   ba602:	f8df c0dc 	ldr.w	ip, [pc, #220]	; ba6e0 <__ieee754_pow+0x928>
   ba606:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ba60a:	4563      	cmp	r3, ip
   ba60c:	f340 80e7 	ble.w	ba7de <__ieee754_pow+0xa26>
   ba610:	4b32      	ldr	r3, [pc, #200]	; (ba6dc <__ieee754_pow+0x924>)
   ba612:	440b      	add	r3, r1
   ba614:	4303      	orrs	r3, r0
   ba616:	d10a      	bne.n	ba62e <__ieee754_pow+0x876>
   ba618:	4622      	mov	r2, r4
   ba61a:	462b      	mov	r3, r5
   ba61c:	f000 fb82 	bl	bad24 <__aeabi_dsub>
   ba620:	4632      	mov	r2, r6
   ba622:	463b      	mov	r3, r7
   ba624:	f000 ffbc 	bl	bb5a0 <__aeabi_dcmpge>
   ba628:	2800      	cmp	r0, #0
   ba62a:	f43f aef3 	beq.w	ba414 <__ieee754_pow+0x65c>
   ba62e:	a324      	add	r3, pc, #144	; (adr r3, ba6c0 <__ieee754_pow+0x908>)
   ba630:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba634:	ec51 0b18 	vmov	r0, r1, d8
   ba638:	f000 fd2c 	bl	bb094 <__aeabi_dmul>
   ba63c:	a320      	add	r3, pc, #128	; (adr r3, ba6c0 <__ieee754_pow+0x908>)
   ba63e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba642:	f000 fd27 	bl	bb094 <__aeabi_dmul>
   ba646:	ec41 0b10 	vmov	d0, r0, r1
   ba64a:	e401      	b.n	b9e50 <__ieee754_pow+0x98>
   ba64c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; ba6c8 <__ieee754_pow+0x910>
   ba650:	eeb0 8a47 	vmov.f32	s16, s14
   ba654:	eef0 8a67 	vmov.f32	s17, s15
   ba658:	e686      	b.n	ba368 <__ieee754_pow+0x5b0>
   ba65a:	f1bb 0f00 	cmp.w	fp, #0
   ba65e:	dacd      	bge.n	ba5fc <__ieee754_pow+0x844>
   ba660:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   ba664:	ee00 6a10 	vmov	s0, r6
   ba668:	ee00 3a90 	vmov	s1, r3
   ba66c:	f7ff bbf0 	b.w	b9e50 <__ieee754_pow+0x98>
   ba670:	652b82fe 	.word	0x652b82fe
   ba674:	3c971547 	.word	0x3c971547
   ba678:	00000000 	.word	0x00000000
   ba67c:	3fe62e43 	.word	0x3fe62e43
   ba680:	fefa39ef 	.word	0xfefa39ef
   ba684:	3fe62e42 	.word	0x3fe62e42
   ba688:	0ca86c39 	.word	0x0ca86c39
   ba68c:	be205c61 	.word	0xbe205c61
   ba690:	72bea4d0 	.word	0x72bea4d0
   ba694:	3e663769 	.word	0x3e663769
   ba698:	c5d26bf1 	.word	0xc5d26bf1
   ba69c:	3ebbbd41 	.word	0x3ebbbd41
   ba6a0:	af25de2c 	.word	0xaf25de2c
   ba6a4:	3f11566a 	.word	0x3f11566a
   ba6a8:	16bebd93 	.word	0x16bebd93
   ba6ac:	3f66c16c 	.word	0x3f66c16c
   ba6b0:	5555553e 	.word	0x5555553e
   ba6b4:	3fc55555 	.word	0x3fc55555
	...
   ba6c0:	c2f8f359 	.word	0xc2f8f359
   ba6c4:	01a56e1f 	.word	0x01a56e1f
   ba6c8:	00000000 	.word	0x00000000
   ba6cc:	3ff00000 	.word	0x3ff00000
   ba6d0:	408fffff 	.word	0x408fffff
   ba6d4:	000fffff 	.word	0x000fffff
   ba6d8:	3ff00000 	.word	0x3ff00000
   ba6dc:	3f6f3400 	.word	0x3f6f3400
   ba6e0:	4090cbff 	.word	0x4090cbff
   ba6e4:	4598      	cmp	r8, r3
   ba6e6:	db85      	blt.n	ba5f4 <__ieee754_pow+0x83c>
   ba6e8:	4b7d      	ldr	r3, [pc, #500]	; (ba8e0 <__ieee754_pow+0xb28>)
   ba6ea:	4598      	cmp	r8, r3
   ba6ec:	f73f ac22 	bgt.w	b9f34 <__ieee754_pow+0x17c>
   ba6f0:	ec51 0b10 	vmov	r0, r1, d0
   ba6f4:	4b7a      	ldr	r3, [pc, #488]	; (ba8e0 <__ieee754_pow+0xb28>)
   ba6f6:	2200      	movs	r2, #0
   ba6f8:	f000 fb14 	bl	bad24 <__aeabi_dsub>
   ba6fc:	a368      	add	r3, pc, #416	; (adr r3, ba8a0 <__ieee754_pow+0xae8>)
   ba6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba702:	4604      	mov	r4, r0
   ba704:	460d      	mov	r5, r1
   ba706:	f000 fcc5 	bl	bb094 <__aeabi_dmul>
   ba70a:	a367      	add	r3, pc, #412	; (adr r3, ba8a8 <__ieee754_pow+0xaf0>)
   ba70c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba710:	4682      	mov	sl, r0
   ba712:	468b      	mov	fp, r1
   ba714:	4620      	mov	r0, r4
   ba716:	4629      	mov	r1, r5
   ba718:	f000 fcbc 	bl	bb094 <__aeabi_dmul>
   ba71c:	4b71      	ldr	r3, [pc, #452]	; (ba8e4 <__ieee754_pow+0xb2c>)
   ba71e:	ec41 0b18 	vmov	d8, r0, r1
   ba722:	2200      	movs	r2, #0
   ba724:	4620      	mov	r0, r4
   ba726:	4629      	mov	r1, r5
   ba728:	f000 fcb4 	bl	bb094 <__aeabi_dmul>
   ba72c:	4602      	mov	r2, r0
   ba72e:	460b      	mov	r3, r1
   ba730:	a15f      	add	r1, pc, #380	; (adr r1, ba8b0 <__ieee754_pow+0xaf8>)
   ba732:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba736:	f000 faf5 	bl	bad24 <__aeabi_dsub>
   ba73a:	4622      	mov	r2, r4
   ba73c:	462b      	mov	r3, r5
   ba73e:	f000 fca9 	bl	bb094 <__aeabi_dmul>
   ba742:	4602      	mov	r2, r0
   ba744:	460b      	mov	r3, r1
   ba746:	2000      	movs	r0, #0
   ba748:	4967      	ldr	r1, [pc, #412]	; (ba8e8 <__ieee754_pow+0xb30>)
   ba74a:	f000 faeb 	bl	bad24 <__aeabi_dsub>
   ba74e:	4622      	mov	r2, r4
   ba750:	4680      	mov	r8, r0
   ba752:	4689      	mov	r9, r1
   ba754:	462b      	mov	r3, r5
   ba756:	4620      	mov	r0, r4
   ba758:	4629      	mov	r1, r5
   ba75a:	f000 fc9b 	bl	bb094 <__aeabi_dmul>
   ba75e:	4602      	mov	r2, r0
   ba760:	460b      	mov	r3, r1
   ba762:	4640      	mov	r0, r8
   ba764:	4649      	mov	r1, r9
   ba766:	f000 fc95 	bl	bb094 <__aeabi_dmul>
   ba76a:	a353      	add	r3, pc, #332	; (adr r3, ba8b8 <__ieee754_pow+0xb00>)
   ba76c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba770:	f000 fc90 	bl	bb094 <__aeabi_dmul>
   ba774:	4602      	mov	r2, r0
   ba776:	460b      	mov	r3, r1
   ba778:	ec51 0b18 	vmov	r0, r1, d8
   ba77c:	f000 fad2 	bl	bad24 <__aeabi_dsub>
   ba780:	4680      	mov	r8, r0
   ba782:	4689      	mov	r9, r1
   ba784:	4642      	mov	r2, r8
   ba786:	464b      	mov	r3, r9
   ba788:	4650      	mov	r0, sl
   ba78a:	4659      	mov	r1, fp
   ba78c:	f000 facc 	bl	bad28 <__adddf3>
   ba790:	2000      	movs	r0, #0
   ba792:	4652      	mov	r2, sl
   ba794:	465b      	mov	r3, fp
   ba796:	4604      	mov	r4, r0
   ba798:	460d      	mov	r5, r1
   ba79a:	e591      	b.n	ba2c0 <__ieee754_pow+0x508>
   ba79c:	4622      	mov	r2, r4
   ba79e:	462b      	mov	r3, r5
   ba7a0:	4620      	mov	r0, r4
   ba7a2:	4629      	mov	r1, r5
   ba7a4:	f000 fc76 	bl	bb094 <__aeabi_dmul>
   ba7a8:	ec41 0b10 	vmov	d0, r0, r1
   ba7ac:	f7ff bb50 	b.w	b9e50 <__ieee754_pow+0x98>
   ba7b0:	494b      	ldr	r1, [pc, #300]	; (ba8e0 <__ieee754_pow+0xb28>)
   ba7b2:	2000      	movs	r0, #0
   ba7b4:	4622      	mov	r2, r4
   ba7b6:	462b      	mov	r3, r5
   ba7b8:	f000 fd96 	bl	bb2e8 <__aeabi_ddiv>
   ba7bc:	ec41 0b10 	vmov	d0, r0, r1
   ba7c0:	f7ff bb46 	b.w	b9e50 <__ieee754_pow+0x98>
   ba7c4:	2b00      	cmp	r3, #0
   ba7c6:	d144      	bne.n	ba852 <__ieee754_pow+0xa9a>
   ba7c8:	f1c1 0114 	rsb	r1, r1, #20
   ba7cc:	fa4a f001 	asr.w	r0, sl, r1
   ba7d0:	fa00 f101 	lsl.w	r1, r0, r1
   ba7d4:	4551      	cmp	r1, sl
   ba7d6:	d05a      	beq.n	ba88e <__ieee754_pow+0xad6>
   ba7d8:	9300      	str	r3, [sp, #0]
   ba7da:	f7ff bb17 	b.w	b9e0c <__ieee754_pow+0x54>
   ba7de:	4a42      	ldr	r2, [pc, #264]	; (ba8e8 <__ieee754_pow+0xb30>)
   ba7e0:	4293      	cmp	r3, r2
   ba7e2:	dc5b      	bgt.n	ba89c <__ieee754_pow+0xae4>
   ba7e4:	e9dd 1200 	ldrd	r1, r2, [sp]
   ba7e8:	9102      	str	r1, [sp, #8]
   ba7ea:	9100      	str	r1, [sp, #0]
   ba7ec:	e646      	b.n	ba47c <__ieee754_pow+0x6c4>
   ba7ee:	a334      	add	r3, pc, #208	; (adr r3, ba8c0 <__ieee754_pow+0xb08>)
   ba7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba7f4:	ec51 0b18 	vmov	r0, r1, d8
   ba7f8:	f000 fc4c 	bl	bb094 <__aeabi_dmul>
   ba7fc:	a330      	add	r3, pc, #192	; (adr r3, ba8c0 <__ieee754_pow+0xb08>)
   ba7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba802:	f000 fc47 	bl	bb094 <__aeabi_dmul>
   ba806:	ec41 0b10 	vmov	d0, r0, r1
   ba80a:	f7ff bb21 	b.w	b9e50 <__ieee754_pow+0x98>
   ba80e:	9b00      	ldr	r3, [sp, #0]
   ba810:	2b01      	cmp	r3, #1
   ba812:	f47f ab1d 	bne.w	b9e50 <__ieee754_pow+0x98>
   ba816:	ee10 1a90 	vmov	r1, s1
   ba81a:	ee10 2a10 	vmov	r2, s0
   ba81e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba822:	ec43 2b10 	vmov	d0, r2, r3
   ba826:	f7ff bb13 	b.w	b9e50 <__ieee754_pow+0x98>
   ba82a:	ed9f 7b27 	vldr	d7, [pc, #156]	; ba8c8 <__ieee754_pow+0xb10>
   ba82e:	eeb0 ca47 	vmov.f32	s24, s14
   ba832:	eef0 ca67 	vmov.f32	s25, s15
   ba836:	ed9f 7b26 	vldr	d7, [pc, #152]	; ba8d0 <__ieee754_pow+0xb18>
   ba83a:	eeb0 da47 	vmov.f32	s26, s14
   ba83e:	eef0 da67 	vmov.f32	s27, s15
   ba842:	ed9f 7b25 	vldr	d7, [pc, #148]	; ba8d8 <__ieee754_pow+0xb20>
   ba846:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   ba84a:	ec53 2b17 	vmov	r2, r3, d7
   ba84e:	f7ff bbeb 	b.w	ba028 <__ieee754_pow+0x270>
   ba852:	ec45 4b10 	vmov	d0, r4, r5
   ba856:	9200      	str	r2, [sp, #0]
   ba858:	f000 f914 	bl	baa84 <fabs>
   ba85c:	9a00      	ldr	r2, [sp, #0]
   ba85e:	2a00      	cmp	r2, #0
   ba860:	f47f ab92 	bne.w	b9f88 <__ieee754_pow+0x1d0>
   ba864:	9200      	str	r2, [sp, #0]
   ba866:	f7ff bb26 	b.w	b9eb6 <__ieee754_pow+0xfe>
   ba86a:	ec41 0b10 	vmov	d0, r0, r1
   ba86e:	9800      	ldr	r0, [sp, #0]
   ba870:	f000 f9c2 	bl	babf8 <scalbn>
   ba874:	ec51 0b10 	vmov	r0, r1, d0
   ba878:	e6b5      	b.n	ba5e6 <__ieee754_pow+0x82e>
   ba87a:	f000 0001 	and.w	r0, r0, #1
   ba87e:	f1c0 0102 	rsb	r1, r0, #2
   ba882:	9100      	str	r1, [sp, #0]
   ba884:	2b00      	cmp	r3, #0
   ba886:	f43f aac1 	beq.w	b9e0c <__ieee754_pow+0x54>
   ba88a:	f7ff bb0d 	b.w	b9ea8 <__ieee754_pow+0xf0>
   ba88e:	f000 0001 	and.w	r0, r0, #1
   ba892:	f1c0 0302 	rsb	r3, r0, #2
   ba896:	9300      	str	r3, [sp, #0]
   ba898:	f7ff bab8 	b.w	b9e0c <__ieee754_pow+0x54>
   ba89c:	151b      	asrs	r3, r3, #20
   ba89e:	e5bb      	b.n	ba418 <__ieee754_pow+0x660>
   ba8a0:	60000000 	.word	0x60000000
   ba8a4:	3ff71547 	.word	0x3ff71547
   ba8a8:	f85ddf44 	.word	0xf85ddf44
   ba8ac:	3e54ae0b 	.word	0x3e54ae0b
   ba8b0:	55555555 	.word	0x55555555
   ba8b4:	3fd55555 	.word	0x3fd55555
   ba8b8:	652b82fe 	.word	0x652b82fe
   ba8bc:	3ff71547 	.word	0x3ff71547
   ba8c0:	8800759c 	.word	0x8800759c
   ba8c4:	7e37e43c 	.word	0x7e37e43c
   ba8c8:	40000000 	.word	0x40000000
   ba8cc:	3fe2b803 	.word	0x3fe2b803
   ba8d0:	43cfd006 	.word	0x43cfd006
   ba8d4:	3e4cfdeb 	.word	0x3e4cfdeb
   ba8d8:	00000000 	.word	0x00000000
   ba8dc:	3ff80000 	.word	0x3ff80000
   ba8e0:	3ff00000 	.word	0x3ff00000
   ba8e4:	3fd00000 	.word	0x3fd00000
   ba8e8:	3fe00000 	.word	0x3fe00000

000ba8ec <__ieee754_sqrt>:
   ba8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba8f0:	4a63      	ldr	r2, [pc, #396]	; (baa80 <__ieee754_sqrt+0x194>)
   ba8f2:	ec55 4b10 	vmov	r4, r5, d0
   ba8f6:	43aa      	bics	r2, r5
   ba8f8:	f000 809f 	beq.w	baa3a <__ieee754_sqrt+0x14e>
   ba8fc:	2d00      	cmp	r5, #0
   ba8fe:	ee10 ca10 	vmov	ip, s0
   ba902:	462b      	mov	r3, r5
   ba904:	dd54      	ble.n	ba9b0 <__ieee754_sqrt+0xc4>
   ba906:	1529      	asrs	r1, r5, #20
   ba908:	d063      	beq.n	ba9d2 <__ieee754_sqrt+0xe6>
   ba90a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba90e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   ba912:	07c9      	lsls	r1, r1, #31
   ba914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba918:	d404      	bmi.n	ba924 <__ieee754_sqrt+0x38>
   ba91a:	005b      	lsls	r3, r3, #1
   ba91c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba920:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba924:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   ba928:	2600      	movs	r6, #0
   ba92a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   ba92e:	107f      	asrs	r7, r7, #1
   ba930:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba934:	f04f 0e16 	mov.w	lr, #22
   ba938:	4634      	mov	r4, r6
   ba93a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   ba93e:	18a1      	adds	r1, r4, r2
   ba940:	4299      	cmp	r1, r3
   ba942:	dc02      	bgt.n	ba94a <__ieee754_sqrt+0x5e>
   ba944:	1a5b      	subs	r3, r3, r1
   ba946:	188c      	adds	r4, r1, r2
   ba948:	4416      	add	r6, r2
   ba94a:	005b      	lsls	r3, r3, #1
   ba94c:	f1be 0e01 	subs.w	lr, lr, #1
   ba950:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba954:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba958:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba95c:	d1ef      	bne.n	ba93e <__ieee754_sqrt+0x52>
   ba95e:	4675      	mov	r5, lr
   ba960:	2020      	movs	r0, #32
   ba962:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   ba966:	e00a      	b.n	ba97e <__ieee754_sqrt+0x92>
   ba968:	d044      	beq.n	ba9f4 <__ieee754_sqrt+0x108>
   ba96a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   ba96e:	3801      	subs	r0, #1
   ba970:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   ba974:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba978:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba97c:	d043      	beq.n	baa06 <__ieee754_sqrt+0x11a>
   ba97e:	42a3      	cmp	r3, r4
   ba980:	eb02 010e 	add.w	r1, r2, lr
   ba984:	ddf0      	ble.n	ba968 <__ieee754_sqrt+0x7c>
   ba986:	2900      	cmp	r1, #0
   ba988:	eb01 0e02 	add.w	lr, r1, r2
   ba98c:	db0a      	blt.n	ba9a4 <__ieee754_sqrt+0xb8>
   ba98e:	46a0      	mov	r8, r4
   ba990:	1b1b      	subs	r3, r3, r4
   ba992:	4561      	cmp	r1, ip
   ba994:	bf88      	it	hi
   ba996:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   ba99a:	ebac 0c01 	sub.w	ip, ip, r1
   ba99e:	4415      	add	r5, r2
   ba9a0:	4644      	mov	r4, r8
   ba9a2:	e7e2      	b.n	ba96a <__ieee754_sqrt+0x7e>
   ba9a4:	f1be 0f00 	cmp.w	lr, #0
   ba9a8:	dbf1      	blt.n	ba98e <__ieee754_sqrt+0xa2>
   ba9aa:	f104 0801 	add.w	r8, r4, #1
   ba9ae:	e7ef      	b.n	ba990 <__ieee754_sqrt+0xa4>
   ba9b0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   ba9b4:	4322      	orrs	r2, r4
   ba9b6:	d038      	beq.n	baa2a <__ieee754_sqrt+0x13e>
   ba9b8:	2d00      	cmp	r5, #0
   ba9ba:	d14e      	bne.n	baa5a <__ieee754_sqrt+0x16e>
   ba9bc:	4629      	mov	r1, r5
   ba9be:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   ba9c2:	3915      	subs	r1, #21
   ba9c4:	4613      	mov	r3, r2
   ba9c6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   ba9ca:	2a00      	cmp	r2, #0
   ba9cc:	d0f7      	beq.n	ba9be <__ieee754_sqrt+0xd2>
   ba9ce:	02d6      	lsls	r6, r2, #11
   ba9d0:	d450      	bmi.n	baa74 <__ieee754_sqrt+0x188>
   ba9d2:	2000      	movs	r0, #0
   ba9d4:	005b      	lsls	r3, r3, #1
   ba9d6:	02dd      	lsls	r5, r3, #11
   ba9d8:	4604      	mov	r4, r0
   ba9da:	f100 0001 	add.w	r0, r0, #1
   ba9de:	d5f9      	bpl.n	ba9d4 <__ieee754_sqrt+0xe8>
   ba9e0:	461a      	mov	r2, r3
   ba9e2:	4663      	mov	r3, ip
   ba9e4:	fa0c fc00 	lsl.w	ip, ip, r0
   ba9e8:	f1c0 0020 	rsb	r0, r0, #32
   ba9ec:	40c3      	lsrs	r3, r0
   ba9ee:	1b09      	subs	r1, r1, r4
   ba9f0:	4313      	orrs	r3, r2
   ba9f2:	e78a      	b.n	ba90a <__ieee754_sqrt+0x1e>
   ba9f4:	4561      	cmp	r1, ip
   ba9f6:	d8b8      	bhi.n	ba96a <__ieee754_sqrt+0x7e>
   ba9f8:	2900      	cmp	r1, #0
   ba9fa:	eb01 0e02 	add.w	lr, r1, r2
   ba9fe:	dbd1      	blt.n	ba9a4 <__ieee754_sqrt+0xb8>
   baa00:	4698      	mov	r8, r3
   baa02:	2300      	movs	r3, #0
   baa04:	e7c9      	b.n	ba99a <__ieee754_sqrt+0xae>
   baa06:	ea53 030c 	orrs.w	r3, r3, ip
   baa0a:	d110      	bne.n	baa2e <__ieee754_sqrt+0x142>
   baa0c:	0868      	lsrs	r0, r5, #1
   baa0e:	1071      	asrs	r1, r6, #1
   baa10:	07f3      	lsls	r3, r6, #31
   baa12:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   baa16:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   baa1a:	bf48      	it	mi
   baa1c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   baa20:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   baa24:	4602      	mov	r2, r0
   baa26:	ec43 2b10 	vmov	d0, r2, r3
   baa2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   baa2e:	1c6a      	adds	r2, r5, #1
   baa30:	bf16      	itet	ne
   baa32:	1c68      	addne	r0, r5, #1
   baa34:	3601      	addeq	r6, #1
   baa36:	0840      	lsrne	r0, r0, #1
   baa38:	e7e9      	b.n	baa0e <__ieee754_sqrt+0x122>
   baa3a:	ee10 2a10 	vmov	r2, s0
   baa3e:	ee10 0a10 	vmov	r0, s0
   baa42:	462b      	mov	r3, r5
   baa44:	4629      	mov	r1, r5
   baa46:	f000 fb25 	bl	bb094 <__aeabi_dmul>
   baa4a:	4622      	mov	r2, r4
   baa4c:	462b      	mov	r3, r5
   baa4e:	f000 f96b 	bl	bad28 <__adddf3>
   baa52:	ec41 0b10 	vmov	d0, r0, r1
   baa56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   baa5a:	ee10 2a10 	vmov	r2, s0
   baa5e:	4620      	mov	r0, r4
   baa60:	4629      	mov	r1, r5
   baa62:	f000 f95f 	bl	bad24 <__aeabi_dsub>
   baa66:	4602      	mov	r2, r0
   baa68:	460b      	mov	r3, r1
   baa6a:	f000 fc3d 	bl	bb2e8 <__aeabi_ddiv>
   baa6e:	ec41 0b10 	vmov	d0, r0, r1
   baa72:	e7da      	b.n	baa2a <__ieee754_sqrt+0x13e>
   baa74:	4663      	mov	r3, ip
   baa76:	2020      	movs	r0, #32
   baa78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   baa7c:	e7b6      	b.n	ba9ec <__ieee754_sqrt+0x100>
   baa7e:	bf00      	nop
   baa80:	7ff00000 	.word	0x7ff00000

000baa84 <fabs>:
   baa84:	ec51 0b10 	vmov	r0, r1, d0
   baa88:	ee10 2a10 	vmov	r2, s0
   baa8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   baa90:	ec43 2b10 	vmov	d0, r2, r3
   baa94:	4770      	bx	lr
   baa96:	bf00      	nop

000baa98 <finite>:
   baa98:	b082      	sub	sp, #8
   baa9a:	ed8d 0b00 	vstr	d0, [sp]
   baa9e:	9801      	ldr	r0, [sp, #4]
   baaa0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   baaa4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   baaa8:	0fc0      	lsrs	r0, r0, #31
   baaaa:	b002      	add	sp, #8
   baaac:	4770      	bx	lr
   baaae:	bf00      	nop

000baab0 <nan>:
   baab0:	ed9f 0b01 	vldr	d0, [pc, #4]	; baab8 <nan+0x8>
   baab4:	4770      	bx	lr
   baab6:	bf00      	nop
   baab8:	00000000 	.word	0x00000000
   baabc:	7ff80000 	.word	0x7ff80000

000baac0 <rint>:
   baac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   baac2:	ec53 2b10 	vmov	r2, r3, d0
   baac6:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   baaca:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   baace:	2913      	cmp	r1, #19
   baad0:	ee10 0a10 	vmov	r0, s0
   baad4:	b083      	sub	sp, #12
   baad6:	461c      	mov	r4, r3
   baad8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   baadc:	dc3a      	bgt.n	bab54 <rint+0x94>
   baade:	2900      	cmp	r1, #0
   baae0:	db30      	blt.n	bab44 <rint+0x84>
   baae2:	4d42      	ldr	r5, [pc, #264]	; (babec <rint+0x12c>)
   baae4:	fa45 fc01 	asr.w	ip, r5, r1
   baae8:	ea03 050c 	and.w	r5, r3, ip
   baaec:	4315      	orrs	r5, r2
   baaee:	d02d      	beq.n	bab4c <rint+0x8c>
   baaf0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   baaf4:	4318      	orrs	r0, r3
   baaf6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   baafa:	d00c      	beq.n	bab16 <rint+0x56>
   baafc:	ea24 0c0c 	bic.w	ip, r4, ip
   bab00:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   bab04:	2913      	cmp	r1, #19
   bab06:	fa44 f101 	asr.w	r1, r4, r1
   bab0a:	bf0c      	ite	eq
   bab0c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   bab10:	2000      	movne	r0, #0
   bab12:	ea4c 0401 	orr.w	r4, ip, r1
   bab16:	4936      	ldr	r1, [pc, #216]	; (babf0 <rint+0x130>)
   bab18:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   bab1c:	4623      	mov	r3, r4
   bab1e:	e9de 4500 	ldrd	r4, r5, [lr]
   bab22:	4602      	mov	r2, r0
   bab24:	4629      	mov	r1, r5
   bab26:	4620      	mov	r0, r4
   bab28:	f000 f8fe 	bl	bad28 <__adddf3>
   bab2c:	e9cd 0100 	strd	r0, r1, [sp]
   bab30:	e9dd 0100 	ldrd	r0, r1, [sp]
   bab34:	4622      	mov	r2, r4
   bab36:	462b      	mov	r3, r5
   bab38:	f000 f8f4 	bl	bad24 <__aeabi_dsub>
   bab3c:	ec41 0b10 	vmov	d0, r0, r1
   bab40:	b003      	add	sp, #12
   bab42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bab44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   bab48:	4311      	orrs	r1, r2
   bab4a:	d124      	bne.n	bab96 <rint+0xd6>
   bab4c:	ec43 2b10 	vmov	d0, r2, r3
   bab50:	b003      	add	sp, #12
   bab52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bab54:	2933      	cmp	r1, #51	; 0x33
   bab56:	dd08      	ble.n	bab6a <rint+0xaa>
   bab58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   bab5c:	d1f6      	bne.n	bab4c <rint+0x8c>
   bab5e:	4619      	mov	r1, r3
   bab60:	f000 f8e2 	bl	bad28 <__adddf3>
   bab64:	ec41 0b10 	vmov	d0, r0, r1
   bab68:	e7f2      	b.n	bab50 <rint+0x90>
   bab6a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   bab6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   bab72:	fa21 f10c 	lsr.w	r1, r1, ip
   bab76:	420a      	tst	r2, r1
   bab78:	d0e8      	beq.n	bab4c <rint+0x8c>
   bab7a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   bab7e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   bab82:	d0c8      	beq.n	bab16 <rint+0x56>
   bab84:	ea20 0303 	bic.w	r3, r0, r3
   bab88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   bab8c:	fa40 fc0c 	asr.w	ip, r0, ip
   bab90:	ea43 000c 	orr.w	r0, r3, ip
   bab94:	e7bf      	b.n	bab16 <rint+0x56>
   bab96:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bab9a:	4318      	orrs	r0, r3
   bab9c:	4a14      	ldr	r2, [pc, #80]	; (babf0 <rint+0x130>)
   bab9e:	4243      	negs	r3, r0
   baba0:	4303      	orrs	r3, r0
   baba2:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   baba6:	0b1b      	lsrs	r3, r3, #12
   baba8:	0c62      	lsrs	r2, r4, #17
   babaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   babae:	0452      	lsls	r2, r2, #17
   babb0:	ea43 0702 	orr.w	r7, r3, r2
   babb4:	463b      	mov	r3, r7
   babb6:	e9de 6700 	ldrd	r6, r7, [lr]
   babba:	ee10 2a10 	vmov	r2, s0
   babbe:	4630      	mov	r0, r6
   babc0:	4639      	mov	r1, r7
   babc2:	f000 f8b1 	bl	bad28 <__adddf3>
   babc6:	e9cd 0100 	strd	r0, r1, [sp]
   babca:	4632      	mov	r2, r6
   babcc:	463b      	mov	r3, r7
   babce:	e9dd 0100 	ldrd	r0, r1, [sp]
   babd2:	f000 f8a7 	bl	bad24 <__aeabi_dsub>
   babd6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   babda:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   babde:	4602      	mov	r2, r0
   babe0:	ea41 0304 	orr.w	r3, r1, r4
   babe4:	ec43 2b10 	vmov	d0, r2, r3
   babe8:	b003      	add	sp, #12
   babea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   babec:	000fffff 	.word	0x000fffff
   babf0:	000c17b8 	.word	0x000c17b8
   babf4:	00000000 	.word	0x00000000

000babf8 <scalbn>:
   babf8:	b538      	push	{r3, r4, r5, lr}
   babfa:	ec53 2b10 	vmov	r2, r3, d0
   babfe:	f3c3 510a 	ubfx	r1, r3, #20, #11
   bac02:	4604      	mov	r4, r0
   bac04:	469c      	mov	ip, r3
   bac06:	bb89      	cbnz	r1, bac6c <scalbn+0x74>
   bac08:	ee10 1a10 	vmov	r1, s0
   bac0c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   bac10:	ea5c 0101 	orrs.w	r1, ip, r1
   bac14:	d029      	beq.n	bac6a <scalbn+0x72>
   bac16:	4619      	mov	r1, r3
   bac18:	2200      	movs	r2, #0
   bac1a:	4b3d      	ldr	r3, [pc, #244]	; (bad10 <scalbn+0x118>)
   bac1c:	4d3d      	ldr	r5, [pc, #244]	; (bad14 <scalbn+0x11c>)
   bac1e:	ee10 0a10 	vmov	r0, s0
   bac22:	f000 fa37 	bl	bb094 <__aeabi_dmul>
   bac26:	42ac      	cmp	r4, r5
   bac28:	4602      	mov	r2, r0
   bac2a:	460b      	mov	r3, r1
   bac2c:	db16      	blt.n	bac5c <scalbn+0x64>
   bac2e:	468c      	mov	ip, r1
   bac30:	f3c1 510a 	ubfx	r1, r1, #20, #11
   bac34:	3936      	subs	r1, #54	; 0x36
   bac36:	4421      	add	r1, r4
   bac38:	f240 70fe 	movw	r0, #2046	; 0x7fe
   bac3c:	4281      	cmp	r1, r0
   bac3e:	dc21      	bgt.n	bac84 <scalbn+0x8c>
   bac40:	2900      	cmp	r1, #0
   bac42:	dc47      	bgt.n	bacd4 <scalbn+0xdc>
   bac44:	f111 0f35 	cmn.w	r1, #53	; 0x35
   bac48:	da34      	bge.n	bacb4 <scalbn+0xbc>
   bac4a:	f24c 3150 	movw	r1, #50000	; 0xc350
   bac4e:	428c      	cmp	r4, r1
   bac50:	dc18      	bgt.n	bac84 <scalbn+0x8c>
   bac52:	2b00      	cmp	r3, #0
   bac54:	a126      	add	r1, pc, #152	; (adr r1, bacf0 <scalbn+0xf8>)
   bac56:	e9d1 0100 	ldrd	r0, r1, [r1]
   bac5a:	db44      	blt.n	bace6 <scalbn+0xee>
   bac5c:	a324      	add	r3, pc, #144	; (adr r3, bacf0 <scalbn+0xf8>)
   bac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bac62:	f000 fa17 	bl	bb094 <__aeabi_dmul>
   bac66:	ec41 0b10 	vmov	d0, r0, r1
   bac6a:	bd38      	pop	{r3, r4, r5, pc}
   bac6c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   bac70:	4281      	cmp	r1, r0
   bac72:	d1e0      	bne.n	bac36 <scalbn+0x3e>
   bac74:	ee10 0a10 	vmov	r0, s0
   bac78:	4619      	mov	r1, r3
   bac7a:	f000 f855 	bl	bad28 <__adddf3>
   bac7e:	ec41 0b10 	vmov	d0, r0, r1
   bac82:	bd38      	pop	{r3, r4, r5, pc}
   bac84:	2b00      	cmp	r3, #0
   bac86:	a11c      	add	r1, pc, #112	; (adr r1, bacf8 <scalbn+0x100>)
   bac88:	e9d1 0100 	ldrd	r0, r1, [r1]
   bac8c:	db07      	blt.n	bac9e <scalbn+0xa6>
   bac8e:	a31a      	add	r3, pc, #104	; (adr r3, bacf8 <scalbn+0x100>)
   bac90:	e9d3 2300 	ldrd	r2, r3, [r3]
   bac94:	f000 f9fe 	bl	bb094 <__aeabi_dmul>
   bac98:	ec41 0b10 	vmov	d0, r0, r1
   bac9c:	bd38      	pop	{r3, r4, r5, pc}
   bac9e:	a118      	add	r1, pc, #96	; (adr r1, bad00 <scalbn+0x108>)
   baca0:	e9d1 0100 	ldrd	r0, r1, [r1]
   baca4:	a314      	add	r3, pc, #80	; (adr r3, bacf8 <scalbn+0x100>)
   baca6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bacaa:	f000 f9f3 	bl	bb094 <__aeabi_dmul>
   bacae:	ec41 0b10 	vmov	d0, r0, r1
   bacb2:	e7f3      	b.n	bac9c <scalbn+0xa4>
   bacb4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bacb8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bacbc:	3136      	adds	r1, #54	; 0x36
   bacbe:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bacc2:	4610      	mov	r0, r2
   bacc4:	4619      	mov	r1, r3
   bacc6:	2200      	movs	r2, #0
   bacc8:	4b13      	ldr	r3, [pc, #76]	; (bad18 <scalbn+0x120>)
   bacca:	f000 f9e3 	bl	bb094 <__aeabi_dmul>
   bacce:	ec41 0b10 	vmov	d0, r0, r1
   bacd2:	bd38      	pop	{r3, r4, r5, pc}
   bacd4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bacd8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bacdc:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bace0:	ec43 2b10 	vmov	d0, r2, r3
   bace4:	bd38      	pop	{r3, r4, r5, pc}
   bace6:	a108      	add	r1, pc, #32	; (adr r1, bad08 <scalbn+0x110>)
   bace8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bacec:	e7b6      	b.n	bac5c <scalbn+0x64>
   bacee:	bf00      	nop
   bacf0:	c2f8f359 	.word	0xc2f8f359
   bacf4:	01a56e1f 	.word	0x01a56e1f
   bacf8:	8800759c 	.word	0x8800759c
   bacfc:	7e37e43c 	.word	0x7e37e43c
   bad00:	8800759c 	.word	0x8800759c
   bad04:	fe37e43c 	.word	0xfe37e43c
   bad08:	c2f8f359 	.word	0xc2f8f359
   bad0c:	81a56e1f 	.word	0x81a56e1f
   bad10:	43500000 	.word	0x43500000
   bad14:	ffff3cb0 	.word	0xffff3cb0
   bad18:	3c900000 	.word	0x3c900000

000bad1c <__aeabi_drsub>:
   bad1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bad20:	e002      	b.n	bad28 <__adddf3>
   bad22:	bf00      	nop

000bad24 <__aeabi_dsub>:
   bad24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bad28 <__adddf3>:
   bad28:	b530      	push	{r4, r5, lr}
   bad2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bad2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bad32:	ea94 0f05 	teq	r4, r5
   bad36:	bf08      	it	eq
   bad38:	ea90 0f02 	teqeq	r0, r2
   bad3c:	bf1f      	itttt	ne
   bad3e:	ea54 0c00 	orrsne.w	ip, r4, r0
   bad42:	ea55 0c02 	orrsne.w	ip, r5, r2
   bad46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bad4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bad4e:	f000 80e2 	beq.w	baf16 <__adddf3+0x1ee>
   bad52:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bad56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bad5a:	bfb8      	it	lt
   bad5c:	426d      	neglt	r5, r5
   bad5e:	dd0c      	ble.n	bad7a <__adddf3+0x52>
   bad60:	442c      	add	r4, r5
   bad62:	ea80 0202 	eor.w	r2, r0, r2
   bad66:	ea81 0303 	eor.w	r3, r1, r3
   bad6a:	ea82 0000 	eor.w	r0, r2, r0
   bad6e:	ea83 0101 	eor.w	r1, r3, r1
   bad72:	ea80 0202 	eor.w	r2, r0, r2
   bad76:	ea81 0303 	eor.w	r3, r1, r3
   bad7a:	2d36      	cmp	r5, #54	; 0x36
   bad7c:	bf88      	it	hi
   bad7e:	bd30      	pophi	{r4, r5, pc}
   bad80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bad84:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bad88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bad8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bad90:	d002      	beq.n	bad98 <__adddf3+0x70>
   bad92:	4240      	negs	r0, r0
   bad94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bad98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bad9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bada0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bada4:	d002      	beq.n	badac <__adddf3+0x84>
   bada6:	4252      	negs	r2, r2
   bada8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   badac:	ea94 0f05 	teq	r4, r5
   badb0:	f000 80a7 	beq.w	baf02 <__adddf3+0x1da>
   badb4:	f1a4 0401 	sub.w	r4, r4, #1
   badb8:	f1d5 0e20 	rsbs	lr, r5, #32
   badbc:	db0d      	blt.n	badda <__adddf3+0xb2>
   badbe:	fa02 fc0e 	lsl.w	ip, r2, lr
   badc2:	fa22 f205 	lsr.w	r2, r2, r5
   badc6:	1880      	adds	r0, r0, r2
   badc8:	f141 0100 	adc.w	r1, r1, #0
   badcc:	fa03 f20e 	lsl.w	r2, r3, lr
   badd0:	1880      	adds	r0, r0, r2
   badd2:	fa43 f305 	asr.w	r3, r3, r5
   badd6:	4159      	adcs	r1, r3
   badd8:	e00e      	b.n	badf8 <__adddf3+0xd0>
   badda:	f1a5 0520 	sub.w	r5, r5, #32
   badde:	f10e 0e20 	add.w	lr, lr, #32
   bade2:	2a01      	cmp	r2, #1
   bade4:	fa03 fc0e 	lsl.w	ip, r3, lr
   bade8:	bf28      	it	cs
   badea:	f04c 0c02 	orrcs.w	ip, ip, #2
   badee:	fa43 f305 	asr.w	r3, r3, r5
   badf2:	18c0      	adds	r0, r0, r3
   badf4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   badf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   badfc:	d507      	bpl.n	bae0e <__adddf3+0xe6>
   badfe:	f04f 0e00 	mov.w	lr, #0
   bae02:	f1dc 0c00 	rsbs	ip, ip, #0
   bae06:	eb7e 0000 	sbcs.w	r0, lr, r0
   bae0a:	eb6e 0101 	sbc.w	r1, lr, r1
   bae0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bae12:	d31b      	bcc.n	bae4c <__adddf3+0x124>
   bae14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bae18:	d30c      	bcc.n	bae34 <__adddf3+0x10c>
   bae1a:	0849      	lsrs	r1, r1, #1
   bae1c:	ea5f 0030 	movs.w	r0, r0, rrx
   bae20:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bae24:	f104 0401 	add.w	r4, r4, #1
   bae28:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bae2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bae30:	f080 809a 	bcs.w	baf68 <__adddf3+0x240>
   bae34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bae38:	bf08      	it	eq
   bae3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bae3e:	f150 0000 	adcs.w	r0, r0, #0
   bae42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bae46:	ea41 0105 	orr.w	r1, r1, r5
   bae4a:	bd30      	pop	{r4, r5, pc}
   bae4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bae50:	4140      	adcs	r0, r0
   bae52:	eb41 0101 	adc.w	r1, r1, r1
   bae56:	3c01      	subs	r4, #1
   bae58:	bf28      	it	cs
   bae5a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bae5e:	d2e9      	bcs.n	bae34 <__adddf3+0x10c>
   bae60:	f091 0f00 	teq	r1, #0
   bae64:	bf04      	itt	eq
   bae66:	4601      	moveq	r1, r0
   bae68:	2000      	moveq	r0, #0
   bae6a:	fab1 f381 	clz	r3, r1
   bae6e:	bf08      	it	eq
   bae70:	3320      	addeq	r3, #32
   bae72:	f1a3 030b 	sub.w	r3, r3, #11
   bae76:	f1b3 0220 	subs.w	r2, r3, #32
   bae7a:	da0c      	bge.n	bae96 <__adddf3+0x16e>
   bae7c:	320c      	adds	r2, #12
   bae7e:	dd08      	ble.n	bae92 <__adddf3+0x16a>
   bae80:	f102 0c14 	add.w	ip, r2, #20
   bae84:	f1c2 020c 	rsb	r2, r2, #12
   bae88:	fa01 f00c 	lsl.w	r0, r1, ip
   bae8c:	fa21 f102 	lsr.w	r1, r1, r2
   bae90:	e00c      	b.n	baeac <__adddf3+0x184>
   bae92:	f102 0214 	add.w	r2, r2, #20
   bae96:	bfd8      	it	le
   bae98:	f1c2 0c20 	rsble	ip, r2, #32
   bae9c:	fa01 f102 	lsl.w	r1, r1, r2
   baea0:	fa20 fc0c 	lsr.w	ip, r0, ip
   baea4:	bfdc      	itt	le
   baea6:	ea41 010c 	orrle.w	r1, r1, ip
   baeaa:	4090      	lslle	r0, r2
   baeac:	1ae4      	subs	r4, r4, r3
   baeae:	bfa2      	ittt	ge
   baeb0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   baeb4:	4329      	orrge	r1, r5
   baeb6:	bd30      	popge	{r4, r5, pc}
   baeb8:	ea6f 0404 	mvn.w	r4, r4
   baebc:	3c1f      	subs	r4, #31
   baebe:	da1c      	bge.n	baefa <__adddf3+0x1d2>
   baec0:	340c      	adds	r4, #12
   baec2:	dc0e      	bgt.n	baee2 <__adddf3+0x1ba>
   baec4:	f104 0414 	add.w	r4, r4, #20
   baec8:	f1c4 0220 	rsb	r2, r4, #32
   baecc:	fa20 f004 	lsr.w	r0, r0, r4
   baed0:	fa01 f302 	lsl.w	r3, r1, r2
   baed4:	ea40 0003 	orr.w	r0, r0, r3
   baed8:	fa21 f304 	lsr.w	r3, r1, r4
   baedc:	ea45 0103 	orr.w	r1, r5, r3
   baee0:	bd30      	pop	{r4, r5, pc}
   baee2:	f1c4 040c 	rsb	r4, r4, #12
   baee6:	f1c4 0220 	rsb	r2, r4, #32
   baeea:	fa20 f002 	lsr.w	r0, r0, r2
   baeee:	fa01 f304 	lsl.w	r3, r1, r4
   baef2:	ea40 0003 	orr.w	r0, r0, r3
   baef6:	4629      	mov	r1, r5
   baef8:	bd30      	pop	{r4, r5, pc}
   baefa:	fa21 f004 	lsr.w	r0, r1, r4
   baefe:	4629      	mov	r1, r5
   baf00:	bd30      	pop	{r4, r5, pc}
   baf02:	f094 0f00 	teq	r4, #0
   baf06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   baf0a:	bf06      	itte	eq
   baf0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   baf10:	3401      	addeq	r4, #1
   baf12:	3d01      	subne	r5, #1
   baf14:	e74e      	b.n	badb4 <__adddf3+0x8c>
   baf16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   baf1a:	bf18      	it	ne
   baf1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   baf20:	d029      	beq.n	baf76 <__adddf3+0x24e>
   baf22:	ea94 0f05 	teq	r4, r5
   baf26:	bf08      	it	eq
   baf28:	ea90 0f02 	teqeq	r0, r2
   baf2c:	d005      	beq.n	baf3a <__adddf3+0x212>
   baf2e:	ea54 0c00 	orrs.w	ip, r4, r0
   baf32:	bf04      	itt	eq
   baf34:	4619      	moveq	r1, r3
   baf36:	4610      	moveq	r0, r2
   baf38:	bd30      	pop	{r4, r5, pc}
   baf3a:	ea91 0f03 	teq	r1, r3
   baf3e:	bf1e      	ittt	ne
   baf40:	2100      	movne	r1, #0
   baf42:	2000      	movne	r0, #0
   baf44:	bd30      	popne	{r4, r5, pc}
   baf46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   baf4a:	d105      	bne.n	baf58 <__adddf3+0x230>
   baf4c:	0040      	lsls	r0, r0, #1
   baf4e:	4149      	adcs	r1, r1
   baf50:	bf28      	it	cs
   baf52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   baf56:	bd30      	pop	{r4, r5, pc}
   baf58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   baf5c:	bf3c      	itt	cc
   baf5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   baf62:	bd30      	popcc	{r4, r5, pc}
   baf64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baf68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   baf6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   baf70:	f04f 0000 	mov.w	r0, #0
   baf74:	bd30      	pop	{r4, r5, pc}
   baf76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   baf7a:	bf1a      	itte	ne
   baf7c:	4619      	movne	r1, r3
   baf7e:	4610      	movne	r0, r2
   baf80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   baf84:	bf1c      	itt	ne
   baf86:	460b      	movne	r3, r1
   baf88:	4602      	movne	r2, r0
   baf8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   baf8e:	bf06      	itte	eq
   baf90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   baf94:	ea91 0f03 	teqeq	r1, r3
   baf98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   baf9c:	bd30      	pop	{r4, r5, pc}
   baf9e:	bf00      	nop

000bafa0 <__aeabi_ui2d>:
   bafa0:	f090 0f00 	teq	r0, #0
   bafa4:	bf04      	itt	eq
   bafa6:	2100      	moveq	r1, #0
   bafa8:	4770      	bxeq	lr
   bafaa:	b530      	push	{r4, r5, lr}
   bafac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bafb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bafb4:	f04f 0500 	mov.w	r5, #0
   bafb8:	f04f 0100 	mov.w	r1, #0
   bafbc:	e750      	b.n	bae60 <__adddf3+0x138>
   bafbe:	bf00      	nop

000bafc0 <__aeabi_i2d>:
   bafc0:	f090 0f00 	teq	r0, #0
   bafc4:	bf04      	itt	eq
   bafc6:	2100      	moveq	r1, #0
   bafc8:	4770      	bxeq	lr
   bafca:	b530      	push	{r4, r5, lr}
   bafcc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bafd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bafd4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bafd8:	bf48      	it	mi
   bafda:	4240      	negmi	r0, r0
   bafdc:	f04f 0100 	mov.w	r1, #0
   bafe0:	e73e      	b.n	bae60 <__adddf3+0x138>
   bafe2:	bf00      	nop

000bafe4 <__aeabi_f2d>:
   bafe4:	0042      	lsls	r2, r0, #1
   bafe6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bafea:	ea4f 0131 	mov.w	r1, r1, rrx
   bafee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   baff2:	bf1f      	itttt	ne
   baff4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   baff8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   baffc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb000:	4770      	bxne	lr
   bb002:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb006:	bf08      	it	eq
   bb008:	4770      	bxeq	lr
   bb00a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb00e:	bf04      	itt	eq
   bb010:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb014:	4770      	bxeq	lr
   bb016:	b530      	push	{r4, r5, lr}
   bb018:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb01c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb020:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb024:	e71c      	b.n	bae60 <__adddf3+0x138>
   bb026:	bf00      	nop

000bb028 <__aeabi_ul2d>:
   bb028:	ea50 0201 	orrs.w	r2, r0, r1
   bb02c:	bf08      	it	eq
   bb02e:	4770      	bxeq	lr
   bb030:	b530      	push	{r4, r5, lr}
   bb032:	f04f 0500 	mov.w	r5, #0
   bb036:	e00a      	b.n	bb04e <__aeabi_l2d+0x16>

000bb038 <__aeabi_l2d>:
   bb038:	ea50 0201 	orrs.w	r2, r0, r1
   bb03c:	bf08      	it	eq
   bb03e:	4770      	bxeq	lr
   bb040:	b530      	push	{r4, r5, lr}
   bb042:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb046:	d502      	bpl.n	bb04e <__aeabi_l2d+0x16>
   bb048:	4240      	negs	r0, r0
   bb04a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb04e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb052:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb056:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb05a:	f43f aed8 	beq.w	bae0e <__adddf3+0xe6>
   bb05e:	f04f 0203 	mov.w	r2, #3
   bb062:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb066:	bf18      	it	ne
   bb068:	3203      	addne	r2, #3
   bb06a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb06e:	bf18      	it	ne
   bb070:	3203      	addne	r2, #3
   bb072:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb076:	f1c2 0320 	rsb	r3, r2, #32
   bb07a:	fa00 fc03 	lsl.w	ip, r0, r3
   bb07e:	fa20 f002 	lsr.w	r0, r0, r2
   bb082:	fa01 fe03 	lsl.w	lr, r1, r3
   bb086:	ea40 000e 	orr.w	r0, r0, lr
   bb08a:	fa21 f102 	lsr.w	r1, r1, r2
   bb08e:	4414      	add	r4, r2
   bb090:	e6bd      	b.n	bae0e <__adddf3+0xe6>
   bb092:	bf00      	nop

000bb094 <__aeabi_dmul>:
   bb094:	b570      	push	{r4, r5, r6, lr}
   bb096:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb09a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb09e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb0a2:	bf1d      	ittte	ne
   bb0a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb0a8:	ea94 0f0c 	teqne	r4, ip
   bb0ac:	ea95 0f0c 	teqne	r5, ip
   bb0b0:	f000 f8de 	bleq	bb270 <__aeabi_dmul+0x1dc>
   bb0b4:	442c      	add	r4, r5
   bb0b6:	ea81 0603 	eor.w	r6, r1, r3
   bb0ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb0be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb0c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb0c6:	bf18      	it	ne
   bb0c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb0cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb0d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb0d4:	d038      	beq.n	bb148 <__aeabi_dmul+0xb4>
   bb0d6:	fba0 ce02 	umull	ip, lr, r0, r2
   bb0da:	f04f 0500 	mov.w	r5, #0
   bb0de:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb0e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb0e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb0ea:	f04f 0600 	mov.w	r6, #0
   bb0ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb0f2:	f09c 0f00 	teq	ip, #0
   bb0f6:	bf18      	it	ne
   bb0f8:	f04e 0e01 	orrne.w	lr, lr, #1
   bb0fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb100:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb104:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb108:	d204      	bcs.n	bb114 <__aeabi_dmul+0x80>
   bb10a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb10e:	416d      	adcs	r5, r5
   bb110:	eb46 0606 	adc.w	r6, r6, r6
   bb114:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb118:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb11c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb120:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb124:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb128:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb12c:	bf88      	it	hi
   bb12e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb132:	d81e      	bhi.n	bb172 <__aeabi_dmul+0xde>
   bb134:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb138:	bf08      	it	eq
   bb13a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb13e:	f150 0000 	adcs.w	r0, r0, #0
   bb142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb146:	bd70      	pop	{r4, r5, r6, pc}
   bb148:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb14c:	ea46 0101 	orr.w	r1, r6, r1
   bb150:	ea40 0002 	orr.w	r0, r0, r2
   bb154:	ea81 0103 	eor.w	r1, r1, r3
   bb158:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb15c:	bfc2      	ittt	gt
   bb15e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb162:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb166:	bd70      	popgt	{r4, r5, r6, pc}
   bb168:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb16c:	f04f 0e00 	mov.w	lr, #0
   bb170:	3c01      	subs	r4, #1
   bb172:	f300 80ab 	bgt.w	bb2cc <__aeabi_dmul+0x238>
   bb176:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb17a:	bfde      	ittt	le
   bb17c:	2000      	movle	r0, #0
   bb17e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb182:	bd70      	pople	{r4, r5, r6, pc}
   bb184:	f1c4 0400 	rsb	r4, r4, #0
   bb188:	3c20      	subs	r4, #32
   bb18a:	da35      	bge.n	bb1f8 <__aeabi_dmul+0x164>
   bb18c:	340c      	adds	r4, #12
   bb18e:	dc1b      	bgt.n	bb1c8 <__aeabi_dmul+0x134>
   bb190:	f104 0414 	add.w	r4, r4, #20
   bb194:	f1c4 0520 	rsb	r5, r4, #32
   bb198:	fa00 f305 	lsl.w	r3, r0, r5
   bb19c:	fa20 f004 	lsr.w	r0, r0, r4
   bb1a0:	fa01 f205 	lsl.w	r2, r1, r5
   bb1a4:	ea40 0002 	orr.w	r0, r0, r2
   bb1a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb1ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb1b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb1b4:	fa21 f604 	lsr.w	r6, r1, r4
   bb1b8:	eb42 0106 	adc.w	r1, r2, r6
   bb1bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb1c0:	bf08      	it	eq
   bb1c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb1c6:	bd70      	pop	{r4, r5, r6, pc}
   bb1c8:	f1c4 040c 	rsb	r4, r4, #12
   bb1cc:	f1c4 0520 	rsb	r5, r4, #32
   bb1d0:	fa00 f304 	lsl.w	r3, r0, r4
   bb1d4:	fa20 f005 	lsr.w	r0, r0, r5
   bb1d8:	fa01 f204 	lsl.w	r2, r1, r4
   bb1dc:	ea40 0002 	orr.w	r0, r0, r2
   bb1e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb1e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb1e8:	f141 0100 	adc.w	r1, r1, #0
   bb1ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb1f0:	bf08      	it	eq
   bb1f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb1f6:	bd70      	pop	{r4, r5, r6, pc}
   bb1f8:	f1c4 0520 	rsb	r5, r4, #32
   bb1fc:	fa00 f205 	lsl.w	r2, r0, r5
   bb200:	ea4e 0e02 	orr.w	lr, lr, r2
   bb204:	fa20 f304 	lsr.w	r3, r0, r4
   bb208:	fa01 f205 	lsl.w	r2, r1, r5
   bb20c:	ea43 0302 	orr.w	r3, r3, r2
   bb210:	fa21 f004 	lsr.w	r0, r1, r4
   bb214:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb218:	fa21 f204 	lsr.w	r2, r1, r4
   bb21c:	ea20 0002 	bic.w	r0, r0, r2
   bb220:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb224:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb228:	bf08      	it	eq
   bb22a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb22e:	bd70      	pop	{r4, r5, r6, pc}
   bb230:	f094 0f00 	teq	r4, #0
   bb234:	d10f      	bne.n	bb256 <__aeabi_dmul+0x1c2>
   bb236:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb23a:	0040      	lsls	r0, r0, #1
   bb23c:	eb41 0101 	adc.w	r1, r1, r1
   bb240:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb244:	bf08      	it	eq
   bb246:	3c01      	subeq	r4, #1
   bb248:	d0f7      	beq.n	bb23a <__aeabi_dmul+0x1a6>
   bb24a:	ea41 0106 	orr.w	r1, r1, r6
   bb24e:	f095 0f00 	teq	r5, #0
   bb252:	bf18      	it	ne
   bb254:	4770      	bxne	lr
   bb256:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb25a:	0052      	lsls	r2, r2, #1
   bb25c:	eb43 0303 	adc.w	r3, r3, r3
   bb260:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb264:	bf08      	it	eq
   bb266:	3d01      	subeq	r5, #1
   bb268:	d0f7      	beq.n	bb25a <__aeabi_dmul+0x1c6>
   bb26a:	ea43 0306 	orr.w	r3, r3, r6
   bb26e:	4770      	bx	lr
   bb270:	ea94 0f0c 	teq	r4, ip
   bb274:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb278:	bf18      	it	ne
   bb27a:	ea95 0f0c 	teqne	r5, ip
   bb27e:	d00c      	beq.n	bb29a <__aeabi_dmul+0x206>
   bb280:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb284:	bf18      	it	ne
   bb286:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb28a:	d1d1      	bne.n	bb230 <__aeabi_dmul+0x19c>
   bb28c:	ea81 0103 	eor.w	r1, r1, r3
   bb290:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb294:	f04f 0000 	mov.w	r0, #0
   bb298:	bd70      	pop	{r4, r5, r6, pc}
   bb29a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb29e:	bf06      	itte	eq
   bb2a0:	4610      	moveq	r0, r2
   bb2a2:	4619      	moveq	r1, r3
   bb2a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb2a8:	d019      	beq.n	bb2de <__aeabi_dmul+0x24a>
   bb2aa:	ea94 0f0c 	teq	r4, ip
   bb2ae:	d102      	bne.n	bb2b6 <__aeabi_dmul+0x222>
   bb2b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb2b4:	d113      	bne.n	bb2de <__aeabi_dmul+0x24a>
   bb2b6:	ea95 0f0c 	teq	r5, ip
   bb2ba:	d105      	bne.n	bb2c8 <__aeabi_dmul+0x234>
   bb2bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb2c0:	bf1c      	itt	ne
   bb2c2:	4610      	movne	r0, r2
   bb2c4:	4619      	movne	r1, r3
   bb2c6:	d10a      	bne.n	bb2de <__aeabi_dmul+0x24a>
   bb2c8:	ea81 0103 	eor.w	r1, r1, r3
   bb2cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb2d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb2d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb2d8:	f04f 0000 	mov.w	r0, #0
   bb2dc:	bd70      	pop	{r4, r5, r6, pc}
   bb2de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb2e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb2e6:	bd70      	pop	{r4, r5, r6, pc}

000bb2e8 <__aeabi_ddiv>:
   bb2e8:	b570      	push	{r4, r5, r6, lr}
   bb2ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb2ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb2f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb2f6:	bf1d      	ittte	ne
   bb2f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb2fc:	ea94 0f0c 	teqne	r4, ip
   bb300:	ea95 0f0c 	teqne	r5, ip
   bb304:	f000 f8a7 	bleq	bb456 <__aeabi_ddiv+0x16e>
   bb308:	eba4 0405 	sub.w	r4, r4, r5
   bb30c:	ea81 0e03 	eor.w	lr, r1, r3
   bb310:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb314:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb318:	f000 8088 	beq.w	bb42c <__aeabi_ddiv+0x144>
   bb31c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb320:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb324:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb328:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb32c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb330:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb334:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb338:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb33c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb340:	429d      	cmp	r5, r3
   bb342:	bf08      	it	eq
   bb344:	4296      	cmpeq	r6, r2
   bb346:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb34a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb34e:	d202      	bcs.n	bb356 <__aeabi_ddiv+0x6e>
   bb350:	085b      	lsrs	r3, r3, #1
   bb352:	ea4f 0232 	mov.w	r2, r2, rrx
   bb356:	1ab6      	subs	r6, r6, r2
   bb358:	eb65 0503 	sbc.w	r5, r5, r3
   bb35c:	085b      	lsrs	r3, r3, #1
   bb35e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb362:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb366:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb36a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb36e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb372:	bf22      	ittt	cs
   bb374:	1ab6      	subcs	r6, r6, r2
   bb376:	4675      	movcs	r5, lr
   bb378:	ea40 000c 	orrcs.w	r0, r0, ip
   bb37c:	085b      	lsrs	r3, r3, #1
   bb37e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb382:	ebb6 0e02 	subs.w	lr, r6, r2
   bb386:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb38a:	bf22      	ittt	cs
   bb38c:	1ab6      	subcs	r6, r6, r2
   bb38e:	4675      	movcs	r5, lr
   bb390:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb394:	085b      	lsrs	r3, r3, #1
   bb396:	ea4f 0232 	mov.w	r2, r2, rrx
   bb39a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb39e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb3a2:	bf22      	ittt	cs
   bb3a4:	1ab6      	subcs	r6, r6, r2
   bb3a6:	4675      	movcs	r5, lr
   bb3a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb3ac:	085b      	lsrs	r3, r3, #1
   bb3ae:	ea4f 0232 	mov.w	r2, r2, rrx
   bb3b2:	ebb6 0e02 	subs.w	lr, r6, r2
   bb3b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb3ba:	bf22      	ittt	cs
   bb3bc:	1ab6      	subcs	r6, r6, r2
   bb3be:	4675      	movcs	r5, lr
   bb3c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb3c4:	ea55 0e06 	orrs.w	lr, r5, r6
   bb3c8:	d018      	beq.n	bb3fc <__aeabi_ddiv+0x114>
   bb3ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb3ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb3d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb3d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb3da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb3de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb3e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb3e6:	d1c0      	bne.n	bb36a <__aeabi_ddiv+0x82>
   bb3e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb3ec:	d10b      	bne.n	bb406 <__aeabi_ddiv+0x11e>
   bb3ee:	ea41 0100 	orr.w	r1, r1, r0
   bb3f2:	f04f 0000 	mov.w	r0, #0
   bb3f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb3fa:	e7b6      	b.n	bb36a <__aeabi_ddiv+0x82>
   bb3fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb400:	bf04      	itt	eq
   bb402:	4301      	orreq	r1, r0
   bb404:	2000      	moveq	r0, #0
   bb406:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb40a:	bf88      	it	hi
   bb40c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb410:	f63f aeaf 	bhi.w	bb172 <__aeabi_dmul+0xde>
   bb414:	ebb5 0c03 	subs.w	ip, r5, r3
   bb418:	bf04      	itt	eq
   bb41a:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb41e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb422:	f150 0000 	adcs.w	r0, r0, #0
   bb426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb42a:	bd70      	pop	{r4, r5, r6, pc}
   bb42c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb430:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb434:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb438:	bfc2      	ittt	gt
   bb43a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb43e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb442:	bd70      	popgt	{r4, r5, r6, pc}
   bb444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb448:	f04f 0e00 	mov.w	lr, #0
   bb44c:	3c01      	subs	r4, #1
   bb44e:	e690      	b.n	bb172 <__aeabi_dmul+0xde>
   bb450:	ea45 0e06 	orr.w	lr, r5, r6
   bb454:	e68d      	b.n	bb172 <__aeabi_dmul+0xde>
   bb456:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb45a:	ea94 0f0c 	teq	r4, ip
   bb45e:	bf08      	it	eq
   bb460:	ea95 0f0c 	teqeq	r5, ip
   bb464:	f43f af3b 	beq.w	bb2de <__aeabi_dmul+0x24a>
   bb468:	ea94 0f0c 	teq	r4, ip
   bb46c:	d10a      	bne.n	bb484 <__aeabi_ddiv+0x19c>
   bb46e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb472:	f47f af34 	bne.w	bb2de <__aeabi_dmul+0x24a>
   bb476:	ea95 0f0c 	teq	r5, ip
   bb47a:	f47f af25 	bne.w	bb2c8 <__aeabi_dmul+0x234>
   bb47e:	4610      	mov	r0, r2
   bb480:	4619      	mov	r1, r3
   bb482:	e72c      	b.n	bb2de <__aeabi_dmul+0x24a>
   bb484:	ea95 0f0c 	teq	r5, ip
   bb488:	d106      	bne.n	bb498 <__aeabi_ddiv+0x1b0>
   bb48a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb48e:	f43f aefd 	beq.w	bb28c <__aeabi_dmul+0x1f8>
   bb492:	4610      	mov	r0, r2
   bb494:	4619      	mov	r1, r3
   bb496:	e722      	b.n	bb2de <__aeabi_dmul+0x24a>
   bb498:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb49c:	bf18      	it	ne
   bb49e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb4a2:	f47f aec5 	bne.w	bb230 <__aeabi_dmul+0x19c>
   bb4a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb4aa:	f47f af0d 	bne.w	bb2c8 <__aeabi_dmul+0x234>
   bb4ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb4b2:	f47f aeeb 	bne.w	bb28c <__aeabi_dmul+0x1f8>
   bb4b6:	e712      	b.n	bb2de <__aeabi_dmul+0x24a>

000bb4b8 <__gedf2>:
   bb4b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb4bc:	e006      	b.n	bb4cc <__cmpdf2+0x4>
   bb4be:	bf00      	nop

000bb4c0 <__ledf2>:
   bb4c0:	f04f 0c01 	mov.w	ip, #1
   bb4c4:	e002      	b.n	bb4cc <__cmpdf2+0x4>
   bb4c6:	bf00      	nop

000bb4c8 <__cmpdf2>:
   bb4c8:	f04f 0c01 	mov.w	ip, #1
   bb4cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb4d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb4d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb4d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb4dc:	bf18      	it	ne
   bb4de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb4e2:	d01b      	beq.n	bb51c <__cmpdf2+0x54>
   bb4e4:	b001      	add	sp, #4
   bb4e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb4ea:	bf0c      	ite	eq
   bb4ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb4f0:	ea91 0f03 	teqne	r1, r3
   bb4f4:	bf02      	ittt	eq
   bb4f6:	ea90 0f02 	teqeq	r0, r2
   bb4fa:	2000      	moveq	r0, #0
   bb4fc:	4770      	bxeq	lr
   bb4fe:	f110 0f00 	cmn.w	r0, #0
   bb502:	ea91 0f03 	teq	r1, r3
   bb506:	bf58      	it	pl
   bb508:	4299      	cmppl	r1, r3
   bb50a:	bf08      	it	eq
   bb50c:	4290      	cmpeq	r0, r2
   bb50e:	bf2c      	ite	cs
   bb510:	17d8      	asrcs	r0, r3, #31
   bb512:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb516:	f040 0001 	orr.w	r0, r0, #1
   bb51a:	4770      	bx	lr
   bb51c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb520:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb524:	d102      	bne.n	bb52c <__cmpdf2+0x64>
   bb526:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb52a:	d107      	bne.n	bb53c <__cmpdf2+0x74>
   bb52c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb534:	d1d6      	bne.n	bb4e4 <__cmpdf2+0x1c>
   bb536:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb53a:	d0d3      	beq.n	bb4e4 <__cmpdf2+0x1c>
   bb53c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb540:	4770      	bx	lr
   bb542:	bf00      	nop

000bb544 <__aeabi_cdrcmple>:
   bb544:	4684      	mov	ip, r0
   bb546:	4610      	mov	r0, r2
   bb548:	4662      	mov	r2, ip
   bb54a:	468c      	mov	ip, r1
   bb54c:	4619      	mov	r1, r3
   bb54e:	4663      	mov	r3, ip
   bb550:	e000      	b.n	bb554 <__aeabi_cdcmpeq>
   bb552:	bf00      	nop

000bb554 <__aeabi_cdcmpeq>:
   bb554:	b501      	push	{r0, lr}
   bb556:	f7ff ffb7 	bl	bb4c8 <__cmpdf2>
   bb55a:	2800      	cmp	r0, #0
   bb55c:	bf48      	it	mi
   bb55e:	f110 0f00 	cmnmi.w	r0, #0
   bb562:	bd01      	pop	{r0, pc}

000bb564 <__aeabi_dcmpeq>:
   bb564:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb568:	f7ff fff4 	bl	bb554 <__aeabi_cdcmpeq>
   bb56c:	bf0c      	ite	eq
   bb56e:	2001      	moveq	r0, #1
   bb570:	2000      	movne	r0, #0
   bb572:	f85d fb08 	ldr.w	pc, [sp], #8
   bb576:	bf00      	nop

000bb578 <__aeabi_dcmplt>:
   bb578:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb57c:	f7ff ffea 	bl	bb554 <__aeabi_cdcmpeq>
   bb580:	bf34      	ite	cc
   bb582:	2001      	movcc	r0, #1
   bb584:	2000      	movcs	r0, #0
   bb586:	f85d fb08 	ldr.w	pc, [sp], #8
   bb58a:	bf00      	nop

000bb58c <__aeabi_dcmple>:
   bb58c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb590:	f7ff ffe0 	bl	bb554 <__aeabi_cdcmpeq>
   bb594:	bf94      	ite	ls
   bb596:	2001      	movls	r0, #1
   bb598:	2000      	movhi	r0, #0
   bb59a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb59e:	bf00      	nop

000bb5a0 <__aeabi_dcmpge>:
   bb5a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb5a4:	f7ff ffce 	bl	bb544 <__aeabi_cdrcmple>
   bb5a8:	bf94      	ite	ls
   bb5aa:	2001      	movls	r0, #1
   bb5ac:	2000      	movhi	r0, #0
   bb5ae:	f85d fb08 	ldr.w	pc, [sp], #8
   bb5b2:	bf00      	nop

000bb5b4 <__aeabi_dcmpgt>:
   bb5b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb5b8:	f7ff ffc4 	bl	bb544 <__aeabi_cdrcmple>
   bb5bc:	bf34      	ite	cc
   bb5be:	2001      	movcc	r0, #1
   bb5c0:	2000      	movcs	r0, #0
   bb5c2:	f85d fb08 	ldr.w	pc, [sp], #8
   bb5c6:	bf00      	nop

000bb5c8 <__aeabi_dcmpun>:
   bb5c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb5cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb5d0:	d102      	bne.n	bb5d8 <__aeabi_dcmpun+0x10>
   bb5d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb5d6:	d10a      	bne.n	bb5ee <__aeabi_dcmpun+0x26>
   bb5d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb5dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb5e0:	d102      	bne.n	bb5e8 <__aeabi_dcmpun+0x20>
   bb5e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb5e6:	d102      	bne.n	bb5ee <__aeabi_dcmpun+0x26>
   bb5e8:	f04f 0000 	mov.w	r0, #0
   bb5ec:	4770      	bx	lr
   bb5ee:	f04f 0001 	mov.w	r0, #1
   bb5f2:	4770      	bx	lr

000bb5f4 <__aeabi_d2f>:
   bb5f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb5f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb5fc:	bf24      	itt	cs
   bb5fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb602:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb606:	d90d      	bls.n	bb624 <__aeabi_d2f+0x30>
   bb608:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb60c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb610:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb614:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb618:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb61c:	bf08      	it	eq
   bb61e:	f020 0001 	biceq.w	r0, r0, #1
   bb622:	4770      	bx	lr
   bb624:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb628:	d121      	bne.n	bb66e <__aeabi_d2f+0x7a>
   bb62a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb62e:	bfbc      	itt	lt
   bb630:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb634:	4770      	bxlt	lr
   bb636:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb63a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb63e:	f1c2 0218 	rsb	r2, r2, #24
   bb642:	f1c2 0c20 	rsb	ip, r2, #32
   bb646:	fa10 f30c 	lsls.w	r3, r0, ip
   bb64a:	fa20 f002 	lsr.w	r0, r0, r2
   bb64e:	bf18      	it	ne
   bb650:	f040 0001 	orrne.w	r0, r0, #1
   bb654:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb658:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb65c:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb660:	ea40 000c 	orr.w	r0, r0, ip
   bb664:	fa23 f302 	lsr.w	r3, r3, r2
   bb668:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb66c:	e7cc      	b.n	bb608 <__aeabi_d2f+0x14>
   bb66e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb672:	d107      	bne.n	bb684 <__aeabi_d2f+0x90>
   bb674:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb678:	bf1e      	ittt	ne
   bb67a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb67e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb682:	4770      	bxne	lr
   bb684:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb688:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb68c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb690:	4770      	bx	lr
   bb692:	bf00      	nop

000bb694 <atexit>:
   bb694:	2300      	movs	r3, #0
   bb696:	4601      	mov	r1, r0
   bb698:	461a      	mov	r2, r3
   bb69a:	4618      	mov	r0, r3
   bb69c:	f000 b89c 	b.w	bb7d8 <__register_exitproc>

000bb6a0 <memcpy>:
   bb6a0:	440a      	add	r2, r1
   bb6a2:	4291      	cmp	r1, r2
   bb6a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb6a8:	d100      	bne.n	bb6ac <memcpy+0xc>
   bb6aa:	4770      	bx	lr
   bb6ac:	b510      	push	{r4, lr}
   bb6ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb6b2:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb6b6:	4291      	cmp	r1, r2
   bb6b8:	d1f9      	bne.n	bb6ae <memcpy+0xe>
   bb6ba:	bd10      	pop	{r4, pc}

000bb6bc <memset>:
   bb6bc:	4402      	add	r2, r0
   bb6be:	4603      	mov	r3, r0
   bb6c0:	4293      	cmp	r3, r2
   bb6c2:	d100      	bne.n	bb6c6 <memset+0xa>
   bb6c4:	4770      	bx	lr
   bb6c6:	f803 1b01 	strb.w	r1, [r3], #1
   bb6ca:	e7f9      	b.n	bb6c0 <memset+0x4>

000bb6cc <srand>:
   bb6cc:	b538      	push	{r3, r4, r5, lr}
   bb6ce:	4b10      	ldr	r3, [pc, #64]	; (bb710 <srand+0x44>)
   bb6d0:	681d      	ldr	r5, [r3, #0]
   bb6d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb6d4:	4604      	mov	r4, r0
   bb6d6:	b9b3      	cbnz	r3, bb706 <srand+0x3a>
   bb6d8:	2018      	movs	r0, #24
   bb6da:	f7fc febb 	bl	b8454 <malloc>
   bb6de:	4602      	mov	r2, r0
   bb6e0:	63a8      	str	r0, [r5, #56]	; 0x38
   bb6e2:	b920      	cbnz	r0, bb6ee <srand+0x22>
   bb6e4:	4b0b      	ldr	r3, [pc, #44]	; (bb714 <srand+0x48>)
   bb6e6:	480c      	ldr	r0, [pc, #48]	; (bb718 <srand+0x4c>)
   bb6e8:	2142      	movs	r1, #66	; 0x42
   bb6ea:	f7fc fedb 	bl	b84a4 <__assert_func>
   bb6ee:	490b      	ldr	r1, [pc, #44]	; (bb71c <srand+0x50>)
   bb6f0:	4b0b      	ldr	r3, [pc, #44]	; (bb720 <srand+0x54>)
   bb6f2:	e9c0 1300 	strd	r1, r3, [r0]
   bb6f6:	4b0b      	ldr	r3, [pc, #44]	; (bb724 <srand+0x58>)
   bb6f8:	6083      	str	r3, [r0, #8]
   bb6fa:	230b      	movs	r3, #11
   bb6fc:	8183      	strh	r3, [r0, #12]
   bb6fe:	2100      	movs	r1, #0
   bb700:	2001      	movs	r0, #1
   bb702:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb706:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb708:	2200      	movs	r2, #0
   bb70a:	611c      	str	r4, [r3, #16]
   bb70c:	615a      	str	r2, [r3, #20]
   bb70e:	bd38      	pop	{r3, r4, r5, pc}
   bb710:	2003e4ec 	.word	0x2003e4ec
   bb714:	000c17c8 	.word	0x000c17c8
   bb718:	000c17df 	.word	0x000c17df
   bb71c:	abcd330e 	.word	0xabcd330e
   bb720:	e66d1234 	.word	0xe66d1234
   bb724:	0005deec 	.word	0x0005deec

000bb728 <rand>:
   bb728:	4b16      	ldr	r3, [pc, #88]	; (bb784 <rand+0x5c>)
   bb72a:	b510      	push	{r4, lr}
   bb72c:	681c      	ldr	r4, [r3, #0]
   bb72e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bb730:	b9b3      	cbnz	r3, bb760 <rand+0x38>
   bb732:	2018      	movs	r0, #24
   bb734:	f7fc fe8e 	bl	b8454 <malloc>
   bb738:	63a0      	str	r0, [r4, #56]	; 0x38
   bb73a:	b928      	cbnz	r0, bb748 <rand+0x20>
   bb73c:	4602      	mov	r2, r0
   bb73e:	4b12      	ldr	r3, [pc, #72]	; (bb788 <rand+0x60>)
   bb740:	4812      	ldr	r0, [pc, #72]	; (bb78c <rand+0x64>)
   bb742:	214e      	movs	r1, #78	; 0x4e
   bb744:	f7fc feae 	bl	b84a4 <__assert_func>
   bb748:	4a11      	ldr	r2, [pc, #68]	; (bb790 <rand+0x68>)
   bb74a:	4b12      	ldr	r3, [pc, #72]	; (bb794 <rand+0x6c>)
   bb74c:	e9c0 2300 	strd	r2, r3, [r0]
   bb750:	4b11      	ldr	r3, [pc, #68]	; (bb798 <rand+0x70>)
   bb752:	6083      	str	r3, [r0, #8]
   bb754:	230b      	movs	r3, #11
   bb756:	8183      	strh	r3, [r0, #12]
   bb758:	2201      	movs	r2, #1
   bb75a:	2300      	movs	r3, #0
   bb75c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bb760:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bb762:	4a0e      	ldr	r2, [pc, #56]	; (bb79c <rand+0x74>)
   bb764:	6920      	ldr	r0, [r4, #16]
   bb766:	6963      	ldr	r3, [r4, #20]
   bb768:	490d      	ldr	r1, [pc, #52]	; (bb7a0 <rand+0x78>)
   bb76a:	4342      	muls	r2, r0
   bb76c:	fb01 2203 	mla	r2, r1, r3, r2
   bb770:	fba0 0101 	umull	r0, r1, r0, r1
   bb774:	1c43      	adds	r3, r0, #1
   bb776:	eb42 0001 	adc.w	r0, r2, r1
   bb77a:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bb77e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bb782:	bd10      	pop	{r4, pc}
   bb784:	2003e4ec 	.word	0x2003e4ec
   bb788:	000c17c8 	.word	0x000c17c8
   bb78c:	000c17df 	.word	0x000c17df
   bb790:	abcd330e 	.word	0xabcd330e
   bb794:	e66d1234 	.word	0xe66d1234
   bb798:	0005deec 	.word	0x0005deec
   bb79c:	5851f42d 	.word	0x5851f42d
   bb7a0:	4c957f2d 	.word	0x4c957f2d

000bb7a4 <strcmp>:
   bb7a4:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb7a8:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb7ac:	2a01      	cmp	r2, #1
   bb7ae:	bf28      	it	cs
   bb7b0:	429a      	cmpcs	r2, r3
   bb7b2:	d0f7      	beq.n	bb7a4 <strcmp>
   bb7b4:	1ad0      	subs	r0, r2, r3
   bb7b6:	4770      	bx	lr

000bb7b8 <strcpy>:
   bb7b8:	4603      	mov	r3, r0
   bb7ba:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb7be:	f803 2b01 	strb.w	r2, [r3], #1
   bb7c2:	2a00      	cmp	r2, #0
   bb7c4:	d1f9      	bne.n	bb7ba <strcpy+0x2>
   bb7c6:	4770      	bx	lr

000bb7c8 <strlen>:
   bb7c8:	4603      	mov	r3, r0
   bb7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb7ce:	2a00      	cmp	r2, #0
   bb7d0:	d1fb      	bne.n	bb7ca <strlen+0x2>
   bb7d2:	1a18      	subs	r0, r3, r0
   bb7d4:	3801      	subs	r0, #1
   bb7d6:	4770      	bx	lr

000bb7d8 <__register_exitproc>:
   bb7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb7dc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb898 <__register_exitproc+0xc0>
   bb7e0:	4606      	mov	r6, r0
   bb7e2:	f8d8 0000 	ldr.w	r0, [r8]
   bb7e6:	461f      	mov	r7, r3
   bb7e8:	460d      	mov	r5, r1
   bb7ea:	4691      	mov	r9, r2
   bb7ec:	f000 f856 	bl	bb89c <__retarget_lock_acquire_recursive>
   bb7f0:	4b25      	ldr	r3, [pc, #148]	; (bb888 <__register_exitproc+0xb0>)
   bb7f2:	681c      	ldr	r4, [r3, #0]
   bb7f4:	b934      	cbnz	r4, bb804 <__register_exitproc+0x2c>
   bb7f6:	4c25      	ldr	r4, [pc, #148]	; (bb88c <__register_exitproc+0xb4>)
   bb7f8:	601c      	str	r4, [r3, #0]
   bb7fa:	4b25      	ldr	r3, [pc, #148]	; (bb890 <__register_exitproc+0xb8>)
   bb7fc:	b113      	cbz	r3, bb804 <__register_exitproc+0x2c>
   bb7fe:	681b      	ldr	r3, [r3, #0]
   bb800:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb804:	6863      	ldr	r3, [r4, #4]
   bb806:	2b1f      	cmp	r3, #31
   bb808:	dd07      	ble.n	bb81a <__register_exitproc+0x42>
   bb80a:	f8d8 0000 	ldr.w	r0, [r8]
   bb80e:	f000 f847 	bl	bb8a0 <__retarget_lock_release_recursive>
   bb812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb81a:	b34e      	cbz	r6, bb870 <__register_exitproc+0x98>
   bb81c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb820:	b988      	cbnz	r0, bb846 <__register_exitproc+0x6e>
   bb822:	4b1c      	ldr	r3, [pc, #112]	; (bb894 <__register_exitproc+0xbc>)
   bb824:	b923      	cbnz	r3, bb830 <__register_exitproc+0x58>
   bb826:	f8d8 0000 	ldr.w	r0, [r8]
   bb82a:	f000 f838 	bl	bb89e <__retarget_lock_release>
   bb82e:	e7f0      	b.n	bb812 <__register_exitproc+0x3a>
   bb830:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb834:	f7fc fe0e 	bl	b8454 <malloc>
   bb838:	2800      	cmp	r0, #0
   bb83a:	d0f4      	beq.n	bb826 <__register_exitproc+0x4e>
   bb83c:	2300      	movs	r3, #0
   bb83e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb842:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb846:	6863      	ldr	r3, [r4, #4]
   bb848:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb84c:	2201      	movs	r2, #1
   bb84e:	409a      	lsls	r2, r3
   bb850:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb854:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb858:	4313      	orrs	r3, r2
   bb85a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb85e:	2e02      	cmp	r6, #2
   bb860:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb864:	bf02      	ittt	eq
   bb866:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb86a:	4313      	orreq	r3, r2
   bb86c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb870:	6863      	ldr	r3, [r4, #4]
   bb872:	f8d8 0000 	ldr.w	r0, [r8]
   bb876:	1c5a      	adds	r2, r3, #1
   bb878:	3302      	adds	r3, #2
   bb87a:	6062      	str	r2, [r4, #4]
   bb87c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb880:	f000 f80e 	bl	bb8a0 <__retarget_lock_release_recursive>
   bb884:	2000      	movs	r0, #0
   bb886:	e7c6      	b.n	bb816 <__register_exitproc+0x3e>
   bb888:	2003e7e8 	.word	0x2003e7e8
   bb88c:	2003e75c 	.word	0x2003e75c
   bb890:	00000000 	.word	0x00000000
   bb894:	000b8455 	.word	0x000b8455
   bb898:	2003e550 	.word	0x2003e550

000bb89c <__retarget_lock_acquire_recursive>:
   bb89c:	4770      	bx	lr

000bb89e <__retarget_lock_release>:
   bb89e:	4770      	bx	lr

000bb8a0 <__retarget_lock_release_recursive>:
   bb8a0:	4770      	bx	lr

000bb8a2 <link_code_end>:
	...

000bb8a4 <dynalib_user>:
   bb8a4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bb8b4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bb8c4:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   bb8d4:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   bb8e4:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   bb8f4:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   bb904:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   bb914:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   bb924:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   bb934:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   bb944:	6174 6574 4820 5454 2f50 2e31 0031 6f48     tate HTTP/1.1.Ho
   bb954:	7473 203a 4300 6e6f 6574 746e 4c2d 6e65     st: .Content-Len
   bb964:	7467 3a68 0020 6f43 746e 6e65 2d74 7954     gth: .Content-Ty
   bb974:	6570 203a 6574 7478 702f 616c 6e69 633b     pe: text/plain;c
   bb984:	6168 7372 7465 553d 4654 382d 4600 6f72     harset=UTF-8.Fro
   bb994:	206d 7548 0065 7753 7469 6863 4e4f 2520     m Hue.SwitchON %
   bb9a4:	2069 000a 3f3c 6d78 206c 6576 7372 6f69     i ..<?xml versio
   bb9b4:	3d6e 3122 302e 2022 6e65 6f63 6964 676e     n="1.0" encoding
   bb9c4:	223d 7475 2d66 2238 3e3f 733c 453a 766e     ="utf-8"?><s:Env
   bb9d4:	6c65 706f 2065 6d78 6e6c 3a73 3d73 6822     elope xmlns:s="h
   bb9e4:	7474 3a70 2f2f 6373 6568 616d 2e73 6d78     ttp://schemas.xm
   bb9f4:	736c 616f 2e70 726f 2f67 6f73 7061 652f     lsoap.org/soap/e
   bba04:	766e 6c65 706f 2f65 2022 3a73 6e65 6f63     nvelope/" s:enco
   bba14:	6964 676e 7453 6c79 3d65 6822 7474 3a70     dingStyle="http:
   bba24:	2f2f 6373 6568 616d 2e73 6d78 736c 616f     //schemas.xmlsoa
   bba34:	2e70 726f 2f67 6f73 7061 652f 636e 646f     p.org/soap/encod
   bba44:	6e69 2f67 3e22 733c 423a 646f 3e79 753c     ing/"><s:Body><u
   bba54:	533a 7465 6942 616e 7972 7453 7461 2065     :SetBinaryState 
   bba64:	6d78 6e6c 3a73 3d75 7522 6e72 423a 6c65     xmlns:u="urn:Bel
   bba74:	696b 3a6e 6573 7672 6369 3a65 6162 6973     kin:service:basi
   bba84:	6563 6576 746e 313a 3e22 423c 6e69 7261     cevent:1"><Binar
   bba94:	5379 6174 6574 313e 2f3c 6942 616e 7972     yState>1</Binary
   bbaa4:	7453 7461 3e65 2f3c 3a75 6553 4274 6e69     State></u:SetBin
   bbab4:	7261 5379 6174 6574 3c3e 732f 423a 646f     aryState></s:Bod
   bbac4:	3e79 2f3c 3a73 6e45 6576 6f6c 6570 003e     y></s:Envelope>.
   bbad4:	4f50 5453 2f20 7075 706e 632f 6e6f 7274     POST /upnp/contr
   bbae4:	6c6f 622f 7361 6369 7665 6e65 3174 4820     ol/basicevent1 H
   bbaf4:	5454 2f50 2e31 0031 6f43 746e 6e65 2d74     TTP/1.1.Content-
   bbb04:	7954 6570 203a 6574 7478 782f 6c6d 203b     Type: text/xml; 
   bbb14:	6863 7261 6573 3d74 7475 2d66 0038 4f53     charset=utf-8.SO
   bbb24:	5041 4341 4954 4e4f 203a 7522 6e72 423a     APACTION: "urn:B
   bbb34:	6c65 696b 3a6e 6573 7672 6369 3a65 6162     elkin:service:ba
   bbb44:	6973 6563 6576 746e 313a 5323 7465 6942     sicevent:1#SetBi
   bbb54:	616e 7972 7453 7461 2265 4300 6e6f 656e     naryState".Conne
   bbb64:	7463 6f69 3a6e 6b20 6565 2d70 6c61 7669     ction: keep-aliv
   bbb74:	0065 7773 7469 6863 464f 2046 6925 0a20     e.switchOFF %i .
   bbb84:	3c00 783f 6c6d 7620 7265 6973 6e6f 223d     .<?xml version="
   bbb94:	2e31 2230 6520 636e 646f 6e69 3d67 7522     1.0" encoding="u
   bbba4:	6674 382d 3f22 3c3e 3a73 6e45 6576 6f6c     tf-8"?><s:Envelo
   bbbb4:	6570 7820 6c6d 736e 733a 223d 7468 7074     pe xmlns:s="http
   bbbc4:	2f3a 732f 6863 6d65 7361 782e 6c6d 6f73     ://schemas.xmlso
   bbbd4:	7061 6f2e 6772 732f 616f 2f70 6e65 6576     ap.org/soap/enve
   bbbe4:	6f6c 6570 222f 7320 653a 636e 646f 6e69     lope/" s:encodin
   bbbf4:	5367 7974 656c 223d 7468 7074 2f3a 732f     gStyle="http://s
   bbc04:	6863 6d65 7361 782e 6c6d 6f73 7061 6f2e     chemas.xmlsoap.o
   bbc14:	6772 732f 616f 2f70 6e65 6f63 6964 676e     rg/soap/encoding
   bbc24:	222f 3c3e 3a73 6f42 7964 3c3e 3a75 6553     /"><s:Body><u:Se
   bbc34:	4274 6e69 7261 5379 6174 6574 7820 6c6d     tBinaryState xml
   bbc44:	736e 753a 223d 7275 3a6e 6542 6b6c 6e69     ns:u="urn:Belkin
   bbc54:	733a 7265 6976 6563 623a 7361 6369 7665     :service:basicev
   bbc64:	6e65 3a74 2231 3c3e 6942 616e 7972 7453     ent:1"><BinarySt
   bbc74:	7461 3e65 3c30 422f 6e69 7261 5379 6174     ate>0</BinarySta
   bbc84:	6574 3c3e 752f 533a 7465 6942 616e 7972     te></u:SetBinary
   bbc94:	7453 7461 3e65 2f3c 3a73 6f42 7964 3c3e     State></s:Body><
   bbca4:	732f 453a 766e 6c65 706f 3e65 5300 6163     /s:Envelope>.Sca
   bbcb4:	696c 676e 4620 6361 6f74 2072 7369 203a     ling Factor is: 
   bbcc4:	3025 382e 0a66 4100 4342 4544 4746 4948     %0.8f..ABCDEFGHI
   bbcd4:	4b4a 4d4c 4f4e 5150 5352 0054 696d 526e     JKLMNOPQRST.minR
   bbce4:	6c6f 206c 7369 2520 2e30 6633 6120 2074     oll is %0.3f at 
   bbcf4:	6563 6c6c 2520 0a69 5400 7275 696e 6e69     cell %i..Turniin
   bbd04:	2067 6e6f 4d20 5752 4d45 204f 2523 0a69     g on MRWEMO #%i.
   bbd14:	7400 7275 696e 676e 6f20 206e 6874 2065     .turning on the 
   bbd24:	696c 6867 0a74 5400 7275 696e 6e69 2067     light..Turniing 
   bbd34:	666f 2066 524d 4557 4f4d 2320 6925 000a     off MRWEMO #%i..
   bbd44:	7574 6e72 6e69 2067 666f 2066 6874 2065     turning off the 
   bbd54:	696c 6867 0074 7554 6e72 6969 676e 6f20     light.Turniing o
   bbd64:	206e 534d 4557 4f4d 2320 6925 000a 696c     n MSWEMO #%i..li
   bbd74:	6867 2074 2c31 7220 203d 6925 000a 696c     ght 1, r= %i..li
   bbd84:	6867 2074 2c32 7220 203d 6925 000a 696c     ght 2, r= %i..li
   bbd94:	6867 2074 2c33 7220 203d 6925 000a 696c     ght 3, r= %i..li
   bbda4:	6867 2074 2c34 7220 203d 6925 000a 696c     ght 4, r= %i..li
   bbdb4:	6867 2074 2c35 7220 203d 6925 000a 696c     ght 5, r= %i..li
   bbdc4:	6867 2074 2c36 7220 203d 6925 000a 3931     ght 6, r= %i..19
   bbdd4:	2e32 3631 2e38 2e31 3033 3100 3239 312e     2.168.1.30.192.1
   bbde4:	3836 312e 332e 0031 3931 2e32 3631 2e38     68.1.31.192.168.
   bbdf4:	2e31 3233 3100 3239 312e 3836 312e 332e     1.32.192.168.1.3
   bbe04:	0033 3931 2e32 3631 2e38 2e31 3433           3.192.168.1.34.

000bbe13 <_ZL11hueUsername>:
   bbe13:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   bbe23:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   bbe33:	7438 334d 4637 5433                          8tM37F3T.

000bbe3c <_ZL13maybeNextTime>:
	...
   bbf04:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   bbf14:	3800 0000 0000 0000 0000 0000 0000 0000     .8..............
   bbf24:	5800 0000 0000 0000 0000 0000 0000 0000     .X..............
   bbf34:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   bbf44:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   bbf54:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   bbf64:	1800 0000 0000 0000 0000 0000 0000 0000     ................
   bbf74:	1800 0000 0000 0000 0000 1f00 0378 3ce0     ............x..<
   bbf84:	1f3c 3e80 0000 0000 0000 3b00 02dc 1cf0     <..>.......;....
   bbf94:	1810 63c0 0000 0000 0000 1900 018c 0eb8     ...c............
   bbfa4:	1830 ff60 0000 0000 0000 1900 03ce 061c     0.`.............
   bbfb4:	1820 c060 0000 0000 0000 1800 03c7 070e      .`.............
   bbfc4:	1860 c060 0000 0000 0000 1800 03c3 038f     `.`.............
   bbfd4:	7cc0 61c0 0080 0000 0000 3c00 c1f7 81f1     .|.a.......<....
   bbfe4:	3f80 3ec0 0000 0000 0000 0000 0000 0100     .?.>............
   bbff4:	0880 0000 0000 0000 0000 0000 0000 fb00     ................
	...
   bc010:	0000 1f01 0010 0000 0000 0000 0000 0000     ................
   bc020:	0000 0f01 00e0 0000 0000 0000 0000 0000     ................
   bc030:	0000 b000 0000 0000 0000 0000 0000 0000     ................
	...
   bc0e0:	0000 0008 4000 0060 0000 0000 0000 0000     .....@`.........
   bc0f0:	0000 0008 c000 0060 0000 0000 0000 0000     ......`.........
   bc100:	0000 0018 c000 0010 0000 0000 3e00 7c00     .............>.|
   bc110:	1c07 007c e003 1f70 0078 00f8 7300 c300     ..|...p.x....s..
   bc120:	9807 0018 c000 3b30 01dc 0086 3300 ff01     ......0;.....3..
   bc130:	f001 0018 c000 1930 038c 00fe 3100 8081     ......0......1..
   bc140:	e000 0018 c000 1930 03ce 0000 3100 8181     ......0......1..
   bc150:	e000 0018 c000 1830 03c7 0002 3100 c3c0     ......0......1..
   bc160:	fc01 001b d000 1830 01c3 0086 7900 7ee0     ......0......y.~
   bc170:	3c07 001d d000 3c78 c0f7 00fc 0000 0000     .<....x<........
	...

000bc23c <_ZL13youNeededThat>:
	...
   bc2d0:	0300 0fcf 6087 0000 0000 0000 0000 0000     .....`..........
   bc2e0:	0100 1ec6 e08e 0000 0000 0000 0000 0000     ................
   bc2f0:	0000 39cc 6086 0000 0000 0000 0000 0000     ...9.`..........
   bc300:	0000 33ec 6086 0000 0000 0000 0000 0000     ...3.`..........
   bc310:	0000 3f78 7807 0000 0000 0000 0000 0000     ..x?.x..........
   bc320:	0000 1e38 f003 0000 0000 0000 0000 0000     ..8.............
   bc330:	0000 0030 0000 0000 0000 0000 0000 0000     ..0.............
   bc340:	0f00 00e4 0000 0000 0000 0000 0000 0000     ................
   bc350:	0800 00fc 0000 0000 0000 0000 0000 0000     ................
   bc360:	0f00 0080 0000 0000 0000 0000 0000 0000     ................
	...
   bc3b4:	0018 7000 0000 0000 0000 0000 0000 0000     ...p............
   bc3c4:	0078 f000 0000 0000 0000 0000 0000 0000     x...............
   bc3d4:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   bc3e4:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   bc3f4:	0018 3000 0000 0000 0000 0000 0000 0000     ...0............
   bc404:	0018 3000 0000 0000 0000 0300 7ec0 810f     ...0.........~..
   bc414:	1ff8 f003 0000 0000 0000 0700 e7e0 c31c     ................
   bc424:	3998 7086 0000 0000 0000 0300 ff60 c31f     .9.p........`...
   bc434:	3f18 308c 0000 0000 0000 0300 c070 0318     .?.0........p...
   bc444:	3018 300c 0000 0000 0000 0300 e330 631c     .0.0........0..c
   bc454:	383e 78ce 0000 0000 0000 0700 7e3c c10f     >8.x........<~..
   bc464:	1ff8 f087 0000 0000 0000 0000 0000 0000     ................
	...
   bc4f0:	0000 0004 0000 0000 0000 0000 0000 0000     ................
   bc500:	0000 000c 0000 0000 0000 0000 0000 0000     ................
   bc510:	0000 001c 0000 0000 0000 0000 0000 0000     ................
   bc520:	0000 000c 0000 0000 0000 0000 0000 0000     ................
   bc530:	0400 000c 1800 0000 0000 0000 0000 0000     ................
   bc540:	0c00 000c 1800 0000 0000 0000 0000 0000     ................
   bc550:	1e00 830f 78c0 0000 0000 0000 0000 0000     .....x..........
   bc560:	0c00 830f 18e0 0000 0000 0000 0000 0000     ................
   bc570:	0c00 c10d 1830 0000 0000 0000 0000 0000     ....0...........
   bc580:	0c00 c30c 1818 0000 0000 0000 0000 0000     ................
   bc590:	0f00 e30c 1cdc 0000 0000 0000 0000 0000     ................
   bc5a0:	0f00 f11e 1cf6 0000 0000 0000 0000 0000     ................
	...

000bc63c <_ZL14niceKnowingYou>:
	...
   bc780:	0000 8001 0000 0000 0000 0000 381c 0000     .............8..
   bc790:	0000 8003 0000 0000 0000 0000 100e 0000     ................
   bc7a0:	0000 8001 0000 0000 0000 0000 100e 0000     ................
   bc7b0:	0000 8001 0000 0000 0000 0000 100b 0020     .............. .
   bc7c0:	0000 8001 0000 0000 0002 0000 900b 0060     ..............`.
   bc7d0:	0000 8001 0000 0000 0003 1000 9009 3c30     ..............0<
   bc7e0:	8007 f001 0378 fdc3 83c1 78c0 d008 6670     ....x......x..pf
   bc7f0:	c018 c001 076c 9821 8783 e460 7008 c230     ....l.!...`..p0.
   bc800:	c01f e001 0c66 d920 8301 c460 7008 c030     ....f. ...`..p0.
   bc810:	0018 a001 0c66 dd60 8301 8c30 3008 c630     ....f.`...0..00.
   bc820:	401c b001 0967 76c0 8301 dc30 101c 7c38     .@..g..v..0...8|
   bc830:	800f b803 8777 2680 8703 7838 0000 0000     ....w..&..8x....
	...
   bc848:	0000 3880 0000 0000 0000 0000 0000 0000     ...8............
   bc858:	0100 1000 0000 0000 0000 0000 0000 0000     ................
   bc868:	0000 e080 0000 0000 0000 0000 0000 0000     ................
   bc878:	0000 c07f 0000 0000 0000 0000 0000 0000     ................
   bc888:	0000 0008 0000 0000 0000 0000 0000 0000     ................
	...
   bc8d0:	e301 0080 0000 0000 0000 0000 0000 0000     ................
   bc8e0:	c300 0000 0000 0000 0000 0000 0000 0000     ................
   bc8f0:	6600 0000 0000 0000 0000 0000 0000 0000     .f..............
   bc900:	7400 0000 0000 0000 0000 0000 0000 0000     .t..............
   bc910:	3800 0000 0000 0000 0000 0000 0000 0000     .8..............
   bc920:	1800 020f 0030 0000 0000 0000 0000 0000     ....0...........
   bc930:	1800 861c 0070 0000 0000 0000 0000 0000     ....p...........
   bc940:	1800 8630 0030 0000 0000 0000 0000 0000     ..0.0...........
   bc950:	1800 8631 0030 0000 0000 0000 0000 0000     ..1.0...........
   bc960:	1800 0627 6038 80c1 0000 0000 0000 0000     ..'.8`..........
   bc970:	1e00 031e 60f0 80c1 0000 0000 0000 0000     .....`..........
	...

000bca3c <_ZL3DIE>:
   bca3c:	cccd be8c 7efa bf6a 0625 bec1 2d0e bf32     .....~j.%....-2.
   bca4c:	c083 bf2a 2d0e 3e32 ba5e be89 5604 bf0e     ..*..-2>^....V..
   bca5c:	51ec 3f38 5604 3ece 76c9 bf3e d0e5 3f02     .Q8?.V.>.v>....?
   bca6c:	51ec 3eb8 eb85 bf71 0831 3e2c 1cac be9a     .Q.>..q.1.,>....
   bca7c:	1cac 3f3a 51ec beb8 e979 bea6 3d71 3f6a     ..:?.Q..y...q=j?
   bca8c:	1687 3d59 7cee 3ebf 4bc7 3f57 1cac 3e9a     ..Y=.|.>.KW?...>
   bca9c:	2b02 3f47 f9db 3f1e 9ba6 be44 126f 3ec3     .+G?...?..D.o..>
   bcaac:	fbe7 3f09 978d bf4e 1aa0 3eaf 0e56 be2d     ...?..N....>V.-.
   bcabc:	d70a bc23 e76d bebb 0e56 beed be77 bf5f     ..#.m...V...w._.
   bcacc:	1eb8 bf45 374c 3d89 b439 bf28 9375 bf78     ..E.L7.=9.(.u.x.
   bcadc:	6042 bd65 74bc 3d13 8d50 bf37 d70a 3ee3     B`e..t.=P.7....>
   bcaec:	b852 3ede 0000 be80 6042 3d65 e979 3f66     R..>....B`e=y.f?
   bcafc:	f1aa 3ed2 2d0e 3eb2 4fdf 3f4d d917 3f4e     ...>.-.>.OM?..N?
   bcb0c:	8f5c be42 fbe7 3f09 26e9 3f81 0831 bd2c     \.B....?.&.?1.,.
   bcb1c:	b22d be1d 9581 3f43 3333 bef3 fbe7 bf09     -.....C?33......

000bcb2c <_ZL3rip>:
	...
   bcc50:	0000 0700 00fc 0000 0000 0000 0000 0f00     ................
   bcc60:	00f8 0300 00fc c0ff 0000 0000 0000 0f00     ................
   bcc70:	80ff 0000 00f0 fcff 0000 0000 0000 0100     ................
   bcc80:	e0ff 0000 00f0 3f1f 0000 0000 0000 0100     .......?........
   bcc90:	f8e0 0000 00f0 071c 0080 0000 0000 0100     ................
   bcca0:	3ce0 0000 00f0 031c 00c0 0000 0000 0100     .<..............
   bccb0:	1ce0 0000 00f0 011c 00e0 0000 0000 0100     ................
   bccc0:	1ee0 0000 00f0 011c 00e0 0000 0000 0100     ................
   bccd0:	1ee0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bcce0:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bccf0:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bcd00:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bcd10:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bcd20:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bcd30:	0fe0 0000 00f0 001c 00f0 0000 0000 0100     ................
   bcd40:	1ff0 0000 00f0 011e 00f0 0000 0000 0100     ................
   bcd50:	1ef8 0000 00f0 011f 00e0 0000 0000 0100     ................
   bcd60:	3efc 0000 00f0 c31f 00e0 0000 0000 0100     .>..............
   bcd70:	fcef 0000 00f0 e71c 00c0 0000 0000 0100     ................
   bcd80:	f8e3 0000 00f0 7f1c 00c0 0000 0000 0100     ................
   bcd90:	f0e1 0000 00f0 1f1c 0000 0000 0000 0100     ................
   bcda0:	f0e1 0000 00f0 001c 0000 0000 0000 0100     ................
   bcdb0:	f0e0 0000 00f0 001c 0000 0000 0000 0100     ................
   bcdc0:	78e0 0000 00f0 001c 0000 0000 0000 0100     .x..............
   bcdd0:	3ce0 0000 00f0 001c 0000 0000 0000 0100     .<..............
   bcde0:	1fe0 00c0 00f0 001e 0000 0000 0000 0700     ................
   bcdf0:	1ff8 03e0 00f8 807f 0000 0000 0000 0700     ................
   bce00:	07fc 07c0 00fc 807f 0000 0000 0000 0000     ................
   bce10:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

000bcf2c <_ZL4lame>:
	...
   bd0d0:	c003 8001 3838 807f 0000 0000 0000 0000     ....88..........
   bd0e0:	8001 8001 701c 8030 0000 0000 0000 0000     .....p0.........
   bd0f0:	8001 c001 701e 0032 0000 0000 0000 0000     .....p2.........
   bd100:	8001 c003 b036 003e 0000 0000 0000 0000     ....6.>.........
   bd110:	8001 c002 b033 0032 0000 0000 0000 0000     ....3.2.........
   bd120:	8001 7c06 3033 0030 0000 0000 0000 0000     ...|300.........
   bd130:	8001 e004 1821 0030 0000 0000 0000 0000     ....!.0.........
   bd140:	8001 f00d 1820 0030 0000 0000 0000 0000     .... .0.........
   bd150:	8001 300f 1820 0030 0000 0000 0000 0000     ...0 .0.........
   bd160:	8c01 3818 1820 8030 0000 0000 0000 0000     ...8 .0.........
   bd170:	f803 3c38 3c70 807f 0000 0000 0000 0000     ..8<p<..........
	...

000bd32c <_ZL4pray>:
	...
   bd400:	0000 0100 00f8 0000 0000 0000 0000 0000     ................
   bd410:	0000 0f00 00f8 0000 0000 0000 0000 0000     ................
   bd420:	0000 3e00 0078 0000 0000 0000 0000 0000     ...>x...........
   bd430:	0000 f000 0030 0000 0000 0000 0000 0000     ....0...........
   bd440:	0000 8003 0000 0000 0000 0000 0000 0000     ................
   bd450:	0000 0006 0000 0000 0000 0000 0000 0060     ..............`.
   bd460:	0000 009c 0000 0000 0000 0000 0100 f0e3     ................
   bd470:	0300 00b8 007f 7f00 0ff0 00f0 0300 fcef     ................
   bd480:	0f00 00f0 c0ff 3f00 07e0 00f0 0f00 3efc     .......?.......>
   bd490:	1f00 00e0 e0e3 0f00 01c0 0080 1f00 0ff8     ................
   bd4a0:	0300 00e0 f007 0700 03c0 0000 0000 0ff0     ................
   bd4b0:	0380 00c0 f80e 0300 07e0 0000 0000 07e0     ................
   bd4c0:	0380 00c0 7c38 0100 06f0 0000 0000 07e0     ....8|..........
   bd4d0:	0380 00c0 3e38 0100 0ef0 0000 0000 07e0     ....8>..........
   bd4e0:	0380 00c0 1f70 0000 0cf8 0000 0000 07e0     ....p...........
   bd4f0:	0380 00c0 0f70 0080 1c7c 0000 0000 07e0     ....p...|.......
   bd500:	0380 00c0 07f0 00c0 183e 0000 0000 0fe0     ........>.......
   bd510:	0380 00c0 03f8 00c0 383e 0000 0000 0ff0     ........>8......
   bd520:	0300 00c0 037c 00e0 701f 0000 0000 1ff0     ....|....p......
   bd530:	0300 00c0 037e 00f0 e00f 0000 0000 3efc     ....~..........>
   bd540:	0300 00c0 ff3f 00f8 e007 0000 0000 fcff     ....?...........
   bd550:	0f00 00e0 fc3f 001c c007 0000 0000 f0ff     ....?...........
   bd560:	1f00 00f0 f00f 0006 c003 0000 0000 00f0     ................
	...
   bd578:	8007 0000 0000 00f0 0000 0000 0000 0000     ................
   bd588:	8007 0000 0000 00f0 0000 0000 0000 fe00     ................
   bd598:	000f 0000 0000 00f0 0000 0000 0000 ff03     ................
   bd5a8:	02ce 0000 0000 00f0 0000 0000 0000 0f07     ................
   bd5b8:	07dc 0000 0000 00f0 0000 0000 0000 030c     ................
   bd5c8:	03b8 0000 0000 00f0 0000 0000 0000 0008     ................
   bd5d8:	8277 0000 0000 00f0 0000 0000 0000 0008     w...............
   bd5e8:	fcef 0000 0000 00f0 0000 0000 0000 030c     ................
   bd5f8:	e0c3 0000 0000 00f0 0000 0000 0000 0f06     ................
   bd608:	0000 0000 0000 00f0 0000 0000 0000 f803     ................
   bd618:	0000 0000 0000 00f0 0000 0000 0000 0000     ................
   bd628:	0000 0000 0000 00f0 0000 0000 0000 0000     ................
   bd638:	0000 0000 0100 00f8 0000 0000 0000 0000     ................
   bd648:	0000 0000 0100 00f8 0000 0000 0000 0000     ................
   bd658:	0000 0000 0300 00e0 0000 0000 0000 0000     ................
   bd668:	0000 0000 0f00 0080 0000 0000 0000 0000     ................
   bd678:	0000 0000 1e00 0000 0000 0000 0000 0000     ................
   bd688:	0000 0000 1800 0000 0000 0000 0000 0000     ................
	...

000bd72c <_ZL4uhOh>:
	...
   bd8bc:	0000 3c00 041e 0000 0000 0010 0000 0000     ...<............
   bd8cc:	0000 3800 1c0c 0000 0000 0070 0000 0000     ...8......p.....
   bd8dc:	0000 1800 0c08 0000 0000 0030 0000 0000     ..........0.....
   bd8ec:	0000 1800 0c18 0000 0000 0030 0000 0000     ..........0.....
   bd8fc:	0000 1800 0c18 0000 0000 0030 0000 0000     ..........0.....
   bd90c:	0000 1800 0c10 0000 0000 0030 0000 0000     ..........0.....
   bd91c:	0000 1800 0c10 0000 0000 0030 0000 0000     ..........0.....
   bd92c:	0000 1800 0f30 0080 f001 003e 0000 0000     ....0.....>.....
   bd93c:	0000 0c00 0e30 00c0 8807 003b 0000 0000     ....0.....;.....
   bd94c:	0000 0c00 0c20 00c0 180e 0033 0000 0000     .... .....3.....
   bd95c:	0000 0c00 0c20 0060 180c 8031 0000 0000     .... .`...1.....
   bd96c:	0000 0e00 0c60 0060 3008 8031 0000 0000     ....`.`..01.....
   bd97c:	0000 0700 0cc0 0070 f009 c031 0000 0000     ......p...1.....
   bd98c:	0000 0300 1e80 0078 c007 e079 0000 0000     ......x...y.....
	...

000bdb2c <_ZL4welp>:
	...
   bdc7c:	0000 0080 0000 0000 0000 0c00 3c00 0000     .............<..
   bdc8c:	0100 0080 0000 0000 0000 0e00 ff00 0080     ................
   bdc9c:	0100 00c0 0000 0000 0000 1e00 8701 00e0     ................
   bdcac:	0300 00c0 0000 0000 0000 0e00 c001 00e0     ................
   bdcbc:	0300 00c0 0000 0000 0000 0e00 c001 0070     ..............p.
   bdccc:	0200 00e0 0000 0000 0000 0e00 8000 0070     ..............p.
   bdcdc:	0600 00e0 0020 0100 00c0 0c00 0000 00e0     .... ...........
   bdcec:	0400 0070 0030 0100 0080 0c00 0300 00c0     ..p.0...........
   bdcfc:	0c00 807f 07f0 00c0 1f60 0c00 1f00 0000     ........`.......
   bdd0c:	0800 0178 06fc 01e0 7fe0 0c80 7000 0000     ..x..........p..
   bdd1c:	1800 0378 01c4 00f0 19e0 0cc0 7000 0000     ..x..........p..
   bdd2c:	1800 03f8 0386 0038 1860 0cc0 7e00 0000     ......8.`....~..
   bdd3c:	1300 03dc 060e 001c 1860 04e0 3e00 0000     ........`....>..
   bdd4c:	3f00 031c 070e 000e 1860 0460 1e00 0000     .?......`.`.....
   bdd5c:	2000 010e 073c 0007 1860 0070 0800 0000     . ..<...`.p.....
   bdd6c:	6000 010f 03f8 80ff 18e0 0e70 1c00 0000     .`........p.....
   bdd7c:	f001 801f 017c c1f0 7cf0 0efc 1c00 0000     ....|....|......
   bdd8c:	0000 0000 0078 0000 0000 0000 0000 0000     ....x...........
   bdd9c:	0000 0030 0018 0000 0000 0000 0000 0000     ..0.............
   bddac:	0000 0040 0030 0000 0000 0000 0000 0000     ..@.0...........
   bddbc:	0000 0330 00e0 0000 0000 0000 0000 0000     ..0.............
   bddcc:	0000 ff1f 0080 0000 0000 0000 0000 0000     ................
   bdddc:	0000 fc07 0000 0000 0000 0000 0000 0000     ................
	...

000bdf2c <_ZL5again>:
	...
   be07c:	0000 0080 0000 0000 0000 0c00 3c00 0000     .............<..
   be08c:	0100 0080 0000 0000 0000 0e00 ff00 0080     ................
   be09c:	0100 00c0 0000 0000 0000 1e00 8701 00e0     ................
   be0ac:	0300 00c0 0000 0000 0000 0e00 c001 00e0     ................
   be0bc:	0300 00c0 0000 0000 0000 0e00 c001 0070     ..............p.
   be0cc:	0200 00e0 0000 0000 0000 0e00 8000 0070     ..............p.
   be0dc:	0600 00e0 0020 0100 00c0 0c00 0000 00e0     .... ...........
   be0ec:	0400 0070 0030 0100 0080 0c00 0300 00c0     ..p.0...........
   be0fc:	0c00 807f 07f0 00c0 1f60 0c00 1f00 0000     ........`.......
   be10c:	0800 0178 06fc 01e0 7fe0 0c80 7000 0000     ..x..........p..
   be11c:	1800 0378 01c4 00f0 19e0 0cc0 7000 0000     ..x..........p..
   be12c:	1800 03f8 0386 0038 1860 0cc0 7e00 0000     ......8.`....~..
   be13c:	1300 03dc 060e 001c 1860 04e0 3e00 0000     ........`....>..
   be14c:	3f00 031c 070e 000e 1860 0460 1e00 0000     .?......`.`.....
   be15c:	2000 010e 073c 0007 1860 0070 0800 0000     . ..<...`.p.....
   be16c:	6000 010f 03f8 80ff 18e0 0e70 1c00 0000     .`........p.....
   be17c:	f001 801f 017c c1f0 7cf0 0efc 1c00 0000     ....|....|......
   be18c:	0000 0000 0078 0000 0000 0000 0000 0000     ....x...........
   be19c:	0000 0030 0018 0000 0000 0000 0000 0000     ..0.............
   be1ac:	0000 0040 0030 0000 0000 0000 0000 0000     ..@.0...........
   be1bc:	0000 0330 00e0 0000 0000 0000 0000 0000     ..0.............
   be1cc:	0000 ff1f 0080 0000 0000 0000 0000 0000     ................
   be1dc:	0000 fc07 0000 0000 0000 0000 0000 0000     ................
	...

000be32c <_ZL5fight>:
	...
   be4ac:	0000 80ff 00fc 20ff 0000 3f00 01fc 0080     ....... ...?....
   be4bc:	0100 c0ff 0178 f0ff 871f 7ff0 03fe 00c0     ....x...........
   be4cc:	0000 c0f1 0370 f080 0107 61c0 03c7 00c0     ....p......a....
   be4dc:	0000 c072 0670 7000 0107 41c0 03c3 00c0     ..r.p..p...A....
   be4ec:	0000 0072 0e70 3000 ff07 01c0 03c0 00c0     ..r.p..0........
   be4fc:	0000 007f 0c70 3000 ff07 01c0 03c0 0080     ....p..0........
   be50c:	0000 007f 0c70 0000 0107 01c0 01c0 0080     ....p...........
   be51c:	0000 0073 1c70 0000 0107 01c0 01c0 0080     ..s.p...........
   be52c:	0000 0072 1c70 fc01 0107 01c0 01c0 0080     ..r.p...........
   be53c:	0000 0070 1e70 7800 0107 01c0 01c0 0080     ..p.p..x........
   be54c:	0000 0070 0e70 3800 0107 01c0 01c0 0080     ..p.p..8........
   be55c:	0000 0070 0f70 3800 0107 01c0 01c0 0080     ..p.p..8........
   be56c:	0000 0070 0770 3800 0107 01c0 01c0 0080     ..p.p..8........
   be57c:	0000 0070 0770 7880 0107 01c0 01c0 0080     ..p.p..x........
   be58c:	0000 0070 0370 f8e1 0107 01c0 01c0 0000     ..p.p...........
   be59c:	0000 00f8 0178 c0ff 010f 03c0 03c0 0080     ....x...........
   be5ac:	0100 00fc 00fc 807f c71f 07f0 03e0 0080     ................
	...

000be72c <_ZL5lucky>:
	...
   be8d0:	1cf0 1f38 e341 8e87 0000 0000 0000 0000     ..8.A...........
   be8e0:	0c60 3110 c6c0 0c03 0000 0000 0000 0000     `..1............
   be8f0:	0c60 4030 d8c0 9801 0000 0000 0000 0000     `.0@............
   be900:	0c60 c020 f040 d001 0000 0000 0000 0000     `. .@...........
   be910:	0c60 c020 d840 e000 0000 0000 0000 0000     `. .@...........
   be920:	0c60 c020 dc00 6000 0000 0000 0000 0000     `. ....`........
   be930:	0c60 c060 cc00 6000 0000 0000 0000 0000     `.`....`........
   be940:	0460 c040 ce00 6000 0000 0000 0000 0000     `.@....`........
   be950:	0660 6040 c640 6000 0000 0000 0000 0000     `.@`@..`........
   be960:	0763 39c0 c380 6000 0000 0000 0000 0000     c..9...`........
   be970:	03fe 1f80 e701 7880 0000 0000 0000 0000     .......x........
	...

000beb2c <_ZL5skull>:
   beb2c:	0000 0000 0000 6002 3100 0000 0000 0000     .......`.1......
   beb3c:	0002 0000 8021 6002 1c00 001c 0000 0000     ....!..`........
   beb4c:	0003 0000 c661 c002 df00 f03f 0000 0000     ....a.....?.....
   beb5c:	801b 0000 cf01 eec6 7f00 f8ff 0000 0000     ................
   beb6c:	e009 4000 fc01 ff7e 370c f0ff 0000 0000     ...@..~..7......
   beb7c:	7800 0000 fd01 9f01 bfbf f0ff 8000 0006     .x..............
   beb8c:	0800 4002 ff01 0fc0 febf f801 0000 0000     ...@............
   beb9c:	2000 0000 f001 0f00 f83f 3800 4000 1820     . ......?..8.@ .
   bebac:	0000 0000 c001 0d00 f0ef 1800 8002 0e10     ................
   bebbc:	0000 0000 0002 0100 e0e3 0c00 0000 0708     ................
   bebcc:	0801 0000 0040 0100 e0ff 0400 0000 0f0c     ....@...........
   bebdc:	1f02 0000 0040 0100 c0ff 0400 0000 0700     ....@...........
   bebec:	1700 0000 0040 0100 c0ff 0400 0000 0000     ....@...........
   bebfc:	2910 0400 0060 0100 c0ff 0600 0100 ccc0     .)..`...........
   bec0c:	1824 0600 00a0 0d00 c0ff 0e00 0000 e0bc     $...............
   bec1c:	da24 61c0 0080 0f00 c0ff 0e00 0600 e0f7     $..a............
   bec2c:	b124 e580 0080 0f00 e0ff 0e00 0100 8003     $...............
   bec3c:	6109 0d10 0000 0f00 e0ff 0e00 0080 0001     .a..............
   bec4c:	6709 8916 0010 0f00 c2ff 1e00 0080 0000     .g..............
   bec5c:	4601 8a44 8013 0f00 c0ff 3f00 0400 0000     .FD........?....
   bec6c:	4812 0843 b093 0f00 c0ff 7f00 8f00 00c0     .HC.............
   bec7c:	c812 0201 f01b 0f00 e0ff fe00 8701 00c0     ................
   bec8c:	ce12 0000 f803 0f00 f8ff fe00 0707 00e0     ................
   bec9c:	cc12 0044 fc87 1f07 ffff feff 238e 00f0     ..D..........#..
   becac:	d012 0cce ff07 3ffc ffff ffff 019f 00e3     .......?........
   becbc:	d012 00cf ff03 77ee ff83 fffe 83bf 00ff     .......w........
   beccc:	c112 a0cc ff03 efef ff01 ffff 87ff 20ff     ............... 
   becdc:	c332 920c ff03 faff ff00 ffff 2fff f8ff     2............/..
   becec:	8626 3259 ff01 b0ff 7f00 ffff ffff f8ff     &.Y2............
   becfc:	9424 6012 ff01 d0ff 7b00 ffff ffff f8ff     $..`.....{......
   bed0c:	2465 e014 bc00 886f 3b00 ffff ffff fcff     e$....o..;......
   bed1c:	414c c035 0000 0003 3900 ffff ffff fcff     LA5......9......
   bed2c:	c3c8 c07f 0000 4000 3f00 ff9f ffff fcff     .......@.?......
   bed3c:	929e 80df 0000 4000 3f00 ffff ffff 7efc     .......@.?.....~
   bed4c:	3086 00bd 0000 4800 3f00 ffff ffff 7eff     .0.....H.?.....~
   bed5c:	3142 10fc 0000 7800 3f00 ffff ffff feff     B1.....x.?......
   bed6c:	2179 00fc 0000 7c00 3f00 dfff ffff feff     y!.....|.?......
   bed7c:	820c 20f8 0000 fc0d 7f00 fff7 ffff feff     ... ............
   bed8c:	0201 00f0 6000 ff04 7f80 ffe7 ffff feff     .....`..........
   bed9c:	0303 0070 2000 ff02 7fff 7fc6 ffff feff     ..p.. ..........
   bedac:	8602 00e0 2000 ff00 ffff ffc7 ffff feff     ..... ..........
   bedbc:	0504 00c0 6000 ff02 ffff ff86 ffff feff     .....`..........
   bedcc:	0d08 00c0 1000 ff03 ffff ff86 ffff feff     ................
   beddc:	0900 00c0 1000 ff01 ffff ff8d ffff feff     ................
   bedec:	1b12 0080 1000 ff01 ffdf ff8d ffff feff     ................
   bedfc:	1320 0080 5002 ff03 ffdf ff8d ffff fef7      ....P..........
   bee0c:	1300 0000 7000 ff01 ffff ff9f ffff fef7     .....p..........
   bee1c:	0310 0000 f004 ff01 ffff ff3f ffff fcf7     ..........?.....
   bee2c:	2700 0000 e10e ff81 ffff ffbf ffff fcff     .'..............
   bee3c:	2600 0000 e809 ffe4 ffff fffb feff f8ff     .&..............
   bee4c:	4600 0000 c811 1ff0 ffff ffff ffff f9ff     .F..............
   bee5c:	0600 0000 8831 43fe 6fff ffff ffff f1ff     ....1..C.o......
   bee6c:	0400 0000 a461 6cfe 7f43 ffff ffff f37f     ....a..lC.......
   bee7c:	0c00 0000 c843 6ef9 ffe7 ffff ffff e33f     ....C..n......?.
   bee8c:	0c00 0000 d087 8ef8 ffff ffff ffff e73f     ..............?.
   bee9c:	0800 0300 820f 0e7e 77ff ffff ffff ce3f     ......~..w....?.
   beeac:	0800 0400 001f 4e7e 77e6 ffff ffff cc7f     ......~N.w......
   beebc:	0880 0800 001e 1a3d ff64 ffff feff 9d7f     ......=.d.......
   beecc:	0002 1000 003c 1b0e ff3e ffff feff 9b7f     ....<...>.......
   beedc:	1004 2000 0038 2303 ff26 ffff feff 37ff     ... 8..#&......7
   beeec:	1008 4000 0038 1100 ff26 ffff feff 36ff     ...@8...&......6
   beefc:	0000 8000 0070 0d00 ff93 ffff feff 6cfe     ....p..........l
   bef0c:	0000 0001 00f0 0000 ff94 ffff ffff dcfe     ................
   bef1c:	0000 0002 00e0 0000 ff00 ffff ffff d8fc     ................

000bef2c <_ZL6cheers>:
	...
   bf0cc:	0000 7e00 cf83 f00f 0fff 1fc0 8081 0000     ...~............
   bf0dc:	0000 e700 8681 3006 0763 3be0 c081 0000     .......0c..;....
   bf0ec:	0000 c101 fe81 5006 0665 3c70 c0c1 0000     .......Pe.p<....
   bf0fc:	0000 8101 fe81 c007 067c 1f30 c0c1 0000     ........|.0.....
   bf10c:	0000 8001 86c1 4006 066c 1f30 c0c1 0000     .......@l.0.....
   bf11c:	0000 8001 8681 0006 0660 4130 80c1 0000     ........`.0A....
   bf12c:	0000 8001 8601 0006 0760 40f0 80e1 0000     ........`..@....
   bf13c:	0000 c001 8601 0006 0760 60e0 8060 0000     ........`..``...
   bf14c:	0000 e100 8681 1006 0661 60e0 80e0 0000     ........a..`....
   bf15c:	0000 ff00 8681 3807 0663 7b78 80c1 0000     .......8c.x{....
   bf16c:	0000 3f00 cf03 f00f 0fff 7f38 8081 0000     ...?......8.....
	...

000bf32c <_ZL6gentle>:
	...
   bf3cc:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bf3dc:	0e00 0000 0000 0000 0000 0000 000e 0000     ................
   bf3ec:	1600 0000 0000 0000 0000 0000 0006 0000     ................
   bf3fc:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bf40c:	0600 0000 0000 0000 0000 0000 0006 0000     ................
   bf41c:	0600 0000 0000 0000 0000 0800 0006 0000     ................
   bf42c:	0600 0000 0000 0000 0000 1800 0006 0000     ................
   bf43c:	0600 0000 0000 0002 0000 1800 0006 0000     ................
   bf44c:	0700 0fe0 0080 000f 07f8 7cc0 0306 00e0     ...........|....
   bf45c:	0600 1830 00c0 811f 0e86 18e0 0606 0018     ..0.............
   bf46c:	0600 3f18 00c0 8338 06fe 1860 0f06 00f8     ...?..8...`.....
   bf47c:	0600 3018 0000 8330 0600 1870 0c06 0000     ...0..0...p.....
   bf48c:	0600 3018 0000 8321 0602 1830 0c06 0008     ...0..!...0.....
   bf49c:	1f00 1838 0060 8117 0686 1e38 0606 0018     ..8.`.....8.....
   bf4ac:	0f00 0ff0 0080 000f 0efc 1a3c 030f 00f0     ..........<.....
   bf4bc:	0200 0000 0000 0007 0000 0000 0000 0000     ................
   bf4cc:	0000 0000 8000 0003 0000 0000 0000 0000     ................
   bf4dc:	0000 0000 0001 0006 0000 0000 0000 0000     ................
   bf4ec:	0000 0000 c000 003c 0000 0000 0000 0000     ......<.........
   bf4fc:	0000 0000 7f00 00f0 0000 0000 0000 0000     ................
   bf50c:	0000 0000 0f00 0000 0000 0000 0000 0000     ................
	...
   bf570:	0000 2000 0000 0000 0000 0000 0000 0000     ... ............
   bf580:	0000 e000 0000 0000 0000 0000 0000 0000     ................
   bf590:	0000 6000 0000 0000 0000 0000 0000 0000     ...`............
   bf5a0:	0000 6000 0000 0000 0000 0000 0000 0000     ...`............
   bf5b0:	0003 6080 0000 0000 0000 0000 0000 0000     ...`............
   bf5c0:	0007 6080 0000 0000 0000 0000 0000 0000     ...`............
   bf5d0:	8100 6080 0000 0000 0000 0000 0000 f33d     ...`..........=.
   bf5e0:	8787 7cc0 0000 703e f801 0000 0000 e20c     ...|..>p........
   bf5f0:	8101 6e80 0000 b873 0c03 0000 0000 620c     ...n..s........b
   bf600:	8101 6680 0000 9c33 fc07 0000 0000 e406     ...f..3.........
   bf610:	8101 6780 0000 8c31 0006 0000 0000 b407     ...g..1.........
   bf620:	8101 6380 0000 8e31 0006 0000 0000 3803     ...c..1........8
   bf630:	8101 63a0 0080 c731 0603 0000 0000 1003     ...c..1.........
   bf640:	c103 e3e0 00c0 e779 f8c1 0000 0000 0000     ......y.........
	...

000bf72c <_ZL8goodIdea>:
	...
   bf7b4:	0000 0700 0000 0000 0000 0000 0000 0000     ................
   bf7c4:	0000 1f00 0000 0000 0000 0000 0000 0000     ................
   bf7d4:	0000 1300 0000 0000 0000 0000 0000 0000     ................
   bf7e4:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf7f4:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf804:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf814:	0000 0300 0000 0000 0000 0000 0800 0000     ................
   bf824:	0000 0300 0000 0000 0000 0000 1800 0000     ................
   bf834:	0000 0300 0000 0000 0000 0000 3c00 3e00     .............<.>
   bf844:	7e00 ff00 0000 0000 0000 0000 fe00 fb00     .~..............
   bf854:	fb00 cf01 0000 0000 0000 0000 e300 e101     ................
   bf864:	e101 8703 0000 0000 0000 0000 c301 8301     ................
   bf874:	8303 0303 0000 0000 0000 0000 8301 0303     ................
   bf884:	0703 0307 0000 0000 0000 0000 8700 0703     ................
   bf894:	0e03 0303 0000 0000 0000 0000 8e00 1e02     ................
   bf8a4:	1e02 0703 00c0 0000 0000 0000 7e00 fc03     .............~..
   bf8b4:	fc03 df03 0080 0000 0000 0000 1a00 f001     ................
   bf8c4:	f001 f201 0000 0000 0000 0000 1e00 0000     ................
	...
   bf8dc:	0000 1800 0400 0000 0000 0000 0000 0000     ................
   bf8ec:	0000 1000 1800 0000 0000 0000 0000 0000     ................
   bf8fc:	0000 0c00 f000 0000 0000 0000 0000 0000     ................
   bf90c:	0000 0700 e0ff 0000 0000 0000 0000 0000     ................
   bf91c:	0000 0100 00ff 0000 0000 0000 0000 0000     ................
	...
   bf980:	0000 0100 0000 0000 0000 0000 0000 0000     ................
   bf990:	0000 0700 0000 0000 0000 0000 0000 0000     ................
   bf9a0:	0000 0f00 0000 0000 0000 0000 0000 0000     ................
   bf9b0:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf9c0:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf9d0:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf9e0:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bf9f0:	0000 0300 0000 0000 0000 0000 0000 0000     ................
   bfa00:	0e00 0300 0000 0000 0000 0000 0000 0000     ................
   bfa10:	0c00 0300 0000 0000 0000 0000 0000 0000     ................
   bfa20:	0300 7f00 1f00 7800 0000 0000 0000 0000     .......x........
   bfa30:	0f00 c700 7300 fe80 0000 0000 0000 0000     .....s..........
   bfa40:	0700 8301 e100 1fc0 0000 0000 0000 0000     ................
   bfa50:	0300 8303 c100 23c0 0000 0000 0000 0000     .......#........
   bfa60:	0300 8303 ff01 61c0 0080 0000 0000 0000     .......a........
   bfa70:	0300 8303 c001 6000 00c0 0000 0000 0000     .......`........
   bfa80:	0300 8703 c0e0 7040 00e0 0000 0000 0000     ......@p........
   bfa90:	0700 cf01 f0c0 7fc0 00f0 0000 0000 0000     ................
   bfaa0:	0f00 fb80 3f00 3f00 0018 0000 0000 0000     .....?.?........
	...

000bfb2c <_ZL8goodLuck>:
	...
   bfc80:	0000 3800 0100 0080 0000 0010 3f00 00a0     ...8.........?..
   bfc90:	0000 7800 0300 0080 0000 0070 e000 00e0     ...x......p.....
   bfca0:	0000 1800 0100 0080 0000 0030 8000 0060     ..........0...`.
   bfcb0:	0000 1800 0100 0080 0000 0030 8001 0030     ..........0...0.
   bfcc0:	0000 1800 0100 0080 0000 0030 0003 0010     ..........0.....
   bfcd0:	0000 1800 0100 0080 0000 0030 0003 0000     ..........0.....
   bfce0:	0000 1800 0100 0080 0000 0030 0003 0000     ..........0.....
   bfcf0:	0000 1800 0100 0080 0000 0030 8003 0778     ..........0...x.
   bfd00:	3ec0 f803 0100 8c80 f003 8037 8003 1f30     .>........7...0.
   bfd10:	7920 3806 0100 9c83 1006 0036 8001 1830      y.8......6...0.
   bfd20:	e120 180c 0100 8c81 080c 003e c001 3030      .........>...00
   bfd30:	8361 180c 0100 8c81 000c 003b e000 2070     a.........;...p 
   bfd40:	87c1 180c 0100 8c81 080c 8033 7900 23e0     ..........3..y.#
   bfd50:	1ec1 3e0e 0100 8f81 1806 8031 3f00 1f80     ...>......1..?..
   bfd60:	f800 d807 0300 fcc0 f003 c039 0000 0000     ..........9.....
	...

000bff2c <_ZL8heroTime>:
	...
   bffc0:	0e00 0078 0000 fc03 0000 0000 0000 e107     ..x.............
   bffd0:	1ff8 0ffc 00f0 ff0f 0000 0000 0000 8003     ................
   bffe0:	0ef0 0f0e 00fc 831f 0080 0000 0000 8003     ................
   bfff0:	0e70 0316 008f 013e 0080 0000 0000 ff03     p.....>.........
   c0000:	0ff0 03f0 0087 017c 00c0 0000 0000 ff03     ......|.........
   c0010:	0ff0 03f0 8083 0078 00c0 0000 0000 8003     ......x.........
   c0020:	0e70 0330 8083 00f0 00e0 0000 0000 8003     p.0.............
   c0030:	0e70 0330 8083 00e0 00e0 0000 0000 8003     p.0.............
   c0040:	0e70 0300 8083 01e0 00e0 0000 0000 8003     p...............
   c0050:	0e70 0300 8083 01e0 00c0 0000 0000 8003     p...............
   c0060:	0e70 0300 80e7 03e0 00c0 0000 0000 8003     p...............
   c0070:	0e70 0300 00ff 03e0 00c0 0000 0000 8003     p...............
   c0080:	0e70 0300 009e 07e0 0080 0000 0000 8003     p...............
   c0090:	0e70 0302 008e 1f60 0000 0000 0000 8003     p.....`.........
   c00a0:	0e70 0306 008f 3e38 0000 0000 0000 c003     p.....8>........
   c00b0:	1ff0 03fe e087 fc1f 0000 0000 0000 e107     ................
   c00c0:	1ff8 07fc e0e3 f007 0000 0000 0000 0000     ................
	...
   c019c:	0000 3f00 07fe 7ce0 c003 e039 0000 0000     ...?...|..9.....
   c01ac:	0000 3f00 03ff 7ec0 c007 f87f 0000 0000     ...?...~........
   c01bc:	0000 6100 01c3 1ec0 8007 383c 0000 0000     ...a......<8....
   c01cc:	0000 4100 01c1 1fc0 800f 581c 0000 0000     ...A.......X....
   c01dc:	0000 0100 01c0 17c0 800b c01f 0000 0000     ................
   c01ec:	0000 0100 01c0 17c0 809b c01f 0000 0000     ................
   c01fc:	0000 0100 01c0 1bc0 80f3 c01c 0000 0000     ................
   c020c:	0000 0100 01c0 19c0 80f3 401c 0000 0000     ...........@....
   c021c:	0000 0100 01c0 19c0 80e3 001c 0000 0000     ................
   c022c:	0000 0100 01c0 18c0 80e3 001c 0000 0000     ................
   c023c:	0000 0100 01c0 18c0 80c3 001c 0000 0000     ................
   c024c:	0000 0100 01c0 10c0 8003 001c 0000 0000     ................
   c025c:	0000 0100 01c0 30c0 c001 001c 0000 0000     .......0........
   c026c:	0000 0100 01c0 30c0 c001 081c 0000 0000     .......0........
   c027c:	0000 0100 01c0 30c0 c001 1c1c 0000 0000     .......0........
   c028c:	0000 0100 03e0 30c0 e003 f87f 0000 0000     .......0........
   c029c:	0000 0300 07f0 78e0 f007 f87f 0000 0000     .......x........
	...

000c032c <_ZL8hueHubIP>:
   c032c:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000c0338 <_ZL9killUmAll>:
	...
   c04c8:	0000 0200 0002 0000 0000 0000 2000 0040     ............. @.
   c04d8:	0000 0600 000e 0000 0000 0000 e100 00c0     ................
   c04e8:	f300 0ec0 001e 0000 0000 0600 e301 80c1     ................
   c04f8:	6700 0600 0006 0000 0000 0600 6000 c0c1     .g...........`..
   c0508:	6c00 0600 0006 0000 0000 0f00 6000 c0c1     .l...........`..
   c0518:	7c00 0603 0006 0000 0000 0f00 6000 c0c1     .|...........`..
   c0528:	6c00 0607 0006 0000 0000 0b00 6080 c0c1     .l...........`..
   c0538:	6e00 8603 0006 c10e 00f7 1900 60f0 80c1     .n...........`..
   c0548:	6600 8603 0006 c11d 80ff 1300 60c0 80c1     .f...........`..
   c0558:	6700 8601 0006 c00c c0dd 3700 60c0 80c0     .g.........7.`..
   c0568:	6300 8601 0006 c00c c0dc 3e00 60e0 80c0     .c.........>.`..
   c0578:	6300 8681 0006 f00e e0cc 6000 60e0 80c1     .c.........`.`..
   c0588:	fb00 8fe3 000f e107 f8ef f100 f1f0 80e1     ................
	...

000c0738 <_ZL9messenger>:
	...
   c0868:	0000 0300 0080 0000 0001 0000 0000 0000     ................
   c0878:	0000 0100 0080 0006 0003 0000 0000 0000     ................
   c0888:	0000 0100 0080 0002 0003 0000 0000 0000     ................
   c0898:	0000 0100 0080 1004 0003 8000 0000 0000     ................
   c08a8:	0000 0f00 8e87 3000 c303 8381 0080 0000     .......0........
   c08b8:	0000 1900 8f8c 3000 6303 86c1 00c0 0000     .......0.c......
   c08c8:	0000 1900 8d89 3000 6203 8f61 00c0 0000     .......0.ba.....
   c08d8:	0000 1900 8d8b 3880 2303 c471 0000 0000     .......8.#q.....
   c08e8:	0000 0f00 1d8f 18c0 3303 c7d0 00c0 0000     .........3......
	...
   c0958:	0000 0020 0000 0000 0000 0000 0000 0000     .. .............
   c0968:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c0978:	0000 0060 0000 0000 0000 0000 0000 0070     ..`...........p.
   c0988:	0c00 0060 0000 0000 0000 0100 0100 0080     ..`.............
   c0998:	1c00 1c78 7600 8007 c370 8387 8687 0000     ..x..v..p.......
   c09a8:	0c00 366c db00 800c 46d3 c6c6 864c 0000     ..l6.....F..L...
   c09b8:	0c00 7e6c 6900 c10f 0f83 c4c6 c64f 0000     ..l~.i......O...
   c09c8:	0e00 2064 4d00 058c 0406 4506 06cc 0000     ..d .M.....E....
   c09d8:	0e00 3e66 ef00 86c7 071c 63c7 8ec7 0000     ..f>.......c....
	...
   c09f0:	0000 0101 0080 0000 0000 0000 0000 0000     ................
   c0a00:	0000 0301 0000 0000 0000 0000 0000 0000     ................
   c0a10:	0000 fe00 0000 0000 0000 0000 0000 0000     ................
	...

000c0b38 <_ZL9mushrooms>:
   c0b38:	0000 0000 0f00 80ff 0000 0000 0000 0000     ................
   c0b48:	0000 0000 7f00 f8ff 0000 0000 0000 0000     ................
   c0b58:	0000 0000 ff03 ffff 0000 0000 0000 0000     ................
   c0b68:	0000 0000 ff0f ffff 00c0 0000 0000 0000     ................
   c0b78:	0000 0000 ee3f ffff 00f0 0000 0000 0000     ....?...........
   c0b88:	0000 0000 00f0 ff3f 00fc 0000 0000 0000     ......?.........
   c0b98:	0000 0100 00e0 ff7f 00ff 0000 0000 0000     ................
   c0ba8:	0000 0300 00c0 ff3f c0ff 0000 0000 0000     ......?.........
   c0bb8:	0000 0700 0000 ff07 f0ff 0000 0000 0000     ................
   c0bc8:	0000 0e00 0000 ff0f f8ff 0000 0000 0000     ................
   c0bd8:	0000 1e00 0000 ff1f fcff 0000 0000 0000     ................
   c0be8:	0000 1c00 0000 ff8f feff 0000 0000 0000     ................
   c0bf8:	0000 3c00 0000 ff9f ffff 0000 0000 0000     ...<............
   c0c08:	0000 7e00 0100 ffff ffff 0080 0000 0000     ...~............
   c0c18:	0000 7e00 ff00 ffff ffff fcff 0000 0000     ...~............
   c0c28:	0000 ff00 ffff 00f8 0700 ffff 0000 0000     ................
   c0c38:	0000 ff00 00fe 0000 0100 ffff 00c0 0000     ................
   c0c48:	0000 ff01 0080 0000 0800 ffff 00e0 0000     ................
   c0c58:	0000 f801 0000 0000 0300 3fff 00f0 0000     ...........?....
   c0c68:	0000 e001 0f00 c0ff 1f00 0ffe 00f0 0000     ................
   c0c78:	0000 b001 3f00 ffff ff04 8ffd 00f8 0000     .....?..........
   c0c88:	0000 e201 fe01 ff5f ff83 07fc 00fc 0000     ......_.........
   c0c98:	0000 f000 ed0b ff9f ffc3 ffff 00fc 0000     ................
   c0ca8:	0000 3b00 e10f fba7 ff07 fbff 00fe 0000     ...;............
   c0cb8:	0000 0000 c227 e011 ff0f fbff 00ff 0000     ....'...........
   c0cc8:	0000 0000 0000 f013 ff0f ffff 00ff 0000     ................
   c0cd8:	0000 0000 4400 f012 ff1f ffff 80ff 0000     .....D..........
   c0ce8:	0000 0000 c000 7800 ff1f ffff 80ff 0000     .......x........
   c0cf8:	0000 0000 0000 7802 ff1f 0fe0 80ff 0000     .......x........
   c0d08:	0000 0000 0000 fc00 801f 0000 800f 0000     ................
   c0d18:	0000 0000 0000 fc00 0018 8037 8009 0000     ..........7.....
   c0d28:	0000 0000 0001 be00 0118 f0ef 8000 0000     ................
   c0d38:	0000 0000 0002 5c00 070c fccd 8001 0000     .......\........
   c0d48:	0000 0000 0000 0600 0703 ffc0 008f 0000     ................
   c0d58:	0000 0000 0000 6700 e201 7b04 00e0 0000     .......g...{....
   c0d68:	0000 0000 0006 6d00 0200 7c04 0000 0000     .......m...|....
   c0d78:	0000 0000 0002 6502 0480 fe08 0000 0000     .......e........
   c0d88:	0000 0000 0008 0700 0c00 1f00 0000 0000     ................
   c0d98:	0000 0000 000c b700 1080 0f00 0080 0000     ................
   c0da8:	0000 0000 0008 9700 2080 2300 0080 0000     ......... .#....
   c0db8:	0000 0000 0018 6f03 6080 3630 00c0 0000     .......o.`06....
   c0dc8:	0000 0000 1818 3b00 40c0 2800 00c0 0000     .......;.@.(....
   c0dd8:	0000 0000 1c08 9100 80c0 4b00 0060 0000     ...........K`...
   c0de8:	0000 0000 1c00 2d41 8080 2700 00e0 0000     ......A-...'....
   c0df8:	0000 0000 300c 6dc0 00c1 0e00 00e0 0000     .....0.m........
   c0e08:	0000 0000 3108 cf80 0041 b900 0020 0000     .....1..A... ...
   c0e18:	0000 0000 3100 ff80 00c1 0100 00e0 0000     .....1..........
   c0e28:	0000 0000 1900 fd81 0081 0400 00e0 0000     ................
   c0e38:	0000 0000 0708 fff1 00c0 0600 0000 0000     ................
   c0e48:	0000 0000 070e eff2 00c0 4300 00e0 0000     ...........C....
   c0e58:	0000 0000 0f07 8fc1 4080 4d00 00c0 0000     .........@.M....
   c0e68:	0000 0000 2e07 7f01 0080 8dc0 00c0 0000     ................
   c0e78:	0000 0000 6c03 ff30 0cc1 8fc0 00c0 0000     .....l0.........
   c0e88:	0000 0000 e7cb bff3 0de3 3f80 00c0 0000     ...........?....
   c0e98:	0000 0100 e7ff ff0f 9ffb ff11 00c0 0000     ................
   c0ea8:	0000 0100 e7ff 7f0f d3ff ff03 00c0 0000     ................
   c0eb8:	0000 0000 dfaf ff8f eff3 ff3f 00c0 0000     ..........?.....
   c0ec8:	0000 0000 7399 ff3f 6fe1 ffdf 0080 0000     .....s?..o......
   c0ed8:	0000 0100 e7e2 ffbf f3c3 fcdf 0000 0000     ................
   c0ee8:	0000 0000 de0e ff7f 2181 ecb7 0000 0000     .........!......
   c0ef8:	0000 0000 9e0d f87f 0000 e000 0000 0000     ................
   c0f08:	0000 0000 3d01 800d 0000 6002 0000 0000     .....=.....`....
   c0f18:	0000 0000 fc00 0000 0000 0000 0000 0000     ................
   c0f28:	0000 0000 ec00 0000 0000 0000 0000 0000     ................

000c0f38 <CSWTCH.88>:
   c0f38:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   c0f48:	0050 0000                                   P...

000c0f4c <_ZL4font>:
   c0f4c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c0f5c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c0f6c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c0f7c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c0f8c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c0f9c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c0fac:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c0fbc:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c0fcc:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c0fdc:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c0fec:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c0ffc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c100c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c101c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c102c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c103c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c104c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c105c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c106c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c107c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c108c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c109c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c10ac:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c10bc:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c10cc:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c10dc:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c10ec:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c10fc:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c110c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c111c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c112c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c113c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c114c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c115c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c116c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c117c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c118c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c119c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c11ac:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c11bc:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c11cc:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c11dc:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   c11ec:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c11fc:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c120c:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   c121c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c122c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   c123c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   c124c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   c125c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c126c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c127c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c128c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c129c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c12ac:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c12bc:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   c12cc:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   c12dc:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   c12ec:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   c12fc:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   c130c:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   c131c:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   c132c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   c133c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   c134c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   c135c:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   c136c:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   c137c:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   c138c:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   c139c:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   c13ac:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   c13bc:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   c13cc:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   c13dc:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   c13ec:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   c13fc:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   c140c:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   c141c:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   c142c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   c143c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000c1448 <_ZTV12Adafruit_GFX>:
	...
   c1458:	7795 000b 88f9 000b 40a5 000b 7419 000b     .w.......@...t..
   c1468:	753f 000b 755b 000b 74d7 000b 7575 000b     ?u..[u...t..uu..
   c1478:	75ab 000b 75c7 000b                         .u...u..

000c1480 <_ZTV16Adafruit_SSD1306>:
	...
   c1488:	7b11 000b 7ba1 000b 7795 000b 88f9 000b     .{...{...w......
   c1498:	7b15 000b 7419 000b 799d 000b 782d 000b     .{...t...y..-x..
   c14a8:	74d7 000b 7575 000b 75ab 000b 75c7 000b     .t..uu...u...u..

000c14b8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000c14c0 <_ZTVN5spark13EthernetClassE>:
	...
   c14c8:	853b 000b 8531 000b 8527 000b 851d 000b     ;...1...'.......
   c14d8:	8511 000b 8505 000b 87d5 000b 87dd 000b     ................
   c14e8:	84f9 000b 84f1 000b 84e7 000b 84dd 000b     ................
   c14f8:	880d 000b                                   ....

000c14fc <_ZTV7TwoWire>:
	...
   c1504:	8559 000b 85a3 000b 857b 000b 855b 000b     Y.......{...[...
   c1514:	8583 000b 858b 000b 8593 000b 859b 000b     ................

000c1524 <_ZTV9IPAddress>:
	...
   c152c:	8677 000b 8667 000b 8669 000b 7061 0070     w...g...i...app.

000c153c <_ZTVN5spark12NetworkClassE>:
	...
   c1544:	8795 000b 879f 000b 87a9 000b 87b3 000b     ................
   c1554:	87bd 000b 87c9 000b 87d5 000b 87dd 000b     ................
   c1564:	87e5 000b 87f1 000b 87f9 000b 8803 000b     ................
   c1574:	880d 000b                                   ....

000c1578 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c1578:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   c1588:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000c1598 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c15a0:	8ea9 000b 8ecd 000b 93b7 000b 8edb 000b     ................
   c15b0:	8ead 000b                                   ....

000c15b4 <_ZTV9TCPClient>:
	...
   c15bc:	4119 000b 414d 000b 8e25 000b 8e3f 000b     .A..MA..%...?...
   c15cc:	924d 000b 8e69 000b 90c3 000b 8e9d 000b     M...i...........
   c15dc:	9155 000b 8f95 000b 90f1 000b 9301 000b     U...............
   c15ec:	9091 000b 8e9f 000b 8e51 000b 8ee1 000b     ........Q.......
   c15fc:	8f75 000b 5925 252d 2d6d 6425 2554 3a48     u...%Y-%m-%dT%H:
   c160c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000c161c <_ZTV11USARTSerial>:
	...
   c1624:	93d1 000b 943d 000b 9415 000b 88f9 000b     ....=...........
   c1634:	93e5 000b 9401 000b 93f3 000b 940f 000b     ................
   c1644:	93d3 000b 93d7 000b                         ........

000c164c <_ZTV9USBSerial>:
	...
   c1654:	947b 000b 94e3 000b 94b9 000b 88f9 000b     {...............
   c1664:	94ab 000b 947d 000b 948d 000b 94dd 000b     ....}...........
   c1674:	949d 000b 9475 000b                         ....u...

000c167c <_ZTVN5spark9WiFiClassE>:
	...
   c1684:	95e3 000b 95d9 000b 95cf 000b 9585 000b     ................
   c1694:	95c3 000b 95b7 000b 87d5 000b 87dd 000b     ................
   c16a4:	95ab 000b 95a3 000b 9599 000b 958f 000b     ................
   c16b4:	880d 000b                                   ....

000c16b8 <_ZSt7nothrow>:
	...

000c16b9 <_ZTSSt19_Sp_make_shared_tag>:
   c16b9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c16c9:	6572 5f64 6174 0067 0000                     red_tag....

000c16d4 <_ZTISt19_Sp_make_shared_tag>:
   c16d4:	1714 000c 16b9 000c                         ........

000c16dc <_ZTIN10__cxxabiv117__class_type_infoE>:
   c16dc:	1774 000c 16e8 000c 1798 000c               t...........

000c16e8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c16e8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c16f8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c1708:	0045 0000                                   E...

000c170c <_ZTVN10__cxxabiv117__class_type_infoE>:
   c170c:	0000 0000 16dc 000c 9a35 000b 9a49 000b     ........5...I...
   c171c:	9bdd 000b 9bdd 000b 9ab3 000b 99f5 000b     ................
   c172c:	9a9b 000b 9a5d 000b 9a27 000b               ....]...'...

000c1738 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c1738:	1774 000c 1744 000c 16dc 000c               t...D.......

000c1744 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c1744:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c1754:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c1764:	666e 456f 0000 0000                         nfoE....

000c176c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c176c:	0000 0000 1738 000c 9add 000b 9af1 000b     ....8...........
   c177c:	9bdd 000b 9bdd 000b 9ab3 000b 99f5 000b     ................
   c178c:	9bb1 000b 9b3d 000b 9b05 000b               ....=.......

000c1798 <_ZTISt9type_info>:
   c1798:	1714 000c 17a0 000c                         ........

000c17a0 <_ZTSSt9type_info>:
   c17a0:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
	...

000c17b8 <TWO52>:
   c17b8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   c17c8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c17d8:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   c17e8:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   c17f8:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   c1808:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   c1818:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   c1828:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000c1838 <link_const_variable_data_end>:
   c1838:	000b6e79 	.word	0x000b6e79
   c183c:	000b7409 	.word	0x000b7409
   c1840:	000b84cd 	.word	0x000b84cd
   c1844:	000b8545 	.word	0x000b8545
   c1848:	000b8785 	.word	0x000b8785
   c184c:	000b88e5 	.word	0x000b88e5
   c1850:	000b8a39 	.word	0x000b8a39
   c1854:	000b8e01 	.word	0x000b8e01
   c1858:	000b93bd 	.word	0x000b93bd
   c185c:	000b95ed 	.word	0x000b95ed
